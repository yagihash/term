// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 19992;
var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a28() } },{ func: function() { __GLOBAL__I_a165() } });
var ___fsmu8;
var ___dso_handle;
var ___dso_handle=___dso_handle=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,64,60,0,0,60,3,0,0,46,3,0,0,178,0,0,0,186,1,0,0,224,0,0,0,110,0,0,0,20,1,0,0,54,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,80,60,0,0,60,3,0,0,248,0,0,0,178,0,0,0,186,1,0,0,224,0,0,0,116,2,0,0,48,1,0,0,204,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTIt;
__ZTIt=allocate([24,36,0,0,112,36,0,0], "i8", ALLOC_STATIC);
var __ZTIs;
__ZTIs=allocate([24,36,0,0,120,36,0,0], "i8", ALLOC_STATIC);
var __ZTIm;
__ZTIm=allocate([24,36,0,0,128,36,0,0], "i8", ALLOC_STATIC);
var __ZTIl;
__ZTIl=allocate([24,36,0,0,136,36,0,0], "i8", ALLOC_STATIC);
var __ZTIj;
__ZTIj=allocate([24,36,0,0,144,36,0,0], "i8", ALLOC_STATIC);
var __ZTIi;
__ZTIi=allocate([24,36,0,0,152,36,0,0], "i8", ALLOC_STATIC);
var __ZTIh;
__ZTIh=allocate([24,36,0,0,160,36,0,0], "i8", ALLOC_STATIC);
var __ZTIf;
__ZTIf=allocate([24,36,0,0,168,36,0,0], "i8", ALLOC_STATIC);
var __ZTId;
__ZTId=allocate([24,36,0,0,176,36,0,0], "i8", ALLOC_STATIC);
var __ZTIc;
__ZTIc=allocate([24,36,0,0,184,36,0,0], "i8", ALLOC_STATIC);
var __ZTIa;
__ZTIa=allocate([24,36,0,0,200,36,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,77,97,114,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,108,111,110,103,0,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,109,117,108,116,105,112,114,101,99,105,115,105,111,110,47,99,112,112,95,105,110,116,46,104,112,112,0,0,0,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,66,97,115,101,32,56,32,111,114,32,49,54,32,112,114,105,110,116,105,110,103,32,111,102,32,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,115,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,118,111,105,100,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,115,104,111,114,116,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,109,97,107,101,75,101,121,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,85,110,101,120,112,101,99,116,101,100,32,99,104,97,114,97,99,116,101,114,32,101,110,99,111,117,110,116,101,114,101,100,32,105,110,32,105,110,112,117,116,46,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,99,111,110,116,101,110,116,32,102,111,117,110,100,32,119,104,105,108,101,32,112,97,114,115,105,110,103,32,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,46,0,0,0,0,0,0,0,0,43,45,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,109,111,100,80,111,119,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,97,115,115,105,103,110,32,97,32,110,101,103,97,116,105,118,101,32,118,97,108,117,101,32,116,111,32,97,110,32,117,110,115,105,103,110,101,100,32,116,121,112,101,46,0,112,112,53,91,107,93,32,37,32,115,109,97,108,108,95,102,97,99,116,111,114,115,53,91,107,93,91,105,93,32,61,61,32,48,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,112,112,52,32,37,32,115,109,97,108,108,95,102,97,99,116,111,114,115,52,91,105,93,32,61,61,32,48,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,112,112,51,32,37,32,115,109,97,108,108,95,102,97,99,116,111,114,115,51,91,105,93,32,61,61,32,48,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,112,112,50,32,37,32,115,109,97,108,108,95,102,97,99,116,111,114,115,50,91,105,93,32,61,61,32,48,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,109,117,108,116,105,112,114,101,99,105,115,105,111,110,47,109,105,108,108,101,114,95,114,97,98,105,110,46,104,112,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,112,112,49,32,37,32,115,109,97,108,108,95,102,97,99,116,111,114,115,49,91,105,93,32,61,61,32,48,0,0,0,0,84,101,115,116,105,110,103,32,105,110,100,105,118,105,100,117,97,108,32,98,105,116,115,32,105,110,32,110,101,103,97,116,105,118,101,32,118,97,108,117,101,115,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,45,32,114,101,115,117,108,116,115,32,97,114,101,32,117,110,100,101,102,105,110,101,100,46,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,109,117,108,116,105,112,114,101,99,105,115,105,111,110,47,99,112,112,95,105,110,116,47,109,105,115,99,46,104,112,112,0,0,0,0,0,0,0,78,111,32,98,105,116,115,32,119,101,114,101,32,115,101,116,32,105,110,32,116,104,101,32,111,112,101,114,97,110,100,46,0,0,0,0,0,0,0,0,103,101,116,77,115,103,0,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,114,97,110,100,111,109,47,117,110,105,102,111,114,109,95,105,110,116,95,100,105,115,116,114,105,98,117,116,105,111,110,46,104,112,112,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,109,105,110,95,97,114,103,32,60,61,32,109,97,120,95,97,114,103,0,0,0,0,0,0,37,112,0,0,0,0,0,0,102,97,108,115,101,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,33,115,116,100,58,58,110,117,109,101,114,105,99,95,108,105,109,105,116,115,60,100,111,117,98,108,101,95,108,105,109,98,95,116,121,112,101,62,58,58,105,115,95,115,112,101,99,105,97,108,105,122,101,100,32,124,124,32,40,40,115,116,100,58,58,110,117,109,101,114,105,99,95,108,105,109,105,116,115,60,100,111,117,98,108,101,95,108,105,109,98,95,116,121,112,101,62,58,58,109,97,120,41,40,41,32,45,32,99,97,114,114,121,32,62,61,32,112,114,91,105,43,106,93,41,0,0,0,58,32,0,0,0,0,0,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,109,117,108,116,105,112,114,101,99,105,115,105,111,110,47,99,112,112,95,105,110,116,47,109,117,108,116,105,112,108,121,46,104,112,112,0,0,0,105,43,106,32,60,32,114,101,115,117,108,116,46,115,105,122,101,40,41,0,0,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,99,104,97,114,0,0,0,0,103,101,116,82,97,110,100,70,111,114,68,72,0,0,0,0,42,0,0,0,0,0,0,0,114,46,99,111,109,112,97,114,101,40,121,41,32,60,32,48,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,73,110,116,101,103,101,114,32,68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,46,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,109,117,108,116,105,112,114,101,99,105,115,105,111,110,47,99,112,112,95,105,110,116,47,97,100,100,46,104,112,112,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,48,32,61,61,32,98,111,114,114,111,119,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,114,46,99,111,109,112,97,114,101,95,117,110,115,105,103,110,101,100,40,121,41,32,60,32,48,0,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,37,76,102,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,47,104,111,109,101,47,121,97,103,105,104,97,115,104,47,98,111,111,115,116,95,49,95,53,53,95,48,47,98,111,111,115,116,47,109,117,108,116,105,112,114,101,99,105,115,105,111,110,47,99,112,112,95,105,110,116,47,100,105,118,105,100,101,46,104,112,112,0,0,0,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,100,111,117,98,108,101,0,0,77,111,110,100,97,121,0,0,83,117,110,100,97,121,0,0,103,117,101,115,115,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,102,108,111,97,116,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,98,111,111,108,0,0,0,0,48,120,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,48,0,0,0,0,0,0,0,103,101,116,80,114,105,109,101,0,0,0,0,0,0,0,0,117,110,105,102,111,114,109,95,105,110,116,95,100,105,115,116,114,105,98,117,116,105,111,110,0,0,0,0,0,0,0,0,100,105,118,105,100,101,95,117,110,115,105,103,110,101,100,95,104,101,108,112,101,114,0,0,115,117,98,116,114,97,99,116,95,117,110,115,105,103,110,101,100,0,0,0,0,0,0,0,101,118,97,108,95,109,117,108,116,105,112,108,121,0,0,0,99,104,101,99,107,95,115,109,97,108,108,95,102,97,99,116,111,114,115,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,49,48,50,52,44,32,49,48,50,52,44,32,49,44,32,48,44,32,118,111,105,100,62,58,58,100,111,95,103,101,116,95,115,116,114,105,110,103,40,115,116,100,58,58,105,111,115,95,98,97,115,101,58,58,102,109,116,102,108,97,103,115,44,32,99,111,110,115,116,32,109,112,108,58,58,102,97,108,115,101,95,32,38,41,32,99,111,110,115,116,32,91,77,105,110,66,105,116,115,32,61,32,49,48,50,52,44,32,77,97,120,66,105,116,115,32,61,32,49,48,50,52,44,32,83,105,103,110,84,121,112,101,32,61,32,49,44,32,67,104,101,99,107,101,100,32,61,32,48,44,32,65,108,108,111,99,97,116,111,114,32,61,32,118,111,105,100,93,0,0,0,116,121,112,101,110,97,109,101,32,101,110,97,98,108,101,95,105,102,95,99,60,33,105,115,95,116,114,105,118,105,97,108,95,99,112,112,95,105,110,116,60,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,77,105,110,66,105,116,115,49,44,32,77,97,120,66,105,116,115,49,44,32,83,105,103,110,84,121,112,101,49,44,32,67,104,101,99,107,101,100,49,44,32,65,108,108,111,99,97,116,111,114,49,62,32,62,58,58,118,97,108,117,101,44,32,117,110,115,105,103,110,101,100,32,105,110,116,62,58,58,116,121,112,101,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,101,118,97,108,95,108,115,98,40,99,111,110,115,116,32,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,77,105,110,66,105,116,115,49,44,32,77,97,120,66,105,116,115,49,44,32,83,105,103,110,84,121,112,101,49,44,32,67,104,101,99,107,101,100,49,44,32,65,108,108,111,99,97,116,111,114,49,62,32,38,41,32,91,77,105,110,66,105,116,115,49,32,61,32,49,48,50,52,44,32,77,97,120,66,105,116,115,49,32,61,32,49,48,50,52,44,32,83,105,103,110,84,121,112,101,49,32,61,32,49,44,32,67,104,101,99,107,101,100,49,32,61,32,48,44,32,65,108,108,111,99,97,116,111,114,49,32,61,32,118,111,105,100,93,0,0,118,111,105,100,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,100,105,118,105,100,101,95,117,110,115,105,103,110,101,100,95,104,101,108,112,101,114,40,67,112,112,73,110,116,49,32,42,44,32,99,111,110,115,116,32,67,112,112,73,110,116,50,32,38,44,32,108,105,109,98,95,116,121,112,101,44,32,67,112,112,73,110,116,49,32,38,41,32,91,67,112,112,73,110,116,49,32,61,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,50,48,52,56,44,32,50,48,52,56,44,32,49,44,32,48,44,32,118,111,105,100,62,44,32,67,112,112,73,110,116,50,32,61,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,50,48,52,56,44,32,50,48,52,56,44,32,49,44,32,48,44,32,118,111,105,100,62,93,0,118,111,105,100,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,100,105,118,105,100,101,95,117,110,115,105,103,110,101,100,95,104,101,108,112,101,114,40,67,112,112,73,110,116,49,32,42,44,32,99,111,110,115,116,32,67,112,112,73,110,116,50,32,38,44,32,108,105,109,98,95,116,121,112,101,44,32,67,112,112,73,110,116,49,32,38,41,32,91,67,112,112,73,110,116,49,32,61,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,49,48,50,52,44,32,49,48,50,52,44,32,49,44,32,48,44,32,118,111,105,100,62,44,32,67,112,112,73,110,116,50,32,61,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,49,48,50,52,44,32,49,48,50,52,44,32,49,44,32,48,44,32,118,111,105,100,62,93,0,118,111,105,100,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,104,101,99,107,95,105,115,95,110,101,103,97,116,105,118,101,40,99,111,110,115,116,32,109,112,108,58,58,102,97,108,115,101,95,32,38,41,0,0,0,0,118,111,105,100,32,98,111,111,115,116,58,58,109,117,108,116,105,112,114,101,99,105,115,105,111,110,58,58,98,97,99,107,101,110,100,115,58,58,99,112,112,95,105,110,116,95,98,97,99,107,101,110,100,60,49,48,50,52,44,32,49,48,50,52,44,32,49,44,32,48,44,32,118,111,105,100,62,58,58,100,111,95,97,115,115,105,103,110,95,115,116,114,105,110,103,40,99,111,110,115,116,32,99,104,97,114,32,42,44,32,99,111,110,115,116,32,109,112,108,58,58,102,97,108,115,101,95,32,38,41,32,91,77,105,110,66,105,116,115,32,61,32,49,48,50,52,44,32,77,97,120,66,105,116,115,32,61,32,49,48,50,52,44,32,83,105,103,110,84,121,112,101,32,61,32,49,44,32,67,104,101,99,107,101,100,32,61,32,48,44,32,65,108,108,111,99,97,116,111,114,32,61,32,118,111,105,100,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,13,90,59,7,149,3,90,15,221,255,67,29,3,112,62,50,183,132,88,78,177,240,176,126,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,223,0,0,0,227,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,0,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,0,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,202,154,59,0,0,0,0,0,0,0,0,192,52,0,0,76,0,0,0,104,1,0,0,192,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,52,0,0,82,2,0,0,218,1,0,0,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,52,0,0,208,0,0,0,48,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,52,0,0,208,0,0,0,94,3,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,32,1,0,0,60,0,0,0,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,53,0,0,32,1,0,0,18,0,0,0,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,53,0,0,208,0,0,0,16,1,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,53,0,0,32,1,0,0,46,0,0,0,170,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,53,0,0,226,1,0,0,250,0,0,0,136,0,0,0,20,2,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,53,0,0,78,3,0,0,32,2,0,0,136,0,0,0,28,3,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,53,0,0,216,1,0,0,36,2,0,0,136,0,0,0,22,2,0,0,56,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,53,0,0,84,3,0,0,162,1,0,0,136,0,0,0,2,2,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,54,0,0,66,3,0,0,28,1,0,0,136,0,0,0,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,54,0,0,214,1,0,0,88,1,0,0,136,0,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,54,0,0,98,0,0,0,90,1,0,0,136,0,0,0,224,2,0,0,26,0,0,0,38,2,0,0,34,0,0,0,222,0,0,0,226,2,0,0,4,1,0,0,248,255,255,255,136,54,0,0,128,0,0,0,54,0,0,0,198,0,0,0,84,0,0,0,10,0,0,0,184,0,0,0,254,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,54,0,0,44,3,0,0,236,2,0,0,136,0,0,0,122,0,0,0,148,0,0,0,0,3,0,0,174,1,0,0,182,0,0,0,16,0,0,0,198,2,0,0,248,255,255,255,176,54,0,0,150,1,0,0,142,2,0,0,200,2,0,0,244,2,0,0,94,2,0,0,22,1,0,0,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,54,0,0,236,0,0,0,44,2,0,0,136,0,0,0,42,1,0,0,2,1,0,0,132,0,0,0,152,1,0,0,238,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,54,0,0,174,0,0,0,192,0,0,0,136,0,0,0,14,1,0,0,28,2,0,0,176,0,0,0,12,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,54,0,0,50,3,0,0,2,0,0,0,136,0,0,0,190,1,0,0,70,3,0,0,120,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,55,0,0,124,0,0,0,194,2,0,0,136,0,0,0,230,0,0,0,232,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,55,0,0,118,0,0,0,98,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,55,0,0,72,0,0,0,160,1,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,55,0,0,14,0,0,0,232,1,0,0,136,0,0,0,108,0,0,0,96,0,0,0,88,0,0,0,94,0,0,0,86,0,0,0,104,0,0,0,102,0,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,55,0,0,40,1,0,0,44,0,0,0,136,0,0,0,76,2,0,0,80,2,0,0,68,2,0,0,78,2,0,0,36,1,0,0,72,2,0,0,70,2,0,0,236,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,55,0,0,100,0,0,0,56,0,0,0,136,0,0,0,154,2,0,0,150,2,0,0,140,2,0,0,144,2,0,0,26,2,0,0,148,2,0,0,138,2,0,0,160,2,0,0,158,2,0,0,156,2,0,0,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,55,0,0,152,0,0,0,4,0,0,0,136,0,0,0,40,3,0,0,26,3,0,0,16,3,0,0,18,3,0,0,252,2,0,0,24,3,0,0,14,3,0,0,34,3,0,0,32,3,0,0,30,3,0,0,146,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,55,0,0,220,0,0,0,24,1,0,0,136,0,0,0,130,1,0,0,64,2,0,0,92,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,55,0,0,70,0,0,0,240,1,0,0,136,0,0,0,58,2,0,0,184,2,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,55,0,0,28,0,0,0,24,2,0,0,136,0,0,0,82,0,0,0,14,2,0,0,6,2,0,0,222,2,0,0,126,2,0,0,210,2,0,0,188,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,56,0,0,250,1,0,0,144,1,0,0,136,0,0,0,4,3,0,0,72,3,0,0,88,2,0,0,50,1,0,0,52,0,0,0,92,2,0,0,74,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,56,0,0,250,1,0,0,246,0,0,0,136,0,0,0,30,1,0,0,120,0,0,0,10,1,0,0,118,2,0,0,100,1,0,0,210,1,0,0,36,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,56,0,0,250,1,0,0,58,1,0,0,136,0,0,0,66,2,0,0,234,1,0,0,182,2,0,0,170,0,0,0,180,1,0,0,158,1,0,0,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,56,0,0,250,1,0,0,80,0,0,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,56,0,0,162,0,0,0,202,1,0,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,56,0,0,250,1,0,0,240,0,0,0,136,0,0,0,166,1,0,0,206,0,0,0,122,1,0,0,62,3,0,0,210,0,0,0,98,2,0,0,48,2,0,0,66,0,0,0,140,0,0,0,204,2,0,0,66,1,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,56,0,0,92,3,0,0,92,0,0,0,136,0,0,0,166,0,0,0,178,1,0,0,138,1,0,0,196,2,0,0,158,0,0,0,142,1,0,0,220,1,0,0,212,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,56,0,0,196,0,0,0,228,2,0,0,206,1,0,0,110,2,0,0,114,1,0,0,186,2,0,0,172,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,248,56,0,0,112,2,0,0,88,3,0,0,56,0,0,0,248,255,255,255,248,56,0,0,130,0,0,0,172,0,0,0,192,255,255,255,192,255,255,255,248,56,0,0,102,2,0,0,122,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,57,0,0,250,1,0,0,252,0,0,0,136,0,0,0,66,2,0,0,234,1,0,0,182,2,0,0,170,0,0,0,180,1,0,0,158,1,0,0,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,57,0,0,250,1,0,0,182,1,0,0,136,0,0,0,66,2,0,0,234,1,0,0,182,2,0,0,170,0,0,0,180,1,0,0,158,1,0,0,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,57,0,0,138,0,0,0,212,2,0,0,46,2,0,0,246,2,0,0,84,2,0,0,116,0,0,0,44,1,0,0,34,2,0,0,132,1,0,0,234,2,0,0,68,0,0,0,162,2,0,0,118,1,0,0,6,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,57,0,0,126,1,0,0,6,3,0,0,232,2,0,0,188,1,0,0,34,1,0,0,106,2,0,0,52,2,0,0,132,2,0,0,166,2,0,0,164,0,0,0,154,0,0,0,146,0,0,0,22,0,0,0,40,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,57,0,0,20,0,0,0,108,1,0,0,46,2,0,0,246,2,0,0,242,2,0,0,60,2,0,0,44,1,0,0,34,2,0,0,132,1,0,0,38,0,0,0,68,0,0,0,8,3,0,0,118,1,0,0,4,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,144,57,0,0,114,0,0,0,178,2,0,0,252,255,255,255,252,255,255,255,144,57,0,0,170,1,0,0,124,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,168,57,0,0,216,2,0,0,10,3,0,0,252,255,255,255,252,255,255,255,168,57,0,0,86,1,0,0,100,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,192,57,0,0,8,1,0,0,96,3,0,0,248,255,255,255,248,255,255,255,192,57,0,0,252,1,0,0,2,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,216,57,0,0,80,1,0,0,136,2,0,0,248,255,255,255,248,255,255,255,216,57,0,0,154,1,0,0,150,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,57,0,0,124,2,0,0,254,1,0,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,58,0,0,52,3,0,0,240,2,0,0,200,0,0,0,188,1,0,0,34,1,0,0,106,2,0,0,74,1,0,0,132,2,0,0,166,2,0,0,164,0,0,0,154,0,0,0,146,0,0,0,152,2,0,0,12,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,58,0,0,196,1,0,0,246,1,0,0,94,1,0,0,246,2,0,0,242,2,0,0,60,2,0,0,54,2,0,0,34,2,0,0,132,1,0,0,38,0,0,0,68,0,0,0,8,3,0,0,38,3,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,58,0,0,230,2,0,0,168,1,0,0,136,0,0,0,148,1,0,0,206,2,0,0,172,1,0,0,64,3,0,0,62,0,0,0,60,1,0,0,56,1,0,0,238,0,0,0,140,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,58,0,0,78,1,0,0,160,0,0,0,136,0,0,0,180,2,0,0,12,0,0,0,128,2,0,0,216,0,0,0,76,1,0,0,18,1,0,0,190,2,0,0,242,1,0,0,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,58,0,0,238,2,0,0,102,1,0,0,136,0,0,0,106,0,0,0,96,1,0,0,78,0,0,0,200,1,0,0,80,3,0,0,244,1,0,0,90,2,0,0,16,2,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,58,0,0,228,0,0,0,230,1,0,0,136,0,0,0,134,2,0,0,164,2,0,0,52,1,0,0,202,2,0,0,26,1,0,0,218,0,0,0,208,1,0,0,176,2,0,0,168,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,59,0,0,12,1,0,0,40,0,0,0,128,1,0,0,188,1,0,0,34,1,0,0,106,2,0,0,52,2,0,0,132,2,0,0,166,2,0,0,156,1,0,0,8,2,0,0,188,0,0,0,22,0,0,0,40,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,59,0,0,32,0,0,0,220,2,0,0,62,2,0,0,246,2,0,0,242,2,0,0,60,2,0,0,44,1,0,0,34,2,0,0,132,1,0,0,104,2,0,0,144,0,0,0,36,0,0,0,118,1,0,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,59,0,0,42,2,0,0,42,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,59,0,0,106,1,0,0,68,1,0,0,242,0,0,0,248,255,255,255,72,59,0,0,214,2,0,0,176,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,59,0,0,174,2,0,0,248,1,0,0,242,0,0,0,248,255,255,255,104,59,0,0,110,1,0,0,72,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,59,0,0,22,3,0,0,20,3,0,0,242,0,0,0,248,255,255,255,136,59,0,0,146,1,0,0,58,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,168,59,0,0,98,3,0,0,0,1,0,0,242,0,0,0,0,2,0,0,218,2,0,0,248,255,255,255,168,59,0,0,30,2,0,0,248,2,0,0,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,168,59,0,0,86,3,0,0,198,1,0,0,54,3,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,200,59,0,0,64,0,0,0,250,2,0,0,242,0,0,0,136,1,0,0,112,1,0,0,248,255,255,255,200,59,0,0,82,1,0,0,68,3,0,0,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,200,59,0,0,126,0,0,0,74,3,0,0,114,2,0,0,48,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,232,59,0,0,202,0,0,0,194,1,0,0,242,0,0,0,42,0,0,0,38,1,0,0,248,255,255,255,232,59,0,0,50,2,0,0,214,0,0,0,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,232,59,0,0,8,0,0,0,234,0,0,0,134,0,0,0,46,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,60,0,0,42,2,0,0,42,2,0,0,90,0,0,0,222,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,60,0,0,60,3,0,0,254,0,0,0,178,0,0,0,186,1,0,0,130,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,60,0,0,60,3,0,0,86,2,0,0,178,0,0,0,186,1,0,0,224,0,0,0,74,0,0,0,208,2,0,0,62,1,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,114,97,110,103,101,95,101,114,114,111,114,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114].concat([97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,53,98,111,111,115,116,57,101,120,99,101,112,116,105,111,110,69,0,0,0,0,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,57,101,114,114,111,114,95,105,110,102,111,95,105,110,106,101,99,116,111,114,73,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,69,69,0,0,0,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,57,101,114,114,111,114,95,105,110,102,111,95,105,110,106,101,99,116,111,114,73,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,69,69,0,0,0,0,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,57,101,114,114,111,114,95,105,110,102,111,95,105,110,106,101,99,116,111,114,73,83,116,49,49,114,97,110,103,101,95,101,114,114,111,114,69,69,0,0,0,0,0,0,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,48,99,108,111,110,101,95,105,109,112,108,73,78,83,48,95,49,57,101,114,114,111,114,95,105,110,102,111,95,105,110,106,101,99,116,111,114,73,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,69,69,69,69,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,48,99,108,111,110,101,95,105,109,112,108,73,78,83,48,95,49,57,101,114,114,111,114,95,105,110,102,111,95,105,110,106,101,99,116,111,114,73,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,69,69,69,69,0,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,48,99,108,111,110,101,95,105,109,112,108,73,78,83,48,95,49,57,101,114,114,111,114,95,105,110,102,111,95,105,110,106,101,99,116,111,114,73,83,116,49,49,114,97,110,103,101,95,101,114,114,111,114,69,69,69,69,0,0,0,0,0,78,53,98,111,111,115,116,49,54,101,120,99,101,112,116,105,111,110,95,100,101,116,97,105,108,49,48,99,108,111,110,101,95,98,97,115,101,69,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,36,0,0,104,36,0,0,24,36,0,0,192,36,0,0,0,0,0,0,208,36,0,0,0,0,0,0,224,36,0,0,0,0,0,0,240,36,0,0,184,52,0,0,0,0,0,0,0,0,0,0,0,37,0,0,184,52,0,0,0,0,0,0,0,0,0,0,16,37,0,0,240,52,0,0,0,0,0,0,0,0,0,0,40,37,0,0,184,52,0,0,0,0,0,0,0,0,0,0,64,37,0,0,48,53,0,0,0,0,0,0,0,0,0,0,88,37,0,0,48,53,0,0,0,0,0,0,0,0,0,0,112,37,0,0,240,52,0,0,0,0,0,0,0,0,0,0,128,37,0,0,184,52,0,0,0,0,0,0,0,0,0,0,144,37,0,0,64,36,0,0,168,37,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,104,58,0,0,0,0,0,0,64,36,0,0,240,37,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,112,58,0,0,0,0,0,0,64,36,0,0,56,38,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,120,58,0,0,0,0,0,0,64,36,0,0,128,38,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,128,58,0,0,0,0,0,0,0,0,0,0,200,38,0,0,56,55,0,0,0,0,0,0,0,0,0,0,248,38,0,0,56,55,0,0,0,0,0,0,64,36,0,0,40,39,0,0,0,0,0,0,1,0,0,0,120,57,0,0,0,0,0,0,64,36,0,0,64,39,0,0,0,0,0,0,1,0,0,0,120,57,0,0,0,0,0,0,64,36,0,0,88,39,0,0,0,0,0,0,1,0,0,0,128,57,0,0,0,0,0,0,64,36,0,0,112,39,0,0,0,0,0,0,1,0,0,0,128,57,0,0,0,0,0,0,64,36,0,0,136,39,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,24,59,0,0,0,8,0,0,64,36,0,0,208,39,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,24,59,0,0,0,8,0,0,64,36,0,0,24,40,0,0,0,0,0,0,3,0,0,0,112,56,0,0,2,0,0,0,64,53,0,0,2,0,0,0,216,56,0,0,0,8,0,0,64,36,0,0,96,40,0,0,0,0,0,0,3,0,0,0,112,56,0,0,2,0,0,0,64,53,0,0,2,0,0,0,224,56,0,0,0,8,0,0,0,0,0,0,168,40,0,0,112,56,0,0,0,0,0,0,0,0,0,0,192,40,0,0,112,56,0,0,0,0,0,0,64,36,0,0,216,40,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,136,57,0,0,2,0,0,0,64,36,0,0,240,40,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,136,57,0,0,2,0,0,0,0,0,0,0,8,41,0,0,0,0,0,0,32,41,0,0,240,57,0,0,0,0,0,0,64,36,0,0,64,41,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,232,53,0,0,0,0,0,0,64,36,0,0,136,41,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,0,54,0,0,0,0,0,0,64,36,0,0,208,41,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,24,54,0,0,0,0,0,0,64,36,0,0,24,42,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,48,54,0,0,0,0,0,0,0,0,0,0,96,42,0,0,112,56,0,0,0,0,0,0,0,0,0,0,120,42,0,0,112,56,0,0,0,0,0,0,64,36,0,0,144,42,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,0,58,0,0,2,0,0,0,64,36,0,0,184,42,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,0,58,0,0,2,0,0,0,64,36,0,0,224,42,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,0,58,0,0,2,0,0,0,64,36,0,0,8,43,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,0,58,0,0,2,0,0,0,0,0,0,0,48,43,0,0,112,57,0,0,0,0,0,0,0,0,0,0,72,43,0,0,112,56,0,0,0,0,0,0,64,36,0,0,96,43,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,16,59,0,0,2,0,0,0,64,36,0,0,120,43,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,16,59,0,0,2,0,0,0,0,0,0,0,144,43,0,0,0,0,0,0,184,43,0,0,0,0,0,0,224,43,0,0,0,0,0,0,8,44,0,0,56,58,0,0,0,0,0,0,0,0,0,0,40,44,0,0,80,57,0,0,0,0,0,0,0,0,0,0,112,44,0,0,80,56,0,0,0,0,0,0,0,0,0,0,152,44,0,0,80,56,0,0,0,0,0,0,0,0,0,0,192,44,0,0,64,57,0,0,0,0,0,0,0,0,0,0,8,45,0,0,0,0,0,0,64,45,0,0,0,0,0,0,120,45,0,0,64,36,0,0,152,45,0,0,3,0,0,0,2,0,0,0,216,57,0,0,2,0,0,0,168,57,0,0,2,8,0,0,0,0,0,0,200,45,0,0,0,0,0,0,232,45,0,0,0,0,0,0,8,46,0,0,0,0,0,0,40,46,0,0,64,36,0,0,64,46,0,0,0,0,0,0,1,0,0,0,200,53,0,0,3,244,255,255,64,36,0,0,112,46,0,0,0,0,0,0,1,0,0,0,216,53,0,0,3,244,255,255,64,36,0,0,160,46,0,0,0,0,0,0,1,0,0,0,200,53,0,0,3,244,255,255,64,36,0,0,208,46,0,0,0,0,0,0,1,0,0,0,216,53,0,0,3,244,255,255,0,0,0,0,0,47,0,0,240,52,0,0,0,0,0,0,0,0,0,0,24,47,0,0,64,36,0,0,48,47,0,0,0,0,0,0,1,0,0,0,208,56,0,0,0,0,0,0,64,36,0,0,112,47,0,0,0,0,0,0,1,0,0,0,208,56,0,0,0,0,0,0,0,0,0,0,176,47,0,0,72,57,0,0,0,0,0,0,0,0,0,0,200,47,0,0,56,57,0,0,0,0,0,0,0,0,0,0,232,47,0,0,64,57,0,0,0,0,0,0,0,0,0,0,8,48,0,0,0,0,0,0,40,48,0,0,0,0,0,0,72,48,0,0,0,0,0,0,104,48,0,0,64,36,0,0,136,48,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,8,59,0,0,2,0,0,0,64,36,0,0,168,48,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,8,59,0,0,2,0,0,0,64,36,0,0,200,48,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,8,59,0,0,2,0,0,0,64,36,0,0,232,48,0,0,0,0,0,0,2,0,0,0,112,56,0,0,2,0,0,0,8,59,0,0,2,0,0,0,0,0,0,0,8,49,0,0,0,0,0,0,32,49,0,0,0,0,0,0,56,49,0,0,0,0,0,0,80,49,0,0,56,57,0,0,0,0,0,0,0,0,0,0,104,49,0,0,64,57,0,0,0,0,0,0,0,0,0,0,128,49,0,0,64,36,0,0,152,49,0,0,0,0,0,0,2,0,0,0,224,52,0,0,2,0,0,0,64,59,0,0,2,8,0,0,64,36,0,0,224,49,0,0,0,0,0,0,2,0,0,0,240,52,0,0,2,0,0,0,64,59,0,0,2,8,0,0,64,36,0,0,40,50,0,0,0,0,0,0,2,0,0,0,32,53,0,0,2,0,0,0,64,59,0,0,2,8,0,0,64,36,0,0,112,50,0,0,0,0,0,0,2,0,0,0,72,59,0,0,2,0,0,0,8,60,0,0,3,244,255,255,64,36,0,0,200,50,0,0,0,0,0,0,2,0,0,0,104,59,0,0,2,0,0,0,8,60,0,0,3,244,255,255,64,36,0,0,32,51,0,0,0,0,0,0,2,0,0,0,136,59,0,0,2,0,0,0,8,60,0,0,3,244,255,255,0,0,0,0,120,51,0,0,0,0,0,0,160,51,0,0,0,0,0,0,184,51,0,0,0,0,0,0,216,51,0,0,96,60,0,0,0,0,0,0,0,0,0,0,0,52,0,0,80,60,0,0,0,0,0,0,0,0,0,0,40,52,0,0,80,60,0,0,0,0,0,0,0,0,0,0,80,52,0,0,96,60,0,0,0,0,0,0,0,0,0,0,120,52,0,0,176,52,0,0,0,0,0,0,64,0,0,0,0,0,0,0,216,57,0,0,80,1,0,0,136,2,0,0,192,255,255,255,192,255,255,255,216,57,0,0,154,1,0,0,150,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
HEAP32[((13488 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13496 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13504 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13520 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13536 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13552 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13568 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13584 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13600 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13616 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13632 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13768 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13784 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14040 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14056 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14136 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14144 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14288 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14304 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14448 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14464 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14544 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14552 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14560 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14568 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14584 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14600 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14616 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14632 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14648 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14656 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14664 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14704 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14712 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14720 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14728 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14832 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14848 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14904 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14920 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14936 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((14952 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14960 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14968 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((14976 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15112 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15120 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15128 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15136 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15152 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15168 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15368 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15376 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15384 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15392 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15408 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15424 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15440 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15456 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr;;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  function _srand(seed) {}
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
;
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }
  function ___cxa_guard_abort() {}
  function ___cxa_guard_release() {}
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);function _llvm_cttz_i32(x) {
      x = x|0;
      var ret = 0;
      ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
      if ((ret|0) < 8) return ret|0;
      ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
      if ((ret|0) < 8) return (ret + 8)|0;
      ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
      if ((ret|0) < 8) return (ret + 16)|0;
      return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _isascii(chr) {
      return chr >= 0 && (chr & 0x80) == 0;
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      (_memcpy(newStr, ptr, len)|0);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
;
;
;
;
;
;
;
;
  function _pthread_mutex_lock() {}
  function _pthread_mutex_unlock() {}
  function _pthread_cond_broadcast() {
      return 0;
    }
  function _pthread_cond_wait() {
      return 0;
    }
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;
  var _llvm_memset_p0i8_i64=_memset;
  function _llvm_lifetime_start() {}
  function _llvm_lifetime_end() {}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;
  function ___errno_location() {
      return ___errno_state;
    }
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _abort() {
      Module['abort']();
    }
  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      throw HEAP32[((_llvm_eh_exception.buf)>>2)];;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }var _isxdigit_l=_isxdigit;
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }var _isdigit_l=_isdigit;
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _catopen() { throw 'TODO: ' + aborter }
  function _catgets() { throw 'TODO: ' + aborter }
  function _catclose() { throw 'TODO: ' + aborter }
  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }
  function _freelocale(locale) {
      _free(locale);
    }
  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i]
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
      var pattern = Pointer_stringify(format);
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }var _strftime_l=_strftime;
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }var _strtoull_l=_strtoull;
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }var _strtoll_l=_strtoll;
  function _uselocale(locale) {
      return 0;
    }
  var _llvm_va_start=undefined;
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }
  var _fabs=Math_abs;
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;
  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x+y > 4294967295,(x+y)>>>0;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZTv0_n12_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE5cloneEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZNSt3__16locale2id6__initEv,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE5cloneEv,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt14overflow_errorD0Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZNSt12out_of_rangeD0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,__ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED1Ev,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZN5boost16exception_detail10clone_baseD1Ev,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__18ios_baseD2Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZNSt3__18messagesIcED1Ev,0,__ZTv0_n12_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE5cloneEv,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED1Ev,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt3__18numpunctIcED2Ev,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,___ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_E3$_0ESF_SF__,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED1Ev,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZTv0_n16_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE7rethrowEv,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,_free,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZNSt11range_errorD0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE7rethrowEv,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZN5boost16exception_detail19error_info_injectorISt14overflow_errorED0Ev,0,__Z10modPowLinkNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_,0,__ZThn8_N5boost16exception_detail19error_info_injectorISt13runtime_errorED0Ev,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED1Ev,0,__Z8getPrimev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__ZN5boost16exception_detail19error_info_injectorISt14overflow_errorED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,__ZThn8_N5boost16exception_detail19error_info_injectorISt13runtime_errorED1Ev,0,__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE7rethrowEv,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE5cloneEv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZThn8_N5boost16exception_detail19error_info_injectorISt11range_errorED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZThn8_N5boost16exception_detail19error_info_injectorISt14overflow_errorED0Ev,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,__ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZTv0_n16_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE7rethrowEv,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZN5boost16exception_detail10clone_baseD0Ev,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNSt3__112system_errorD0Ev,0,__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE5cloneEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__Z6getMsgNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__Z12getRandForDHv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED1Ev,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,___cxa_pure_virtual,0,__ZNSt3__18numpunctIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__Z7makeKeyNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED1Ev,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt3__112system_errorD2Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED1Ev,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEE6invokeEPFS8_vE,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZThn8_N5boost16exception_detail19error_info_injectorISt14overflow_errorED1Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE7rethrowEv,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev,0,__ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZN5boost16exception_detail19error_info_injectorISt11range_errorED0Ev,0,__ZN5boost16exception_detail19error_info_injectorISt11range_errorED1Ev,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZThn8_N5boost16exception_detail19error_info_injectorISt11range_errorED0Ev,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZTv0_n16_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE7rethrowEv,0,___ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_E3$_0ESF__,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZTv0_n12_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE5cloneEv,0,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED1Ev,0,___cxx_global_array_dtor120,0];
// EMSCRIPTEN_START_FUNCS
function __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $block_mult_i_i_i_i=sp;
 var $block1_i_i_i_i=(sp)+(8);
 var $s_i=(sp)+(16);
 var $input=(sp)+(32);
 var $sin=(sp)+(48);
 var $1=$n;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$input;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($1)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($1)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($1)+(8))>>2)];
 label=20;break;
 case 3: 
 var $8=(($n+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($n+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11>>>0)>4294967279;
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $15=($11>>>0)<11;
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=$11<<1;
 var $18=(($17)&255);
 var $19=$input;
 var $20=$input;
 HEAP8[($20)]=$18;
 var $21=(($19+1)|0);
 var $__p_0_i_i_i=$21;label=19;break;
 case 7: 
 var $22=((($11)+(16))|0);
 var $23=$22&-16;
 var $24=($23|0)==0;
 var $_size_i=($24?1:$23);
 label=8;break;
 case 8: 
 var $26=_malloc($_size_i);
 var $27=($26|0)==0;
 if($27){label=9;break;}else{label=18;break;}
 case 9: 
 var $29=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $30=($29|0)==0;
 if($30){label=15;break;}else{label=10;break;}
 case 10: 
 var $32=$29;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $34=$lpad_phi_i$1;
 var $35=($34|0)<0;
 if($35){label=14;break;}else{label=16;break;}
 case 14: 
 var $37=$lpad_phi_i$0;
 ___cxa_call_unexpected($37);
 throw "Reached an unreachable!";
 case 15: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($39,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $43=(($input+8)|0);
 HEAP32[(($43)>>2)]=$26;
 var $44=$23|1;
 var $45=(($input)|0);
 HEAP32[(($45)>>2)]=$44;
 var $46=(($input+4)|0);
 HEAP32[(($46)>>2)]=$11;
 var $__p_0_i_i_i=$26;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($11 % 1 === 0);(_memcpy($__p_0_i_i_i, $9, $11)|0);
 var $47=(($__p_0_i_i_i+$11)|0);
 HEAP8[($47)]=0;
 label=20;break;
 case 20: 
 var $48=$agg_result;
 HEAP32[(($48)>>2)]=0;
 var $49=(($agg_result+128)|0);
 HEAP16[(($49)>>1)]=1;
 var $50=(($agg_result+130)|0);
 HEAP8[($50)]=0;
 var $51=(($sin+64)|0);
 var $52=(($sin)|0);
 var $53=(($sin+8)|0);
 HEAP32[(($53)>>2)]=7608;
 var $54=(($sin+12)|0);
 HEAP32[(($52)>>2)]=15484;
 var $55=$sin;
 var $56=$sin;
 var $57=(($sin+64)|0);
 var $58=(($57)|0);
 HEAP32[(($58)>>2)]=15504;
 var $59=(($sin+4)|0);
 HEAP32[(($59)>>2)]=0;
 var $60=HEAP32[(($55)>>2)];
 var $61=((($60)-(12))|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=$54;
 var $_sum15=((($63)+(24))|0);
 var $65=(($56+$_sum15)|0);
 var $66=$65;
 HEAP32[(($66)>>2)]=$64;
 var $_sum16=((($63)+(16))|0);
 var $67=(($56+$_sum16)|0);
 var $68=$67;
 HEAP32[(($68)>>2)]=0;
 var $_sum17=((($63)+(20))|0);
 var $69=(($56+$_sum17)|0);
 var $70=$69;
 HEAP32[(($70)>>2)]=0;
 var $_sum18=((($63)+(4))|0);
 var $71=(($56+$_sum18)|0);
 var $72=$71;
 HEAP32[(($72)>>2)]=4098;
 var $_sum19=((($63)+(12))|0);
 var $73=(($56+$_sum19)|0);
 var $74=$73;
 HEAP32[(($74)>>2)]=0;
 var $_sum20=((($63)+(8))|0);
 var $75=(($56+$_sum20)|0);
 var $76=$75;
 HEAP32[(($76)>>2)]=6;
 var $_sum21=((($63)+(32))|0);
 var $77=(($56+$_sum21)|0);
 var $_sum22=((($63)+(28))|0);
 var $78=(($56+$_sum22)|0);
 _memset($77, 0, 40)|0;
 var $79=$78;
 __ZNSt3__16localeC2Ev($79);
 var $_sum=((($63)+(72))|0);
 var $80=(($56+$_sum)|0);
 var $81=$80;
 HEAP32[(($81)>>2)]=0;
 var $_sum1=((($63)+(76))|0);
 var $82=(($56+$_sum1)|0);
 var $83=$82;
 HEAP32[(($83)>>2)]=-1;
 HEAP32[(($52)>>2)]=7588;
 HEAP32[(($51)>>2)]=7628;
 HEAP32[(($53)>>2)]=7608;
 var $84=(($sin+12)|0);
 var $85=(($84)|0);
 HEAP32[(($85)>>2)]=7912;
 var $86=(($sin+16)|0);
 __ZNSt3__16localeC2Ev($86);
 var $87=(($sin+20)|0);
 var $88=$87;
 HEAP32[(($88)>>2)]=0; HEAP32[((($88)+(4))>>2)]=0; HEAP32[((($88)+(8))>>2)]=0; HEAP32[((($88)+(12))>>2)]=0; HEAP32[((($88)+(16))>>2)]=0; HEAP32[((($88)+(20))>>2)]=0;
 HEAP32[(($85)>>2)]=7768;
 var $89=(($sin+44)|0);
 var $90=$89;
 var $storemerge=0;label=21;break;
 case 21: 
 var $storemerge;
 var $92=($storemerge>>>0)<3;
 if($92){label=22;break;}else{label=23;break;}
 case 22: 
 var $94=(($90+($storemerge<<2))|0);
 HEAP32[(($94)>>2)]=0;
 var $95=((($storemerge)+(1))|0);
 var $storemerge=$95;label=21;break;
 case 23: 
 var $96=(($sin+56)|0);
 HEAP32[(($96)>>2)]=0;
 var $97=(($sin+60)|0);
 HEAP32[(($97)>>2)]=24;
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($84,$input) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=24;break; }
 case 24: 
 var $99$0 = ___cxa_find_matching_catch(-1, -1); var $99$1 = tempRet0;
 var $100=$99$0;
 var $101=$99$1;
 var $102=$89;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=27;break;}else{label=25;break;}
 case 25: 
 var $107=(($sin+52)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){label=27;break;}else{label=26;break;}
 case 26: 
 _free($108);
 label=27;break;
 case 27: 
 HEAP32[(($85)>>2)]=7912;
 var $111=(($sin+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+4)|0);
 var $114=(tempValue=HEAP32[(($113)>>2)],HEAP32[(($113)>>2)]=tempValue+-1,tempValue);
 var $115=($114|0)==0;
 if($115){label=28;break;}else{label=284;break;}
 case 28: 
 var $117=(($112)|0);
 var $118=$112;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+8)|0);
 var $121=HEAP32[(($120)>>2)];
 FUNCTION_TABLE[$121]($117);
 label=284;break;
 case 29: 
 var $122=$s_i;
 var $123=HEAP32[(($55)>>2)];
 var $124=((($123)-(12))|0);
 var $125=$124;
 var $126=HEAP32[(($125)>>2)];
 var $_sum_i=((($126)+(4))|0);
 var $127=(($56+$_sum_i)|0);
 var $128=$127;
 var $129=HEAP32[(($128)>>2)];
 var $130=$sin;
 var $131=$sin;
 var $132=$s_i;
 var $storemerge_i=0;label=30;break;
 case 30: 
 var $storemerge_i;
 var $134=($storemerge_i>>>0)<3;
 if($134){label=31;break;}else{label=32;break;}
 case 31: 
 var $136=(($132+($storemerge_i<<2))|0);
 HEAP32[(($136)>>2)]=0;
 var $137=((($storemerge_i)+(1))|0);
 var $storemerge_i=$137;label=30;break;
 case 32: 
 var $138=HEAP32[(($125)>>2)];
 var $_sum_i_i_i_i=((($138)+(16))|0);
 var $139=(($131+$_sum_i_i_i_i)|0);
 var $140=$139;
 var $141=HEAP32[(($140)>>2)];
 var $142=($141|0)==0;
 if($142){label=33;break;}else{label=62;break;}
 case 33: 
 var $_sum98_i_i_i_i=((($138)+(72))|0);
 var $144=(($131+$_sum98_i_i_i_i)|0);
 var $145=$144;
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){var $149=$138;label=36;break;}else{label=34;break;}
 case 34: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=70;break; }
 case 35: 
 var $_pre324=HEAP32[(($130)>>2)];
 var $_phi_trans_insert=((($_pre324)-(12))|0);
 var $_phi_trans_insert325=$_phi_trans_insert;
 var $_pre326=HEAP32[(($_phi_trans_insert325)>>2)];
 var $149=$_pre326;label=36;break;
 case 36: 
 var $149;
 var $_sum99_i_i_i_i=((($149)+(4))|0);
 var $150=(($131+$_sum99_i_i_i_i)|0);
 var $151=$150;
 var $152=HEAP32[(($151)>>2)];
 var $153=$152&4096;
 var $154=($153|0)==0;
 if($154){label=63;break;}else{label=37;break;}
 case 37: 
 var $_sum104_i_i_i_i=((($149)+(28))|0);
 var $156=(($131+$_sum104_i_i_i_i)|0);
 var $157=$156;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+4)|0);
 var $160=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+1,tempValue);
 var $161=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($158,19288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=52;break; }
 case 38: 
 var $162=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $163=($162|0)==0;
 if($163){label=39;break;}else{label=40;break;}
 case 39: 
 var $165=(($158)|0);
 var $166=$158;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+8)|0);
 var $169=HEAP32[(($168)>>2)];
 FUNCTION_TABLE[$169]($165);
 label=40;break;
 case 40: 
 var $170=HEAP32[(($130)>>2)];
 var $171=((($170)-(12))|0);
 var $172=$171;
 var $173=HEAP32[(($172)>>2)];
 var $_sum101_i_i_i_i=((($173)+(24))|0);
 var $174=(($131+$_sum101_i_i_i_i)|0);
 var $175=$174;
 var $176=HEAP32[(($175)>>2)];
 var $177=$176;
 var $178=(($161+8)|0);
 var $179=$178;
 var $__i_sroa_0_0_i_i_i_i=$177;label=41;break;
 case 41: 
 var $__i_sroa_0_0_i_i_i_i;
 var $180=($__i_sroa_0_0_i_i_i_i|0)==0;
 if($180){label=61;break;}else{label=42;break;}
 case 42: 
 var $182=(($__i_sroa_0_0_i_i_i_i+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($__i_sroa_0_0_i_i_i_i+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=43;break;}else{label=44;break;}
 case 43: 
 var $188=$__i_sroa_0_0_i_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($__i_sroa_0_0_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_082_i_i_i_i=$192;label=45;break; } else { label=69;break; }
 case 44: 
 var $194=HEAP8[($183)];
 var $195=($194&255);
 var $_082_i_i_i_i=$195;label=45;break;
 case 45: 
 var $_082_i_i_i_i;
 var $196=($_082_i_i_i_i|0)==-1;
 var $___i_sroa_0_0_i_i_i_i=($196?0:$__i_sroa_0_0_i_i_i_i);
 var $cond_i_i_i_i=($___i_sroa_0_0_i_i_i_i|0)==0;
 if($cond_i_i_i_i){label=61;break;}else{label=46;break;}
 case 46: 
 var $198=(($___i_sroa_0_0_i_i_i_i+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=(($___i_sroa_0_0_i_i_i_i+16)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($199|0)==($201|0);
 if($202){label=47;break;}else{label=49;break;}
 case 47: 
 var $204=$___i_sroa_0_0_i_i_i_i;
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+36)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$207]($___i_sroa_0_0_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=69;break; }
 case 48: 
 var $extract_t_i_i_i_i=(($208)&255);
 var $_0_off0_i_i_i_i=$extract_t_i_i_i_i;label=50;break;
 case 49: 
 var $210=HEAP8[($199)];
 var $_0_off0_i_i_i_i=$210;label=50;break;
 case 50: 
 var $_0_off0_i_i_i_i;
 var $211=(($_0_off0_i_i_i_i<<24)>>24)<0;
 if($211){label=57;break;}else{label=51;break;}
 case 51: 
 var $212=(($_0_off0_i_i_i_i<<24)>>24);
 var $213=HEAP32[(($179)>>2)];
 var $214=(($213+($212<<1))|0);
 var $215=HEAP16[(($214)>>1)];
 var $216=$215&8192;
 var $217=(($216<<16)>>16)==0;
 if($217){label=57;break;}else{label=54;break;}
 case 52: 
 var $219$0 = ___cxa_find_matching_catch(-1, -1,0); var $219$1 = tempRet0;
 var $220=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $221=($220|0)==0;
 if($221){label=53;break;}else{var $eh_lpad_body_i_i$1=$219$1;var $eh_lpad_body_i_i$0=$219$0;label=71;break;}
 case 53: 
 var $223=(($158)|0);
 var $224=$158;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+8)|0);
 var $227=HEAP32[(($226)>>2)];
 FUNCTION_TABLE[$227]($223);
 var $eh_lpad_body_i_i$1=$219$1;var $eh_lpad_body_i_i$0=$219$0;label=71;break;
 case 54: 
 var $229=HEAP32[(($198)>>2)];
 var $230=HEAP32[(($200)>>2)];
 var $231=($229|0)==($230|0);
 if($231){label=55;break;}else{label=56;break;}
 case 55: 
 var $233=$___i_sroa_0_0_i_i_i_i;
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+40)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($___i_sroa_0_0_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_sroa_0_0_i_i_i_i=$___i_sroa_0_0_i_i_i_i;label=41;break; } else { label=69;break; }
 case 56: 
 var $239=(($229+1)|0);
 HEAP32[(($198)>>2)]=$239;
 var $__i_sroa_0_0_i_i_i_i=$___i_sroa_0_0_i_i_i_i;label=41;break;
 case 57: 
 var $240=HEAP32[(($198)>>2)];
 var $241=HEAP32[(($200)>>2)];
 var $242=($240|0)==($241|0);
 if($242){label=58;break;}else{label=59;break;}
 case 58: 
 var $244=$___i_sroa_0_0_i_i_i_i;
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+36)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$247]($___i_sroa_0_0_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_085_i_i_i_i=$248;label=60;break; } else { label=70;break; }
 case 59: 
 var $249=HEAP8[($240)];
 var $250=($249&255);
 label=63;break;
 case 60: 
 var $_085_i_i_i_i;
 var $251=($_085_i_i_i_i|0)==-1;
 if($251){label=61;break;}else{label=63;break;}
 case 61: 
 var $252=HEAP32[(($130)>>2)];
 var $253=((($252)-(12))|0);
 var $254=$253;
 var $255=HEAP32[(($254)>>2)];
 var $256=(($131+$255)|0);
 var $257=$256;
 var $_sum102_i_i_i_i=((($255)+(16))|0);
 var $258=(($131+$_sum102_i_i_i_i)|0);
 var $259=$258;
 var $260=HEAP32[(($259)>>2)];
 var $261=$260|6;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($257,$261) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=70;break; }
 case 62: 
 var $263=(($131+$138)|0);
 var $264=$263;
 var $265=$141|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($264,$265) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=70;break; }
 case 63: 
 var $266=HEAP32[(($130)>>2)];
 var $267=((($266)-(12))|0);
 var $268=$267;
 var $269=HEAP32[(($268)>>2)];
 var $_sum100_i_i_i_i=((($269)+(16))|0);
 var $270=(($131+$_sum100_i_i_i_i)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $phitmp328=($272|0)!=0;
 if($phitmp328){label=102;break;}else{label=64;break;}
 case 64: 
 var $274=HEAP8[($122)];
 var $275=$274&1;
 var $276=(($275<<24)>>24)==0;
 if($276){label=66;break;}else{label=65;break;}
 case 65: 
 var $278=(($s_i+8)|0);
 var $279=HEAP32[(($278)>>2)];
 HEAP8[($279)]=0;
 var $280=(($s_i+4)|0);
 HEAP32[(($280)>>2)]=0;
 label=67;break;
 case 66: 
 var $282=$s_i;
 var $283=(($282+1)|0);
 HEAP8[($283)]=0;
 HEAP8[($122)]=0;
 label=67;break;
 case 67: 
 var $284=HEAP32[(($130)>>2)];
 var $285=((($284)-(12))|0);
 var $286=$285;
 var $287=HEAP32[(($286)>>2)];
 var $_sum1_i_i=((($287)+(12))|0);
 var $288=(($131+$_sum1_i_i)|0);
 var $289=$288;
 var $290=HEAP32[(($289)>>2)];
 var $291=($290|0)<1;
 var $_=($291?2147483647:$290);
 var $_sum25=((($287)+(28))|0);
 var $292=(($131+$_sum25)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=(($294+4)|0);
 var $296=(tempValue=HEAP32[(($295)>>2)],HEAP32[(($295)>>2)]=tempValue+1,tempValue);
 var $297=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($294,19288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=80;break; }
 case 68: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit$1;var $eh_lpad_body_i_i$0=$lpad_loopexit$0;label=71;break;
 case 69: 
 var $lpad_loopexit318$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit318$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_loopexit318$1;var $eh_lpad_body_i_i$0=$lpad_loopexit318$0;label=71;break;
 case 70: 
 var $lpad_nonloopexit319$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit319$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$lpad_nonloopexit319$1;var $eh_lpad_body_i_i$0=$lpad_nonloopexit319$0;label=71;break;
 case 71: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $298=$eh_lpad_body_i_i$0;
 var $_0305=$298;label=82;break;
 case 72: 
 var $299=(tempValue=HEAP32[(($295)>>2)],HEAP32[(($295)>>2)]=tempValue+-1,tempValue);
 var $300=($299|0)==0;
 if($300){label=73;break;}else{label=74;break;}
 case 73: 
 var $302=(($294)|0);
 var $303=$294;
 var $304=HEAP32[(($303)>>2)];
 var $305=(($304+8)|0);
 var $306=HEAP32[(($305)>>2)];
 FUNCTION_TABLE[$306]($302);
 label=74;break;
 case 74: 
 var $307=$s_i;
 var $308=(($307+1)|0);
 var $309=(($s_i+8)|0);
 var $310=(($s_i+4)|0);
 var $311=(($s_i)|0);
 var $312=(($297+8)|0);
 var $313=$312;
 var $__c_i_i_0=0;label=75;break;
 case 75: 
 var $__c_i_i_0;
 var $314=($__c_i_i_0|0)<($_|0);
 if($314){label=76;break;}else{var $__err_i_i_0=0;label=101;break;}
 case 76: 
 var $316=HEAP32[(($130)>>2)];
 var $317=((($316)-(12))|0);
 var $318=$317;
 var $319=HEAP32[(($318)>>2)];
 var $_sum5_i_i=((($319)+(24))|0);
 var $320=(($131+$_sum5_i_i)|0);
 var $321=$320;
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+12)|0);
 var $324=$323;
 var $325=HEAP32[(($324)>>2)];
 var $326=(($322+16)|0);
 var $327=$326;
 var $328=HEAP32[(($327)>>2)];
 var $329=($325|0)==($328|0);
 if($329){label=77;break;}else{label=78;break;}
 case 77: 
 var $331=$322;
 var $332=$322;
 var $333=HEAP32[(($332)>>2)];
 var $334=(($333+36)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$335]($331) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=68;break; }
 case 78: 
 var $337=HEAP8[($325)];
 var $__i_i_i_0_off0=$337;label=86;break;
 case 79: 
 var $338=($336|0)==-1;
 var $extract_t329=(($336)&255);
 if($338){var $__err_i_i_0=2;label=101;break;}else{var $__i_i_i_0_off0=$extract_t329;label=86;break;}
 case 80: 
 var $340$0 = ___cxa_find_matching_catch(-1, -1,0); var $340$1 = tempRet0;
 var $341=$340$0;
 var $342=(tempValue=HEAP32[(($295)>>2)],HEAP32[(($295)>>2)]=tempValue+-1,tempValue);
 var $343=($342|0)==0;
 if($343){label=81;break;}else{var $_0305=$341;label=82;break;}
 case 81: 
 var $345=(($294)|0);
 var $346=$294;
 var $347=HEAP32[(($346)>>2)];
 var $348=(($347+8)|0);
 var $349=HEAP32[(($348)>>2)];
 FUNCTION_TABLE[$349]($345);
 var $_0305=$341;label=82;break;
 case 82: 
 var $_0305;
 var $350=___cxa_begin_catch($_0305);
 var $351=HEAP32[(($130)>>2)];
 var $352=((($351)-(12))|0);
 var $353=$352;
 var $354=HEAP32[(($353)>>2)];
 var $_sum23=((($354)+(16))|0);
 var $355=(($131+$_sum23)|0);
 var $356=$355;
 var $357=HEAP32[(($356)>>2)];
 var $358=$357|1;
 HEAP32[(($356)>>2)]=$358;
 var $_sum24=((($354)+(20))|0);
 var $359=(($131+$_sum24)|0);
 var $360=$359;
 var $361=HEAP32[(($360)>>2)];
 var $362=$361&1;
 var $363=($362|0)==0;
 if($363){label=85;break;}else{label=83;break;}
 case 83: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=103;break; }
 case 84: 
 throw "Reached an unreachable!";
 case 85: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=128;break; }
 case 86: 
 var $__i_i_i_0_off0;
 var $366=(($__i_i_i_0_off0<<24)>>24);
 var $367=(function() { try { __THREW__ = 0; return _isascii($366) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=68;break; }
 case 87: 
 var $368=($367|0)==0;
 if($368){label=89;break;}else{label=88;break;}
 case 88: 
 var $369=HEAP32[(($313)>>2)];
 var $370=(($369+($366<<1))|0);
 var $371=HEAP16[(($370)>>1)];
 var $372=$371&8192;
 var $373=(($372<<16)>>16)==0;
 if($373){label=89;break;}else{var $__err_i_i_0=0;label=101;break;}
 case 89: 
 var $374=HEAP8[($122)];
 var $375=$374&1;
 var $376=(($375<<24)>>24)==0;
 if($376){label=90;break;}else{label=91;break;}
 case 90: 
 var $378=($374&255);
 var $379=$378>>>1;
 var $__sz_0_i_i_i=$379;var $__cap_0_i_i_i=10;label=92;break;
 case 91: 
 var $381=HEAP32[(($311)>>2)];
 var $382=$381&-2;
 var $383=((($382)-(1))|0);
 var $384=HEAP32[(($310)>>2)];
 var $__sz_0_i_i_i=$384;var $__cap_0_i_i_i=$383;label=92;break;
 case 92: 
 var $__cap_0_i_i_i;
 var $__sz_0_i_i_i;
 var $386=($__sz_0_i_i_i|0)==($__cap_0_i_i_i|0);
 if($386){label=93;break;}else{var $__is_short_0_off0_in_in_i_i_i=$374;label=95;break;}
 case 93: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($s_i,$__cap_0_i_i_i,1,$__cap_0_i_i_i,$__cap_0_i_i_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=68;break; }
 case 94: 
 var $388=HEAP8[($122)];
 var $__is_short_0_off0_in_in_i_i_i=$388;label=95;break;
 case 95: 
 var $__is_short_0_off0_in_in_i_i_i;
 var $__is_short_0_off0_in_i_i_i=$__is_short_0_off0_in_in_i_i_i&1;
 var $__is_short_0_off0_i_i_i=(($__is_short_0_off0_in_i_i_i<<24)>>24)==0;
 if($__is_short_0_off0_i_i_i){label=96;break;}else{label=97;break;}
 case 96: 
 var $391=$__sz_0_i_i_i<<1;
 var $392=((($391)+(2))|0);
 var $393=(($392)&255);
 HEAP8[($122)]=$393;
 var $__p_0_sum_pre_i_i_i=((($__sz_0_i_i_i)+(1))|0);
 var $_pn_i_i_i=$308;var $__p_0_sum_pre_phi_i_i_i=$__p_0_sum_pre_i_i_i;label=98;break;
 case 97: 
 var $395=HEAP32[(($309)>>2)];
 var $396=((($__sz_0_i_i_i)+(1))|0);
 HEAP32[(($310)>>2)]=$396;
 var $_pn_i_i_i=$395;var $__p_0_sum_pre_phi_i_i_i=$396;label=98;break;
 case 98: 
 var $__p_0_sum_pre_phi_i_i_i;
 var $_pn_i_i_i;
 var $__p_0_i_i_i3=(($_pn_i_i_i+$__sz_0_i_i_i)|0);
 HEAP8[($__p_0_i_i_i3)]=$__i_i_i_0_off0;
 var $397=(($_pn_i_i_i+$__p_0_sum_pre_phi_i_i_i)|0);
 HEAP8[($397)]=0;
 var $398=((($__c_i_i_0)+(1))|0);
 var $399=HEAP32[(($130)>>2)];
 var $400=((($399)-(12))|0);
 var $401=$400;
 var $402=HEAP32[(($401)>>2)];
 var $_sum6_i_i=((($402)+(24))|0);
 var $403=(($131+$_sum6_i_i)|0);
 var $404=$403;
 var $405=HEAP32[(($404)>>2)];
 var $406=(($405+12)|0);
 var $407=$406;
 var $408=HEAP32[(($407)>>2)];
 var $409=(($405+16)|0);
 var $410=$409;
 var $411=HEAP32[(($410)>>2)];
 var $412=($408|0)==($411|0);
 if($412){label=99;break;}else{label=100;break;}
 case 99: 
 var $414=$405;
 var $415=$405;
 var $416=HEAP32[(($415)>>2)];
 var $417=(($416+40)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$418]($414) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_i_i_0=$398;label=75;break; } else { label=68;break; }
 case 100: 
 var $421=(($408+1)|0);
 HEAP32[(($407)>>2)]=$421;
 var $__c_i_i_0=$398;label=75;break;
 case 101: 
 var $__err_i_i_0;
 var $422=HEAP32[(($130)>>2)];
 var $423=((($422)-(12))|0);
 var $424=$423;
 var $425=HEAP32[(($424)>>2)];
 var $_sum3_i_i=((($425)+(12))|0);
 var $426=(($131+$_sum3_i_i)|0);
 var $427=$426;
 HEAP32[(($427)>>2)]=0;
 var $428=($__c_i_i_0|0)==0;
 var $429=$__err_i_i_0|4;
 var $__err_i_i_1=($428?$429:$__err_i_i_0);
 var $430=HEAP32[(($130)>>2)];
 var $431=((($430)-(12))|0);
 var $432=$431;
 var $433=HEAP32[(($432)>>2)];
 var $434=(($131+$433)|0);
 var $435=$434;
 var $_sum4_i_i=((($433)+(16))|0);
 var $436=(($131+$_sum4_i_i)|0);
 var $437=$436;
 var $438=HEAP32[(($437)>>2)];
 var $439=$438|$__err_i_i_1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($435,$439) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=70;break; }
 case 102: 
 var $440=HEAP32[(($130)>>2)];
 var $441=((($440)-(12))|0);
 var $442=$441;
 var $443=HEAP32[(($442)>>2)];
 var $444=(($131+$443)|0);
 var $445=$444;
 var $_sum_i_i=((($443)+(16))|0);
 var $446=(($131+$_sum_i_i)|0);
 var $447=$446;
 var $448=HEAP32[(($447)>>2)];
 var $449=$448|4;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($445,$449) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=70;break; }
 case 103: 
 var $451$0 = ___cxa_find_matching_catch(-1, -1); var $451$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body_i$1=$451$1;var $eh_lpad_body_i$0=$451$0;label=129;break; } else { label=104;break; }
 case 104: 
 var $453$0 = ___cxa_find_matching_catch(-1, -1,0); var $453$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 105: 
 var $454=$129&8;
 var $455=($454|0)==0;
 if($455){label=132;break;}else{label=106;break;}
 case 106: 
 var $457=HEAP8[($122)];
 var $458=$457&1;
 var $459=(($458<<24)>>24)==0;
 if($459){label=108;break;}else{label=107;break;}
 case 107: 
 var $461=(($s_i+8)|0);
 var $462=HEAP32[(($461)>>2)];
 var $466=$462;label=109;break;
 case 108: 
 var $464=$s_i;
 var $465=(($464+1)|0);
 var $466=$465;label=109;break;
 case 109: 
 var $466;
 var $467=HEAP8[($466)];
 var $468=(($467<<24)>>24)==48;
 if($468){label=110;break;}else{label=114;break;}
 case 110: 
 if($459){label=112;break;}else{label=111;break;}
 case 111: 
 var $471=(($s_i+8)|0);
 var $472=HEAP32[(($471)>>2)];
 var $476=$472;label=113;break;
 case 112: 
 var $474=$s_i;
 var $475=(($474+1)|0);
 var $476=$475;label=113;break;
 case 113: 
 var $476;
 var $477=(($476+1)|0);
 var $478=HEAP8[($477)];
 var $479=(($478<<24)>>24)==120;
 if($479){label=132;break;}else{label=114;break;}
 case 114: 
 var $481=(function() { try { __THREW__ = 0; return _strlen(1216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=116;break; } else { label=115;break; }
 case 115: 
 var $483$0 = ___cxa_find_matching_catch(-1, -1,0); var $483$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 116: 
 var $484=$s_i;
 var $485=HEAP8[($122)];
 var $486=($485&255);
 var $487=$486&1;
 var $488=($487|0)==0;
 if($488){label=118;break;}else{label=117;break;}
 case 117: 
 var $490=(($s_i+4)|0);
 var $491=HEAP32[(($490)>>2)];
 var $494=$491;label=119;break;
 case 118: 
 var $493=$486>>>1;
 var $494=$493;label=119;break;
 case 119: 
 var $494;
 var $495=($494|0)==0;
 if($495){var $_0_i_i=-1;label=127;break;}else{label=120;break;}
 case 120: 
 var $497=$485&1;
 var $498=(($497<<24)>>24)==0;
 if($498){label=122;break;}else{label=121;break;}
 case 121: 
 var $500=(($s_i+8)|0);
 var $501=HEAP32[(($500)>>2)];
 var $504=$501;label=123;break;
 case 122: 
 var $503=(($484+1)|0);
 var $504=$503;label=123;break;
 case 123: 
 var $504;
 var $505=(($504+$494)|0);
 var $__ps_0_i_i=$504;label=124;break;
 case 124: 
 var $__ps_0_i_i;
 var $507=($__ps_0_i_i|0)==($505|0);
 if($507){var $_0_i_i=-1;label=127;break;}else{label=125;break;}
 case 125: 
 var $508=HEAP8[($__ps_0_i_i)];
 var $509=($508&255);
 var $510=_memchr(1216,$509,$481);
 var $511=($510|0)==0;
 var $512=(($__ps_0_i_i+1)|0);
 if($511){label=126;break;}else{var $__ps_0_i_i=$512;label=124;break;}
 case 126: 
 var $514=$__ps_0_i_i;
 var $515=$504;
 var $516=((($514)-($515))|0);
 var $_0_i_i=$516;label=127;break;
 case 127: 
 var $_0_i_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($s_i,$_0_i_i,3320) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=128;break; }
 case 128: 
 var $518$0 = ___cxa_find_matching_catch(-1, -1); var $518$1 = tempRet0;
 var $eh_lpad_body_i$1=$518$1;var $eh_lpad_body_i$0=$518$0;label=129;break;
 case 129: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $519=$eh_lpad_body_i$0;
 var $520=$eh_lpad_body_i$1;
 var $521=HEAP8[($122)];
 var $522=$521&1;
 var $523=(($522<<24)>>24)==0;
 if($523){label=285;break;}else{label=130;break;}
 case 130: 
 var $525=(($s_i+8)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=($526|0)==0;
 if($527){label=285;break;}else{label=131;break;}
 case 131: 
 _free($526);
 label=285;break;
 case 132: 
 var $530=$129&64;
 var $531=($530|0)==0;
 if($531){label=151;break;}else{label=133;break;}
 case 133: 
 var $533=HEAP8[($122)];
 var $534=$533&1;
 var $535=(($534<<24)>>24)==0;
 if($535){label=135;break;}else{label=134;break;}
 case 134: 
 var $537=(($s_i+8)|0);
 var $538=HEAP32[(($537)>>2)];
 var $542=$538;label=136;break;
 case 135: 
 var $540=$s_i;
 var $541=(($540+1)|0);
 var $542=$541;label=136;break;
 case 136: 
 var $542;
 var $543=HEAP8[($542)];
 var $544=(($543<<24)>>24)==48;
 if($544){label=151;break;}else{label=137;break;}
 case 137: 
 var $546=(function() { try { __THREW__ = 0; return _strlen(1216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=139;break; } else { label=138;break; }
 case 138: 
 var $548$0 = ___cxa_find_matching_catch(-1, -1,0); var $548$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 139: 
 var $549=$s_i;
 var $550=HEAP8[($122)];
 var $551=($550&255);
 var $552=$551&1;
 var $553=($552|0)==0;
 if($553){label=141;break;}else{label=140;break;}
 case 140: 
 var $555=(($s_i+4)|0);
 var $556=HEAP32[(($555)>>2)];
 var $559=$556;label=142;break;
 case 141: 
 var $558=$551>>>1;
 var $559=$558;label=142;break;
 case 142: 
 var $559;
 var $560=($559|0)==0;
 if($560){var $_0_i7_i=-1;label=150;break;}else{label=143;break;}
 case 143: 
 var $562=$550&1;
 var $563=(($562<<24)>>24)==0;
 if($563){label=145;break;}else{label=144;break;}
 case 144: 
 var $565=(($s_i+8)|0);
 var $566=HEAP32[(($565)>>2)];
 var $569=$566;label=146;break;
 case 145: 
 var $568=(($549+1)|0);
 var $569=$568;label=146;break;
 case 146: 
 var $569;
 var $570=(($569+$559)|0);
 var $__ps_0_i5_i=$569;label=147;break;
 case 147: 
 var $__ps_0_i5_i;
 var $572=($__ps_0_i5_i|0)==($570|0);
 if($572){var $_0_i7_i=-1;label=150;break;}else{label=148;break;}
 case 148: 
 var $573=HEAP8[($__ps_0_i5_i)];
 var $574=($573&255);
 var $575=_memchr(1216,$574,$546);
 var $576=($575|0)==0;
 var $577=(($__ps_0_i5_i+1)|0);
 if($576){label=149;break;}else{var $__ps_0_i5_i=$577;label=147;break;}
 case 149: 
 var $579=$__ps_0_i5_i;
 var $580=$569;
 var $581=((($579)-($580))|0);
 var $_0_i7_i=$581;label=150;break;
 case 150: 
 var $_0_i7_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($s_i,$_0_i7_i,3520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=151;break; } else { label=128;break; }
 case 151: 
 var $582=(($agg_result)|0);
 var $583=HEAP8[($122)];
 var $584=$583&1;
 var $585=(($584<<24)>>24)==0;
 if($585){label=152;break;}else{label=153;break;}
 case 152: 
 var $586=$s_i;
 var $587=(($586+1)|0);
 var $588=$block_mult_i_i_i_i;
 var $589=$block1_i_i_i_i;
 var $598=$587;var $597=$588;var $596=$589;label=155;break;
 case 153: 
 var $590=(($s_i+8)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=$block_mult_i_i_i_i;
 var $593=$block1_i_i_i_i;
 var $594=($591|0)==0;
 if($594){label=154;break;}else{var $598=$591;var $597=$592;var $596=$593;label=155;break;}
 case 154: 
 HEAP16[(($49)>>1)]=1;
 HEAP32[(($48)>>2)]=0;
 HEAP8[($50)]=0;
 var $935=$593;var $934=$592;label=272;break;
 case 155: 
 var $596;
 var $597;
 var $598;
 var $599=(function() { try { __THREW__ = 0; return _strlen($598) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $603=$599;var $602=$598;var $601=$597;var $600=$596;label=156;break; } else { label=128;break; }
 case 156: 
 var $600;
 var $601;
 var $602;
 var $603;
 HEAP16[(($49)>>1)]=1;
 HEAP32[(($48)>>2)]=0;
 HEAP8[($50)]=0;
 var $604=($603|0)==0;
 if($604){var $935=$600;var $934=$601;label=272;break;}else{label=157;break;}
 case 157: 
 var $606=HEAP8[($602)];
 var $607=(($606<<24)>>24)==45;
 if($607){label=158;break;}else{var $_0302=$602;var $n_i_i_i_i_0=$603;var $isneg_i_i_i_i_0=0;label=159;break;}
 case 158: 
 var $609=((($603)-(1))|0);
 var $610=(($602+1)|0);
 var $_0302=$610;var $n_i_i_i_i_0=$609;var $isneg_i_i_i_i_0=1;label=159;break;
 case 159: 
 var $isneg_i_i_i_i_0;
 var $n_i_i_i_i_0;
 var $_0302;
 var $611=($n_i_i_i_i_0|0)==0;
 if($611){var $627=$n_i_i_i_i_0;var $_3=$_0302;var $radix_i_i_i_i_1=10;var $isneg_i_i_i_i_2=$isneg_i_i_i_i_0;var $626=$600;var $625=$601;label=165;break;}else{label=160;break;}
 case 160: 
 var $613=HEAP8[($_0302)];
 var $614=(($613<<24)>>24)==48;
 if($614){label=161;break;}else{var $627=$n_i_i_i_i_0;var $_3=$_0302;var $radix_i_i_i_i_1=10;var $isneg_i_i_i_i_2=$isneg_i_i_i_i_0;var $626=$600;var $625=$601;label=165;break;}
 case 161: 
 var $616=($n_i_i_i_i_0>>>0)>1;
 if($616){label=162;break;}else{label=164;break;}
 case 162: 
 var $618=(($_0302+1)|0);
 var $619=HEAP8[($618)];
 if((($619<<24)>>24)==120|(($619<<24)>>24)==88){ label=163;break;}else{label=164;break;}
 case 163: 
 var $621=(($_0302+2)|0);
 var $622=((($n_i_i_i_i_0)-(2))|0);
 var $627=$622;var $_3=$621;var $radix_i_i_i_i_1=16;var $isneg_i_i_i_i_2=$isneg_i_i_i_i_0;var $626=$600;var $625=$601;label=165;break;
 case 164: 
 var $624=((($n_i_i_i_i_0)-(1))|0);
 var $627=$624;var $_3=$_0302;var $radix_i_i_i_i_1=8;var $isneg_i_i_i_i_2=$isneg_i_i_i_i_0;var $626=$600;var $625=$601;label=165;break;
 case 165: 
 var $625;
 var $626;
 var $isneg_i_i_i_i_2;
 var $radix_i_i_i_i_1;
 var $_3;
 var $627;
 var $628=($627|0)==0;
 if($628){var $917=$625;var $916=$626;var $isneg_i_i_i_i_2332=$isneg_i_i_i_i_2;label=266;break;}else{label=166;break;}
 case 166: 
 var $630=($radix_i_i_i_i_1|0)==8;
 if(($radix_i_i_i_i_1|0)==16|($radix_i_i_i_i_1|0)==8){ label=167;break;}else{label=235;break;}
 case 167: 
 var $632=($630?3:4);
 var $633=(((32)/(($632>>>0)))&-1);
 var $634=(Math_imul($632,$633)|0);
 var $635=(($agg_result+128)|0);
 var $636=$agg_result;
 var $637=(($agg_result+130)|0);
 var $_4=$_3;var $block_shift_i_i_i_i_0=$634;var $640=1;var $639=0;label=168;break;
 case 168: 
 var $639;
 var $640;
 var $block_shift_i_i_i_i_0;
 var $_4;
 var $641=HEAP8[($_4)];
 var $642=(($641<<24)>>24)==0;
 if($642){var $917=$625;var $916=$626;var $isneg_i_i_i_i_2332=$isneg_i_i_i_i_2;label=266;break;}else{var $storemerge1_i_i_i_i=0;var $_5=$_4;var $block_i_i_i_i_0=0;var $644=$641;label=169;break;}
 case 169: 
 var $644;
 var $block_i_i_i_i_0;
 var $_5;
 var $storemerge1_i_i_i_i;
 var $645=($storemerge1_i_i_i_i>>>0)<($633>>>0);
 if($645){label=170;break;}else{var $_6=$_5;var $block_shift_i_i_i_i_1=$block_shift_i_i_i_i_0;var $block_i_i_i_i_1=$block_i_i_i_i_0;label=201;break;}
 case 170: 
 var $647=(($644<<24)>>24)>47;
 if($647){label=171;break;}else{label=179;break;}
 case 171: 
 var $649=(($644<<24)>>24)<58;
 if($649){label=172;break;}else{label=173;break;}
 case 172: 
 var $651=(($644<<24)>>24);
 var $652=((($651)-(48))|0);
 var $storemerge4_i_i_i_i=$652;label=178;break;
 case 173: 
 var $654=(($644<<24)>>24)>96;
 if($654){label=174;break;}else{label=176;break;}
 case 174: 
 var $656=(($644<<24)>>24)<103;
 if($656){label=175;break;}else{label=179;break;}
 case 175: 
 var $658=(($644<<24)>>24);
 var $659=((($658)-(87))|0);
 var $storemerge4_i_i_i_i=$659;label=178;break;
 case 176: 
 var $661=(($644<<24)>>24)>64;
 var $662=(($644<<24)>>24)<71;
 var $or_cond336=$661&$662;
 if($or_cond336){label=177;break;}else{label=179;break;}
 case 177: 
 var $664=(($644<<24)>>24);
 var $665=((($664)-(55))|0);
 var $storemerge4_i_i_i_i=$665;label=178;break;
 case 178: 
 var $storemerge4_i_i_i_i;
 var $667=($storemerge4_i_i_i_i>>>0)<($radix_i_i_i_i_1>>>0);
 if($667){label=199;break;}else{label=179;break;}
 case 179: 
 var $668=(function() { try { __THREW__ = 0; return _strlen(1152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=180;break; } else { label=128;break; }
 case 180: 
 var $669=((($668)+(1))|0);
 var $670=((($668)+(13))|0);
 var $671=($670|0)==0;
 var $_size_i_i_i_i_i=($671?1:$670);
 label=181;break;
 case 181: 
 var $673=_malloc($_size_i_i_i_i_i);
 var $674=($673|0)==0;
 if($674){label=182;break;}else{label=191;break;}
 case 182: 
 var $676=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $677=($676|0)==0;
 if($677){label=189;break;}else{label=183;break;}
 case 183: 
 var $679=$676;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$679]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=181;break; } else { label=184;break; }
 case 184: 
 var $lpad_loopexit_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i$0;label=186;break;
 case 185: 
 var $lpad_nonloopexit_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i$0;label=186;break;
 case 186: 
 var $lpad_phi_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i$1;
 var $681=$lpad_phi_i_i_i_i_i$1;
 var $682=($681|0)<0;
 if($682){label=187;break;}else{var $eh_lpad_body_i_i_i_i$1=$lpad_phi_i_i_i_i_i$1;var $eh_lpad_body_i_i_i_i$0=$lpad_phi_i_i_i_i_i$0;label=193;break;}
 case 187: 
 var $684=$lpad_phi_i_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($684) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=188;break; } else { label=192;break; }
 case 188: 
 throw "Reached an unreachable!";
 case 189: 
 var $686=___cxa_allocate_exception(4);
 var $687=$686;
 HEAP32[(($687)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($686,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=190;break; } else { label=185;break; }
 case 190: 
 throw "Reached an unreachable!";
 case 191: 
 var $689=$673;
 var $690=(($673+4)|0);
 var $691=$690;
 HEAP32[(($691)>>2)]=$668;
 HEAP32[(($689)>>2)]=$668;
 var $692=(($673+12)|0);
 var $693=(($673+8)|0);
 var $694=$693;
 HEAP32[(($694)>>2)]=0;
 assert($669 % 1 === 0);(_memcpy($692, 1152, $669)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt13runtime_errorEEvRKT_PKcS7_i($692,4880,200,1374) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { label=197;break; }
 case 192: 
 var $696$0 = ___cxa_find_matching_catch(-1, -1); var $696$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i$1=$696$1;var $eh_lpad_body_i_i_i_i$0=$696$0;label=193;break;
 case 193: 
 var $eh_lpad_body_i_i_i_i$0;
 var $eh_lpad_body_i_i_i_i$1;
 var $697=$eh_lpad_body_i_i_i_i$1;
 var $698=($697|0)<0;
 if($698){label=194;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body_i_i_i_i$1;var $eh_lpad_body_i$0=$eh_lpad_body_i_i_i_i$0;label=129;break;}
 case 194: 
 var $700=$eh_lpad_body_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($700) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { label=128;break; }
 case 195: 
 throw "Reached an unreachable!";
 case 196: 
 throw "Reached an unreachable!";
 case 197: 
 var $703$0 = ___cxa_find_matching_catch(-1, -1); var $703$1 = tempRet0;
 var $704=$703$0;
 var $705=$703$1;
 var $706=(($673+8)|0);
 var $707=$706;
 var $708=(tempValue=HEAP32[(($707)>>2)],HEAP32[(($707)>>2)]=tempValue+-1,tempValue);
 var $709=((($708)-(1))|0);
 var $710=($709|0)>=0;
 var $711=($673|0)==0;
 var $or_cond337=$710|$711;
 if($or_cond337){var $_0303=$704;var $_0304=$705;label=271;break;}else{label=198;break;}
 case 198: 
 _free($673);
 var $_0303=$704;var $_0304=$705;label=271;break;
 case 199: 
 var $713=$block_i_i_i_i_0<<$632;
 var $714=$713|$storemerge4_i_i_i_i;
 var $715=(($_5+1)|0);
 var $716=HEAP8[($715)];
 var $717=(($716<<24)>>24)==0;
 var $718=((($storemerge1_i_i_i_i)+(1))|0);
 if($717){label=200;break;}else{var $storemerge1_i_i_i_i=$718;var $_5=$715;var $block_i_i_i_i_0=$714;var $644=$716;label=169;break;}
 case 200: 
 var $720=(Math_imul($718,$632)|0);
 var $_6=$715;var $block_shift_i_i_i_i_1=$720;var $block_i_i_i_i_1=$714;label=201;break;
 case 201: 
 var $block_i_i_i_i_1;
 var $block_shift_i_i_i_i_1;
 var $_6;
 var $721=($block_shift_i_i_i_i_1|0)==0;
 if($721){var $841=$640;label=234;break;}else{label=202;break;}
 case 202: 
 var $723=$block_shift_i_i_i_i_1>>>5;
 var $724=$block_shift_i_i_i_i_1&31;
 var $725=($640&65535);
 var $726=(($640<<16)>>16)==1;
 var $727=($639|0)==0;
 var $or_cond338=$726&$727;
 if($or_cond338){var $841=1;label=234;break;}else{label=203;break;}
 case 203: 
 var $729=($724|0)==0;
 if($729){var $rs_i_i_i_i_i_0=$725;label=205;break;}else{label=204;break;}
 case 204: 
 var $731=((($725)-(1))|0);
 var $732=(($636+($731<<2))|0);
 var $733=HEAP32[(($732)>>2)];
 var $734=(((32)-($724))|0);
 var $735=$733>>>($734>>>0);
 var $736=($735|0)==0;
 var $737=((($725)+(1))|0);
 var $_339=($736?$725:$737);
 var $rs_i_i_i_i_i_0=$_339;label=205;break;
 case 205: 
 var $rs_i_i_i_i_i_0;
 var $uadd$0=_llvm_uadd_with_overflow_i32($rs_i_i_i_i_i_0,$723);
 var $uadd$1=tempRet0;
 var $738=$uadd$0;
 var $739=($738>>>0)>32;
 var $extract_t=(($738)&65535);
 var $_extract_t=($739?32:$extract_t);
 HEAP16[(($635)>>1)]=$_extract_t;
 var $740=($_extract_t&65535);
 var $741=($740|0)==($738|0);
 var $742=$uadd$1;
 if($742){label=206;break;}else{label=207;break;}
 case 206: 
 HEAP16[(($635)>>1)]=1;
 HEAP32[(($636)>>2)]=0;
 HEAP8[($637)]=0;
 var $841=1;label=234;break;
 case 207: 
 var $745=((($738)-($740))|0);
 if($729){label=208;break;}else{label=209;break;}
 case 208: 
 var $746=((($725)-(1))|0);
 var $747=((($738)-(1))|0);
 var $i_i_i_i_i_i_2=$745;label=223;break;
 case 209: 
 if($741){label=211;break;}else{label=210;break;}
 case 210: 
 var $_pre327=((($725)-(1))|0);
 var $rs_i_i_i_i_i_1_ph=$738;var $i_i_i_i_i_i_0_ph=$745;var $_pre_phi=$_pre327;label=216;break;
 case 211: 
 var $750=((($725)+($723))|0);
 var $751=($738>>>0)>($750>>>0);
 var $752=((($725)-(1))|0);
 var $753=((($752)-($745))|0);
 var $754=(($636+($753<<2))|0);
 var $755=HEAP32[(($754)>>2)];
 if($751){label=212;break;}else{label=213;break;}
 case 212: 
 var $757=(((32)-($724))|0);
 var $758=$755>>>($757>>>0);
 var $759=((($738)-(1))|0);
 var $760=((($759)-($745))|0);
 var $761=(($636+($760<<2))|0);
 HEAP32[(($761)>>2)]=$758;
 var $rs_i_i_i_i_i_1_ph=$759;var $i_i_i_i_i_i_0_ph=$745;var $_pre_phi=$752;label=216;break;
 case 213: 
 var $763=$755<<$724;
 var $764=((($738)-(1))|0);
 var $765=((($764)-($745))|0);
 var $766=(($636+($765<<2))|0);
 HEAP32[(($766)>>2)]=$763;
 var $767=($640&65535)>1;
 if($767){label=214;break;}else{label=215;break;}
 case 214: 
 var $769=((($725)-(2))|0);
 var $770=((($769)-($745))|0);
 var $771=(($636+($770<<2))|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=(((32)-($724))|0);
 var $774=$772>>>($773>>>0);
 var $775=$763|$774;
 HEAP32[(($766)>>2)]=$775;
 label=215;break;
 case 215: 
 var $777=((($745)+(1))|0);
 var $rs_i_i_i_i_i_1_ph=$738;var $i_i_i_i_i_i_0_ph=$777;var $_pre_phi=$752;label=216;break;
 case 216: 
 var $_pre_phi;
 var $i_i_i_i_i_i_0_ph;
 var $rs_i_i_i_i_i_1_ph;
 var $778=((($rs_i_i_i_i_i_1_ph)-(1))|0);
 var $779=((($725)-(2))|0);
 var $780=(((32)-($724))|0);
 var $i_i_i_i_i_i_0=$i_i_i_i_i_i_0_ph;label=217;break;
 case 217: 
 var $i_i_i_i_i_i_0;
 var $782=((($i_i_i_i_i_i_0)+(1))|0);
 var $783=($725>>>0)>($782>>>0);
 if($783){label=218;break;}else{label=219;break;}
 case 218: 
 var $785=((($_pre_phi)-($i_i_i_i_i_i_0))|0);
 var $786=(($636+($785<<2))|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=$787<<$724;
 var $789=((($778)-($i_i_i_i_i_i_0))|0);
 var $790=(($636+($789<<2))|0);
 HEAP32[(($790)>>2)]=$788;
 var $791=((($779)-($i_i_i_i_i_i_0))|0);
 var $792=(($636+($791<<2))|0);
 var $793=HEAP32[(($792)>>2)];
 var $794=$793>>>($780>>>0);
 var $795=$788|$794;
 HEAP32[(($790)>>2)]=$795;
 var $i_i_i_i_i_i_0=$782;label=217;break;
 case 219: 
 var $797=($725>>>0)<($782>>>0);
 if($797){var $i_i_i_i_i_i_1=$i_i_i_i_i_i_0;label=221;break;}else{label=220;break;}
 case 220: 
 var $799=((($_pre_phi)-($i_i_i_i_i_i_0))|0);
 var $800=(($636+($799<<2))|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=$801<<$724;
 var $803=((($778)-($i_i_i_i_i_i_0))|0);
 var $804=(($636+($803<<2))|0);
 HEAP32[(($804)>>2)]=$802;
 var $i_i_i_i_i_i_1=$782;label=221;break;
 case 221: 
 var $i_i_i_i_i_i_1;
 var $805=($i_i_i_i_i_i_1>>>0)<($rs_i_i_i_i_i_1_ph>>>0);
 if($805){label=222;break;}else{label=227;break;}
 case 222: 
 var $807=((($778)-($i_i_i_i_i_i_1))|0);
 var $808=(($636+($807<<2))|0);
 HEAP32[(($808)>>2)]=0;
 var $809=((($i_i_i_i_i_i_1)+(1))|0);
 var $i_i_i_i_i_i_1=$809;label=221;break;
 case 223: 
 var $i_i_i_i_i_i_2;
 var $811=($i_i_i_i_i_i_2>>>0)<($725>>>0);
 if($811){label=224;break;}else{var $i_i_i_i_i_i_3=$i_i_i_i_i_i_2;label=225;break;}
 case 224: 
 var $813=((($746)-($i_i_i_i_i_i_2))|0);
 var $814=(($636+($813<<2))|0);
 var $815=HEAP32[(($814)>>2)];
 var $816=((($747)-($i_i_i_i_i_i_2))|0);
 var $817=(($636+($816<<2))|0);
 HEAP32[(($817)>>2)]=$815;
 var $818=((($i_i_i_i_i_i_2)+(1))|0);
 var $i_i_i_i_i_i_2=$818;label=223;break;
 case 225: 
 var $i_i_i_i_i_i_3;
 var $819=($i_i_i_i_i_i_3>>>0)<($738>>>0);
 if($819){label=226;break;}else{label=227;break;}
 case 226: 
 var $821=((($747)-($i_i_i_i_i_i_3))|0);
 var $822=(($636+($821<<2))|0);
 HEAP32[(($822)>>2)]=0;
 var $823=((($i_i_i_i_i_i_3)+(1))|0);
 var $i_i_i_i_i_i_3=$823;label=225;break;
 case 227: 
 var $_pre=HEAP16[(($635)>>1)];
 var $825=$_pre;label=228;break;
 case 228: 
 var $825;
 var $826=(($825<<16)>>16)==1;
 if($826){var $837=1;label=232;break;}else{label=229;break;}
 case 229: 
 var $828=($825&65535);
 var $829=((($828)-(1))|0);
 var $830=(($636+($829<<2))|0);
 var $831=HEAP32[(($830)>>2)];
 var $832=($831|0)==0;
 if($832){label=230;break;}else{var $835=$825;label=231;break;}
 case 230: 
 var $834=((($825)-(1))&65535);
 HEAP16[(($635)>>1)]=$834;
 var $825=$834;label=228;break;
 case 231: 
 var $835;
 var $836=(($835<<16)>>16)==1;
 if($836){var $837=$835;label=232;break;}else{var $841=$835;label=234;break;}
 case 232: 
 var $837;
 var $838=HEAP32[(($636)>>2)];
 var $839=($838|0)==0;
 if($839){label=233;break;}else{var $841=$837;label=234;break;}
 case 233: 
 HEAP8[($637)]=0;
 var $841=$837;label=234;break;
 case 234: 
 var $841;
 var $842=HEAP32[(($48)>>2)];
 var $843=$842|$block_i_i_i_i_1;
 HEAP32[(($48)>>2)]=$843;
 var $_4=$_6;var $block_shift_i_i_i_i_0=$block_shift_i_i_i_i_1;var $640=$841;var $639=$843;label=168;break;
 case 235: 
 HEAP32[(($block_mult_i_i_i_i)>>2)]=1000000000;
 var $_7=$_3;label=236;break;
 case 236: 
 var $_7;
 var $845=HEAP8[($_7)];
 var $846=(($845<<24)>>24)==0;
 if($846){var $917=$625;var $916=$626;var $isneg_i_i_i_i_2332=$isneg_i_i_i_i_2;label=266;break;}else{label=237;break;}
 case 237: 
 HEAP32[(($block1_i_i_i_i)>>2)]=0;
 var $storemerge_i_i_i_i=0;var $_8=$_7;var $849=0;label=238;break;
 case 238: 
 var $849;
 var $_8;
 var $storemerge_i_i_i_i;
 var $850=($storemerge_i_i_i_i>>>0)<9;
 if($850){label=239;break;}else{var $_9=$_8;label=263;break;}
 case 239: 
 var $852=HEAP8[($_8)];
 var $853=(($852<<24)>>24)>47;
 var $854=(($852<<24)>>24)<58;
 var $or_cond340=$853&$854;
 if($or_cond340){label=240;break;}else{label=241;break;}
 case 240: 
 var $856=(($852<<24)>>24);
 var $857=((($856)-(48))|0);
 var $858=((($849)+($857))|0);
 HEAP32[(($block1_i_i_i_i)>>2)]=$858;
 var $859=(($_8+1)|0);
 var $860=HEAP8[($859)];
 var $861=(($860<<24)>>24)==0;
 if($861){label=261;break;}else{label=262;break;}
 case 241: 
 var $863=(function() { try { __THREW__ = 0; return _strlen(1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=242;break; } else { label=128;break; }
 case 242: 
 var $864=((($863)+(1))|0);
 var $865=((($863)+(13))|0);
 var $866=($865|0)==0;
 var $_size_i7_i_i_i_i=($866?1:$865);
 label=243;break;
 case 243: 
 var $868=_malloc($_size_i7_i_i_i_i);
 var $869=($868|0)==0;
 if($869){label=244;break;}else{label=253;break;}
 case 244: 
 var $871=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $872=($871|0)==0;
 if($872){label=251;break;}else{label=245;break;}
 case 245: 
 var $874=$871;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$874]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=243;break; } else { label=246;break; }
 case 246: 
 var $lpad_loopexit_i8_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i8_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i12_i_i_i_i$1=$lpad_loopexit_i8_i_i_i_i$1;var $lpad_phi_i12_i_i_i_i$0=$lpad_loopexit_i8_i_i_i_i$0;label=248;break;
 case 247: 
 var $lpad_nonloopexit_i10_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i10_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i12_i_i_i_i$1=$lpad_nonloopexit_i10_i_i_i_i$1;var $lpad_phi_i12_i_i_i_i$0=$lpad_nonloopexit_i10_i_i_i_i$0;label=248;break;
 case 248: 
 var $lpad_phi_i12_i_i_i_i$0;
 var $lpad_phi_i12_i_i_i_i$1;
 var $876=$lpad_phi_i12_i_i_i_i$1;
 var $877=($876|0)<0;
 if($877){label=249;break;}else{var $eh_lpad_body15_i_i_i_i$1=$lpad_phi_i12_i_i_i_i$1;var $eh_lpad_body15_i_i_i_i$0=$lpad_phi_i12_i_i_i_i$0;label=255;break;}
 case 249: 
 var $879=$lpad_phi_i12_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($879) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=250;break; } else { label=254;break; }
 case 250: 
 throw "Reached an unreachable!";
 case 251: 
 var $881=___cxa_allocate_exception(4);
 var $882=$881;
 HEAP32[(($882)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($881,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=247;break; }
 case 252: 
 throw "Reached an unreachable!";
 case 253: 
 var $884=$868;
 var $885=(($868+4)|0);
 var $886=$885;
 HEAP32[(($886)>>2)]=$863;
 HEAP32[(($884)>>2)]=$863;
 var $887=(($868+12)|0);
 var $888=(($868+8)|0);
 var $889=$888;
 HEAP32[(($889)>>2)]=0;
 assert($864 % 1 === 0);(_memcpy($887, 1104, $864)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt13runtime_errorEEvRKT_PKcS7_i($887,4880,200,1403) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=258;break; } else { label=259;break; }
 case 254: 
 var $891$0 = ___cxa_find_matching_catch(-1, -1); var $891$1 = tempRet0;
 var $eh_lpad_body15_i_i_i_i$1=$891$1;var $eh_lpad_body15_i_i_i_i$0=$891$0;label=255;break;
 case 255: 
 var $eh_lpad_body15_i_i_i_i$0;
 var $eh_lpad_body15_i_i_i_i$1;
 var $892=$eh_lpad_body15_i_i_i_i$1;
 var $893=($892|0)<0;
 if($893){label=256;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body15_i_i_i_i$1;var $eh_lpad_body_i$0=$eh_lpad_body15_i_i_i_i$0;label=129;break;}
 case 256: 
 var $895=$eh_lpad_body15_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($895) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=257;break; } else { label=128;break; }
 case 257: 
 throw "Reached an unreachable!";
 case 258: 
 throw "Reached an unreachable!";
 case 259: 
 var $898$0 = ___cxa_find_matching_catch(-1, -1); var $898$1 = tempRet0;
 var $899=$898$0;
 var $900=$898$1;
 var $901=(($868+8)|0);
 var $902=$901;
 var $903=(tempValue=HEAP32[(($902)>>2)],HEAP32[(($902)>>2)]=tempValue+-1,tempValue);
 var $904=((($903)-(1))|0);
 var $905=($904|0)>=0;
 var $906=($868|0)==0;
 var $or_cond341=$905|$906;
 if($or_cond341){var $_0303=$899;var $_0304=$900;label=271;break;}else{label=260;break;}
 case 260: 
 _free($868);
 var $_0303=$899;var $_0304=$900;label=271;break;
 case 261: 
 var $907=((5800+($storemerge_i_i_i_i<<2))|0);
 var $908=HEAP32[(($907)>>2)];
 HEAP32[(($block_mult_i_i_i_i)>>2)]=$908;
 var $_9=$859;label=263;break;
 case 262: 
 var $910=((($storemerge_i_i_i_i)+(1))|0);
 var $phitmp=((($858)*(10))&-1);
 var $storemerge_i_i_i_i=$910;var $_8=$859;var $849=$phitmp;label=238;break;
 case 263: 
 var $_9;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($582,$582,$block_mult_i_i_i_i);
 var $911=HEAP8[($50)];
 var $912=$911&1;
 var $913=(($912<<24)>>24)==0;
 if($913){label=265;break;}else{label=264;break;}
 case 264: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($582,$582,$block1_i_i_i_i);
 var $_7=$_9;label=236;break;
 case 265: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($582,$582,$block1_i_i_i_i);
 var $_7=$_9;label=236;break;
 case 266: 
 var $isneg_i_i_i_i_2332;
 var $916;
 var $917;
 var $918=$isneg_i_i_i_i_2332&1;
 var $919=(($918<<24)>>24)==0;
 if($919){var $935=$916;var $934=$917;label=272;break;}else{label=267;break;}
 case 267: 
 var $921=HEAP8[($50)];
 var $922=$921&1;
 var $923=$922^1;
 HEAP8[($50)]=$923;
 var $924=(($922<<24)>>24)==0;
 if($924){label=268;break;}else{var $935=$916;var $934=$917;label=272;break;}
 case 268: 
 var $926=HEAP16[(($49)>>1)];
 var $927=(($926<<16)>>16)==1;
 if($927){label=269;break;}else{var $935=$916;var $934=$917;label=272;break;}
 case 269: 
 var $929=HEAP32[(($48)>>2)];
 var $930=($929|0)==0;
 if($930){label=270;break;}else{var $935=$916;var $934=$917;label=272;break;}
 case 270: 
 HEAP8[($50)]=0;
 var $935=$916;var $934=$917;label=272;break;
 case 271: 
 var $_0304;
 var $_0303;
 var $932$0=$_0303;
 var $932$1=0;
 var $933$0=$932$0;
 var $933$1=$_0304;
 var $eh_lpad_body_i$1=$933$1;var $eh_lpad_body_i$0=$933$0;label=129;break;
 case 272: 
 var $934;
 var $935;
 var $936=HEAP8[($122)];
 var $937=$936&1;
 var $938=(($937<<24)>>24)==0;
 if($938){label=275;break;}else{label=273;break;}
 case 273: 
 var $940=(($s_i+8)|0);
 var $941=HEAP32[(($940)>>2)];
 var $942=($941|0)==0;
 if($942){label=275;break;}else{label=274;break;}
 case 274: 
 _free($941);
 label=275;break;
 case 275: 
 HEAP32[(($52)>>2)]=7588;
 var $945=(($57)|0);
 HEAP32[(($945)>>2)]=7628;
 HEAP32[(($53)>>2)]=7608;
 HEAP32[(($85)>>2)]=7768;
 var $946=$89;
 var $947=HEAP8[($946)];
 var $948=$947&1;
 var $949=(($948<<24)>>24)==0;
 if($949){label=278;break;}else{label=276;break;}
 case 276: 
 var $951=(($sin+52)|0);
 var $952=HEAP32[(($951)>>2)];
 var $953=($952|0)==0;
 if($953){label=278;break;}else{label=277;break;}
 case 277: 
 _free($952);
 label=278;break;
 case 278: 
 HEAP32[(($85)>>2)]=7912;
 var $955=(($sin+16)|0);
 var $956=HEAP32[(($955)>>2)];
 var $957=(($956+4)|0);
 var $958=(tempValue=HEAP32[(($957)>>2)],HEAP32[(($957)>>2)]=tempValue+-1,tempValue);
 var $959=($958|0)==0;
 if($959){label=279;break;}else{label=280;break;}
 case 279: 
 var $961=(($956)|0);
 var $962=$956;
 var $963=HEAP32[(($962)>>2)];
 var $964=(($963+8)|0);
 var $965=HEAP32[(($964)>>2)];
 FUNCTION_TABLE[$965]($961);
 label=280;break;
 case 280: 
 var $966=(($sin+64)|0);
 __ZNSt3__18ios_baseD2Ev($966);
 var $967=$input;
 var $968=HEAP8[($967)];
 var $969=$968&1;
 var $970=(($969<<24)>>24)==0;
 if($970){label=283;break;}else{label=281;break;}
 case 281: 
 var $972=(($input+8)|0);
 var $973=HEAP32[(($972)>>2)];
 var $974=($973|0)==0;
 if($974){label=283;break;}else{label=282;break;}
 case 282: 
 _free($973);
 label=283;break;
 case 283: 
 STACKTOP=sp;return;
 case 284: 
 var $976=(($sin+64)|0);
 __ZNSt3__18ios_baseD2Ev($976);
 var $_0=$101;var $_0301=$100;label=291;break;
 case 285: 
 HEAP32[(($52)>>2)]=7588;
 var $977=(($57)|0);
 HEAP32[(($977)>>2)]=7628;
 HEAP32[(($53)>>2)]=7608;
 HEAP32[(($85)>>2)]=7768;
 var $978=$89;
 var $979=HEAP8[($978)];
 var $980=$979&1;
 var $981=(($980<<24)>>24)==0;
 if($981){label=288;break;}else{label=286;break;}
 case 286: 
 var $983=(($sin+52)|0);
 var $984=HEAP32[(($983)>>2)];
 var $985=($984|0)==0;
 if($985){label=288;break;}else{label=287;break;}
 case 287: 
 _free($984);
 label=288;break;
 case 288: 
 HEAP32[(($85)>>2)]=7912;
 var $987=(($sin+16)|0);
 var $988=HEAP32[(($987)>>2)];
 var $989=(($988+4)|0);
 var $990=(tempValue=HEAP32[(($989)>>2)],HEAP32[(($989)>>2)]=tempValue+-1,tempValue);
 var $991=($990|0)==0;
 if($991){label=289;break;}else{label=290;break;}
 case 289: 
 var $993=(($988)|0);
 var $994=$988;
 var $995=HEAP32[(($994)>>2)];
 var $996=(($995+8)|0);
 var $997=HEAP32[(($996)>>2)];
 FUNCTION_TABLE[$997]($993);
 label=290;break;
 case 290: 
 var $998=(($sin+64)|0);
 __ZNSt3__18ios_baseD2Ev($998);
 var $_0=$520;var $_0301=$519;label=291;break;
 case 291: 
 var $_0301;
 var $_0;
 var $1000=$input;
 var $1001=HEAP8[($1000)];
 var $1002=$1001&1;
 var $1003=(($1002<<24)>>24)==0;
 if($1003){label=294;break;}else{label=292;break;}
 case 292: 
 var $1005=(($input+8)|0);
 var $1006=HEAP32[(($1005)>>2)];
 var $1007=($1006|0)==0;
 if($1007){label=294;break;}else{label=293;break;}
 case 293: 
 _free($1006);
 label=294;break;
 case 294: 
 var $1009$0=$_0301;
 var $1009$1=0;
 var $1010$0=$1009$0;
 var $1010$1=$_0;
 ___resumeException($1010$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7588;
 var $2=(($this+64)|0);
 HEAP32[(($2)>>2)]=7628;
 var $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=7608;
 var $4=(($this+12)|0);
 HEAP32[(($4)>>2)]=7768;
 var $5=(($this+44)|0);
 var $6=$5;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=2;break;}
 case 2: 
 var $11=(($this+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 _free($12);
 label=4;break;
 case 4: 
 HEAP32[(($4)>>2)]=7912;
 var $15=(($this+16)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+4)|0);
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=($18|0)==0;
 if($19){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=(($16)|0);
 var $22=$16;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+8)|0);
 var $25=HEAP32[(($24)>>2)];
 FUNCTION_TABLE[$25]($21);
 label=6;break;
 case 6: 
 var $26=(($this+64)|0);
 __ZNSt3__18ios_baseD2Ev($26);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z6modPowN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEES8_S8_($agg_result,$M,$K,$P){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1360)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $result_i6=sp;
 var $result_i4=(sp)+(136);
 var $result_i2=(sp)+(272);
 var $vv_i_i_i=(sp)+(408);
 var $result_i1=(sp)+(544);
 var $result_i=(sp)+(680);
 var $_sroa_09=(sp)+(816);
 var $0=(sp)+(952);
 var $_sroa_0=(sp)+(1088);
 var $1=(sp)+(1224);
 var $2=$agg_result;
 HEAP32[(($2)>>2)]=1;
 var $3=(($agg_result+128)|0);
 HEAP16[(($3)>>1)]=1;
 var $4=(($agg_result+130)|0);
 HEAP8[($4)]=0;
 var $5=(($K)|0);
 var $6=$result_i1;
 var $7=$result_i1;
 var $8=(($result_i1+128)|0);
 var $9=(($result_i1+130)|0);
 var $10=(($result_i1)|0);
 var $11=$vv_i_i_i;
 var $12=$vv_i_i_i;
 var $13=(($vv_i_i_i+128)|0);
 var $14=(($vv_i_i_i+130)|0);
 var $_sroa_0105_0__cast=$result_i1;
 var $15=$result_i2;
 var $16=$result_i2;
 var $17=(($result_i2+128)|0);
 var $18=(($result_i2+130)|0);
 var $19=(($result_i2)|0);
 var $20=(($agg_result)|0);
 var $21=(($M)|0);
 var $22=$0;
 var $23=$result_i4;
 var $24=$result_i4;
 var $25=(($result_i4+128)|0);
 var $26=(($result_i4+130)|0);
 var $27=(($result_i4)|0);
 var $28=(($0)|0);
 var $29=(($P)|0);
 var $30=(($0+130)|0);
 var $31=(($result_i4+130)|0);
 var $_sroa_09_0_cast11=$_sroa_09;
 var $_sroa_09_0__cast=$agg_result;
 var $32=(($result_i4+128)|0);
 var $33=$result_i4;
 var $34=$result_i6;
 var $35=$result_i6;
 var $36=(($result_i6+128)|0);
 var $37=(($result_i6+130)|0);
 var $38=(($result_i6)|0);
 var $39=$1;
 var $40=$result_i;
 var $41=$result_i;
 var $42=(($result_i+128)|0);
 var $43=(($result_i+130)|0);
 var $44=(($result_i)|0);
 var $45=(($1)|0);
 var $46=(($1+130)|0);
 var $47=(($result_i+130)|0);
 var $_sroa_0_0_cast8=$_sroa_0;
 var $_sroa_0_0__cast=$M;
 var $48=(($result_i+128)|0);
 var $49=$result_i;
 var $50=(($K+128)|0);
 var $51=(($result_i1+128)|0);
 var $52=$K;
 var $53=$K;
 var $54=$result_i1;
 var $55=$K;
 var $56=(($K+130)|0);
 var $57=(($result_i1+130)|0);
 label=2;break;
 case 2: 
 var $59=__ZN5boost14multiprecision8backends7eval_gtILj1024ELj1024ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_ELNS0_16cpp_integer_typeE0EXT1_ET2_EEEE5valueEbE4typeERKNS5_IXT_EXT0_ELS6_1EXT1_ES7_EEl($5,0);
 if($59){label=3;break;}else{label=14;break;}
 case 3: 
 HEAP32[(($7)>>2)]=0;
 HEAP16[(($8)>>1)]=1;
 HEAP8[($9)]=0;
 HEAP32[(($12)>>2)]=1;
 HEAP16[(($13)>>1)]=1;
 HEAP8[($14)]=0;
 var $60=HEAP16[(($50)>>1)];
 var $61=($60&65535);
 var $62=($60&65535)>32;
 var $_=($62?32:$60);
 HEAP16[(($51)>>1)]=$_;
 var $63=(($52+($61<<2))|0);
 var $64=$63;
 var $65=((($64)-($53))|0);
 assert($65 % 1 === 0);(_memcpy($54, $55, $65)|0);
 var $66=HEAP8[($56)];
 var $67=$66&1;
 HEAP8[($57)]=$67;
 __ZN5boost14multiprecision8backends16eval_bitwise_andILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_($10,$vv_i_i_i);
 var $_sroa_0105_0_copyload=HEAP32[(($_sroa_0105_0__cast)>>2)];
 var $_sroa_2_128_copyload=HEAP16[(($8)>>1)];
 var $_sroa_3_130_copyload=HEAP8[($9)];
 var $68=$_sroa_3_130_copyload&1;
 var $69=(($68<<24)>>24)==0;
 var $70=(($_sroa_2_128_copyload<<16)>>16)==1;
 var $or_cond=$69&$70;
 var $71=($_sroa_0105_0_copyload|0)==1;
 var $or_cond110=$or_cond&$71;
 if($or_cond110){label=4;break;}else{label=9;break;}
 case 4: 
 HEAP32[(($16)>>2)]=0;
 HEAP16[(($17)>>1)]=1;
 HEAP8[($18)]=0;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($19,$20,$21);
 assert(136 % 1 === 0);(_memcpy($22, $15, 136)|0);
 HEAP32[(($24)>>2)]=0;
 HEAP16[(($25)>>1)]=1;
 HEAP8[($26)]=0;
 var $73=HEAP8[($30)];
 var $74=$73&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_(0,$28,$29,$27);
 var $75=(($74<<24)>>24)==0;
 HEAP8[($31)]=$74;
 if($75){label=8;break;}else{label=5;break;}
 case 5: 
 var $77=HEAP16[(($32)>>1)];
 var $78=(($77<<16)>>16)==1;
 if($78){label=6;break;}else{label=8;break;}
 case 6: 
 var $80=HEAP32[(($33)>>2)];
 var $81=($80|0)==0;
 if($81){label=7;break;}else{label=8;break;}
 case 7: 
 HEAP8[($31)]=0;
 label=8;break;
 case 8: 
 assert(136 % 1 === 0);(_memcpy($_sroa_09_0_cast11, $23, 136)|0);
 assert(131 % 1 === 0);(_memcpy($_sroa_09_0__cast, $_sroa_09_0_cast11, 131)|0);
 label=9;break;
 case 9: 
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;
 __ZN5boost14multiprecision8backends16eval_right_shiftILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valueEvE4typeERS8_y($5,$$etemp$0$0,$$etemp$0$1);
 HEAP32[(($35)>>2)]=0;
 HEAP16[(($36)>>1)]=1;
 HEAP8[($37)]=0;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($38,$21,$21);
 assert(136 % 1 === 0);(_memcpy($39, $34, 136)|0);
 HEAP32[(($41)>>2)]=0;
 HEAP16[(($42)>>1)]=1;
 HEAP8[($43)]=0;
 var $83=HEAP8[($46)];
 var $84=$83&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_(0,$45,$29,$44);
 var $85=(($84<<24)>>24)==0;
 HEAP8[($47)]=$84;
 if($85){label=13;break;}else{label=10;break;}
 case 10: 
 var $87=HEAP16[(($48)>>1)];
 var $88=(($87<<16)>>16)==1;
 if($88){label=11;break;}else{label=13;break;}
 case 11: 
 var $90=HEAP32[(($49)>>2)];
 var $91=($90|0)==0;
 if($91){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP8[($47)]=0;
 label=13;break;
 case 13: 
 assert(136 % 1 === 0);(_memcpy($_sroa_0_0_cast8, $40, 136)|0);
 assert(131 % 1 === 0);(_memcpy($_sroa_0_0__cast, $_sroa_0_0_cast8, 131)|0);
 label=2;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z7getRandi($agg_result,$l){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $__s_i=(sp)+(8);
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $ss=(sp)+(40);
 var $num=(sp)+(184);
 var $3=(sp)+(200);
 var $4=(($ss+64)|0);
 var $5=(($ss)|0);
 var $6=(($ss+8)|0);
 HEAP32[(($6)>>2)]=7608;
 var $7=(($ss+12)|0);
 HEAP32[(($5)>>2)]=15484;
 var $8=$ss;
 var $9=$ss;
 var $10=(($ss+64)|0);
 var $11=(($10)|0);
 HEAP32[(($11)>>2)]=15504;
 var $12=(($ss+4)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=HEAP32[(($8)>>2)];
 var $14=((($13)-(12))|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=$7;
 var $_sum30=((($16)+(24))|0);
 var $18=(($9+$_sum30)|0);
 var $19=$18;
 HEAP32[(($19)>>2)]=$17;
 var $_sum31=((($16)+(16))|0);
 var $20=(($9+$_sum31)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=0;
 var $_sum32=((($16)+(20))|0);
 var $22=(($9+$_sum32)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=0;
 var $_sum33=((($16)+(4))|0);
 var $24=(($9+$_sum33)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=4098;
 var $_sum34=((($16)+(12))|0);
 var $26=(($9+$_sum34)|0);
 var $27=$26;
 HEAP32[(($27)>>2)]=0;
 var $_sum35=((($16)+(8))|0);
 var $28=(($9+$_sum35)|0);
 var $29=$28;
 HEAP32[(($29)>>2)]=6;
 var $_sum36=((($16)+(32))|0);
 var $30=(($9+$_sum36)|0);
 var $_sum37=((($16)+(28))|0);
 var $31=(($9+$_sum37)|0);
 _memset($30, 0, 40)|0;
 var $32=$31;
 __ZNSt3__16localeC2Ev($32);
 var $_sum=((($16)+(72))|0);
 var $33=(($9+$_sum)|0);
 var $34=$33;
 HEAP32[(($34)>>2)]=0;
 var $_sum1=((($16)+(76))|0);
 var $35=(($9+$_sum1)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=-1;
 var $37=(($ss+8)|0);
 var $38=$37;
 var $39=$37;
 HEAP32[(($5)>>2)]=7588;
 HEAP32[(($4)>>2)]=7628;
 HEAP32[(($6)>>2)]=7608;
 var $40=(($ss+12)|0);
 var $41=(($40)|0);
 HEAP32[(($41)>>2)]=7912;
 var $42=(($ss+16)|0);
 __ZNSt3__16localeC2Ev($42);
 var $43=(($ss+20)|0);
 var $44=$43;
 HEAP32[(($44)>>2)]=0; HEAP32[((($44)+(4))>>2)]=0; HEAP32[((($44)+(8))>>2)]=0; HEAP32[((($44)+(12))>>2)]=0; HEAP32[((($44)+(16))>>2)]=0; HEAP32[((($44)+(20))>>2)]=0;
 HEAP32[(($41)>>2)]=7768;
 var $45=(($ss+44)|0);
 var $46=$45;
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $48=($storemerge>>>0)<3;
 if($48){label=3;break;}else{label=4;break;}
 case 3: 
 var $50=(($46+($storemerge<<2))|0);
 HEAP32[(($50)>>2)]=0;
 var $51=((($storemerge)+(1))|0);
 var $storemerge=$51;label=2;break;
 case 4: 
 var $52=(($ss+56)|0);
 HEAP32[(($52)>>2)]=0;
 var $53=(($ss+60)|0);
 HEAP32[(($53)>>2)]=24;
 var $54=$2;
 var $storemerge2=0;label=5;break;
 case 5: 
 var $storemerge2;
 var $56=($storemerge2>>>0)<3;
 if($56){label=6;break;}else{label=7;break;}
 case 6: 
 var $58=(($54+($storemerge2<<2))|0);
 HEAP32[(($58)>>2)]=0;
 var $59=((($storemerge2)+(1))|0);
 var $storemerge2=$59;label=5;break;
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($40,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 8: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=$2;
 var $63=HEAP8[($62)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=11;break;}else{label=9;break;}
 case 9: 
 var $67=(($2+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=11;break;}else{label=10;break;}
 case 10: 
 _free($68);
 label=11;break;
 case 11: 
 var $71=$45;
 var $72=HEAP8[($71)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=14;break;}else{label=12;break;}
 case 12: 
 var $76=(($ss+52)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==0;
 if($78){label=14;break;}else{label=13;break;}
 case 13: 
 _free($77);
 label=14;break;
 case 14: 
 HEAP32[(($41)>>2)]=7912;
 var $80=(($ss+16)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+4)|0);
 var $83=(tempValue=HEAP32[(($82)>>2)],HEAP32[(($82)>>2)]=tempValue+-1,tempValue);
 var $84=($83|0)==0;
 if($84){label=15;break;}else{label=16;break;}
 case 15: 
 var $86=(($81)|0);
 var $87=$81;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+8)|0);
 var $90=HEAP32[(($89)>>2)];
 FUNCTION_TABLE[$90]($86);
 label=16;break;
 case 16: 
 var $92=(($ss+64)|0);
 __ZNSt3__18ios_baseD2Ev($92);
 ___resumeException($61$0)
 case 17: 
 var $93=$2;
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=20;break;}else{label=18;break;}
 case 18: 
 var $98=(($2+8)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=20;break;}else{label=19;break;}
 case 19: 
 _free($99);
 label=20;break;
 case 20: 
 var $102=(function() { try { __THREW__ = 0; return _strlen(15600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=44;break; }
 case 21: 
 var $103=($102>>>0)>4294967279;
 if($103){label=22;break;}else{label=24;break;}
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=44;break; }
 case 23: 
 throw "Reached an unreachable!";
 case 24: 
 var $106=($102>>>0)<11;
 if($106){label=25;break;}else{label=26;break;}
 case 25: 
 var $108=$102<<1;
 var $109=(($108)&255);
 var $110=$num;
 var $111=$num;
 HEAP8[($111)]=$109;
 var $112=(($110+1)|0);
 var $__p_0_i=$112;label=38;break;
 case 26: 
 var $113=((($102)+(16))|0);
 var $114=$113&-16;
 var $115=($114|0)==0;
 var $_size_i=($115?1:$114);
 label=27;break;
 case 27: 
 var $117=_malloc($_size_i);
 var $118=($117|0)==0;
 if($118){label=28;break;}else{label=37;break;}
 case 28: 
 var $120=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $121=($120|0)==0;
 if($121){label=35;break;}else{label=29;break;}
 case 29: 
 var $123=$120;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=30;break; }
 case 30: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=32;break;
 case 31: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=32;break;
 case 32: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $125=$lpad_phi_i$1;
 var $126=($125|0)<0;
 if($126){label=33;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=45;break;}
 case 33: 
 var $128=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=44;break; }
 case 34: 
 throw "Reached an unreachable!";
 case 35: 
 var $130=___cxa_allocate_exception(4);
 var $131=$130;
 HEAP32[(($131)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($130,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=31;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $133=(($num+8)|0);
 HEAP32[(($133)>>2)]=$117;
 var $134=$114|1;
 var $135=(($num)|0);
 HEAP32[(($135)>>2)]=$134;
 var $136=(($num+4)|0);
 HEAP32[(($136)>>2)]=$102;
 var $__p_0_i=$117;label=38;break;
 case 38: 
 var $__p_0_i;
 assert($102 % 1 === 0);(_memcpy($__p_0_i, 15600, $102)|0);
 var $138=(($__p_0_i+$102)|0);
 HEAP8[($138)]=0;
 var $139=$37;
 var $140=$0;
 var $141=(($__s_i)|0);
 var $142=$1;
 var $143=(($__s_i+4)|0);
 var $_sroa_0_0__idx_i=(($0)|0);
 var $144=(($1)|0);
 var $storemerge4=0;label=39;break;
 case 39: 
 var $storemerge4;
 var $146=($storemerge4|0)<($l|0);
 if($146){label=40;break;}else{label=82;break;}
 case 40: 
 var $148=(function() { try { __THREW__ = 0; return _rand() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=47;break; }
 case 41: 
 var $149=($storemerge4|0)==0;
 var $storemerge5_in=$148;label=42;break;
 case 42: 
 var $storemerge5_in;
 var $storemerge5=(((($storemerge5_in|0))%(10))&-1);
 var $151=($storemerge5|0)==0;
 var $_not=$151^1;
 var $_not70=$149^1;
 var $brmerge=$_not|$_not70;
 if($brmerge){label=50;break;}else{label=43;break;}
 case 43: 
 var $153=(function() { try { __THREW__ = 0; return _rand() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge5_in=$153;label=42;break; } else { label=46;break; }
 case 44: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1); var $155$1 = tempRet0;
 var $eh_lpad_body$1=$155$1;var $eh_lpad_body$0=$155$0;label=45;break;
 case 45: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $156=$eh_lpad_body$0;
 var $157=$eh_lpad_body$1;
 var $_1=$156;var $_161=$157;label=110;break;
 case 46: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body15$1=$lpad_loopexit$1;var $eh_lpad_body15$0=$lpad_loopexit$0;label=49;break;
 case 47: 
 var $lpad_loopexit63$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit63$1 = tempRet0;
 var $eh_lpad_body15$1=$lpad_loopexit63$1;var $eh_lpad_body15$0=$lpad_loopexit63$0;label=49;break;
 case 48: 
 var $lpad_nonloopexit64$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit64$1 = tempRet0;
 var $eh_lpad_body15$1=$lpad_nonloopexit64$1;var $eh_lpad_body15$0=$lpad_nonloopexit64$0;label=49;break;
 case 49: 
 var $eh_lpad_body15$0;
 var $eh_lpad_body15$1;
 var $158=$eh_lpad_body15$0;
 var $159=$eh_lpad_body15$1;
 var $_0=$158;var $_060=$159;label=107;break;
 case 50: 
 HEAP8[($141)]=0;
 HEAP32[(($143)>>2)]=$139;
 var $160=HEAP32[(($38)>>2)];
 var $161=((($160)-(12))|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $_sum_i_i_i=((($163)+(16))|0);
 var $164=(($39+$_sum_i_i_i)|0);
 var $165=$164;
 var $166=HEAP32[(($165)>>2)];
 var $167=($166|0)==0;
 if($167){label=51;break;}else{label=73;break;}
 case 51: 
 var $_sum9_i_i_i=((($163)+(72))|0);
 var $169=(($39+$_sum9_i_i_i)|0);
 var $170=$169;
 var $171=HEAP32[(($170)>>2)];
 var $172=($171|0)==0;
 if($172){var $175=$163;label=54;break;}else{label=52;break;}
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=68;break; }
 case 53: 
 var $_pre=HEAP32[(($38)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert68=$_phi_trans_insert;
 var $_pre69=HEAP32[(($_phi_trans_insert68)>>2)];
 var $175=$_pre69;label=54;break;
 case 54: 
 var $175;
 HEAP8[($141)]=1;
 var $_sum36_i=((($175)+(28))|0);
 var $176=(($39+$_sum36_i)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+4)|0);
 var $180=(tempValue=HEAP32[(($179)>>2)],HEAP32[(($179)>>2)]=tempValue+1,tempValue);
 var $181=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($178,18936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=71;break; }
 case 55: 
 var $182=$181;
 var $183=(tempValue=HEAP32[(($179)>>2)],HEAP32[(($179)>>2)]=tempValue+-1,tempValue);
 var $184=($183|0)==0;
 if($184){label=56;break;}else{label=57;break;}
 case 56: 
 var $186=(($178)|0);
 var $187=$178;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+8)|0);
 var $190=HEAP32[(($189)>>2)];
 FUNCTION_TABLE[$190]($186);
 label=57;break;
 case 57: 
 var $191=HEAP32[(($38)>>2)];
 var $192=((($191)-(12))|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=(($39+$194)|0);
 var $_sum_i=((($194)+(24))|0);
 var $196=(($39+$_sum_i)|0);
 var $197=$196;
 var $198=HEAP32[(($197)>>2)];
 var $199=$198;
 var $200=$195;
 var $_sum33_i=((($194)+(76))|0);
 var $201=(($39+$_sum33_i)|0);
 var $202=$201;
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==-1;
 var $extract_t40_i=(($203)&255);
 if($204){label=58;break;}else{var $_off0_i=$extract_t40_i;label=65;break;}
 case 58: 
 var $_sum39_i=((($194)+(28))|0);
 var $206=(($39+$_sum39_i)|0);
 var $207=$206;
 var $208=HEAP32[(($207)>>2)];
 var $209=(($208+4)|0);
 var $210=(tempValue=HEAP32[(($209)>>2)],HEAP32[(($209)>>2)]=tempValue+1,tempValue);
 var $211=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($208,19288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=60;break; }
 case 59: 
 var $212=$211;
 var $213=$211;
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+28)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$216]($212,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=60;break; }
 case 60: 
 var $219$0 = ___cxa_find_matching_catch(-1, -1,0); var $219$1 = tempRet0;
 var $220=(tempValue=HEAP32[(($209)>>2)],HEAP32[(($209)>>2)]=tempValue+-1,tempValue);
 var $221=($220|0)==0;
 if($221){label=61;break;}else{var $eh_lpad_body_i$1=$219$1;var $eh_lpad_body_i$0=$219$0;label=70;break;}
 case 61: 
 var $223=(($208)|0);
 var $224=$208;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+8)|0);
 var $227=HEAP32[(($226)>>2)];
 FUNCTION_TABLE[$227]($223);
 var $eh_lpad_body_i$1=$219$1;var $eh_lpad_body_i$0=$219$0;label=70;break;
 case 62: 
 var $228=(tempValue=HEAP32[(($209)>>2)],HEAP32[(($209)>>2)]=tempValue+-1,tempValue);
 var $229=($228|0)==0;
 if($229){label=63;break;}else{label=64;break;}
 case 63: 
 var $231=(($208)|0);
 var $232=$208;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+8)|0);
 var $235=HEAP32[(($234)>>2)];
 FUNCTION_TABLE[$235]($231);
 label=64;break;
 case 64: 
 var $236=(($217<<24)>>24);
 HEAP32[(($202)>>2)]=$236;
 var $_off0_i=$217;label=65;break;
 case 65: 
 var $_off0_i;
 var $237=$181;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+24)|0);
 var $240=HEAP32[(($239)>>2)];
 HEAP32[(($_sroa_0_0__idx_i)>>2)]=$199;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$240]($1,$182,$0,$200,$_off0_i,$storemerge5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=69;break; }
 case 66: 
 var $241=HEAP32[(($144)>>2)];
 var $242=($241|0)==0;
 if($242){label=67;break;}else{label=73;break;}
 case 67: 
 var $244=HEAP32[(($38)>>2)];
 var $245=((($244)-(12))|0);
 var $246=$245;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($39+$247)|0);
 var $249=$248;
 var $_sum34_i=((($247)+(16))|0);
 var $250=(($39+$_sum34_i)|0);
 var $251=$250;
 var $252=HEAP32[(($251)>>2)];
 var $253=$252|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($249,$253) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=69;break; }
 case 68: 
 var $255$0 = ___cxa_find_matching_catch(-1, -1,0); var $255$1 = tempRet0;
 var $256=$255$0;
 var $_1_i=$256;label=75;break;
 case 69: 
 var $258$0 = ___cxa_find_matching_catch(-1, -1,0); var $258$1 = tempRet0;
 var $eh_lpad_body_i$1=$258$1;var $eh_lpad_body_i$0=$258$0;label=70;break;
 case 70: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $259=$eh_lpad_body_i$0;
 var $_0_i=$259;label=74;break;
 case 71: 
 var $261$0 = ___cxa_find_matching_catch(-1, -1,0); var $261$1 = tempRet0;
 var $262=$261$0;
 var $263=(tempValue=HEAP32[(($179)>>2)],HEAP32[(($179)>>2)]=tempValue+-1,tempValue);
 var $264=($263|0)==0;
 if($264){label=72;break;}else{var $_0_i=$262;label=74;break;}
 case 72: 
 var $266=(($178)|0);
 var $267=$178;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+8)|0);
 var $270=HEAP32[(($269)>>2)];
 FUNCTION_TABLE[$270]($266);
 var $_0_i=$262;label=74;break;
 case 73: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i);
 label=81;break;
 case 74: 
 var $_0_i;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i);
 var $_1_i=$_0_i;label=75;break;
 case 75: 
 var $_1_i;
 var $272=___cxa_begin_catch($_1_i);
 var $273=HEAP32[(($38)>>2)];
 var $274=((($273)-(12))|0);
 var $275=$274;
 var $276=HEAP32[(($275)>>2)];
 var $_sum37_i=((($276)+(16))|0);
 var $277=(($39+$_sum37_i)|0);
 var $278=$277;
 var $279=HEAP32[(($278)>>2)];
 var $280=$279|1;
 HEAP32[(($278)>>2)]=$280;
 var $_sum38_i=((($276)+(20))|0);
 var $281=(($39+$_sum38_i)|0);
 var $282=$281;
 var $283=HEAP32[(($282)>>2)];
 var $284=$283&1;
 var $285=($284|0)==0;
 if($285){label=78;break;}else{label=76;break;}
 case 76: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=79;break; }
 case 77: 
 throw "Reached an unreachable!";
 case 78: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=47;break; }
 case 79: 
 var $288$0 = ___cxa_find_matching_catch(-1, -1); var $288$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body15$1=$288$1;var $eh_lpad_body15$0=$288$0;label=49;break; } else { label=80;break; }
 case 80: 
 var $290$0 = ___cxa_find_matching_catch(-1, -1,0); var $290$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 81: 
 var $292=((($storemerge4)+(1))|0);
 var $storemerge4=$292;label=39;break;
 case 82: 
 var $294=HEAP32[(($53)>>2)];
 var $295=$294&16;
 var $296=($295|0)==0;
 if($296){label=86;break;}else{label=83;break;}
 case 83: 
 var $298=HEAP32[(($52)>>2)];
 var $299=(($ss+36)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($298>>>0)<($300>>>0);
 if($301){label=84;break;}else{var $304=$298;label=85;break;}
 case 84: 
 HEAP32[(($52)>>2)]=$300;
 var $304=$300;label=85;break;
 case 85: 
 var $304;
 var $305=(($ss+32)|0);
 var $306=HEAP32[(($305)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($3,$306,$304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=48;break; }
 case 86: 
 var $308=$294&8;
 var $309=($308|0)==0;
 if($309){label=88;break;}else{label=87;break;}
 case 87: 
 var $311=HEAP32[(($43)>>2)];
 var $312=(($ss+28)|0);
 var $313=HEAP32[(($312)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($3,$311,$313) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=48;break; }
 case 88: 
 var $315=$3;
 var $storemerge_i=0;label=89;break;
 case 89: 
 var $storemerge_i;
 var $317=($storemerge_i>>>0)<3;
 if($317){label=90;break;}else{label=91;break;}
 case 90: 
 var $319=(($315+($storemerge_i<<2))|0);
 HEAP32[(($319)>>2)]=0;
 var $320=((($storemerge_i)+(1))|0);
 var $storemerge_i=$320;label=89;break;
 case 91: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=92;break; } else { label=104;break; }
 case 92: 
 var $322=$3;
 var $323=HEAP8[($322)];
 var $324=$323&1;
 var $325=(($324<<24)>>24)==0;
 if($325){label=95;break;}else{label=93;break;}
 case 93: 
 var $327=(($3+8)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($328|0)==0;
 if($329){label=95;break;}else{label=94;break;}
 case 94: 
 _free($328);
 label=95;break;
 case 95: 
 var $331=$num;
 var $332=HEAP8[($331)];
 var $333=$332&1;
 var $334=(($333<<24)>>24)==0;
 if($334){label=98;break;}else{label=96;break;}
 case 96: 
 var $336=(($num+8)|0);
 var $337=HEAP32[(($336)>>2)];
 var $338=($337|0)==0;
 if($338){label=98;break;}else{label=97;break;}
 case 97: 
 _free($337);
 label=98;break;
 case 98: 
 HEAP32[(($5)>>2)]=7588;
 var $340=(($10)|0);
 HEAP32[(($340)>>2)]=7628;
 HEAP32[(($6)>>2)]=7608;
 HEAP32[(($41)>>2)]=7768;
 var $341=$45;
 var $342=HEAP8[($341)];
 var $343=$342&1;
 var $344=(($343<<24)>>24)==0;
 if($344){label=101;break;}else{label=99;break;}
 case 99: 
 var $346=(($ss+52)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=($347|0)==0;
 if($348){label=101;break;}else{label=100;break;}
 case 100: 
 _free($347);
 label=101;break;
 case 101: 
 HEAP32[(($41)>>2)]=7912;
 var $350=(($ss+16)|0);
 var $351=HEAP32[(($350)>>2)];
 var $352=(($351+4)|0);
 var $353=(tempValue=HEAP32[(($352)>>2)],HEAP32[(($352)>>2)]=tempValue+-1,tempValue);
 var $354=($353|0)==0;
 if($354){label=102;break;}else{label=103;break;}
 case 102: 
 var $356=(($351)|0);
 var $357=$351;
 var $358=HEAP32[(($357)>>2)];
 var $359=(($358+8)|0);
 var $360=HEAP32[(($359)>>2)];
 FUNCTION_TABLE[$360]($356);
 label=103;break;
 case 103: 
 var $361=(($ss+64)|0);
 __ZNSt3__18ios_baseD2Ev($361);
 STACKTOP=sp;return;
 case 104: 
 var $363$0 = ___cxa_find_matching_catch(-1, -1); var $363$1 = tempRet0;
 var $364=$363$0;
 var $365=$363$1;
 var $366=$3;
 var $367=HEAP8[($366)];
 var $368=$367&1;
 var $369=(($368<<24)>>24)==0;
 if($369){var $_0=$364;var $_060=$365;label=107;break;}else{label=105;break;}
 case 105: 
 var $371=(($3+8)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=($372|0)==0;
 if($373){var $_0=$364;var $_060=$365;label=107;break;}else{label=106;break;}
 case 106: 
 _free($372);
 var $_0=$364;var $_060=$365;label=107;break;
 case 107: 
 var $_060;
 var $_0;
 var $375=$num;
 var $376=HEAP8[($375)];
 var $377=$376&1;
 var $378=(($377<<24)>>24)==0;
 if($378){var $_1=$_0;var $_161=$_060;label=110;break;}else{label=108;break;}
 case 108: 
 var $380=(($num+8)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==0;
 if($382){var $_1=$_0;var $_161=$_060;label=110;break;}else{label=109;break;}
 case 109: 
 _free($381);
 var $_1=$_0;var $_161=$_060;label=110;break;
 case 110: 
 var $_161;
 var $_1;
 HEAP32[(($5)>>2)]=7588;
 var $384=(($10)|0);
 HEAP32[(($384)>>2)]=7628;
 HEAP32[(($6)>>2)]=7608;
 HEAP32[(($41)>>2)]=7768;
 var $385=$45;
 var $386=HEAP8[($385)];
 var $387=$386&1;
 var $388=(($387<<24)>>24)==0;
 if($388){label=113;break;}else{label=111;break;}
 case 111: 
 var $390=(($ss+52)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=($391|0)==0;
 if($392){label=113;break;}else{label=112;break;}
 case 112: 
 _free($391);
 label=113;break;
 case 113: 
 HEAP32[(($41)>>2)]=7912;
 var $394=(($ss+16)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($395+4)|0);
 var $397=(tempValue=HEAP32[(($396)>>2)],HEAP32[(($396)>>2)]=tempValue+-1,tempValue);
 var $398=($397|0)==0;
 if($398){label=114;break;}else{label=115;break;}
 case 114: 
 var $400=(($395)|0);
 var $401=$395;
 var $402=HEAP32[(($401)>>2)];
 var $403=(($402+8)|0);
 var $404=HEAP32[(($403)>>2)];
 FUNCTION_TABLE[$404]($400);
 label=115;break;
 case 115: 
 var $406=(($ss+64)|0);
 __ZNSt3__18ios_baseD2Ev($406);
 var $407$0=$_1;
 var $407$1=0;
 var $408$0=$407$0;
 var $408$1=$_161;
 ___resumeException($408$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z8getPrimev($agg_result){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+5840)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $4=(sp)+(24);
 var $d_i_i9_i_i_i=(sp)+(32);
 var $d_i_i8_i_i_i=(sp)+(168);
 var $d_i_i7_i_i_i=(sp)+(304);
 var $d_i_i6_i_i_i=(sp)+(440);
 var $d_i_i_i_i_i=(sp)+(576);
 var $5=(sp)+(712);
 var $x_i_i_i_i_i_i_i_i_i_i_i_i=(sp)+(720);
 var $y_i_i_i_i_i_i_i_i_i_i_i_i=(sp)+(984);
 var $t_i_i_i_i_i_i_i_i_i_i_i_i=(sp)+(1248);
 var $x2_i_i_i_i_i_i_i_i_i_i_i_i=(sp)+(1512);
 var $nm1_i_i=(sp)+(1648);
 var $6=(sp)+(1784);
 var $q_i_i=(sp)+(1792);
 var $x_i_i=(sp)+(1928);
 var $y_i_i=(sp)+(2064);
 var $7=(sp)+(2200);
 var $8=(sp)+(2216);
 var $9=(sp)+(2352);
 var $dist_i_i=(sp)+(2360);
 var $10=(sp)+(2632);
 var $11=(sp)+(2768);
 var $12=(sp)+(2904);
 var $13=(sp)+(2912);
 var $14=(sp)+(3048);
 var $gen_i=(sp)+(3064);
 var $num=(sp)+(5568);
 var $15=(sp)+(5704);
 var $16=_time(0);
 _srand($16);
 var $17=$15;
 var $18=$num;
 var $19=$gen_i;
 var $20=(($gen_i)|0);
 var $21=(($gen_i+2496)|0);
 var $22=$nm1_i_i;
 var $23=$6;
 var $24=$q_i_i;
 var $25=$x_i_i;
 var $26=$y_i_i;
 var $27=$7;
 var $28=$8;
 var $29=$9;
 var $30=$dist_i_i;
 var $31=$10;
 var $32=$11;
 var $33=$12;
 var $34=$13;
 var $35=$14;
 var $36=(($15)|0);
 var $37=(($15+128)|0);
 var $38=$15;
 var $39=$d_i_i_i_i_i;
 var $40=$d_i_i_i_i_i;
 var $41=(($d_i_i_i_i_i+128)|0);
 var $42=(($d_i_i_i_i_i+130)|0);
 var $43=$q_i_i;
 var $44=(($q_i_i+128)|0);
 var $45=(($q_i_i+130)|0);
 var $46=$x_i_i;
 var $47=(($x_i_i+128)|0);
 var $48=(($x_i_i+130)|0);
 var $49=$y_i_i;
 var $50=(($y_i_i+128)|0);
 var $51=(($y_i_i+130)|0);
 var $52=(($4)|0);
 var $53=(($7)|0);
 var $54=(($7+4)|0);
 var $55=(($7+8)|0);
 var $56=(($7+12)|0);
 var $57=(($x_i_i+128)|0);
 var $58=$x_i_i;
 var $59=(($q_i_i)|0);
 var $60=$2;
 var $61=$3;
 var $62=$q_i_i;
 var $63=(($q_i_i+130)|0);
 var $64=$10;
 var $65=(($10+128)|0);
 var $66=(($10+130)|0);
 var $67=(($dist_i_i+136)|0);
 var $68=$67;
 var $69=(($11)|0);
 var $70=(($11+130)|0);
 var $71=(($dist_i_i)|0);
 var $72=(($dist_i_i+136)|0);
 var $73=(($1)|0);
 var $74=(($14)|0);
 var $75=(($14+4)|0);
 var $76=(($14+8)|0);
 var $77=(($14+12)|0);
 var $78=(($y_i_i)|0);
 var $79=(($nm1_i_i+130)|0);
 var $80=(($y_i_i+128)|0);
 var $81=$y_i_i;
 var $82=$x_i_i_i_i_i_i_i_i_i_i_i_i;
 var $83=$y_i_i_i_i_i_i_i_i_i_i_i_i;
 var $84=$t_i_i_i_i_i_i_i_i_i_i_i_i;
 var $85=$x2_i_i_i_i_i_i_i_i_i_i_i_i;
 var $86=$x_i_i_i_i_i_i_i_i_i_i_i_i;
 var $87=(($x_i_i_i_i_i_i_i_i_i_i_i_i+256)|0);
 var $88=(($x_i_i_i_i_i_i_i_i_i_i_i_i+258)|0);
 var $89=$t_i_i_i_i_i_i_i_i_i_i_i_i;
 var $90=(($t_i_i_i_i_i_i_i_i_i_i_i_i+256)|0);
 var $91=(($t_i_i_i_i_i_i_i_i_i_i_i_i+258)|0);
 var $92=(($y_i_i_i_i_i_i_i_i_i_i_i_i+258)|0);
 var $93=(($y_i_i_i_i_i_i_i_i_i_i_i_i+256)|0);
 var $94=$y_i_i_i_i_i_i_i_i_i_i_i_i;
 var $95=(($x2_i_i_i_i_i_i_i_i_i_i_i_i+130)|0);
 var $96=(($y_i_i+130)|0);
 var $97=(($nm1_i_i+128)|0);
 var $98=$nm1_i_i;
 var $99=(($10)|0);
 var $100=$d_i_i6_i_i_i;
 var $101=$d_i_i6_i_i_i;
 var $102=(($d_i_i6_i_i_i+128)|0);
 var $103=(($d_i_i6_i_i_i+130)|0);
 var $104=$d_i_i7_i_i_i;
 var $105=$d_i_i7_i_i_i;
 var $106=(($d_i_i7_i_i_i+128)|0);
 var $107=(($d_i_i7_i_i_i+130)|0);
 var $108=$d_i_i8_i_i_i;
 var $109=$d_i_i8_i_i_i;
 var $110=(($d_i_i8_i_i_i+128)|0);
 var $111=(($d_i_i8_i_i_i+130)|0);
 var $112=$d_i_i9_i_i_i;
 var $113=$d_i_i9_i_i_i;
 var $114=(($d_i_i9_i_i_i+128)|0);
 var $115=(($d_i_i9_i_i_i+130)|0);
 var $116=(($15+130)|0);
 label=2;break;
 case 2: 
 __Z7getRandi($num,20);
 assert(136 % 1 === 0);(_memcpy($17, $18, 136)|0);
 HEAP32[(($20)>>2)]=5489;
 var $storemerge=1;label=3;break;
 case 3: 
 var $storemerge;
 HEAP32[(($21)>>2)]=$storemerge;
 var $119=($storemerge>>>0)<624;
 if($119){label=4;break;}else{label=5;break;}
 case 4: 
 var $121=((($storemerge)-(1))|0);
 var $122=(($gen_i+($121<<2))|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$123>>>30;
 var $125=$123^$124;
 var $126=(Math_imul($125,1812433253)|0);
 var $127=((($126)+($storemerge))|0);
 var $128=(($gen_i+($storemerge<<2))|0);
 HEAP32[(($128)>>2)]=$127;
 var $129=HEAP32[(($21)>>2)];
 var $130=((($129)+(1))|0);
 var $storemerge=$130;label=3;break;
 case 5: 
 var $132=HEAP16[(($37)>>1)];
 var $133=($132&65535);
 var $134=(($132<<16)>>16)==0;
 if($134){var $495=0;label=152;break;}else{label=6;break;}
 case 6: 
 var $135=HEAP32[(($38)>>2)];
 var $136=$135&1;
 var $137=($136|0)==0;
 if($137){var $495=0;label=152;break;}else{label=7;break;}
 case 7: 
 var $139=__ZN5boost14multiprecision8backends7eval_gtILj1024ELj1024ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_ELNS0_16cpp_integer_typeE0EXT1_ET2_EEEE5valueEbE4typeERKNS5_IXT_EXT0_ELS6_1EXT1_ES7_EEl($36,227);
 if($139){label=37;break;}else{var $storemerge_i_i_i_i_i_i=1;var $shift_i_i_i_i_i_i_0=32;var $result_i_i_i_i_0=$135;label=8;break;}
 case 8: 
 var $result_i_i_i_i_0;
 var $shift_i_i_i_i_i_i_0;
 var $storemerge_i_i_i_i_i_i;
 var $141=($storemerge_i_i_i_i_i_i>>>0)<($133>>>0);
 var $142=($shift_i_i_i_i_i_i_0>>>0)<32;
 var $or_cond=$141&$142;
 if($or_cond){label=9;break;}else{label=10;break;}
 case 9: 
 var $144=(($38+($storemerge_i_i_i_i_i_i<<2))|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=$145<<$shift_i_i_i_i_i_i_0;
 var $147=((($result_i_i_i_i_0)+($146))|0);
 var $148=((($shift_i_i_i_i_i_i_0)+(32))|0);
 var $149=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$149;var $shift_i_i_i_i_i_i_0=$148;var $result_i_i_i_i_0=$147;label=8;break;
 case 10: 
 var $150=HEAP8[($116)];
 var $151=$150&1;
 var $152=(($151<<24)>>24)==0;
 if($152){var $storemerge_i_i_i=0;label=34;break;}else{label=11;break;}
 case 11: 
 var $154=$5;
 var $155=(($5)|0);
 HEAP32[(($155)>>2)]=5944;
 var $156=(($5+4)|0);
 var $157=(function() { try { __THREW__ = 0; return _strlen(1272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 var $158=((($157)+(1))|0);
 var $159=((($157)+(13))|0);
 var $160=($159|0)==0;
 var $_size_i_i_i_i_i_i_i_i=($160?1:$159);
 label=13;break;
 case 13: 
 var $162=_malloc($_size_i_i_i_i_i_i_i_i);
 var $163=($162|0)==0;
 if($163){label=14;break;}else{label=23;break;}
 case 14: 
 var $165=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $166=($165|0)==0;
 if($166){label=21;break;}else{label=15;break;}
 case 15: 
 var $168=$165;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$168]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=16;break; }
 case 16: 
 var $lpad_loopexit_i_i_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit_i_i_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i_i_i_i$0;label=18;break;
 case 17: 
 var $lpad_nonloopexit_i_i_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit_i_i_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i_i_i_i$0;label=18;break;
 case 18: 
 var $lpad_phi_i_i_i_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i_i_i_i$1;
 var $170=$lpad_phi_i_i_i_i_i_i_i_i$1;
 var $171=($170|0)<0;
 if($171){label=19;break;}else{var $eh_lpad_body_i_i_i_i_i_i_i$1=$lpad_phi_i_i_i_i_i_i_i_i$1;var $eh_lpad_body_i_i_i_i_i_i_i$0=$lpad_phi_i_i_i_i_i_i_i_i$0;label=25;break;}
 case 19: 
 var $173=$lpad_phi_i_i_i_i_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=24;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $175=___cxa_allocate_exception(4);
 var $176=$175;
 HEAP32[(($176)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($175,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=17;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 var $178=$162;
 var $179=(($162+4)|0);
 var $180=$179;
 HEAP32[(($180)>>2)]=$157;
 HEAP32[(($178)>>2)]=$157;
 var $181=(($162+12)|0);
 HEAP32[(($156)>>2)]=$181;
 var $182=(($162+8)|0);
 var $183=$182;
 HEAP32[(($183)>>2)]=0;
 assert($158 % 1 === 0);(_memcpy($181, 1272, $158)|0);
 HEAP32[(($155)>>2)]=6040;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt11range_errorEEvRKT_PKcS7_i($5,4800,41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=29;break; }
 case 24: 
 var $185$0 = ___cxa_find_matching_catch(-1, -1,0); var $185$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i_i_i_i$1=$185$1;var $eh_lpad_body_i_i_i_i_i_i_i$0=$185$0;label=25;break;
 case 25: 
 var $eh_lpad_body_i_i_i_i_i_i_i$0;
 var $eh_lpad_body_i_i_i_i_i_i_i$1;
 var $186=$eh_lpad_body_i_i_i_i_i_i_i$1;
 var $187=($186|0)<0;
 if($187){label=26;break;}else{label=33;break;}
 case 26: 
 var $189=$eh_lpad_body_i_i_i_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($189) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 throw "Reached an unreachable!";
 case 28: 
 throw "Reached an unreachable!";
 case 29: 
 var $192$0 = ___cxa_find_matching_catch(-1, -1,0); var $192$1 = tempRet0;
 HEAP32[(($155)>>2)]=5944;
 var $this_idx_val_i_i_i_i_i_i_i_i_i=HEAP32[(($156)>>2)];
 var $193=((($this_idx_val_i_i_i_i_i_i_i_i_i)-(4))|0);
 var $194=$193;
 var $195=(tempValue=HEAP32[(($194)>>2)],HEAP32[(($194)>>2)]=tempValue+-1,tempValue);
 var $196=((($195)-(1))|0);
 var $197=($196|0)<0;
 if($197){label=30;break;}else{label=33;break;}
 case 30: 
 var $199=HEAP32[(($156)>>2)];
 var $200=((($199)-(12))|0);
 var $201=($200|0)==0;
 if($201){label=33;break;}else{label=31;break;}
 case 31: 
 _free($200);
 label=33;break;
 case 32: 
 var $203$0 = ___cxa_find_matching_catch(-1, -1,0); var $203$1 = tempRet0;
 label=33;break;
 case 33: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 34: 
 var $storemerge_i_i_i;
 var $204=($storemerge_i_i_i>>>0)<48;
 if($204){label=35;break;}else{var $495=0;label=152;break;}
 case 35: 
 var $206=((5752+$storemerge_i_i_i)|0);
 var $207=HEAP8[($206)];
 var $208=($207&255);
 var $209=($result_i_i_i_i_0|0)==($208|0);
 if($209){var $495=1;label=152;break;}else{label=36;break;}
 case 36: 
 var $211=((($storemerge_i_i_i)+(1))|0);
 var $storemerge_i_i_i=$211;label=34;break;
 case 37: 
 HEAP32[(($40)>>2)]=0;
 HEAP16[(($41)>>1)]=1;
 HEAP8[($42)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_(0,$36,223092870,$d_i_i_i_i_i);
 var $213=HEAP32[(($40)>>2)];
 var $storemerge_i2_i_i=0;label=38;break;
 case 38: 
 var $storemerge_i2_i_i;
 var $215=($storemerge_i2_i_i>>>0)<8;
 if($215){label=39;break;}else{label=43;break;}
 case 39: 
 var $217=((5720+($storemerge_i2_i_i<<2))|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=(((223092870)%(($218>>>0)))&-1);
 var $220=($219|0)==0;
 if($220){label=41;break;}else{label=40;break;}
 case 40: 
 ___assert_fail(1768,1656,27,3640);
 throw "Reached an unreachable!";
 case 41: 
 var $223=(((($213>>>0))%(($218>>>0)))&-1);
 var $224=($223|0)==0;
 if($224){var $495=0;label=152;break;}else{label=42;break;}
 case 42: 
 var $226=((($storemerge_i2_i_i)+(1))|0);
 var $storemerge_i2_i_i=$226;label=38;break;
 case 43: 
 HEAP32[(($101)>>2)]=0;
 HEAP16[(($102)>>1)]=1;
 HEAP8[($103)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_(0,$36,-1538761853,$d_i_i6_i_i_i);
 var $228=HEAP32[(($101)>>2)];
 var $storemerge1_i3_i_i=0;label=44;break;
 case 44: 
 var $storemerge1_i3_i_i;
 var $230=($storemerge1_i3_i_i>>>0)<6;
 if($230){label=45;break;}else{label=49;break;}
 case 45: 
 var $232=((5696+($storemerge1_i3_i_i<<2))|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(((2756205443)%(($233>>>0)))&-1);
 var $235=($234|0)==0;
 if($235){label=47;break;}else{label=46;break;}
 case 46: 
 ___assert_fail(1600,1656,40,3640);
 throw "Reached an unreachable!";
 case 47: 
 var $238=(((($228>>>0))%(($233>>>0)))&-1);
 var $239=($238|0)==0;
 if($239){var $495=0;label=152;break;}else{label=48;break;}
 case 48: 
 var $241=((($storemerge1_i3_i_i)+(1))|0);
 var $storemerge1_i3_i_i=$241;label=44;break;
 case 49: 
 HEAP32[(($105)>>2)]=0;
 HEAP16[(($106)>>1)]=1;
 HEAP8[($107)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_(0,$36,907383479,$d_i_i7_i_i_i);
 var $243=HEAP32[(($105)>>2)];
 var $storemerge2_i_i_i=0;label=50;break;
 case 50: 
 var $storemerge2_i_i_i;
 var $245=($storemerge2_i_i_i>>>0)<5;
 if($245){label=51;break;}else{label=55;break;}
 case 51: 
 var $247=((5672+($storemerge2_i_i_i<<2))|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(((907383479)%(($248>>>0)))&-1);
 var $250=($249|0)==0;
 if($250){label=53;break;}else{label=52;break;}
 case 52: 
 ___assert_fail(1464,1656,53,3640);
 throw "Reached an unreachable!";
 case 53: 
 var $253=(((($243>>>0))%(($248>>>0)))&-1);
 var $254=($253|0)==0;
 if($254){var $495=0;label=152;break;}else{label=54;break;}
 case 54: 
 var $256=((($storemerge2_i_i_i)+(1))|0);
 var $storemerge2_i_i_i=$256;label=50;break;
 case 55: 
 HEAP32[(($109)>>2)]=0;
 HEAP16[(($110)>>1)]=1;
 HEAP8[($111)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_(0,$36,-162686883,$d_i_i8_i_i_i);
 var $258=HEAP32[(($109)>>2)];
 var $storemerge3_i_i_i=0;label=56;break;
 case 56: 
 var $storemerge3_i_i_i;
 var $260=($storemerge3_i_i_i>>>0)<5;
 if($260){label=57;break;}else{var $storemerge4_i_i_i=0;label=61;break;}
 case 57: 
 var $262=((5648+($storemerge3_i_i_i<<2))|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(((4132280413)%(($263>>>0)))&-1);
 var $265=($264|0)==0;
 if($265){label=59;break;}else{label=58;break;}
 case 58: 
 ___assert_fail(1416,1656,66,3640);
 throw "Reached an unreachable!";
 case 59: 
 var $268=(((($258>>>0))%(($263>>>0)))&-1);
 var $269=($268|0)==0;
 if($269){var $495=0;label=152;break;}else{label=60;break;}
 case 60: 
 var $271=((($storemerge3_i_i_i)+(1))|0);
 var $storemerge3_i_i_i=$271;label=56;break;
 case 61: 
 var $storemerge4_i_i_i;
 var $272=($storemerge4_i_i_i>>>0)<6;
 if($272){label=62;break;}else{label=69;break;}
 case 62: 
 var $274=((5528+($storemerge4_i_i_i<<2))|0);
 var $275=HEAP32[(($274)>>2)];
 HEAP32[(($113)>>2)]=0;
 HEAP16[(($114)>>1)]=1;
 HEAP8[($115)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_(0,$36,$275,$d_i_i9_i_i_i);
 var $276=HEAP32[(($113)>>2)];
 var $storemerge5_i_i_i=0;label=63;break;
 case 63: 
 var $storemerge5_i_i_i;
 var $278=($storemerge5_i_i_i>>>0)<4;
 if($278){label=64;break;}else{label=68;break;}
 case 64: 
 var $280=((5552+($storemerge4_i_i_i<<4)+($storemerge5_i_i_i<<2))|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(((($275>>>0))%(($281>>>0)))&-1);
 var $283=($282|0)==0;
 if($283){label=66;break;}else{label=65;break;}
 case 65: 
 ___assert_fail(1328,1656,95,3640);
 throw "Reached an unreachable!";
 case 66: 
 var $286=(((($276>>>0))%(($281>>>0)))&-1);
 var $287=($286|0)==0;
 if($287){var $495=0;label=152;break;}else{label=67;break;}
 case 67: 
 var $289=((($storemerge5_i_i_i)+(1))|0);
 var $storemerge5_i_i_i=$289;label=63;break;
 case 68: 
 var $291=((($storemerge4_i_i_i)+(1))|0);
 var $storemerge4_i_i_i=$291;label=61;break;
 case 69: 
 HEAP32[(($6)>>2)]=1;
 __ZN5boost14multiprecisionmiINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($nm1_i_i,$15,$6);
 HEAP32[(($43)>>2)]=228;
 HEAP16[(($44)>>1)]=1;
 HEAP8[($45)]=0;
 HEAP32[(($46)>>2)]=0;
 HEAP16[(($47)>>1)]=1;
 HEAP8[($48)]=0;
 HEAP32[(($49)>>2)]=0;
 HEAP16[(($50)>>1)]=1;
 HEAP8[($51)]=0;
 HEAP32[(($53)>>2)]=$4;
 HEAP32[(($54)>>2)]=$q_i_i;
 HEAP32[(($55)>>2)]=$nm1_i_i;
 HEAP32[(($56)>>2)]=$15;
 __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEaSINS0_6detail8functionENS0_11default_ops9powm_funcES8_S8_S8_EENS_9enable_ifINS_14is_convertibleINSA_10expressionIT_T0_T1_T2_T3_E11result_typeES8_EERS8_E4typeERKSM_($x_i_i,$7);
 var $292=HEAP8[($48)];
 var $293=$292&1;
 var $294=(($293<<24)>>24)==0;
 if($294){label=70;break;}else{var $495=0;label=152;break;}
 case 70: 
 var $296=HEAP16[(($57)>>1)];
 var $297=(($296<<16)>>16)==1;
 if($297){label=71;break;}else{var $495=0;label=152;break;}
 case 71: 
 var $298=HEAP32[(($58)>>2)];
 var $phitmp=($298|0)==1;
 if($phitmp){label=72;break;}else{var $495=0;label=152;break;}
 case 72: 
 HEAP32[(($9)>>2)]=1;
 __ZN5boost14multiprecisionmiINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($8,$15,$9);
 assert(131 % 1 === 0);(_memcpy($24, $28, 131)|0);
 var $300=HEAP16[(($44)>>1)];
 var $301=(($300<<16)>>16)==1;
 if($301){label=73;break;}else{label=94;break;}
 case 73: 
 var $302=HEAP32[(($62)>>2)];
 var $303=($302|0)==0;
 if($303){label=74;break;}else{label=94;break;}
 case 74: 
 var $305=(($2)|0);
 HEAP32[(($305)>>2)]=5944;
 var $306=(($2+4)|0);
 label=75;break;
 case 75: 
 var $308=_malloc(45);
 var $309=($308|0)==0;
 if($309){label=76;break;}else{label=85;break;}
 case 76: 
 var $311=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $312=($311|0)==0;
 if($312){label=83;break;}else{label=77;break;}
 case 77: 
 var $314=$311;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$314]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=78;break; }
 case 78: 
 var $lpad_loopexit_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i$0;label=80;break;
 case 79: 
 var $lpad_nonloopexit_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i$0;label=80;break;
 case 80: 
 var $lpad_phi_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i$1;
 var $316=$lpad_phi_i_i_i_i_i$1;
 var $317=($316|0)<0;
 if($317){label=81;break;}else{var $eh_lpad_body_i_i_i_i$1=$lpad_phi_i_i_i_i_i$1;var $eh_lpad_body_i_i_i_i$0=$lpad_phi_i_i_i_i_i$0;label=87;break;}
 case 81: 
 var $319=$lpad_phi_i_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=86;break; }
 case 82: 
 throw "Reached an unreachable!";
 case 83: 
 var $321=___cxa_allocate_exception(4);
 var $322=$321;
 HEAP32[(($322)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($321,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=79;break; }
 case 84: 
 throw "Reached an unreachable!";
 case 85: 
 var $324=$308;
 var $325=(($308+4)|0);
 var $326=$325;
 HEAP32[(($326)>>2)]=32;
 HEAP32[(($324)>>2)]=32;
 var $327=(($308+12)|0);
 HEAP32[(($306)>>2)]=$327;
 var $328=(($308+8)|0);
 var $329=$328;
 HEAP32[(($329)>>2)]=0;
 assert(33 % 1 === 0);(_memcpy($327, 2016, 33)|0);
 HEAP32[(($305)>>2)]=6040;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt11range_errorEEvRKT_PKcS7_i($2,3896,122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=90;break; } else { label=91;break; }
 case 86: 
 var $331$0 = ___cxa_find_matching_catch(-1, -1); var $331$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i$1=$331$1;var $eh_lpad_body_i_i_i_i$0=$331$0;label=87;break;
 case 87: 
 var $eh_lpad_body_i_i_i_i$0;
 var $eh_lpad_body_i_i_i_i$1;
 var $332=$eh_lpad_body_i_i_i_i$1;
 var $333=($332|0)<0;
 if($333){label=88;break;}else{label=89;break;}
 case 88: 
 var $335=$eh_lpad_body_i_i_i_i$0;
 ___cxa_call_unexpected($335);
 throw "Reached an unreachable!";
 case 89: 
 ___resumeException($eh_lpad_body_i_i_i_i$0)
 case 90: 
 throw "Reached an unreachable!";
 case 91: 
 var $339$0 = ___cxa_find_matching_catch(-1, -1); var $339$1 = tempRet0;
 var $340=$339$0;
 var $341=$339$1;
 HEAP32[(($305)>>2)]=5944;
 var $this_idx_val_i_i1_i_i_i_i=HEAP32[(($306)>>2)];
 var $342=((($this_idx_val_i_i1_i_i_i_i)-(4))|0);
 var $343=$342;
 var $344=(tempValue=HEAP32[(($343)>>2)],HEAP32[(($343)>>2)]=tempValue+-1,tempValue);
 var $345=((($344)-(1))|0);
 var $346=($345|0)<0;
 if($346){label=92;break;}else{var $_0272=$340;var $_0273=$341;label=118;break;}
 case 92: 
 var $348=HEAP32[(($306)>>2)];
 var $349=((($348)-(12))|0);
 var $350=($349|0)==0;
 if($350){var $_0272=$340;var $_0273=$341;label=118;break;}else{label=93;break;}
 case 93: 
 _free($349);
 var $_0272=$340;var $_0273=$341;label=118;break;
 case 94: 
 var $351=HEAP8[($63)];
 var $352=$351&1;
 var $353=(($352<<24)>>24)==0;
 if($353){label=95;break;}else{label=96;break;}
 case 95: 
 var $354=($300&65535);
 var $storemerge_i_i4_i_i=0;label=116;break;
 case 96: 
 var $356=(($3)|0);
 HEAP32[(($356)>>2)]=5944;
 var $357=(($3+4)|0);
 label=97;break;
 case 97: 
 var $359=_malloc(97);
 var $360=($359|0)==0;
 if($360){label=98;break;}else{label=107;break;}
 case 98: 
 var $362=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $363=($362|0)==0;
 if($363){label=105;break;}else{label=99;break;}
 case 99: 
 var $365=$362;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$365]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=100;break; }
 case 100: 
 var $lpad_loopexit_i6_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i6_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i10_i_i_i_i$1=$lpad_loopexit_i6_i_i_i_i$1;var $lpad_phi_i10_i_i_i_i$0=$lpad_loopexit_i6_i_i_i_i$0;label=102;break;
 case 101: 
 var $lpad_nonloopexit_i8_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i8_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i10_i_i_i_i$1=$lpad_nonloopexit_i8_i_i_i_i$1;var $lpad_phi_i10_i_i_i_i$0=$lpad_nonloopexit_i8_i_i_i_i$0;label=102;break;
 case 102: 
 var $lpad_phi_i10_i_i_i_i$0;
 var $lpad_phi_i10_i_i_i_i$1;
 var $367=$lpad_phi_i10_i_i_i_i$1;
 var $368=($367|0)<0;
 if($368){label=103;break;}else{var $eh_lpad_body13_i_i_i_i$1=$lpad_phi_i10_i_i_i_i$1;var $eh_lpad_body13_i_i_i_i$0=$lpad_phi_i10_i_i_i_i$0;label=109;break;}
 case 103: 
 var $370=$lpad_phi_i10_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($370) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=108;break; }
 case 104: 
 throw "Reached an unreachable!";
 case 105: 
 var $372=___cxa_allocate_exception(4);
 var $373=$372;
 HEAP32[(($373)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($372,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=101;break; }
 case 106: 
 throw "Reached an unreachable!";
 case 107: 
 var $375=$359;
 var $376=(($359+4)|0);
 var $377=$376;
 HEAP32[(($377)>>2)]=84;
 HEAP32[(($375)>>2)]=84;
 var $378=(($359+12)|0);
 HEAP32[(($357)>>2)]=$378;
 var $379=(($359+8)|0);
 var $380=$379;
 HEAP32[(($380)>>2)]=0;
 assert(85 % 1 === 0);(_memcpy($378, 1800, 85)|0);
 HEAP32[(($356)>>2)]=6040;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt11range_errorEEvRKT_PKcS7_i($3,3896,126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=112;break; } else { label=113;break; }
 case 108: 
 var $382$0 = ___cxa_find_matching_catch(-1, -1); var $382$1 = tempRet0;
 var $eh_lpad_body13_i_i_i_i$1=$382$1;var $eh_lpad_body13_i_i_i_i$0=$382$0;label=109;break;
 case 109: 
 var $eh_lpad_body13_i_i_i_i$0;
 var $eh_lpad_body13_i_i_i_i$1;
 var $383=$eh_lpad_body13_i_i_i_i$1;
 var $384=($383|0)<0;
 if($384){label=110;break;}else{label=111;break;}
 case 110: 
 var $386=$eh_lpad_body13_i_i_i_i$0;
 ___cxa_call_unexpected($386);
 throw "Reached an unreachable!";
 case 111: 
 ___resumeException($eh_lpad_body13_i_i_i_i$0)
 case 112: 
 throw "Reached an unreachable!";
 case 113: 
 var $390$0 = ___cxa_find_matching_catch(-1, -1); var $390$1 = tempRet0;
 var $391=$390$0;
 var $392=$390$1;
 HEAP32[(($356)>>2)]=5944;
 var $this_idx_val_i_i_i_i_i_i=HEAP32[(($357)>>2)];
 var $393=((($this_idx_val_i_i_i_i_i_i)-(4))|0);
 var $394=$393;
 var $395=(tempValue=HEAP32[(($394)>>2)],HEAP32[(($394)>>2)]=tempValue+-1,tempValue);
 var $396=((($395)-(1))|0);
 var $397=($396|0)<0;
 if($397){label=114;break;}else{var $_0272=$391;var $_0273=$392;label=118;break;}
 case 114: 
 var $399=HEAP32[(($357)>>2)];
 var $400=((($399)-(12))|0);
 var $401=($400|0)==0;
 if($401){var $_0272=$391;var $_0273=$392;label=118;break;}else{label=115;break;}
 case 115: 
 _free($400);
 var $_0272=$391;var $_0273=$392;label=118;break;
 case 116: 
 var $storemerge_i_i4_i_i;
 var $403=(($62+($storemerge_i_i4_i_i<<2))|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($404|0)==0;
 var $406=($storemerge_i_i4_i_i>>>0)<($354>>>0);
 var $or_cond280=$405&$406;
 if($or_cond280){label=117;break;}else{label=119;break;}
 case 117: 
 var $408=((($storemerge_i_i4_i_i)+(1))|0);
 var $storemerge_i_i4_i_i=$408;label=116;break;
 case 118: 
 var $_0273;
 var $_0272;
 var $409$0=$_0272;
 var $409$1=0;
 var $410$0=$409$0;
 var $410$1=$_0273;
 ___resumeException($410$0)
 case 119: 
 var $411=_llvm_cttz_i32($404,1);
 var $412=$storemerge_i_i4_i_i<<5;
 var $413=$411|$412;
 var $414$0=$413;
 var $414$1=0;
 __ZN5boost14multiprecision8backends16eval_right_shiftILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valueEvE4typeERS8_y($59,$414$0,$414$1);
 HEAP32[(($64)>>2)]=2;
 HEAP16[(($65)>>1)]=1;
 HEAP8[($66)]=0;
 HEAP32[(($12)>>2)]=2;
 __ZN5boost14multiprecisionmiINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($11,$15,$12);
 assert(136 % 1 === 0);(_memcpy($30, $31, 136)|0);
 assert(136 % 1 === 0);(_memcpy($68, $32, 136)|0);
 var $415=HEAP8[($70)];
 var $416=$415&1;
 var $417=(($416<<24)>>24)==0;
 if($417){label=120;break;}else{label=121;break;}
 case 120: 
 var $418=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($99,$69);
 var $419=($418|0)<1;
 if($419){var $storemerge_i_i=0;label=122;break;}else{label=121;break;}
 case 121: 
 ___assert_fail(2160,2064,318,3544);
 throw "Reached an unreachable!";
 case 122: 
 var $storemerge_i_i;
 var $420=($storemerge_i_i>>>0)<50;
 if($420){label=123;break;}else{var $495=1;label=152;break;}
 case 123: 
 __ZN5boost6random6detail20generate_uniform_intINS0_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEENS_14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS5_16cpp_integer_typeE1ELNS5_18cpp_int_check_typeE0EvEELNS5_26expression_template_optionE0EEENS5_6numberIT0_XT1_EEERT_RKSE_SI_N4mpl_5bool_ILb1EEE($13,$gen_i,$71,$72);
 assert(131 % 1 === 0);(_memcpy($25, $34, 131)|0);
 HEAP32[(($74)>>2)]=$1;
 HEAP32[(($75)>>2)]=$x_i_i;
 HEAP32[(($76)>>2)]=$q_i_i;
 HEAP32[(($77)>>2)]=$15;
 __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEaSINS0_6detail8functionENS0_11default_ops9powm_funcES8_S8_S8_EENS_9enable_ifINS_14is_convertibleINSA_10expressionIT_T0_T1_T2_T3_E11result_typeES8_EERS8_E4typeERKSM_($y_i_i,$14);
 var $_pre=HEAP8[($51)];
 var $j_i_i_0=0;var $422=$_pre;label=124;break;
 case 124: 
 var $422;
 var $j_i_i_0;
 var $423=$422&1;
 var $424=(($423<<24)>>24)!=0;
 var $425=HEAP8[($79)];
 var $426=$425&1;
 var $427=(($426<<24)>>24)!=0;
 var $tmp_i_i_i_i=$424^$427;
 if($tmp_i_i_i_i){label=130;break;}else{label=125;break;}
 case 125: 
 var $429=HEAP16[(($80)>>1)];
 var $430=HEAP16[(($97)>>1)];
 var $431=(($429<<16)>>16)==(($430<<16)>>16);
 if($431){label=126;break;}else{label=130;break;}
 case 126: 
 var $433=($429&65535);
 var $434=(($81+($433<<2))|0);
 var $storemerge_i_i7_i_i=$98;var $_0=$81;label=127;break;
 case 127: 
 var $_0;
 var $storemerge_i_i7_i_i;
 var $436=($_0|0)==($434|0);
 if($436){label=151;break;}else{label=128;break;}
 case 128: 
 var $438=HEAP32[(($_0)>>2)];
 var $439=HEAP32[(($storemerge_i_i7_i_i)>>2)];
 var $440=($438|0)==($439|0);
 if($440){label=129;break;}else{label=130;break;}
 case 129: 
 var $442=(($_0+4)|0);
 var $443=(($storemerge_i_i7_i_i+4)|0);
 var $storemerge_i_i7_i_i=$443;var $_0=$442;label=127;break;
 case 130: 
 var $445=(($423<<24)>>24)==0;
 if($445){label=131;break;}else{label=134;break;}
 case 131: 
 var $447=HEAP16[(($80)>>1)];
 var $448=(($447<<16)>>16)==1;
 if($448){label=132;break;}else{label=134;break;}
 case 132: 
 var $449=HEAP32[(($81)>>2)];
 var $450=($449|0)==1;
 if($450){label=133;break;}else{label=134;break;}
 case 133: 
 var $452=($j_i_i_0|0)==0;
 if($452){label=151;break;}else{var $495=0;label=152;break;}
 case 134: 
 var $453=((($j_i_i_0)+(1))|0);
 var $454=($453|0)==($413|0);
 if($454){var $495=0;label=152;break;}else{label=135;break;}
 case 135: 
 __ZN5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj1024ELj1024ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_11enable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($y_i_i_i_i_i_i_i_i_i_i_i_i,$78);
 HEAP32[(($89)>>2)]=0;
 HEAP16[(($90)>>1)]=1;
 HEAP8[($91)]=0;
 HEAP16[(($87)>>1)]=1;
 HEAP32[(($86)>>2)]=1;
 HEAP8[($88)]=0;
 var $457=0;var $_0274=2;label=136;break;
 case 136: 
 var $_0274;
 var $457;
 if($457){label=147;break;}else{label=137;break;}
 case 137: 
 var $459=$_0274&1;
 var $460=($459|0)==0;
 if($460){label=142;break;}else{label=138;break;}
 case 138: 
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($t_i_i_i_i_i_i_i_i_i_i_i_i,$x_i_i_i_i_i_i_i_i_i_i_i_i,$y_i_i_i_i_i_i_i_i_i_i_i_i);
 var $462=HEAP8[($91)];
 var $463=$462&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_(0,$t_i_i_i_i_i_i_i_i_i_i_i_i,$36,$x_i_i_i_i_i_i_i_i_i_i_i_i);
 var $464=(($463<<24)>>24)==0;
 HEAP8[($88)]=$463;
 if($464){label=142;break;}else{label=139;break;}
 case 139: 
 var $466=HEAP16[(($87)>>1)];
 var $467=(($466<<16)>>16)==1;
 if($467){label=140;break;}else{label=142;break;}
 case 140: 
 var $469=HEAP32[(($86)>>2)];
 var $470=($469|0)==0;
 if($470){label=141;break;}else{label=142;break;}
 case 141: 
 HEAP8[($88)]=0;
 label=142;break;
 case 142: 
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($t_i_i_i_i_i_i_i_i_i_i_i_i,$y_i_i_i_i_i_i_i_i_i_i_i_i,$y_i_i_i_i_i_i_i_i_i_i_i_i);
 var $472=HEAP8[($91)];
 var $473=$472&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_(0,$t_i_i_i_i_i_i_i_i_i_i_i_i,$36,$y_i_i_i_i_i_i_i_i_i_i_i_i);
 var $474=(($473<<24)>>24)==0;
 HEAP8[($92)]=$473;
 if($474){label=146;break;}else{label=143;break;}
 case 143: 
 var $476=HEAP16[(($93)>>1)];
 var $477=(($476<<16)>>16)==1;
 if($477){label=144;break;}else{label=146;break;}
 case 144: 
 var $479=HEAP32[(($94)>>2)];
 var $480=($479|0)==0;
 if($480){label=145;break;}else{label=146;break;}
 case 145: 
 HEAP8[($92)]=0;
 label=146;break;
 case 146: 
 var $482=$_0274>>>1;
 var $phitmp279=($482|0)==0;
 var $457=$phitmp279;var $_0274=$482;label=136;break;
 case 147: 
 __ZN5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj2048ELj2048ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_12disable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($x2_i_i_i_i_i_i_i_i_i_i_i_i,$x_i_i_i_i_i_i_i_i_i_i_i_i);
 var $484=HEAP8[($95)];
 var $485=$484&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_(0,$x2_i_i_i_i_i_i_i_i_i_i_i_i,$36,$78);
 var $486=(($485<<24)>>24)==0;
 HEAP8[($96)]=$485;
 if($486){var $j_i_i_0=$453;var $422=0;label=124;break;}else{label=148;break;}
 case 148: 
 var $488=HEAP16[(($80)>>1)];
 var $489=(($488<<16)>>16)==1;
 if($489){label=149;break;}else{var $j_i_i_0=$453;var $422=$485;label=124;break;}
 case 149: 
 var $491=HEAP32[(($81)>>2)];
 var $492=($491|0)==0;
 if($492){label=150;break;}else{var $j_i_i_0=$453;var $422=$485;label=124;break;}
 case 150: 
 HEAP8[($96)]=0;
 var $j_i_i_0=$453;var $422=0;label=124;break;
 case 151: 
 var $494=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$494;label=122;break;
 case 152: 
 var $495;
 if($495){label=153;break;}else{label=2;break;}
 case 153: 
 __Z8toStringIN5boost14multiprecision6numberINS1_8backends15cpp_int_backendILj1024ELj1024ELNS1_16cpp_integer_typeE1ELNS1_18cpp_int_check_typeE0EvEELNS1_26expression_template_optionE0EEEENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEERKT_($agg_result,$num);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __Z8toStringIN5boost14multiprecision6numberINS1_8backends15cpp_int_backendILj1024ELj1024ELNS1_16cpp_integer_typeE1ELNS1_18cpp_int_check_typeE0EvEELNS1_26expression_template_optionE0EEEENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEERKT_($agg_result,$t){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+936)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s_i_i=sp;
 var $0=(sp)+(8);
 var $loc_i_i_i_i_i_i_i_i=(sp)+(16);
 var $grouping_i_i_i_i_i_i_i_i=(sp)+(24);
 var $buf_i_i_i_i_i_i=(sp)+(40);
 var $t_i_i_i_i=(sp)+(64);
 var $t3_i_i_i_i=(sp)+(200);
 var $r_i_i_i_i=(sp)+(336);
 var $1=(sp)+(472);
 var $block10_i_i_i_i=(sp)+(488);
 var $t2_i_i_i_i=(sp)+(624);
 var $s_i=(sp)+(760);
 var $2=(sp)+(776);
 var $ss=(sp)+(792);
 var $3=(($ss+64)|0);
 var $4=(($ss)|0);
 var $5=(($ss+8)|0);
 HEAP32[(($5)>>2)]=7608;
 var $6=(($ss+12)|0);
 HEAP32[(($4)>>2)]=15484;
 var $7=$ss;
 var $8=$ss;
 var $9=(($ss+64)|0);
 var $10=(($9)|0);
 HEAP32[(($10)>>2)]=15504;
 var $11=(($ss+4)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=HEAP32[(($7)>>2)];
 var $13=((($12)-(12))|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$6;
 var $_sum16=((($15)+(24))|0);
 var $17=(($8+$_sum16)|0);
 var $18=$17;
 HEAP32[(($18)>>2)]=$16;
 var $_sum17=((($15)+(16))|0);
 var $19=(($8+$_sum17)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=0;
 var $_sum18=((($15)+(20))|0);
 var $21=(($8+$_sum18)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=0;
 var $_sum19=((($15)+(4))|0);
 var $23=(($8+$_sum19)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=4098;
 var $_sum20=((($15)+(12))|0);
 var $25=(($8+$_sum20)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=0;
 var $_sum21=((($15)+(8))|0);
 var $27=(($8+$_sum21)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=6;
 var $_sum22=((($15)+(32))|0);
 var $29=(($8+$_sum22)|0);
 var $_sum23=((($15)+(28))|0);
 var $30=(($8+$_sum23)|0);
 _memset($29, 0, 40)|0;
 var $31=$30;
 __ZNSt3__16localeC2Ev($31);
 var $_sum=((($15)+(72))|0);
 var $32=(($8+$_sum)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=0;
 var $_sum1=((($15)+(76))|0);
 var $34=(($8+$_sum1)|0);
 var $35=$34;
 HEAP32[(($35)>>2)]=-1;
 var $36=(($ss+8)|0);
 var $37=$36;
 var $38=$36;
 HEAP32[(($4)>>2)]=7588;
 HEAP32[(($3)>>2)]=7628;
 HEAP32[(($5)>>2)]=7608;
 var $39=(($ss+12)|0);
 var $40=(($39)|0);
 HEAP32[(($40)>>2)]=7912;
 var $41=(($ss+16)|0);
 __ZNSt3__16localeC2Ev($41);
 var $42=(($ss+20)|0);
 var $43=$42;
 HEAP32[(($43)>>2)]=0; HEAP32[((($43)+(4))>>2)]=0; HEAP32[((($43)+(8))>>2)]=0; HEAP32[((($43)+(12))>>2)]=0; HEAP32[((($43)+(16))>>2)]=0; HEAP32[((($43)+(20))>>2)]=0;
 HEAP32[(($40)>>2)]=7768;
 var $44=(($ss+44)|0);
 var $45=$44;
 var $storemerge=0;label=2;break;
 case 2: 
 var $storemerge;
 var $47=($storemerge>>>0)<3;
 if($47){label=3;break;}else{label=4;break;}
 case 3: 
 var $49=(($45+($storemerge<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=((($storemerge)+(1))|0);
 var $storemerge=$50;label=2;break;
 case 4: 
 var $51=(($ss+56)|0);
 HEAP32[(($51)>>2)]=0;
 var $52=(($ss+60)|0);
 HEAP32[(($52)>>2)]=24;
 var $53=$2;
 var $storemerge2=0;label=5;break;
 case 5: 
 var $storemerge2;
 var $55=($storemerge2>>>0)<3;
 if($55){label=6;break;}else{label=7;break;}
 case 6: 
 var $57=(($53+($storemerge2<<2))|0);
 HEAP32[(($57)>>2)]=0;
 var $58=((($storemerge2)+(1))|0);
 var $storemerge2=$58;label=5;break;
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($39,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=8;break; }
 case 8: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=$2;
 var $62=HEAP8[($61)];
 var $63=$62&1;
 var $64=(($63<<24)>>24)==0;
 if($64){label=11;break;}else{label=9;break;}
 case 9: 
 var $66=(($2+8)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==0;
 if($68){label=11;break;}else{label=10;break;}
 case 10: 
 _free($67);
 label=11;break;
 case 11: 
 var $70=$44;
 var $71=HEAP8[($70)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=14;break;}else{label=12;break;}
 case 12: 
 var $75=(($ss+52)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($76|0)==0;
 if($77){label=14;break;}else{label=13;break;}
 case 13: 
 _free($76);
 label=14;break;
 case 14: 
 HEAP32[(($40)>>2)]=7912;
 var $79=(($ss+16)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+4)|0);
 var $82=(tempValue=HEAP32[(($81)>>2)],HEAP32[(($81)>>2)]=tempValue+-1,tempValue);
 var $83=($82|0)==0;
 if($83){label=15;break;}else{label=16;break;}
 case 15: 
 var $85=(($80)|0);
 var $86=$80;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 FUNCTION_TABLE[$89]($85);
 label=16;break;
 case 16: 
 var $91=(($ss+64)|0);
 __ZNSt3__18ios_baseD2Ev($91);
 ___resumeException($60$0)
 case 17: 
 var $92=$2;
 var $93=HEAP8[($92)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=20;break;}else{label=18;break;}
 case 18: 
 var $97=(($2+8)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 if($99){label=20;break;}else{label=19;break;}
 case 19: 
 _free($98);
 label=20;break;
 case 20: 
 var $101=$36;
 var $102=$s_i;
 var $103=HEAP32[(($37)>>2)];
 var $104=((($103)-(12))|0);
 var $105=$104;
 var $106=HEAP32[(($105)>>2)];
 var $_sum1_i=((($106)+(4))|0);
 var $107=(($38+$_sum1_i)|0);
 var $108=$107;
 var $109=HEAP32[(($108)>>2)];
 var $110=$t_i_i_i_i;
 var $111=$t3_i_i_i_i;
 var $112=$r_i_i_i_i;
 var $113=$1;
 var $114=$block10_i_i_i_i;
 var $115=$t2_i_i_i_i;
 var $116=$109&64;
 var $117=($116|0)==0;
 if($117){label=21;break;}else{var $base_i_i_i_i_0=8;label=22;break;}
 case 21: 
 var $119=$109&8;
 var $120=($119|0)==0;
 var $_=($120?10:16);
 var $base_i_i_i_i_0=$_;label=22;break;
 case 22: 
 var $base_i_i_i_i_0;
 var $122=$s_i;
 var $storemerge_i_i_i_i=0;label=23;break;
 case 23: 
 var $storemerge_i_i_i_i;
 var $124=($storemerge_i_i_i_i>>>0)<3;
 if($124){label=24;break;}else{label=25;break;}
 case 24: 
 var $126=(($122+($storemerge_i_i_i_i<<2))|0);
 HEAP32[(($126)>>2)]=0;
 var $127=((($storemerge_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i=$127;label=23;break;
 case 25: 
 var $128=(($t+128)|0);
 var $129=HEAP16[(($128)>>1)];
 var $130=($129&65535);
 var $131=$130<<5;
 var $132=($base_i_i_i_i_0|0)==8;
 if(($base_i_i_i_i_0|0)==16|($base_i_i_i_i_0|0)==8){ label=26;break;}else{label=88;break;}
 case 26: 
 var $134=(($t+130)|0);
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=50;break;}else{label=27;break;}
 case 27: 
 var $139=(function() { try { __THREW__ = 0; return _strlen(384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=46;break; }
 case 28: 
 var $140=((($139)+(1))|0);
 var $141=((($139)+(13))|0);
 var $142=($141|0)==0;
 var $_size_i_i_i_i_i=($142?1:$141);
 label=29;break;
 case 29: 
 var $144=_malloc($_size_i_i_i_i_i);
 var $145=($144|0)==0;
 if($145){label=30;break;}else{label=39;break;}
 case 30: 
 var $147=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $148=($147|0)==0;
 if($148){label=37;break;}else{label=31;break;}
 case 31: 
 var $150=$147;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 32: 
 var $lpad_loopexit_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i$1;
 var $152=$lpad_phi_i_i_i_i_i$1;
 var $153=($152|0)<0;
 if($153){label=35;break;}else{var $eh_lpad_body12_i_i_i_i$1=$lpad_phi_i_i_i_i_i$1;var $eh_lpad_body12_i_i_i_i$0=$lpad_phi_i_i_i_i_i$0;label=41;break;}
 case 35: 
 var $155=$lpad_phi_i_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=40;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $157=___cxa_allocate_exception(4);
 var $158=$157;
 HEAP32[(($158)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($157,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 throw "Reached an unreachable!";
 case 39: 
 var $160=$144;
 var $161=(($144+4)|0);
 var $162=$161;
 HEAP32[(($162)>>2)]=$139;
 HEAP32[(($160)>>2)]=$139;
 var $163=(($144+12)|0);
 var $164=(($144+8)|0);
 var $165=$164;
 HEAP32[(($165)>>2)]=0;
 assert($140 % 1 === 0);(_memcpy($163, 384, $140)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt13runtime_errorEEvRKT_PKcS7_i($163,3664,200,1547) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=48;break; }
 case 40: 
 var $167$0 = ___cxa_find_matching_catch(-1, -1); var $167$1 = tempRet0;
 var $eh_lpad_body12_i_i_i_i$1=$167$1;var $eh_lpad_body12_i_i_i_i$0=$167$0;label=41;break;
 case 41: 
 var $eh_lpad_body12_i_i_i_i$0;
 var $eh_lpad_body12_i_i_i_i$1;
 var $168=$eh_lpad_body12_i_i_i_i$1;
 var $169=($168|0)<0;
 if($169){label=42;break;}else{var $eh_lpad_body_i_i_i_i$1=$eh_lpad_body12_i_i_i_i$1;var $eh_lpad_body_i_i_i_i$0=$eh_lpad_body12_i_i_i_i$0;label=47;break;}
 case 42: 
 var $171=$eh_lpad_body12_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=46;break; }
 case 43: 
 throw "Reached an unreachable!";
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i$1=$lpad_loopexit$1;var $eh_lpad_body_i_i_i_i$0=$lpad_loopexit$0;label=47;break;
 case 46: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i$1=$lpad_nonloopexit$1;var $eh_lpad_body_i_i_i_i$0=$lpad_nonloopexit$0;label=47;break;
 case 47: 
 var $eh_lpad_body_i_i_i_i$0;
 var $eh_lpad_body_i_i_i_i$1;
 var $173=$eh_lpad_body_i_i_i_i$0;
 var $174=$eh_lpad_body_i_i_i_i$1;
 var $_0289=$173;var $_0290=$174;label=241;break;
 case 48: 
 var $176$0 = ___cxa_find_matching_catch(-1, -1); var $176$1 = tempRet0;
 var $177=$176$0;
 var $178=$176$1;
 var $179=(($144+8)|0);
 var $180=$179;
 var $181=(tempValue=HEAP32[(($180)>>2)],HEAP32[(($180)>>2)]=tempValue+-1,tempValue);
 var $182=((($181)-(1))|0);
 var $183=($182|0)>=0;
 var $184=($144|0)==0;
 var $or_cond324=$183|$184;
 if($or_cond324){var $_0289=$177;var $_0290=$178;label=241;break;}else{label=49;break;}
 case 49: 
 _free($144);
 var $_0289=$177;var $_0290=$178;label=241;break;
 case 50: 
 var $186=($132?3:4);
 var $187=1<<$186;
 var $188=((($187)+(255))|0);
 var $189=$t;
 assert(136 % 1 === 0);(_memcpy($110, $189, 136)|0);
 var $190=(((($131>>>0))/(($186>>>0)))&-1);
 var $191=(((($131>>>0))%(($186>>>0)))&-1);
 var $192=($191|0)!=0;
 var $193=($192&1);
 var $194=((($190)+($193))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc($s_i,$194) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=46;break; }
 case 51: 
 var $196=HEAP8[($102)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=53;break;}else{label=52;break;}
 case 52: 
 var $200=(($s_i+4)|0);
 var $201=HEAP32[(($200)>>2)];
 var $205=$201;label=54;break;
 case 53: 
 var $203=($196&255);
 var $204=$203>>>1;
 var $205=$204;label=54;break;
 case 54: 
 var $205;
 var $206=$t_i_i_i_i;
 var $207=$s_i;
 var $208=(($207+1)|0);
 var $209$0=$186;
 var $209$1=0;
 var $210=(($s_i+8)|0);
 var $storemerge5_i_i_i_i=0;var $pos_i_i_i_i_0_in=$205;label=55;break;
 case 55: 
 var $pos_i_i_i_i_0_in;
 var $storemerge5_i_i_i_i;
 var $pos_i_i_i_i_0=((($pos_i_i_i_i_0_in)-(1))|0);
 var $212=($storemerge5_i_i_i_i>>>0)<($190>>>0);
 if($212){label=56;break;}else{label=57;break;}
 case 56: 
 var $213=HEAP32[(($206)>>2)];
 var $214=$213&$188;
 var $215=((($214)+(48))|0);
 var $216=(($215)&255);
 var $217=(($216<<24)>>24)>57;
 var $218=((($216)+(7))&255);
 var $c_i_i_i_i_0=($217?$218:$216);
 var $219=HEAP8[($102)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 var $222=HEAP32[(($210)>>2)];
 var $_325=($221?$208:$222);
 var $223=(($_325+$pos_i_i_i_i_0)|0);
 HEAP8[($223)]=$c_i_i_i_i_0;
 __ZN5boost14multiprecision8backends16eval_right_shiftILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valueEvE4typeERS8_y($t_i_i_i_i,$209$0,$209$1);
 var $224=((($storemerge5_i_i_i_i)+(1))|0);
 var $storemerge5_i_i_i_i=$224;var $pos_i_i_i_i_0_in=$pos_i_i_i_i_0;label=55;break;
 case 57: 
 var $226=($191|0)==0;
 if($226){label=59;break;}else{label=58;break;}
 case 58: 
 var $227=1<<$191;
 var $228=((($227)+(255))|0);
 var $229=HEAP32[(($206)>>2)];
 var $230=$229&$228;
 var $231=((($230)+(48))|0);
 var $232=(($231)&255);
 var $233=(($232<<24)>>24)>57;
 var $234=((($232)+(8))&255);
 var $c1_i_i_i_i_0=($233?$234:$232);
 var $235=HEAP8[($102)];
 var $236=$235&1;
 var $237=(($236<<24)>>24)==0;
 var $238=HEAP32[(($210)>>2)];
 var $_326=($237?$208:$238);
 var $239=(($_326+$pos_i_i_i_i_0)|0);
 HEAP8[($239)]=$c1_i_i_i_i_0;
 label=59;break;
 case 59: 
 var $240=HEAP8[($102)];
 var $241=$240&1;
 var $242=(($241<<24)>>24)==0;
 if($242){label=61;break;}else{label=60;break;}
 case 60: 
 var $244=(($s_i+4)|0);
 var $245=HEAP32[(($244)>>2)];
 var $249=$245;label=62;break;
 case 61: 
 var $247=($240&255);
 var $248=$247>>>1;
 var $249=$248;label=62;break;
 case 62: 
 var $249;
 var $250=($249|0)==0;
 if($250){var $storemerge7_i_i_i_i=-1;label=68;break;}else{label=63;break;}
 case 63: 
 var $251=HEAP32[(($210)>>2)];
 var $_327=($242?$208:$251);
 var $252=(($_327+$249)|0);
 var $storemerge6_i_i_i_i=$_327;label=64;break;
 case 64: 
 var $storemerge6_i_i_i_i;
 var $254=($storemerge6_i_i_i_i|0)==($252|0);
 if($254){var $storemerge7_i_i_i_i=-1;label=68;break;}else{label=65;break;}
 case 65: 
 var $256=HEAP8[($storemerge6_i_i_i_i)];
 var $257=(($256<<24)>>24)==48;
 if($257){label=67;break;}else{label=66;break;}
 case 66: 
 var $259=$storemerge6_i_i_i_i;
 var $260=$_327;
 var $261=((($259)-($260))|0);
 var $storemerge7_i_i_i_i=$261;label=68;break;
 case 67: 
 var $263=(($storemerge6_i_i_i_i+1)|0);
 var $storemerge6_i_i_i_i=$263;label=64;break;
 case 68: 
 var $storemerge7_i_i_i_i;
 if($242){label=70;break;}else{label=69;break;}
 case 69: 
 var $265=(($s_i+4)|0);
 var $266=HEAP32[(($265)>>2)];
 var $270=$266;label=71;break;
 case 70: 
 var $268=($240&255);
 var $269=$268>>>1;
 var $270=$269;label=71;break;
 case 71: 
 var $270;
 var $271=($270|0)!=0;
 var $272=($storemerge7_i_i_i_i|0)==-1;
 var $or_cond328=$271&$272;
 if($or_cond328){label=72;break;}else{var $282=$storemerge7_i_i_i_i;label=76;break;}
 case 72: 
 if($242){label=74;break;}else{label=73;break;}
 case 73: 
 var $275=(($s_i+4)|0);
 var $276=HEAP32[(($275)>>2)];
 var $280=$276;label=75;break;
 case 74: 
 var $278=($240&255);
 var $279=$278>>>1;
 var $280=$279;label=75;break;
 case 75: 
 var $280;
 var $281=((($280)-(1))|0);
 var $282=$281;label=76;break;
 case 76: 
 var $282;
 var $283=($240&255);
 var $284=$283&1;
 var $285=($284|0)==0;
 if($285){label=78;break;}else{label=77;break;}
 case 77: 
 var $287=(($s_i+4)|0);
 var $288=HEAP32[(($287)>>2)];
 var $291=$288;label=79;break;
 case 78: 
 var $290=$283>>>1;
 var $291=$290;label=79;break;
 case 79: 
 var $291;
 var $292=($282|0)==0;
 if($292){label=86;break;}else{label=80;break;}
 case 80: 
 var $293=HEAP32[(($210)>>2)];
 var $_329=($242?$208:$293);
 var $294=($291>>>0)<($282>>>0);
 var $_sroa_speculated_i_i=($294?$291:$282);
 var $295=($291|0)==($_sroa_speculated_i_i|0);
 var $_pre314=((($291)-($_sroa_speculated_i_i))|0);
 if($295){var $298=$240;label=82;break;}else{label=81;break;}
 case 81: 
 var $297=(($_329+$_sroa_speculated_i_i)|0);
 _memmove($_329,$297,$_pre314,1,0);
 var $_pre_i_i=HEAP8[($102)];
 var $298=$_pre_i_i;label=82;break;
 case 82: 
 var $298;
 var $299=$298&1;
 var $300=(($299<<24)>>24)==0;
 if($300){label=84;break;}else{label=83;break;}
 case 83: 
 var $302=(($s_i+4)|0);
 HEAP32[(($302)>>2)]=$_pre314;
 label=85;break;
 case 84: 
 var $304=$_pre314<<1;
 var $305=(($304)&255);
 HEAP8[($102)]=$305;
 label=85;break;
 case 85: 
 var $306=(($_329+$_pre314)|0);
 HEAP8[($306)]=0;
 label=86;break;
 case 86: 
 var $307=$109&512;
 var $308=($307|0)==0;
 if($308){label=245;break;}else{label=87;break;}
 case 87: 
 var $310=($132?3520:3320);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($s_i,0,$310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=245;break; } else { label=46;break; }
 case 88: 
 var $312=(((($131>>>0))/(3))&-1);
 var $313=((($312)+(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc($s_i,$313) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=46;break; }
 case 89: 
 var $315=HEAP8[($102)];
 var $316=$315&1;
 var $317=(($316<<24)>>24)==0;
 if($317){label=91;break;}else{label=90;break;}
 case 90: 
 var $319=(($s_i+4)|0);
 var $320=HEAP32[(($319)>>2)];
 var $324=$320;label=92;break;
 case 91: 
 var $322=($315&255);
 var $323=$322>>>1;
 var $324=$323;label=92;break;
 case 92: 
 var $324;
 var $325=((($324)-(1))|0);
 var $326=$t;
 assert(136 % 1 === 0);(_memcpy($111, $326, 136)|0);
 var $327=$r_i_i_i_i;
 HEAP32[(($327)>>2)]=0;
 var $328=(($r_i_i_i_i+128)|0);
 HEAP16[(($328)>>1)]=1;
 var $329=(($r_i_i_i_i+130)|0);
 HEAP8[($329)]=0;
 var $330=(($t3_i_i_i_i+130)|0);
 var $331=HEAP8[($330)];
 var $332=$331&1;
 var $333=(($332<<24)>>24)==0;
 if($333){var $neg_i_i_i_i_0=0;label=94;break;}else{label=93;break;}
 case 93: 
 var $334=$332^1;
 HEAP8[($330)]=$334;
 var $neg_i_i_i_i_0=1;label=94;break;
 case 94: 
 var $neg_i_i_i_i_0;
 var $336=HEAP16[(($128)>>1)];
 var $337=(($336<<16)>>16)==1;
 if($337){label=95;break;}else{label=199;break;}
 case 95: 
 var $339=$t3_i_i_i_i;
 var $340=(($buf_i_i_i_i_i_i)|0);
 var $341=$1;
 var $storemerge_i_i_i_i_i_i=0;label=96;break;
 case 96: 
 var $storemerge_i_i_i_i_i_i;
 var $343=($storemerge_i_i_i_i_i_i>>>0)<3;
 if($343){label=97;break;}else{label=98;break;}
 case 97: 
 var $345=(($341+($storemerge_i_i_i_i_i_i<<2))|0);
 HEAP32[(($345)>>2)]=0;
 var $346=((($storemerge_i_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i_i=$346;label=96;break;
 case 98: 
 var $347=(($buf_i_i_i_i_i_i+20)|0);
 var $348=HEAP32[(($339)>>2)];
 var $349=$loc_i_i_i_i_i_i_i_i;
 var $350=$grouping_i_i_i_i_i_i_i_i;
 __ZNSt3__16localeC2Ev($loc_i_i_i_i_i_i_i_i);
 var $351=HEAP8[(19856)];
 var $352=(($351<<24)>>24)==0;
 if($352){label=99;break;}else{label=103;break;}
 case 99: 
 var $354=___cxa_guard_acquire(19856);
 var $355=($354|0)==0;
 if($355){label=103;break;}else{label=100;break;}
 case 100: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(18016,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=102;break; }
 case 101: 
 HEAP32[((17840)>>2)]=18016;
 label=103;break;
 case 102: 
 var $359$0 = ___cxa_find_matching_catch(-1, -1); var $359$1 = tempRet0;
 var $_phi_trans_insert299_phi_trans_insert=(($loc_i_i_i_i_i_i_i_i)|0);
 var $_pre300_pre=HEAP32[(($_phi_trans_insert299_phi_trans_insert)>>2)];
 var $eh_lpad_body_i_i_i_i_i_i_i_i$1=$359$1;var $eh_lpad_body_i_i_i_i_i_i_i_i$0=$359$0;var $_pre300=$_pre300_pre;label=151;break;
 case 103: 
 var $360=(($loc_i_i_i_i_i_i_i_i)|0);
 var $361=HEAP32[(($360)>>2)];
 var $362=HEAP32[((17840)>>2)];
 var $363=($361|0)==($362|0);
 if($363){var $_3=$347;var $n_i_i_i_i_i_i_i_i_2=$348;label=162;break;}else{label=104;break;}
 case 104: 
 var $365=(($361+144)|0);
 var $366=$365;
 var $367=$365;
 var $368=HEAP8[($367)];
 var $369=($368&255);
 var $370=$369&1;
 var $371=($370|0)==0;
 if($371){label=106;break;}else{label=105;break;}
 case 105: 
 var $373=(($361+148)|0);
 var $374=HEAP32[(($373)>>2)];
 var $377=$374;label=107;break;
 case 106: 
 var $376=$369>>>1;
 var $377=$376;label=107;break;
 case 107: 
 var $377;
 var $378=$368&1;
 var $379=(($378<<24)>>24)==0;
 if($379){label=109;break;}else{label=108;break;}
 case 108: 
 var $381=(($361+152)|0);
 var $382=HEAP32[(($381)>>2)];
 var $385=$382;label=110;break;
 case 109: 
 var $384=(($366+1)|0);
 var $385=$384;label=110;break;
 case 110: 
 var $385;
 var $386=($377>>>0)>1;
 var $_sroa_speculated_i_i_i_i_i_i_i_i_i_i_i_i=($386?1:$377);
 var $387=_memcmp($385,2496,$_sroa_speculated_i_i_i_i_i_i_i_i_i_i_i_i);
 var $388=($387|0)==0;
 if($388){label=111;break;}else{label=112;break;}
 case 111: 
 var $389=$386^1;
 var $not_=($377|0)!=0;
 var $390=$not_&$389;
 if($390){label=130;break;}else{label=112;break;}
 case 112: 
 var $391=(($362+144)|0);
 if($371){label=114;break;}else{label=113;break;}
 case 113: 
 var $393=(($361+148)|0);
 var $394=HEAP32[(($393)>>2)];
 var $397=$394;label=115;break;
 case 114: 
 var $396=$369>>>1;
 var $397=$396;label=115;break;
 case 115: 
 var $397;
 var $398=$391;
 var $399=$391;
 var $400=HEAP8[($399)];
 var $401=($400&255);
 var $402=$401&1;
 var $403=($402|0)==0;
 if($403){label=117;break;}else{label=116;break;}
 case 116: 
 var $405=(($362+148)|0);
 var $406=HEAP32[(($405)>>2)];
 var $409=$406;label=118;break;
 case 117: 
 var $408=$401>>>1;
 var $409=$408;label=118;break;
 case 118: 
 var $409;
 var $410=($397|0)==($409|0);
 if($410){label=119;break;}else{label=130;break;}
 case 119: 
 if($379){label=121;break;}else{label=120;break;}
 case 120: 
 var $413=(($361+152)|0);
 var $414=HEAP32[(($413)>>2)];
 var $417=$414;label=122;break;
 case 121: 
 var $416=(($366+1)|0);
 var $417=$416;label=122;break;
 case 122: 
 var $417;
 var $418=$400&1;
 var $419=(($418<<24)>>24)==0;
 if($419){label=124;break;}else{label=123;break;}
 case 123: 
 var $421=(($362+152)|0);
 var $422=HEAP32[(($421)>>2)];
 var $425=$422;label=125;break;
 case 124: 
 var $424=(($398+1)|0);
 var $425=$424;label=125;break;
 case 125: 
 var $425;
 if($379){label=126;break;}else{label=129;break;}
 case 126: 
 var $426=($397|0)==0;
 if($426){var $_3=$347;var $n_i_i_i_i_i_i_i_i_2=$348;label=162;break;}else{var $__rp_i_074_i_i_i_i_i_i_i_i_i_i=$425;var $__lp_i_075_i_i_i_i_i_i_i_i_i_i=$417;var $__lhs_sz_i_076_i_i_i_i_i_i_i_i_i_i=$397;label=127;break;}
 case 127: 
 var $__lhs_sz_i_076_i_i_i_i_i_i_i_i_i_i;
 var $__lp_i_075_i_i_i_i_i_i_i_i_i_i;
 var $__rp_i_074_i_i_i_i_i_i_i_i_i_i;
 var $427=HEAP8[($__lp_i_075_i_i_i_i_i_i_i_i_i_i)];
 var $428=HEAP8[($__rp_i_074_i_i_i_i_i_i_i_i_i_i)];
 var $429=(($427<<24)>>24)==(($428<<24)>>24);
 if($429){label=128;break;}else{label=130;break;}
 case 128: 
 var $431=((($__lhs_sz_i_076_i_i_i_i_i_i_i_i_i_i)-(1))|0);
 var $432=(($__lp_i_075_i_i_i_i_i_i_i_i_i_i+1)|0);
 var $433=(($__rp_i_074_i_i_i_i_i_i_i_i_i_i+1)|0);
 var $434=($431|0)==0;
 if($434){var $_3=$347;var $n_i_i_i_i_i_i_i_i_2=$348;label=162;break;}else{var $__rp_i_074_i_i_i_i_i_i_i_i_i_i=$433;var $__lp_i_075_i_i_i_i_i_i_i_i_i_i=$432;var $__lhs_sz_i_076_i_i_i_i_i_i_i_i_i_i=$431;label=127;break;}
 case 129: 
 var $435=_memcmp($417,$425,$397);
 var $phitmp=($435|0)==0;
 if($phitmp){var $_3=$347;var $n_i_i_i_i_i_i_i_i_2=$348;label=162;break;}else{label=130;break;}
 case 130: 
 var $436=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($361,18904) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=131;break; } else { label=150;break; }
 case 131: 
 var $437=$436;
 var $438=$436;
 var $439=HEAP32[(($438)>>2)];
 var $440=(($439+20)|0);
 var $441=HEAP32[(($440)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$441]($grouping_i_i_i_i_i_i_i_i,$437) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=132;break; } else { label=150;break; }
 case 132: 
 var $442=HEAP8[($350)];
 var $443=$442&1;
 var $444=(($443<<24)>>24)==0;
 if($444){label=134;break;}else{label=133;break;}
 case 133: 
 var $446=(($grouping_i_i_i_i_i_i_i_i+4)|0);
 var $447=HEAP32[(($446)>>2)];
 var $451=$447;label=135;break;
 case 134: 
 var $449=($442&255);
 var $450=$449>>>1;
 var $451=$450;label=135;break;
 case 135: 
 var $451;
 var $452=($451|0)==0;
 if($452){var $storemerge_i_i2_i_i_i_i_i_i=0;var $_0283=0;var $_2=$347;var $n_i_i_i_i_i_i_i_i_1=$348;var $522=$442;label=158;break;}else{label=136;break;}
 case 136: 
 if($444){label=138;break;}else{label=137;break;}
 case 137: 
 var $455=(($grouping_i_i_i_i_i_i_i_i+8)|0);
 var $456=HEAP32[(($455)>>2)];
 var $460=$456;label=139;break;
 case 138: 
 var $458=$grouping_i_i_i_i_i_i_i_i;
 var $459=(($458+1)|0);
 var $460=$459;label=139;break;
 case 139: 
 var $460;
 var $461=HEAP8[($460)];
 var $462=(($461<<24)>>24)>0;
 if($462){label=140;break;}else{var $storemerge_i_i2_i_i_i_i_i_i=0;var $_0283=0;var $_2=$347;var $n_i_i_i_i_i_i_i_i_1=$348;var $522=$442;label=158;break;}
 case 140: 
 var $464=$436;
 var $465=HEAP32[(($464)>>2)];
 var $466=(($465+16)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$467]($437) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=141;break; } else { label=152;break; }
 case 141: 
 var $469=HEAP8[($350)];
 var $470=$469&1;
 var $471=(($470<<24)>>24)==0;
 if($471){label=143;break;}else{label=142;break;}
 case 142: 
 var $473=(($grouping_i_i_i_i_i_i_i_i+8)|0);
 var $474=HEAP32[(($473)>>2)];
 var $_pre309=$grouping_i_i_i_i_i_i_i_i;
 var $_pre310=(($_pre309+1)|0);
 var $478=$474;var $_pre_phi311=$_pre310;var $_pre_phi313=$473;label=144;break;
 case 143: 
 var $476=$grouping_i_i_i_i_i_i_i_i;
 var $477=(($476+1)|0);
 var $_pre312=(($grouping_i_i_i_i_i_i_i_i+8)|0);
 var $478=$477;var $_pre_phi311=$477;var $_pre_phi313=$_pre312;label=144;break;
 case 144: 
 var $_pre_phi313;
 var $_pre_phi311;
 var $478;
 var $479=HEAP8[($478)];
 var $_0284=$347;var $n_i_i_i_i_i_i_i_i_0=$348;var $group_i_i_i_i_i_i_i_i_0=0;var $last_grp_size_i_i_i_i_i_i_i_i_0=$479;var $left_i_i_i_i_i_i_i_i_0=$479;label=145;break;
 case 145: 
 var $left_i_i_i_i_i_i_i_i_0;
 var $last_grp_size_i_i_i_i_i_i_i_i_0;
 var $group_i_i_i_i_i_i_i_i_0;
 var $n_i_i_i_i_i_i_i_i_0;
 var $_0284;
 var $480=(($left_i_i_i_i_i_i_i_i_0<<24)>>24)==0;
 if($480){label=146;break;}else{var $_1285=$_0284;var $group_i_i_i_i_i_i_i_i_1=$group_i_i_i_i_i_i_i_i_0;var $last_grp_size_i_i_i_i_i_i_i_i_2=$last_grp_size_i_i_i_i_i_i_i_i_0;var $left_i_i_i_i_i_i_i_i_1=$left_i_i_i_i_i_i_i_i_0;label=156;break;}
 case 146: 
 var $482=((($group_i_i_i_i_i_i_i_i_0)+(1))|0);
 var $483=($482>>>0)<($451>>>0);
 if($483){label=147;break;}else{var $last_grp_size_i_i_i_i_i_i_i_i_1=$last_grp_size_i_i_i_i_i_i_i_i_0;label=155;break;}
 case 147: 
 var $485=HEAP8[($350)];
 var $486=$485&1;
 var $487=(($486<<24)>>24)==0;
 if($487){var $490=$_pre_phi311;label=149;break;}else{label=148;break;}
 case 148: 
 var $489=HEAP32[(($_pre_phi313)>>2)];
 var $490=$489;label=149;break;
 case 149: 
 var $490;
 var $491=(($490+$482)|0);
 var $492=HEAP8[($491)];
 var $493=(($492<<24)>>24)<1;
 var $_330=($493?127:$492);
 var $last_grp_size_i_i_i_i_i_i_i_i_1=$_330;label=155;break;
 case 150: 
 var $495$0 = ___cxa_find_matching_catch(-1, -1); var $495$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i_i_i_i_i$1=$495$1;var $eh_lpad_body_i_i_i_i_i_i_i_i$0=$495$0;var $_pre300=$361;label=151;break;
 case 151: 
 var $_pre300;
 var $eh_lpad_body_i_i_i_i_i_i_i_i$0;
 var $eh_lpad_body_i_i_i_i_i_i_i_i$1;
 var $496=$eh_lpad_body_i_i_i_i_i_i_i_i$0;
 var $497=$eh_lpad_body_i_i_i_i_i_i_i_i$1;
 var $_0286=$496;var $_0287=$497;var $546=$_pre300;label=165;break;
 case 152: 
 var $499$0 = ___cxa_find_matching_catch(-1, -1); var $499$1 = tempRet0;
 var $500=$499$0;
 var $501=$499$1;
 var $502=HEAP8[($350)];
 var $503=$502&1;
 var $504=(($503<<24)>>24)==0;
 if($504){var $_0286=$500;var $_0287=$501;var $546=$361;label=165;break;}else{label=153;break;}
 case 153: 
 var $506=(($grouping_i_i_i_i_i_i_i_i+8)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=($507|0)==0;
 if($508){var $_0286=$500;var $_0287=$501;var $546=$361;label=165;break;}else{label=154;break;}
 case 154: 
 _free($507);
 var $_0286=$500;var $_0287=$501;var $546=$361;label=165;break;
 case 155: 
 var $last_grp_size_i_i_i_i_i_i_i_i_1;
 var $511=((($_0284)-(1))|0);
 HEAP8[($511)]=$468;
 var $_1285=$511;var $group_i_i_i_i_i_i_i_i_1=$482;var $last_grp_size_i_i_i_i_i_i_i_i_2=$last_grp_size_i_i_i_i_i_i_i_i_1;var $left_i_i_i_i_i_i_i_i_1=$last_grp_size_i_i_i_i_i_i_i_i_1;label=156;break;
 case 156: 
 var $left_i_i_i_i_i_i_i_i_1;
 var $last_grp_size_i_i_i_i_i_i_i_i_2;
 var $group_i_i_i_i_i_i_i_i_1;
 var $_1285;
 var $513=((($left_i_i_i_i_i_i_i_i_1)-(1))&255);
 var $514=((($_1285)-(1))|0);
 var $515=(((($n_i_i_i_i_i_i_i_i_0>>>0))%(10))&-1);
 var $516=$515|48;
 var $517=(($516)&255);
 HEAP8[($514)]=$517;
 var $518=(((($n_i_i_i_i_i_i_i_i_0>>>0))/(10))&-1);
 var $519=($n_i_i_i_i_i_i_i_i_0>>>0)<10;
 if($519){label=157;break;}else{var $_0284=$514;var $n_i_i_i_i_i_i_i_i_0=$518;var $group_i_i_i_i_i_i_i_i_0=$group_i_i_i_i_i_i_i_i_1;var $last_grp_size_i_i_i_i_i_i_i_i_0=$last_grp_size_i_i_i_i_i_i_i_i_2;var $left_i_i_i_i_i_i_i_i_0=$513;label=145;break;}
 case 157: 
 var $_pre298=HEAP8[($350)];
 var $storemerge_i_i2_i_i_i_i_i_i=1;var $_0283=$514;var $_2=$514;var $n_i_i_i_i_i_i_i_i_1=$518;var $522=$_pre298;label=158;break;
 case 158: 
 var $522;
 var $n_i_i_i_i_i_i_i_i_1;
 var $_2;
 var $_0283;
 var $storemerge_i_i2_i_i_i_i_i_i;
 var $523=$522&1;
 var $524=(($523<<24)>>24)==0;
 if($524){label=161;break;}else{label=159;break;}
 case 159: 
 var $526=(($grouping_i_i_i_i_i_i_i_i+8)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=($527|0)==0;
 if($528){label=161;break;}else{label=160;break;}
 case 160: 
 _free($527);
 label=161;break;
 case 161: 
 var $cond_i_i_i_i_i_i_i=($storemerge_i_i2_i_i_i_i_i_i|0)==0;
 if($cond_i_i_i_i_i_i_i){var $_3=$_2;var $n_i_i_i_i_i_i_i_i_2=$n_i_i_i_i_i_i_i_i_1;label=162;break;}else{var $_1=$_0283;label=163;break;}
 case 162: 
 var $n_i_i_i_i_i_i_i_i_2;
 var $_3;
 var $530=((($_3)-(1))|0);
 var $531=(((($n_i_i_i_i_i_i_i_i_2>>>0))%(10))&-1);
 var $532=$531|48;
 var $533=(($532)&255);
 HEAP8[($530)]=$533;
 var $534=(((($n_i_i_i_i_i_i_i_i_2>>>0))/(10))&-1);
 var $535=($n_i_i_i_i_i_i_i_i_2>>>0)<10;
 if($535){var $_1=$530;label=163;break;}else{var $_3=$530;var $n_i_i_i_i_i_i_i_i_2=$534;label=162;break;}
 case 163: 
 var $_1;
 var $536=HEAP32[(($360)>>2)];
 var $537=(($536+4)|0);
 var $538=(tempValue=HEAP32[(($537)>>2)],HEAP32[(($537)>>2)]=tempValue+-1,tempValue);
 var $539=($538|0)==0;
 if($539){label=164;break;}else{label=168;break;}
 case 164: 
 var $541=(($536)|0);
 var $542=$536;
 var $543=HEAP32[(($542)>>2)];
 var $544=(($543+8)|0);
 var $545=HEAP32[(($544)>>2)];
 FUNCTION_TABLE[$545]($541);
 label=168;break;
 case 165: 
 var $546;
 var $_0287;
 var $_0286;
 var $547=(($546+4)|0);
 var $548=(tempValue=HEAP32[(($547)>>2)],HEAP32[(($547)>>2)]=tempValue+-1,tempValue);
 var $549=($548|0)==0;
 if($549){label=166;break;}else{label=167;break;}
 case 166: 
 var $551=(($546)|0);
 var $552=$546;
 var $553=HEAP32[(($552)>>2)];
 var $554=(($553+8)|0);
 var $555=HEAP32[(($554)>>2)];
 FUNCTION_TABLE[$555]($551);
 label=167;break;
 case 167: 
 var $556$0=$_0286;
 var $556$1=0;
 var $557$0=$556$0;
 var $557$1=$_0287;
 var $eh_lpad_body_i_i_i_i_i_i$1=$557$1;var $eh_lpad_body_i_i_i_i_i_i$0=$557$0;label=185;break;
 case 168: 
 var $558=$347;
 var $559=$_1;
 var $560=((($558)-($559))|0);
 var $561=HEAP8[($113)];
 var $562=$561&1;
 var $563=(($562<<24)>>24)==0;
 if($563){var $570=10;var $569=$561;label=170;break;}else{label=169;break;}
 case 169: 
 var $565=(($1)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=$566&-2;
 var $phitmp_i_i_i_i_i_i_i_i=((($567)-(1))|0);
 var $568=(($566)&255);
 var $570=$phitmp_i_i_i_i_i_i_i_i;var $569=$568;label=170;break;
 case 170: 
 var $569;
 var $570;
 var $571=($570>>>0)<($560>>>0);
 if($571){label=171;break;}else{var $583=$569;label=176;break;}
 case 171: 
 var $573=$569&1;
 var $574=(($573<<24)>>24)==0;
 if($574){label=173;break;}else{label=172;break;}
 case 172: 
 var $576=(($1+4)|0);
 var $577=HEAP32[(($576)>>2)];
 var $581=$577;label=174;break;
 case 173: 
 var $579=($569&255);
 var $580=$579>>>1;
 var $581=$580;label=174;break;
 case 174: 
 var $581;
 var $582=((($560)-($570))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($1,$570,$582,$581,0,$581,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=175;break; } else { label=184;break; }
 case 175: 
 var $_pre308=HEAP8[($113)];
 var $583=$_pre308;label=176;break;
 case 176: 
 var $583;
 var $584=$583&1;
 var $585=(($584<<24)>>24)==0;
 if($585){label=178;break;}else{label=177;break;}
 case 177: 
 var $587=(($1+8)|0);
 var $588=HEAP32[(($587)>>2)];
 var $storemerge_i_i_i_i_i_i_i_i=$588;var $_0288=$_1;label=179;break;
 case 178: 
 var $590=$1;
 var $591=(($590+1)|0);
 var $storemerge_i_i_i_i_i_i_i_i=$591;var $_0288=$_1;label=179;break;
 case 179: 
 var $_0288;
 var $storemerge_i_i_i_i_i_i_i_i;
 var $592=($_0288|0)==($347|0);
 if($592){label=181;break;}else{label=180;break;}
 case 180: 
 var $594=HEAP8[($_0288)];
 HEAP8[($storemerge_i_i_i_i_i_i_i_i)]=$594;
 var $595=(($_0288+1)|0);
 var $596=(($storemerge_i_i_i_i_i_i_i_i+1)|0);
 var $storemerge_i_i_i_i_i_i_i_i=$596;var $_0288=$595;label=179;break;
 case 181: 
 HEAP8[($storemerge_i_i_i_i_i_i_i_i)]=0;
 var $598=HEAP8[($113)];
 var $599=$598&1;
 var $600=(($599<<24)>>24)==0;
 if($600){label=183;break;}else{label=182;break;}
 case 182: 
 var $602=(($1+4)|0);
 HEAP32[(($602)>>2)]=$560;
 label=188;break;
 case 183: 
 var $604=$560<<1;
 var $605=(($604)&255);
 HEAP8[($113)]=$605;
 label=188;break;
 case 184: 
 var $607$0 = ___cxa_find_matching_catch(-1, -1); var $607$1 = tempRet0;
 var $eh_lpad_body_i_i_i_i_i_i$1=$607$1;var $eh_lpad_body_i_i_i_i_i_i$0=$607$0;label=185;break;
 case 185: 
 var $eh_lpad_body_i_i_i_i_i_i$0;
 var $eh_lpad_body_i_i_i_i_i_i$1;
 var $608=HEAP8[($113)];
 var $609=$608&1;
 var $610=(($609<<24)>>24)==0;
 if($610){var $eh_lpad_body_i_i_i_i$1=$eh_lpad_body_i_i_i_i_i_i$1;var $eh_lpad_body_i_i_i_i$0=$eh_lpad_body_i_i_i_i_i_i$0;label=47;break;}else{label=186;break;}
 case 186: 
 var $612=(($1+8)|0);
 var $613=HEAP32[(($612)>>2)];
 var $614=($613|0)==0;
 if($614){var $eh_lpad_body_i_i_i_i$1=$eh_lpad_body_i_i_i_i_i_i$1;var $eh_lpad_body_i_i_i_i$0=$eh_lpad_body_i_i_i_i_i_i$0;label=47;break;}else{label=187;break;}
 case 187: 
 _free($613);
 var $eh_lpad_body_i_i_i_i$1=$eh_lpad_body_i_i_i_i_i_i$1;var $eh_lpad_body_i_i_i_i$0=$eh_lpad_body_i_i_i_i_i_i$0;label=47;break;
 case 188: 
 var $616=HEAP8[($102)];
 var $617=$616&1;
 var $618=(($617<<24)>>24)==0;
 if($618){label=190;break;}else{label=189;break;}
 case 189: 
 var $620=(($s_i+8)|0);
 var $621=HEAP32[(($620)>>2)];
 HEAP8[($621)]=0;
 var $622=(($s_i+4)|0);
 HEAP32[(($622)>>2)]=0;
 label=191;break;
 case 190: 
 var $624=$s_i;
 var $625=(($624+1)|0);
 HEAP8[($625)]=0;
 HEAP8[($102)]=0;
 label=191;break;
 case 191: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($s_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { label=192;break; }
 case 192: 
 var $627$0 = ___cxa_find_matching_catch(-1, -1,0); var $627$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 193: 
 assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($113)+(8))>>2)];
 var $storemerge4_i_i_i_i=0;label=194;break;
 case 194: 
 var $storemerge4_i_i_i_i;
 var $629=($storemerge4_i_i_i_i>>>0)<3;
 if($629){label=195;break;}else{label=196;break;}
 case 195: 
 var $631=(($341+($storemerge4_i_i_i_i<<2))|0);
 HEAP32[(($631)>>2)]=0;
 var $632=((($storemerge4_i_i_i_i)+(1))|0);
 var $storemerge4_i_i_i_i=$632;label=194;break;
 case 196: 
 var $633=HEAP8[($113)];
 var $634=$633&1;
 var $635=(($634<<24)>>24)==0;
 if($635){label=207;break;}else{label=197;break;}
 case 197: 
 var $637=(($1+8)|0);
 var $638=HEAP32[(($637)>>2)];
 var $639=($638|0)==0;
 if($639){label=207;break;}else{label=198;break;}
 case 198: 
 _free($638);
 label=207;break;
 case 199: 
 var $642=$block10_i_i_i_i;
 var $643=(($block10_i_i_i_i+128)|0);
 var $644=(($block10_i_i_i_i+130)|0);
 HEAP16[(($643)>>1)]=1;
 HEAP32[(($642)>>2)]=1000000000;
 HEAP8[($644)]=0;
 var $645=(($t3_i_i_i_i+128)|0);
 var $646=$t3_i_i_i_i;
 var $647=$t2_i_i_i_i;
 var $648=(($t2_i_i_i_i+128)|0);
 var $649=(($t2_i_i_i_i+130)|0);
 var $650=$t2_i_i_i_i;
 var $651=$t2_i_i_i_i;
 var $652=$t2_i_i_i_i;
 var $653=(($t2_i_i_i_i+130)|0);
 var $654=$s_i;
 var $655=(($654+1)|0);
 var $656=(($s_i+8)|0);
 var $pos2_i_i_i_i_0=$325;label=200;break;
 case 200: 
 var $pos2_i_i_i_i_0;
 var $657=HEAP16[(($645)>>1)];
 var $658=(($657<<16)>>16)==1;
 if($658){label=201;break;}else{label=202;break;}
 case 201: 
 var $659=HEAP32[(($646)>>2)];
 var $660=($659|0)==0;
 if($660){label=207;break;}else{label=202;break;}
 case 202: 
 HEAP32[(($647)>>2)]=0;
 HEAP16[(($648)>>1)]=1;
 HEAP8[($649)]=0;
 (function() { try { __THREW__ = 0; return __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($t2_i_i_i_i,$t3_i_i_i_i,$block10_i_i_i_i,$r_i_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=203;break; } else { label=45;break; }
 case 203: 
 var $661=HEAP16[(($648)>>1)];
 var $662=($661&65535);
 var $663=($661&65535)>32;
 var $_331=($663?32:$661);
 HEAP16[(($645)>>1)]=$_331;
 var $664=(($650+($662<<2))|0);
 var $665=$664;
 var $666=((($665)-($651))|0);
 assert($666 % 1 === 0);(_memcpy($111, $652, $666)|0);
 var $667=HEAP8[($653)];
 var $668=$667&1;
 HEAP8[($330)]=$668;
 var $669=HEAP32[(($327)>>2)];
 var $storemerge3_i_i_i_i=0;var $pos2_i_i_i_i_1=$pos2_i_i_i_i_0;var $v_i_i_i_i_0=$669;label=204;break;
 case 204: 
 var $v_i_i_i_i_0;
 var $pos2_i_i_i_i_1;
 var $storemerge3_i_i_i_i;
 var $671=($storemerge3_i_i_i_i>>>0)<9;
 if($671){label=205;break;}else{var $pos2_i_i_i_i_0=$pos2_i_i_i_i_1;label=200;break;}
 case 205: 
 var $672=(((($v_i_i_i_i_0>>>0))%(10))&-1);
 var $673=$672|48;
 var $674=(($673)&255);
 var $675=(((($v_i_i_i_i_0>>>0))/(10))&-1);
 var $676=HEAP8[($102)];
 var $677=$676&1;
 var $678=(($677<<24)>>24)==0;
 var $679=HEAP32[(($656)>>2)];
 var $_332=($678?$655:$679);
 var $680=(($_332+$pos2_i_i_i_i_1)|0);
 HEAP8[($680)]=$674;
 var $681=((($pos2_i_i_i_i_1)-(1))|0);
 var $682=($pos2_i_i_i_i_1|0)==0;
 if($682){var $pos2_i_i_i_i_0=$681;label=200;break;}else{label=206;break;}
 case 206: 
 var $684=((($storemerge3_i_i_i_i)+(1))|0);
 var $storemerge3_i_i_i_i=$684;var $pos2_i_i_i_i_1=$681;var $v_i_i_i_i_0=$675;label=204;break;
 case 207: 
 var $685=HEAP8[($102)];
 var $686=$685&1;
 var $687=(($686<<24)>>24)==0;
 if($687){label=209;break;}else{label=208;break;}
 case 208: 
 var $689=(($s_i+4)|0);
 var $690=HEAP32[(($689)>>2)];
 var $694=$690;label=210;break;
 case 209: 
 var $692=($685&255);
 var $693=$692>>>1;
 var $694=$693;label=210;break;
 case 210: 
 var $694;
 var $695=($694|0)==0;
 if($695){var $storemerge2_i_i_i_i=-1;label=219;break;}else{label=211;break;}
 case 211: 
 if($687){label=213;break;}else{label=212;break;}
 case 212: 
 var $698=(($s_i+8)|0);
 var $699=HEAP32[(($698)>>2)];
 var $703=$699;label=214;break;
 case 213: 
 var $701=$s_i;
 var $702=(($701+1)|0);
 var $703=$702;label=214;break;
 case 214: 
 var $703;
 var $704=(($703+$694)|0);
 var $storemerge1_i_i_i_i=$703;label=215;break;
 case 215: 
 var $storemerge1_i_i_i_i;
 var $706=($storemerge1_i_i_i_i|0)==($704|0);
 if($706){var $storemerge2_i_i_i_i=-1;label=219;break;}else{label=216;break;}
 case 216: 
 var $708=HEAP8[($storemerge1_i_i_i_i)];
 var $709=(($708<<24)>>24)==48;
 if($709){label=218;break;}else{label=217;break;}
 case 217: 
 var $711=$storemerge1_i_i_i_i;
 var $712=$703;
 var $713=((($711)-($712))|0);
 var $storemerge2_i_i_i_i=$713;label=219;break;
 case 218: 
 var $715=(($storemerge1_i_i_i_i+1)|0);
 var $storemerge1_i_i_i_i=$715;label=215;break;
 case 219: 
 var $storemerge2_i_i_i_i;
 var $716=$s_i;
 var $717=($685&255);
 var $718=$717&1;
 var $719=($718|0)==0;
 if($719){label=221;break;}else{label=220;break;}
 case 220: 
 var $721=(($s_i+4)|0);
 var $722=HEAP32[(($721)>>2)];
 var $725=$722;label=222;break;
 case 221: 
 var $724=$717>>>1;
 var $725=$724;label=222;break;
 case 222: 
 var $725;
 var $726=($storemerge2_i_i_i_i|0)==0;
 if($726){var $747=$685;label=232;break;}else{label=223;break;}
 case 223: 
 if($687){label=225;break;}else{label=224;break;}
 case 224: 
 var $729=(($s_i+8)|0);
 var $730=HEAP32[(($729)>>2)];
 var $733=$730;label=226;break;
 case 225: 
 var $732=(($716+1)|0);
 var $733=$732;label=226;break;
 case 226: 
 var $733;
 var $734=($725>>>0)<($storemerge2_i_i_i_i>>>0);
 var $_sroa_speculated_i15_i=($734?$725:$storemerge2_i_i_i_i);
 var $735=($725|0)==($_sroa_speculated_i15_i|0);
 var $_pre316=((($725)-($_sroa_speculated_i15_i))|0);
 if($735){var $738=$685;label=228;break;}else{label=227;break;}
 case 227: 
 var $737=(($733+$_sroa_speculated_i15_i)|0);
 _memmove($733,$737,$_pre316,1,0);
 var $_pre_i17_i=HEAP8[($102)];
 var $738=$_pre_i17_i;label=228;break;
 case 228: 
 var $738;
 var $739=$738&1;
 var $740=(($739<<24)>>24)==0;
 if($740){label=230;break;}else{label=229;break;}
 case 229: 
 var $742=(($s_i+4)|0);
 HEAP32[(($742)>>2)]=$_pre316;
 label=231;break;
 case 230: 
 var $744=$_pre316<<1;
 var $745=(($744)&255);
 HEAP8[($102)]=$745;
 label=231;break;
 case 231: 
 var $746=(($733+$_pre316)|0);
 HEAP8[($746)]=0;
 var $_pre302=HEAP8[($102)];
 var $747=$_pre302;label=232;break;
 case 232: 
 var $747;
 var $748=$747&1;
 var $749=(($748<<24)>>24)==0;
 if($749){label=234;break;}else{label=233;break;}
 case 233: 
 var $751=(($s_i+4)|0);
 var $752=HEAP32[(($751)>>2)];
 var $756=$752;label=235;break;
 case 234: 
 var $754=($747&255);
 var $755=$754>>>1;
 var $756=$755;label=235;break;
 case 235: 
 var $756;
 var $757=($756|0)==0;
 if($757){label=236;break;}else{label=237;break;}
 case 236: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($s_i,3520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=237;break; } else { label=46;break; }
 case 237: 
 var $759=(($neg_i_i_i_i_0<<24)>>24)==0;
 if($759){label=239;break;}else{label=238;break;}
 case 238: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc($s_i,1,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=245;break; } else { label=46;break; }
 case 239: 
 var $762=$109&2048;
 var $763=($762|0)==0;
 if($763){label=245;break;}else{label=240;break;}
 case 240: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc($s_i,1,43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=245;break; } else { label=46;break; }
 case 241: 
 var $_0290;
 var $_0289;
 var $765=HEAP8[($102)];
 var $766=$765&1;
 var $767=(($766<<24)>>24)==0;
 if($767){label=244;break;}else{label=242;break;}
 case 242: 
 var $769=(($s_i+8)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($770|0)==0;
 if($771){label=244;break;}else{label=243;break;}
 case 243: 
 _free($770);
 label=244;break;
 case 244: 
 var $773$0=$_0289;
 var $773$1=0;
 var $774$0=$773$0;
 var $774$1=$_0290;
 var $eh_lpad_body$1=$774$1;var $eh_lpad_body$0=$774$0;label=325;break;
 case 245: 
 var $775=$36;
 var $776=HEAP32[(($775)>>2)];
 var $777=((($776)-(12))|0);
 var $778=$777;
 var $779=HEAP32[(($778)>>2)];
 var $_sum2_i=((($779)+(12))|0);
 var $780=$36;
 var $781=(($780+$_sum2_i)|0);
 var $782=$781;
 var $783=HEAP32[(($782)>>2)];
 var $784=HEAP8[($102)];
 var $785=$784&1;
 var $786=(($785<<24)>>24)==0;
 if($786){label=247;break;}else{label=246;break;}
 case 246: 
 var $788=(($s_i+4)|0);
 var $789=HEAP32[(($788)>>2)];
 var $793=$789;label=248;break;
 case 247: 
 var $791=($784&255);
 var $792=$791>>>1;
 var $793=$792;label=248;break;
 case 248: 
 var $793;
 var $794=($783|0)>($793|0);
 if($794){label=249;break;}else{label=270;break;}
 case 249: 
 var $_sum3_i=((($779)+(76))|0);
 var $796=(($780+$_sum3_i)|0);
 var $797=$796;
 var $798=HEAP32[(($797)>>2)];
 var $799=($798|0)==-1;
 var $extract_t320=(($798)&255);
 if($799){label=250;break;}else{var $_off0319=$extract_t320;var $832=$779;label=257;break;}
 case 250: 
 var $_sum27=((($779)+(28))|0);
 var $801=(($780+$_sum27)|0);
 var $802=$801;
 var $803=HEAP32[(($802)>>2)];
 var $804=(($803+4)|0);
 var $805=(tempValue=HEAP32[(($804)>>2)],HEAP32[(($804)>>2)]=tempValue+1,tempValue);
 var $806=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($803,19288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=251;break; } else { label=252;break; }
 case 251: 
 var $807=$806;
 var $808=$806;
 var $809=HEAP32[(($808)>>2)];
 var $810=(($809+28)|0);
 var $811=HEAP32[(($810)>>2)];
 var $812=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$811]($807,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=254;break; } else { label=252;break; }
 case 252: 
 var $814$0 = ___cxa_find_matching_catch(-1, -1); var $814$1 = tempRet0;
 var $815=(tempValue=HEAP32[(($804)>>2)],HEAP32[(($804)>>2)]=tempValue+-1,tempValue);
 var $816=($815|0)==0;
 if($816){label=253;break;}else{var $eh_lpad_body_i$1=$814$1;var $eh_lpad_body_i$0=$814$0;label=263;break;}
 case 253: 
 var $818=(($803)|0);
 var $819=$803;
 var $820=HEAP32[(($819)>>2)];
 var $821=(($820+8)|0);
 var $822=HEAP32[(($821)>>2)];
 FUNCTION_TABLE[$822]($818);
 var $eh_lpad_body_i$1=$814$1;var $eh_lpad_body_i$0=$814$0;label=263;break;
 case 254: 
 var $823=(tempValue=HEAP32[(($804)>>2)],HEAP32[(($804)>>2)]=tempValue+-1,tempValue);
 var $824=($823|0)==0;
 if($824){label=255;break;}else{label=256;break;}
 case 255: 
 var $826=(($803)|0);
 var $827=$803;
 var $828=HEAP32[(($827)>>2)];
 var $829=(($828+8)|0);
 var $830=HEAP32[(($829)>>2)];
 FUNCTION_TABLE[$830]($826);
 label=256;break;
 case 256: 
 var $831=(($812<<24)>>24);
 HEAP32[(($797)>>2)]=$831;
 var $_pre=HEAP32[(($775)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert295=$_phi_trans_insert;
 var $_pre296=HEAP32[(($_phi_trans_insert295)>>2)];
 var $_off0319=$812;var $832=$_pre296;label=257;break;
 case 257: 
 var $832;
 var $_off0319;
 var $_sum5_i=((($832)+(4))|0);
 var $833=(($780+$_sum5_i)|0);
 var $834=$833;
 var $835=HEAP32[(($834)>>2)];
 var $836=$835&32;
 var $837=($836|0)==0;
 var $838=HEAP8[($102)];
 var $839=$838&1;
 var $840=(($839<<24)>>24)==0;
 if($837){label=266;break;}else{label=258;break;}
 case 258: 
 if($840){label=260;break;}else{label=259;break;}
 case 259: 
 var $843=(($s_i+4)|0);
 var $844=HEAP32[(($843)>>2)];
 var $848=$844;label=261;break;
 case 260: 
 var $846=($838&255);
 var $847=$846>>>1;
 var $848=$847;label=261;break;
 case 261: 
 var $848;
 var $849=((($783)-($848))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($s_i,$849,$_off0319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=270;break; } else { label=262;break; }
 case 262: 
 var $851$0 = ___cxa_find_matching_catch(-1, -1); var $851$1 = tempRet0;
 var $eh_lpad_body_i$1=$851$1;var $eh_lpad_body_i$0=$851$0;label=263;break;
 case 263: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $852=HEAP8[($102)];
 var $853=$852&1;
 var $854=(($853<<24)>>24)==0;
 if($854){var $eh_lpad_body$1=$eh_lpad_body_i$1;var $eh_lpad_body$0=$eh_lpad_body_i$0;label=325;break;}else{label=264;break;}
 case 264: 
 var $856=(($s_i+8)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=($857|0)==0;
 if($858){var $eh_lpad_body$1=$eh_lpad_body_i$1;var $eh_lpad_body$0=$eh_lpad_body_i$0;label=325;break;}else{label=265;break;}
 case 265: 
 _free($857);
 var $eh_lpad_body$1=$eh_lpad_body_i$1;var $eh_lpad_body$0=$eh_lpad_body_i$0;label=325;break;
 case 266: 
 if($840){label=268;break;}else{label=267;break;}
 case 267: 
 var $862=(($s_i+4)|0);
 var $863=HEAP32[(($862)>>2)];
 var $867=$863;label=269;break;
 case 268: 
 var $865=($838&255);
 var $866=$865>>>1;
 var $867=$866;label=269;break;
 case 269: 
 var $867;
 var $868=((($783)-($867))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc($s_i,$868,$_off0319) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=270;break; } else { label=262;break; }
 case 270: 
 var $869=(($__s_i_i)|0);
 var $870=$0;
 HEAP8[($869)]=0;
 var $871=(($__s_i_i+4)|0);
 HEAP32[(($871)>>2)]=$101;
 var $872=HEAP32[(($775)>>2)];
 var $873=((($872)-(12))|0);
 var $874=$873;
 var $875=HEAP32[(($874)>>2)];
 var $_sum_i_i_i_i=((($875)+(16))|0);
 var $876=(($780+$_sum_i_i_i_i)|0);
 var $877=$876;
 var $878=HEAP32[(($877)>>2)];
 var $879=($878|0)==0;
 if($879){label=271;break;}else{label=303;break;}
 case 271: 
 var $_sum9_i_i_i_i=((($875)+(72))|0);
 var $881=(($780+$_sum9_i_i_i_i)|0);
 var $882=$881;
 var $883=HEAP32[(($882)>>2)];
 var $884=($883|0)==0;
 if($884){label=273;break;}else{label=272;break;}
 case 272: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($883) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=273;break; } else { label=296;break; }
 case 273: 
 HEAP8[($869)]=1;
 var $887=HEAP8[($102)];
 var $888=$887&1;
 var $889=(($888<<24)>>24)==0;
 if($889){label=275;break;}else{label=274;break;}
 case 274: 
 var $891=(($s_i+4)|0);
 var $892=HEAP32[(($891)>>2)];
 var $893=HEAP32[(($775)>>2)];
 var $894=((($893)-(12))|0);
 var $895=$894;
 var $896=HEAP32[(($895)>>2)];
 var $_sum_i_i=((($896)+(24))|0);
 var $897=(($780+$_sum_i_i)|0);
 var $898=$897;
 var $899=HEAP32[(($898)>>2)];
 var $900=$899;
 var $901=(($s_i+8)|0);
 var $902=HEAP32[(($901)>>2)];
 var $919=$902;var $918=$892;var $917=$896;var $916=$900;label=276;break;
 case 275: 
 var $904=($887&255);
 var $905=$904>>>1;
 var $906=HEAP32[(($775)>>2)];
 var $907=((($906)-(12))|0);
 var $908=$907;
 var $909=HEAP32[(($908)>>2)];
 var $_sum_i_i321=((($909)+(24))|0);
 var $910=(($780+$_sum_i_i321)|0);
 var $911=$910;
 var $912=HEAP32[(($911)>>2)];
 var $913=$912;
 var $914=$s_i;
 var $915=(($914+1)|0);
 var $919=$915;var $918=$905;var $917=$909;var $916=$913;label=276;break;
 case 276: 
 var $916;
 var $917;
 var $918;
 var $919;
 var $_sum1_i_i=((($917)+(4))|0);
 var $920=(($780+$_sum1_i_i)|0);
 var $921=$920;
 var $922=HEAP32[(($921)>>2)];
 var $923=$922&176;
 var $924=($923|0)==32;
 if($924){label=277;break;}else{label=279;break;}
 case 277: 
 if($889){label=278;break;}else{label=282;break;}
 case 278: 
 var $926=$s_i;
 var $927=(($926+1)|0);
 var $928=(($927+$918)|0);
 var $942=$928;label=284;break;
 case 279: 
 if($889){label=281;break;}else{label=280;break;}
 case 280: 
 var $930=(($s_i+8)|0);
 var $931=HEAP32[(($930)>>2)];
 var $938=$931;label=283;break;
 case 281: 
 var $932=$s_i;
 var $933=(($932+1)|0);
 var $942=$933;label=284;break;
 case 282: 
 var $934=(($s_i+8)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=(($935+$918)|0);
 var $938=$936;label=283;break;
 case 283: 
 var $938;
 var $939=(($s_i+8)|0);
 var $940=HEAP32[(($939)>>2)];
 var $946=$940;var $945=$938;label=285;break;
 case 284: 
 var $942;
 var $943=$s_i;
 var $944=(($943+1)|0);
 var $946=$944;var $945=$942;label=285;break;
 case 285: 
 var $945;
 var $946;
 var $947=(($946+$918)|0);
 var $948=(($780+$917)|0);
 var $949=$948;
 var $_sum2_i_i=((($917)+(76))|0);
 var $950=(($780+$_sum2_i_i)|0);
 var $951=$950;
 var $952=HEAP32[(($951)>>2)];
 var $953=($952|0)==-1;
 var $extract_t318=(($952)&255);
 if($953){label=286;break;}else{var $_off0=$extract_t318;label=293;break;}
 case 286: 
 var $_sum26=((($917)+(28))|0);
 var $955=(($780+$_sum26)|0);
 var $956=$955;
 var $957=HEAP32[(($956)>>2)];
 var $958=(($957+4)|0);
 var $959=(tempValue=HEAP32[(($958)>>2)],HEAP32[(($958)>>2)]=tempValue+1,tempValue);
 var $960=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($957,19288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=287;break; } else { label=288;break; }
 case 287: 
 var $961=$960;
 var $962=$960;
 var $963=HEAP32[(($962)>>2)];
 var $964=(($963+28)|0);
 var $965=HEAP32[(($964)>>2)];
 var $966=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$965]($961,32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=290;break; } else { label=288;break; }
 case 288: 
 var $968$0 = ___cxa_find_matching_catch(-1, -1,0); var $968$1 = tempRet0;
 var $969=(tempValue=HEAP32[(($958)>>2)],HEAP32[(($958)>>2)]=tempValue+-1,tempValue);
 var $970=($969|0)==0;
 if($970){label=289;break;}else{var $eh_lpad_body_i_i$1=$968$1;var $eh_lpad_body_i_i$0=$968$0;label=298;break;}
 case 289: 
 var $972=(($957)|0);
 var $973=$957;
 var $974=HEAP32[(($973)>>2)];
 var $975=(($974+8)|0);
 var $976=HEAP32[(($975)>>2)];
 FUNCTION_TABLE[$976]($972);
 var $eh_lpad_body_i_i$1=$968$1;var $eh_lpad_body_i_i$0=$968$0;label=298;break;
 case 290: 
 var $977=(tempValue=HEAP32[(($958)>>2)],HEAP32[(($958)>>2)]=tempValue+-1,tempValue);
 var $978=($977|0)==0;
 if($978){label=291;break;}else{label=292;break;}
 case 291: 
 var $980=(($957)|0);
 var $981=$957;
 var $982=HEAP32[(($981)>>2)];
 var $983=(($982+8)|0);
 var $984=HEAP32[(($983)>>2)];
 FUNCTION_TABLE[$984]($980);
 label=292;break;
 case 292: 
 var $985=(($966<<24)>>24);
 HEAP32[(($951)>>2)]=$985;
 var $_off0=$966;label=293;break;
 case 293: 
 var $_off0;
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$916,$919,$945,$947,$949,$_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=297;break; }
 case 294: 
 var $987=(($0)|0);
 var $988=HEAP32[(($987)>>2)];
 var $989=($988|0)==0;
 if($989){label=295;break;}else{label=303;break;}
 case 295: 
 var $991=HEAP32[(($775)>>2)];
 var $992=((($991)-(12))|0);
 var $993=$992;
 var $994=HEAP32[(($993)>>2)];
 var $995=(($780+$994)|0);
 var $996=$995;
 var $_sum4_i_i=((($994)+(16))|0);
 var $997=(($780+$_sum4_i_i)|0);
 var $998=$997;
 var $999=HEAP32[(($998)>>2)];
 var $1000=$999|5;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($996,$1000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=303;break; } else { label=297;break; }
 case 296: 
 var $1002$0 = ___cxa_find_matching_catch(-1, -1,0); var $1002$1 = tempRet0;
 var $1003=$1002$0;
 var $_0=$1003;label=299;break;
 case 297: 
 var $1005$0 = ___cxa_find_matching_catch(-1, -1,0); var $1005$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$1005$1;var $eh_lpad_body_i_i$0=$1005$0;label=298;break;
 case 298: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $1006=$eh_lpad_body_i_i$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i_i);
 var $_0=$1006;label=299;break;
 case 299: 
 var $_0;
 var $1008=___cxa_begin_catch($_0);
 var $1009=HEAP32[(($775)>>2)];
 var $1010=((($1009)-(12))|0);
 var $1011=$1010;
 var $1012=HEAP32[(($1011)>>2)];
 var $_sum24=((($1012)+(16))|0);
 var $1013=(($780+$_sum24)|0);
 var $1014=$1013;
 var $1015=HEAP32[(($1014)>>2)];
 var $1016=$1015|1;
 HEAP32[(($1014)>>2)]=$1016;
 var $_sum25=((($1012)+(20))|0);
 var $1017=(($780+$_sum25)|0);
 var $1018=$1017;
 var $1019=HEAP32[(($1018)>>2)];
 var $1020=$1019&1;
 var $1021=($1020|0)==0;
 if($1021){label=302;break;}else{label=300;break;}
 case 300: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { label=304;break; }
 case 301: 
 throw "Reached an unreachable!";
 case 302: 
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { label=262;break; }
 case 303: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s_i_i);
 label=306;break;
 case 304: 
 var $1024$0 = ___cxa_find_matching_catch(-1, -1); var $1024$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $eh_lpad_body_i$1=$1024$1;var $eh_lpad_body_i$0=$1024$0;label=263;break; } else { label=305;break; }
 case 305: 
 var $1026$0 = ___cxa_find_matching_catch(-1, -1,0); var $1026$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 306: 
 var $1027=HEAP8[($102)];
 var $1028=$1027&1;
 var $1029=(($1028<<24)>>24)==0;
 if($1029){label=309;break;}else{label=307;break;}
 case 307: 
 var $1031=(($s_i+8)|0);
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=($1032|0)==0;
 if($1033){label=309;break;}else{label=308;break;}
 case 308: 
 _free($1032);
 label=309;break;
 case 309: 
 var $1036=HEAP32[(($52)>>2)];
 var $1037=$1036&16;
 var $1038=($1037|0)==0;
 if($1038){label=313;break;}else{label=310;break;}
 case 310: 
 var $1040=HEAP32[(($51)>>2)];
 var $1041=(($ss+36)|0);
 var $1042=HEAP32[(($1041)>>2)];
 var $1043=($1040>>>0)<($1042>>>0);
 if($1043){label=311;break;}else{var $1046=$1040;label=312;break;}
 case 311: 
 HEAP32[(($51)>>2)]=$1042;
 var $1046=$1042;label=312;break;
 case 312: 
 var $1046;
 var $1047=(($ss+32)|0);
 var $1048=HEAP32[(($1047)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($agg_result,$1048,$1046) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=324;break; }
 case 313: 
 var $1050=$1036&8;
 var $1051=($1050|0)==0;
 if($1051){label=315;break;}else{label=314;break;}
 case 314: 
 var $1053=HEAP32[(($42)>>2)];
 var $1054=(($ss+28)|0);
 var $1055=HEAP32[(($1054)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($agg_result,$1053,$1055) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=324;break; }
 case 315: 
 var $1057=$agg_result;
 var $storemerge_i=0;label=316;break;
 case 316: 
 var $storemerge_i;
 var $1059=($storemerge_i>>>0)<3;
 if($1059){label=317;break;}else{label=318;break;}
 case 317: 
 var $1061=(($1057+($storemerge_i<<2))|0);
 HEAP32[(($1061)>>2)]=0;
 var $1062=((($storemerge_i)+(1))|0);
 var $storemerge_i=$1062;label=316;break;
 case 318: 
 HEAP32[(($4)>>2)]=7588;
 var $1063=(($9)|0);
 HEAP32[(($1063)>>2)]=7628;
 HEAP32[(($5)>>2)]=7608;
 HEAP32[(($40)>>2)]=7768;
 var $1064=$44;
 var $1065=HEAP8[($1064)];
 var $1066=$1065&1;
 var $1067=(($1066<<24)>>24)==0;
 if($1067){label=321;break;}else{label=319;break;}
 case 319: 
 var $1069=(($ss+52)|0);
 var $1070=HEAP32[(($1069)>>2)];
 var $1071=($1070|0)==0;
 if($1071){label=321;break;}else{label=320;break;}
 case 320: 
 _free($1070);
 label=321;break;
 case 321: 
 HEAP32[(($40)>>2)]=7912;
 var $1073=(($ss+16)|0);
 var $1074=HEAP32[(($1073)>>2)];
 var $1075=(($1074+4)|0);
 var $1076=(tempValue=HEAP32[(($1075)>>2)],HEAP32[(($1075)>>2)]=tempValue+-1,tempValue);
 var $1077=($1076|0)==0;
 if($1077){label=322;break;}else{label=323;break;}
 case 322: 
 var $1079=(($1074)|0);
 var $1080=$1074;
 var $1081=HEAP32[(($1080)>>2)];
 var $1082=(($1081+8)|0);
 var $1083=HEAP32[(($1082)>>2)];
 FUNCTION_TABLE[$1083]($1079);
 label=323;break;
 case 323: 
 var $1084=(($ss+64)|0);
 __ZNSt3__18ios_baseD2Ev($1084);
 STACKTOP=sp;return;
 case 324: 
 var $1086$0 = ___cxa_find_matching_catch(-1, -1); var $1086$1 = tempRet0;
 var $eh_lpad_body$1=$1086$1;var $eh_lpad_body$0=$1086$0;label=325;break;
 case 325: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 HEAP32[(($4)>>2)]=7588;
 var $1087=(($9)|0);
 HEAP32[(($1087)>>2)]=7628;
 HEAP32[(($5)>>2)]=7608;
 HEAP32[(($40)>>2)]=7768;
 var $1088=$44;
 var $1089=HEAP8[($1088)];
 var $1090=$1089&1;
 var $1091=(($1090<<24)>>24)==0;
 if($1091){label=328;break;}else{label=326;break;}
 case 326: 
 var $1093=(($ss+52)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1094|0)==0;
 if($1095){label=328;break;}else{label=327;break;}
 case 327: 
 _free($1094);
 label=328;break;
 case 328: 
 HEAP32[(($40)>>2)]=7912;
 var $1097=(($ss+16)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=(($1098+4)|0);
 var $1100=(tempValue=HEAP32[(($1099)>>2)],HEAP32[(($1099)>>2)]=tempValue+-1,tempValue);
 var $1101=($1100|0)==0;
 if($1101){label=329;break;}else{label=330;break;}
 case 329: 
 var $1103=(($1098)|0);
 var $1104=$1098;
 var $1105=HEAP32[(($1104)>>2)];
 var $1106=(($1105+8)|0);
 var $1107=HEAP32[(($1106)>>2)];
 FUNCTION_TABLE[$1107]($1103);
 label=330;break;
 case 330: 
 var $1109=(($ss+64)|0);
 __ZNSt3__18ios_baseD2Ev($1109);
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z12getRandForDHv($agg_result){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=sp;
 __Z7getRandi($1,10);
 __Z8toStringIN5boost14multiprecision6numberINS1_8backends15cpp_int_backendILj1024ELj1024ELNS1_16cpp_integer_typeE1ELNS1_18cpp_int_check_typeE0EvEELNS1_26expression_template_optionE0EEEENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEERKT_($agg_result,$1);
 STACKTOP=sp;return;
}
function __Z6getMsgNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($agg_result,$R,$P){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $1=(sp)+(136);
 var $2=(sp)+(272);
 var $3=(sp)+(408);
 var $4=(sp)+(424);
 var $5=(sp)+(560);
 var $6=$1;
 HEAP32[(($6)>>2)]=2;
 var $7=(($1+128)|0);
 HEAP16[(($7)>>1)]=1;
 var $8=(($1+130)|0);
 HEAP8[($8)]=0;
 var $9=$R;
 var $10=HEAP8[($9)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=2;break;}else{label=3;break;}
 case 2: 
 var $14=$3;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 label=20;break;
 case 3: 
 var $16=(($R+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($R+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19>>>0)>4294967279;
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $23=($19>>>0)<11;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=$19<<1;
 var $26=(($25)&255);
 var $27=$3;
 var $28=$3;
 HEAP8[($28)]=$26;
 var $29=(($27+1)|0);
 var $__p_0_i_i_i=$29;label=19;break;
 case 7: 
 var $30=((($19)+(16))|0);
 var $31=$30&-16;
 var $32=($31|0)==0;
 var $_size_i=($32?1:$31);
 label=8;break;
 case 8: 
 var $34=_malloc($_size_i);
 var $35=($34|0)==0;
 if($35){label=9;break;}else{label=18;break;}
 case 9: 
 var $37=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=15;break;}else{label=10;break;}
 case 10: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $42=$lpad_phi_i$1;
 var $43=($42|0)<0;
 if($43){label=14;break;}else{label=16;break;}
 case 14: 
 var $45=$lpad_phi_i$0;
 ___cxa_call_unexpected($45);
 throw "Reached an unreachable!";
 case 15: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $51=(($3+8)|0);
 HEAP32[(($51)>>2)]=$34;
 var $52=$31|1;
 var $53=(($3)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=(($3+4)|0);
 HEAP32[(($54)>>2)]=$19;
 var $__p_0_i_i_i=$34;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($19 % 1 === 0);(_memcpy($__p_0_i_i_i, $17, $19)|0);
 var $55=(($__p_0_i_i_i+$19)|0);
 HEAP8[($55)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($2,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=51;break; }
 case 21: 
 var $57=$P;
 var $58=HEAP8[($57)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=22;break;}else{label=23;break;}
 case 22: 
 var $62=$5;
 assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
 label=41;break;
 case 23: 
 var $64=(($P+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($P+4)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67>>>0)>4294967279;
 if($68){label=24;break;}else{label=26;break;}
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=51;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $71=($67>>>0)<11;
 if($71){label=27;break;}else{label=28;break;}
 case 27: 
 var $73=$67<<1;
 var $74=(($73)&255);
 var $75=$5;
 var $76=$5;
 HEAP8[($76)]=$74;
 var $77=(($75+1)|0);
 var $__p_0_i_i_i2=$77;label=40;break;
 case 28: 
 var $78=((($67)+(16))|0);
 var $79=$78&-16;
 var $80=($79|0)==0;
 var $_size_i6=($80?1:$79);
 label=29;break;
 case 29: 
 var $82=_malloc($_size_i6);
 var $83=($82|0)==0;
 if($83){label=30;break;}else{label=39;break;}
 case 30: 
 var $85=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $86=($85|0)==0;
 if($86){label=37;break;}else{label=31;break;}
 case 31: 
 var $88=$85;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 32: 
 var $lpad_loopexit_i7$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i7$1 = tempRet0;
 var $lpad_phi_i11$1=$lpad_loopexit_i7$1;var $lpad_phi_i11$0=$lpad_loopexit_i7$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i9$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i9$1 = tempRet0;
 var $lpad_phi_i11$1=$lpad_nonloopexit_i9$1;var $lpad_phi_i11$0=$lpad_nonloopexit_i9$0;label=34;break;
 case 34: 
 var $lpad_phi_i11$0;
 var $lpad_phi_i11$1;
 var $90=$lpad_phi_i11$1;
 var $91=($90|0)<0;
 if($91){label=35;break;}else{var $eh_lpad_body$1=$lpad_phi_i11$1;var $eh_lpad_body$0=$lpad_phi_i11$0;label=52;break;}
 case 35: 
 var $93=$lpad_phi_i11$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=51;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $95=___cxa_allocate_exception(4);
 var $96=$95;
 HEAP32[(($96)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($95,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=33;break; }
 case 38: 
 throw "Reached an unreachable!";
 case 39: 
 var $98=(($5+8)|0);
 HEAP32[(($98)>>2)]=$82;
 var $99=$79|1;
 var $100=(($5)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=(($5+4)|0);
 HEAP32[(($101)>>2)]=$67;
 var $__p_0_i_i_i2=$82;label=40;break;
 case 40: 
 var $__p_0_i_i_i2;
 assert($67 % 1 === 0);(_memcpy($__p_0_i_i_i2, $65, $67)|0);
 var $102=(($__p_0_i_i_i2+$67)|0);
 HEAP8[($102)]=0;
 label=41;break;
 case 41: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($4,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=53;break; }
 case 42: 
 (function() { try { __THREW__ = 0; return __Z6modPowN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEES8_S8_($0,$1,$2,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=53;break; }
 case 43: 
 (function() { try { __THREW__ = 0; return __Z8toStringIN5boost14multiprecision6numberINS1_8backends15cpp_int_backendILj1024ELj1024ELNS1_16cpp_integer_typeE1ELNS1_18cpp_int_check_typeE0EvEELNS1_26expression_template_optionE0EEEENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEERKT_($agg_result,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=53;break; }
 case 44: 
 var $106=$5;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=47;break;}else{label=45;break;}
 case 45: 
 var $111=(($5+8)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($112|0)==0;
 if($113){label=47;break;}else{label=46;break;}
 case 46: 
 _free($112);
 label=47;break;
 case 47: 
 var $115=$3;
 var $116=HEAP8[($115)];
 var $117=$116&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=50;break;}else{label=48;break;}
 case 48: 
 var $120=(($3+8)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($121|0)==0;
 if($122){label=50;break;}else{label=49;break;}
 case 49: 
 _free($121);
 label=50;break;
 case 50: 
 STACKTOP=sp;return;
 case 51: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $eh_lpad_body$1=$125$1;var $eh_lpad_body$0=$125$0;label=52;break;
 case 52: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $126=$eh_lpad_body$0;
 var $127=$eh_lpad_body$1;
 var $_0=$127;var $_024=$126;label=56;break;
 case 53: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $132=$5;
 var $133=HEAP8[($132)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){var $_0=$131;var $_024=$130;label=56;break;}else{label=54;break;}
 case 54: 
 var $137=(($5+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){var $_0=$131;var $_024=$130;label=56;break;}else{label=55;break;}
 case 55: 
 _free($138);
 var $_0=$131;var $_024=$130;label=56;break;
 case 56: 
 var $_024;
 var $_0;
 var $141=$3;
 var $142=HEAP8[($141)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=59;break;}else{label=57;break;}
 case 57: 
 var $146=(($3+8)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=59;break;}else{label=58;break;}
 case 58: 
 _free($147);
 label=59;break;
 case 59: 
 var $150$0=$_024;
 var $150$1=0;
 var $151$0=$150$0;
 var $151$1=$_0;
 ___resumeException($151$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z7makeKeyNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_($agg_result,$msg,$r,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1000)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $MSG=sp;
 var $1=(sp)+(136);
 var $R=(sp)+(152);
 var $2=(sp)+(288);
 var $P=(sp)+(304);
 var $3=(sp)+(440);
 var $4=(sp)+(456);
 var $5=(sp)+(592);
 var $6=(sp)+(728);
 var $7=(sp)+(864);
 var $8=$msg;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$1;
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 label=20;break;
 case 3: 
 var $15=(($msg+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($msg+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18>>>0)>4294967279;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $22=($18>>>0)<11;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$18<<1;
 var $25=(($24)&255);
 var $26=$1;
 var $27=$1;
 HEAP8[($27)]=$25;
 var $28=(($26+1)|0);
 var $__p_0_i_i_i=$28;label=19;break;
 case 7: 
 var $29=((($18)+(16))|0);
 var $30=$29&-16;
 var $31=($30|0)==0;
 var $_size_i=($31?1:$30);
 label=8;break;
 case 8: 
 var $33=_malloc($_size_i);
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=18;break;}
 case 9: 
 var $36=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $37=($36|0)==0;
 if($37){label=15;break;}else{label=10;break;}
 case 10: 
 var $39=$36;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $41=$lpad_phi_i$1;
 var $42=($41|0)<0;
 if($42){label=14;break;}else{label=16;break;}
 case 14: 
 var $44=$lpad_phi_i$0;
 ___cxa_call_unexpected($44);
 throw "Reached an unreachable!";
 case 15: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $50=(($1+8)|0);
 HEAP32[(($50)>>2)]=$33;
 var $51=$30|1;
 var $52=(($1)|0);
 HEAP32[(($52)>>2)]=$51;
 var $53=(($1+4)|0);
 HEAP32[(($53)>>2)]=$18;
 var $__p_0_i_i_i=$33;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($18 % 1 === 0);(_memcpy($__p_0_i_i_i, $16, $18)|0);
 var $54=(($__p_0_i_i_i+$18)|0);
 HEAP8[($54)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($MSG,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=71;break; }
 case 21: 
 var $56=$1;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=24;break;}else{label=22;break;}
 case 22: 
 var $61=(($1+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=24;break;}else{label=23;break;}
 case 23: 
 _free($62);
 label=24;break;
 case 24: 
 var $65=$r;
 var $66=HEAP8[($65)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=25;break;}else{label=26;break;}
 case 25: 
 var $70=$2;
 assert(12 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($70)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
 label=43;break;
 case 26: 
 var $72=(($r+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($r+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75>>>0)>4294967279;
 if($76){label=27;break;}else{label=28;break;}
 case 27: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 28: 
 var $79=($75>>>0)<11;
 if($79){label=29;break;}else{label=30;break;}
 case 29: 
 var $81=$75<<1;
 var $82=(($81)&255);
 var $83=$2;
 var $84=$2;
 HEAP8[($84)]=$82;
 var $85=(($83+1)|0);
 var $__p_0_i_i_i2=$85;label=42;break;
 case 30: 
 var $86=((($75)+(16))|0);
 var $87=$86&-16;
 var $88=($87|0)==0;
 var $_size_i5=($88?1:$87);
 label=31;break;
 case 31: 
 var $90=_malloc($_size_i5);
 var $91=($90|0)==0;
 if($91){label=32;break;}else{label=41;break;}
 case 32: 
 var $93=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $94=($93|0)==0;
 if($94){label=38;break;}else{label=33;break;}
 case 33: 
 var $96=$93;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 34: 
 var $lpad_loopexit_i6$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i6$1 = tempRet0;
 var $lpad_phi_i10$1=$lpad_loopexit_i6$1;var $lpad_phi_i10$0=$lpad_loopexit_i6$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit_i8$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i8$1 = tempRet0;
 var $lpad_phi_i10$1=$lpad_nonloopexit_i8$1;var $lpad_phi_i10$0=$lpad_nonloopexit_i8$0;label=36;break;
 case 36: 
 var $lpad_phi_i10$0;
 var $lpad_phi_i10$1;
 var $98=$lpad_phi_i10$1;
 var $99=($98|0)<0;
 if($99){label=37;break;}else{label=39;break;}
 case 37: 
 var $101=$lpad_phi_i10$0;
 ___cxa_call_unexpected($101);
 throw "Reached an unreachable!";
 case 38: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=35;break; }
 case 39: 
 ___resumeException($lpad_phi_i10$0)
 case 40: 
 throw "Reached an unreachable!";
 case 41: 
 var $107=(($2+8)|0);
 HEAP32[(($107)>>2)]=$90;
 var $108=$87|1;
 var $109=(($2)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=(($2+4)|0);
 HEAP32[(($110)>>2)]=$75;
 var $__p_0_i_i_i2=$90;label=42;break;
 case 42: 
 var $__p_0_i_i_i2;
 assert($75 % 1 === 0);(_memcpy($__p_0_i_i_i2, $73, $75)|0);
 var $111=(($__p_0_i_i_i2+$75)|0);
 HEAP8[($111)]=0;
 label=43;break;
 case 43: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($R,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=74;break; }
 case 44: 
 var $113=$2;
 var $114=HEAP8[($113)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=47;break;}else{label=45;break;}
 case 45: 
 var $118=(($2+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=47;break;}else{label=46;break;}
 case 46: 
 _free($119);
 label=47;break;
 case 47: 
 var $122=$p;
 var $123=HEAP8[($122)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=48;break;}else{label=49;break;}
 case 48: 
 var $127=$3;
 assert(12 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($127)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
 label=66;break;
 case 49: 
 var $129=(($p+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($p+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132>>>0)>4294967279;
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 51: 
 var $136=($132>>>0)<11;
 if($136){label=52;break;}else{label=53;break;}
 case 52: 
 var $138=$132<<1;
 var $139=(($138)&255);
 var $140=$3;
 var $141=$3;
 HEAP8[($141)]=$139;
 var $142=(($140+1)|0);
 var $__p_0_i_i_i15=$142;label=65;break;
 case 53: 
 var $143=((($132)+(16))|0);
 var $144=$143&-16;
 var $145=($144|0)==0;
 var $_size_i18=($145?1:$144);
 label=54;break;
 case 54: 
 var $147=_malloc($_size_i18);
 var $148=($147|0)==0;
 if($148){label=55;break;}else{label=64;break;}
 case 55: 
 var $150=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $151=($150|0)==0;
 if($151){label=61;break;}else{label=56;break;}
 case 56: 
 var $153=$150;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=57;break; }
 case 57: 
 var $lpad_loopexit_i19$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i19$1 = tempRet0;
 var $lpad_phi_i23$1=$lpad_loopexit_i19$1;var $lpad_phi_i23$0=$lpad_loopexit_i19$0;label=59;break;
 case 58: 
 var $lpad_nonloopexit_i21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i21$1 = tempRet0;
 var $lpad_phi_i23$1=$lpad_nonloopexit_i21$1;var $lpad_phi_i23$0=$lpad_nonloopexit_i21$0;label=59;break;
 case 59: 
 var $lpad_phi_i23$0;
 var $lpad_phi_i23$1;
 var $155=$lpad_phi_i23$1;
 var $156=($155|0)<0;
 if($156){label=60;break;}else{label=62;break;}
 case 60: 
 var $158=$lpad_phi_i23$0;
 ___cxa_call_unexpected($158);
 throw "Reached an unreachable!";
 case 61: 
 var $160=___cxa_allocate_exception(4);
 var $161=$160;
 HEAP32[(($161)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($160,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=58;break; }
 case 62: 
 ___resumeException($lpad_phi_i23$0)
 case 63: 
 throw "Reached an unreachable!";
 case 64: 
 var $164=(($3+8)|0);
 HEAP32[(($164)>>2)]=$147;
 var $165=$144|1;
 var $166=(($3)|0);
 HEAP32[(($166)>>2)]=$165;
 var $167=(($3+4)|0);
 HEAP32[(($167)>>2)]=$132;
 var $__p_0_i_i_i15=$147;label=65;break;
 case 65: 
 var $__p_0_i_i_i15;
 assert($132 % 1 === 0);(_memcpy($__p_0_i_i_i15, $130, $132)|0);
 var $168=(($__p_0_i_i_i15+$132)|0);
 HEAP8[($168)]=0;
 label=66;break;
 case 66: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($P,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=77;break; }
 case 67: 
 var $170=$3;
 var $171=HEAP8[($170)];
 var $172=$171&1;
 var $173=(($172<<24)>>24)==0;
 if($173){label=70;break;}else{label=68;break;}
 case 68: 
 var $175=(($3+8)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($176|0)==0;
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 _free($176);
 label=70;break;
 case 70: 
 var $179=$5;
 var $180=$MSG;
 assert(136 % 1 === 0);(_memcpy($179, $180, 136)|0);
 var $181=$6;
 var $182=$R;
 assert(136 % 1 === 0);(_memcpy($181, $182, 136)|0);
 var $183=$7;
 var $184=$P;
 assert(136 % 1 === 0);(_memcpy($183, $184, 136)|0);
 __Z6modPowN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEES8_S8_($4,$5,$6,$7);
 __Z8toStringIN5boost14multiprecision6numberINS1_8backends15cpp_int_backendILj1024ELj1024ELNS1_16cpp_integer_typeE1ELNS1_18cpp_int_check_typeE0EvEELNS1_26expression_template_optionE0EEEENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEERKT_($agg_result,$4);
 STACKTOP=sp;return;
 case 71: 
 var $186$0 = ___cxa_find_matching_catch(-1, -1); var $186$1 = tempRet0;
 var $187=$186$0;
 var $188=$186$1;
 var $189=$1;
 var $190=HEAP8[($189)];
 var $191=$190&1;
 var $192=(($191<<24)>>24)==0;
 if($192){var $_0=$188;var $_034=$187;label=80;break;}else{label=72;break;}
 case 72: 
 var $194=(($1+8)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==0;
 if($196){var $_0=$188;var $_034=$187;label=80;break;}else{label=73;break;}
 case 73: 
 _free($195);
 var $_0=$188;var $_034=$187;label=80;break;
 case 74: 
 var $199$0 = ___cxa_find_matching_catch(-1, -1); var $199$1 = tempRet0;
 var $200=$199$0;
 var $201=$199$1;
 var $202=$2;
 var $203=HEAP8[($202)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){var $_0=$201;var $_034=$200;label=80;break;}else{label=75;break;}
 case 75: 
 var $207=(($2+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($208|0)==0;
 if($209){var $_0=$201;var $_034=$200;label=80;break;}else{label=76;break;}
 case 76: 
 _free($208);
 var $_0=$201;var $_034=$200;label=80;break;
 case 77: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1); var $212$1 = tempRet0;
 var $213=$212$0;
 var $214=$212$1;
 var $215=$3;
 var $216=HEAP8[($215)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){var $_0=$214;var $_034=$213;label=80;break;}else{label=78;break;}
 case 78: 
 var $220=(($3+8)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){var $_0=$214;var $_034=$213;label=80;break;}else{label=79;break;}
 case 79: 
 _free($221);
 var $_0=$214;var $_034=$213;label=80;break;
 case 80: 
 var $_034;
 var $_0;
 var $224$0=$_034;
 var $224$1=0;
 var $225$0=$224$0;
 var $225$1=$_0;
 ___resumeException($225$0)
  default: assert(0, "bad label: " + label);
 }
}
function __Z10modPowLinkNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_S5_($agg_result,$m,$k,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1000)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $M=sp;
 var $1=(sp)+(136);
 var $K=(sp)+(152);
 var $2=(sp)+(288);
 var $P=(sp)+(304);
 var $3=(sp)+(440);
 var $4=(sp)+(456);
 var $5=(sp)+(592);
 var $6=(sp)+(728);
 var $7=(sp)+(864);
 var $8=$m;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$1;
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 label=20;break;
 case 3: 
 var $15=(($m+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($m+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18>>>0)>4294967279;
 if($19){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $22=($18>>>0)<11;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$18<<1;
 var $25=(($24)&255);
 var $26=$1;
 var $27=$1;
 HEAP8[($27)]=$25;
 var $28=(($26+1)|0);
 var $__p_0_i_i_i=$28;label=19;break;
 case 7: 
 var $29=((($18)+(16))|0);
 var $30=$29&-16;
 var $31=($30|0)==0;
 var $_size_i=($31?1:$30);
 label=8;break;
 case 8: 
 var $33=_malloc($_size_i);
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=18;break;}
 case 9: 
 var $36=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $37=($36|0)==0;
 if($37){label=15;break;}else{label=10;break;}
 case 10: 
 var $39=$36;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $41=$lpad_phi_i$1;
 var $42=($41|0)<0;
 if($42){label=14;break;}else{label=16;break;}
 case 14: 
 var $44=$lpad_phi_i$0;
 ___cxa_call_unexpected($44);
 throw "Reached an unreachable!";
 case 15: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $50=(($1+8)|0);
 HEAP32[(($50)>>2)]=$33;
 var $51=$30|1;
 var $52=(($1)|0);
 HEAP32[(($52)>>2)]=$51;
 var $53=(($1+4)|0);
 HEAP32[(($53)>>2)]=$18;
 var $__p_0_i_i_i=$33;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($18 % 1 === 0);(_memcpy($__p_0_i_i_i, $16, $18)|0);
 var $54=(($__p_0_i_i_i+$18)|0);
 HEAP8[($54)]=0;
 label=20;break;
 case 20: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($M,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=71;break; }
 case 21: 
 var $56=$1;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=24;break;}else{label=22;break;}
 case 22: 
 var $61=(($1+8)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==0;
 if($63){label=24;break;}else{label=23;break;}
 case 23: 
 _free($62);
 label=24;break;
 case 24: 
 var $65=$k;
 var $66=HEAP8[($65)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=25;break;}else{label=26;break;}
 case 25: 
 var $70=$2;
 assert(12 % 1 === 0);HEAP32[(($70)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($70)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($70)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
 label=43;break;
 case 26: 
 var $72=(($k+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(($k+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75>>>0)>4294967279;
 if($76){label=27;break;}else{label=28;break;}
 case 27: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 28: 
 var $79=($75>>>0)<11;
 if($79){label=29;break;}else{label=30;break;}
 case 29: 
 var $81=$75<<1;
 var $82=(($81)&255);
 var $83=$2;
 var $84=$2;
 HEAP8[($84)]=$82;
 var $85=(($83+1)|0);
 var $__p_0_i_i_i2=$85;label=42;break;
 case 30: 
 var $86=((($75)+(16))|0);
 var $87=$86&-16;
 var $88=($87|0)==0;
 var $_size_i5=($88?1:$87);
 label=31;break;
 case 31: 
 var $90=_malloc($_size_i5);
 var $91=($90|0)==0;
 if($91){label=32;break;}else{label=41;break;}
 case 32: 
 var $93=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $94=($93|0)==0;
 if($94){label=38;break;}else{label=33;break;}
 case 33: 
 var $96=$93;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=34;break; }
 case 34: 
 var $lpad_loopexit_i6$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i6$1 = tempRet0;
 var $lpad_phi_i10$1=$lpad_loopexit_i6$1;var $lpad_phi_i10$0=$lpad_loopexit_i6$0;label=36;break;
 case 35: 
 var $lpad_nonloopexit_i8$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i8$1 = tempRet0;
 var $lpad_phi_i10$1=$lpad_nonloopexit_i8$1;var $lpad_phi_i10$0=$lpad_nonloopexit_i8$0;label=36;break;
 case 36: 
 var $lpad_phi_i10$0;
 var $lpad_phi_i10$1;
 var $98=$lpad_phi_i10$1;
 var $99=($98|0)<0;
 if($99){label=37;break;}else{label=39;break;}
 case 37: 
 var $101=$lpad_phi_i10$0;
 ___cxa_call_unexpected($101);
 throw "Reached an unreachable!";
 case 38: 
 var $103=___cxa_allocate_exception(4);
 var $104=$103;
 HEAP32[(($104)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($103,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=35;break; }
 case 39: 
 ___resumeException($lpad_phi_i10$0)
 case 40: 
 throw "Reached an unreachable!";
 case 41: 
 var $107=(($2+8)|0);
 HEAP32[(($107)>>2)]=$90;
 var $108=$87|1;
 var $109=(($2)|0);
 HEAP32[(($109)>>2)]=$108;
 var $110=(($2+4)|0);
 HEAP32[(($110)>>2)]=$75;
 var $__p_0_i_i_i2=$90;label=42;break;
 case 42: 
 var $__p_0_i_i_i2;
 assert($75 % 1 === 0);(_memcpy($__p_0_i_i_i2, $73, $75)|0);
 var $111=(($__p_0_i_i_i2+$75)|0);
 HEAP8[($111)]=0;
 label=43;break;
 case 43: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($K,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=74;break; }
 case 44: 
 var $113=$2;
 var $114=HEAP8[($113)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=47;break;}else{label=45;break;}
 case 45: 
 var $118=(($2+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=47;break;}else{label=46;break;}
 case 46: 
 _free($119);
 label=47;break;
 case 47: 
 var $122=$p;
 var $123=HEAP8[($122)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=48;break;}else{label=49;break;}
 case 48: 
 var $127=$3;
 assert(12 % 1 === 0);HEAP32[(($127)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($127)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($127)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
 label=66;break;
 case 49: 
 var $129=(($p+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(($p+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132>>>0)>4294967279;
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 51: 
 var $136=($132>>>0)<11;
 if($136){label=52;break;}else{label=53;break;}
 case 52: 
 var $138=$132<<1;
 var $139=(($138)&255);
 var $140=$3;
 var $141=$3;
 HEAP8[($141)]=$139;
 var $142=(($140+1)|0);
 var $__p_0_i_i_i15=$142;label=65;break;
 case 53: 
 var $143=((($132)+(16))|0);
 var $144=$143&-16;
 var $145=($144|0)==0;
 var $_size_i18=($145?1:$144);
 label=54;break;
 case 54: 
 var $147=_malloc($_size_i18);
 var $148=($147|0)==0;
 if($148){label=55;break;}else{label=64;break;}
 case 55: 
 var $150=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $151=($150|0)==0;
 if($151){label=61;break;}else{label=56;break;}
 case 56: 
 var $153=$150;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=57;break; }
 case 57: 
 var $lpad_loopexit_i19$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i19$1 = tempRet0;
 var $lpad_phi_i23$1=$lpad_loopexit_i19$1;var $lpad_phi_i23$0=$lpad_loopexit_i19$0;label=59;break;
 case 58: 
 var $lpad_nonloopexit_i21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i21$1 = tempRet0;
 var $lpad_phi_i23$1=$lpad_nonloopexit_i21$1;var $lpad_phi_i23$0=$lpad_nonloopexit_i21$0;label=59;break;
 case 59: 
 var $lpad_phi_i23$0;
 var $lpad_phi_i23$1;
 var $155=$lpad_phi_i23$1;
 var $156=($155|0)<0;
 if($156){label=60;break;}else{label=62;break;}
 case 60: 
 var $158=$lpad_phi_i23$0;
 ___cxa_call_unexpected($158);
 throw "Reached an unreachable!";
 case 61: 
 var $160=___cxa_allocate_exception(4);
 var $161=$160;
 HEAP32[(($161)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($160,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=58;break; }
 case 62: 
 ___resumeException($lpad_phi_i23$0)
 case 63: 
 throw "Reached an unreachable!";
 case 64: 
 var $164=(($3+8)|0);
 HEAP32[(($164)>>2)]=$147;
 var $165=$144|1;
 var $166=(($3)|0);
 HEAP32[(($166)>>2)]=$165;
 var $167=(($3+4)|0);
 HEAP32[(($167)>>2)]=$132;
 var $__p_0_i_i_i15=$147;label=65;break;
 case 65: 
 var $__p_0_i_i_i15;
 assert($132 % 1 === 0);(_memcpy($__p_0_i_i_i15, $130, $132)|0);
 var $168=(($__p_0_i_i_i15+$132)|0);
 HEAP8[($168)]=0;
 label=66;break;
 case 66: 
 (function() { try { __THREW__ = 0; return __Z5toIntNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($P,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=77;break; }
 case 67: 
 var $170=$3;
 var $171=HEAP8[($170)];
 var $172=$171&1;
 var $173=(($172<<24)>>24)==0;
 if($173){label=70;break;}else{label=68;break;}
 case 68: 
 var $175=(($3+8)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($176|0)==0;
 if($177){label=70;break;}else{label=69;break;}
 case 69: 
 _free($176);
 label=70;break;
 case 70: 
 var $179=$5;
 var $180=$M;
 assert(136 % 1 === 0);(_memcpy($179, $180, 136)|0);
 var $181=$6;
 var $182=$K;
 assert(136 % 1 === 0);(_memcpy($181, $182, 136)|0);
 var $183=$7;
 var $184=$P;
 assert(136 % 1 === 0);(_memcpy($183, $184, 136)|0);
 __Z6modPowN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEES8_S8_($4,$5,$6,$7);
 __Z8toStringIN5boost14multiprecision6numberINS1_8backends15cpp_int_backendILj1024ELj1024ELNS1_16cpp_integer_typeE1ELNS1_18cpp_int_check_typeE0EvEELNS1_26expression_template_optionE0EEEENSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEERKT_($agg_result,$4);
 STACKTOP=sp;return;
 case 71: 
 var $186$0 = ___cxa_find_matching_catch(-1, -1); var $186$1 = tempRet0;
 var $187=$186$0;
 var $188=$186$1;
 var $189=$1;
 var $190=HEAP8[($189)];
 var $191=$190&1;
 var $192=(($191<<24)>>24)==0;
 if($192){var $_0=$188;var $_034=$187;label=80;break;}else{label=72;break;}
 case 72: 
 var $194=(($1+8)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==0;
 if($196){var $_0=$188;var $_034=$187;label=80;break;}else{label=73;break;}
 case 73: 
 _free($195);
 var $_0=$188;var $_034=$187;label=80;break;
 case 74: 
 var $199$0 = ___cxa_find_matching_catch(-1, -1); var $199$1 = tempRet0;
 var $200=$199$0;
 var $201=$199$1;
 var $202=$2;
 var $203=HEAP8[($202)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){var $_0=$201;var $_034=$200;label=80;break;}else{label=75;break;}
 case 75: 
 var $207=(($2+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($208|0)==0;
 if($209){var $_0=$201;var $_034=$200;label=80;break;}else{label=76;break;}
 case 76: 
 _free($208);
 var $_0=$201;var $_034=$200;label=80;break;
 case 77: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1); var $212$1 = tempRet0;
 var $213=$212$0;
 var $214=$212$1;
 var $215=$3;
 var $216=HEAP8[($215)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){var $_0=$214;var $_034=$213;label=80;break;}else{label=78;break;}
 case 78: 
 var $220=(($3+8)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){var $_0=$214;var $_034=$213;label=80;break;}else{label=79;break;}
 case 79: 
 _free($221);
 var $_0=$214;var $_034=$213;label=80;break;
 case 80: 
 var $_034;
 var $_0;
 var $224$0=$_034;
 var $224$1=0;
 var $225$0=$224$0;
 var $225$1=$_0;
 ___resumeException($225$0)
  default: assert(0, "bad label: " + label);
 }
}
function ___ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_S8_EE6invokeEPFS8_S8_S8_S8_EPNS0_11BindingTypeIS8_E3$_0ESF_SF__($fn,$args,$args1,$args2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(sp)+(48);
 var $5=(($args+4)|0);
 var $6=(($args)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7>>>0)>4294967279;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $11=($7>>>0)<11;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=$7<<1;
 var $14=(($13)&255);
 var $15=$2;
 var $16=$2;
 HEAP8[($16)]=$14;
 var $17=(($15+1)|0);
 var $__p_0_i_i=$17;label=17;break;
 case 5: 
 var $18=((($7)+(16))|0);
 var $19=$18&-16;
 var $20=($19|0)==0;
 var $_size_i=($20?1:$19);
 label=6;break;
 case 6: 
 var $22=_malloc($_size_i);
 var $23=($22|0)==0;
 if($23){label=7;break;}else{label=16;break;}
 case 7: 
 var $25=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=13;break;}else{label=8;break;}
 case 8: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $30=$lpad_phi_i$1;
 var $31=($30|0)<0;
 if($31){label=12;break;}else{label=14;break;}
 case 12: 
 var $33=$lpad_phi_i$0;
 ___cxa_call_unexpected($33);
 throw "Reached an unreachable!";
 case 13: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $39=(($2+8)|0);
 HEAP32[(($39)>>2)]=$22;
 var $40=$19|1;
 var $41=(($2)|0);
 HEAP32[(($41)>>2)]=$40;
 var $42=(($2+4)|0);
 HEAP32[(($42)>>2)]=$7;
 var $__p_0_i_i=$22;label=17;break;
 case 17: 
 var $__p_0_i_i;
 assert($7 % 1 === 0);(_memcpy($__p_0_i_i, $5, $7)|0);
 var $43=(($__p_0_i_i+$7)|0);
 HEAP8[($43)]=0;
 var $44=(($args1+4)|0);
 var $45=(($args1)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46>>>0)>4294967279;
 if($47){label=18;break;}else{label=20;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=65;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $50=($46>>>0)<11;
 if($50){label=21;break;}else{label=22;break;}
 case 21: 
 var $52=$46<<1;
 var $53=(($52)&255);
 var $54=$3;
 var $55=$3;
 HEAP8[($55)]=$53;
 var $56=(($54+1)|0);
 var $__p_0_i_i2=$56;label=34;break;
 case 22: 
 var $57=((($46)+(16))|0);
 var $58=$57&-16;
 var $59=($58|0)==0;
 var $_size_i24=($59?1:$58);
 label=23;break;
 case 23: 
 var $61=_malloc($_size_i24);
 var $62=($61|0)==0;
 if($62){label=24;break;}else{label=33;break;}
 case 24: 
 var $64=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $65=($64|0)==0;
 if($65){label=31;break;}else{label=25;break;}
 case 25: 
 var $67=$64;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=26;break; }
 case 26: 
 var $lpad_loopexit_i25$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i25$1 = tempRet0;
 var $lpad_phi_i29$1=$lpad_loopexit_i25$1;var $lpad_phi_i29$0=$lpad_loopexit_i25$0;label=28;break;
 case 27: 
 var $lpad_nonloopexit_i27$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i27$1 = tempRet0;
 var $lpad_phi_i29$1=$lpad_nonloopexit_i27$1;var $lpad_phi_i29$0=$lpad_nonloopexit_i27$0;label=28;break;
 case 28: 
 var $lpad_phi_i29$0;
 var $lpad_phi_i29$1;
 var $69=$lpad_phi_i29$1;
 var $70=($69|0)<0;
 if($70){label=29;break;}else{var $eh_lpad_body$1=$lpad_phi_i29$1;var $eh_lpad_body$0=$lpad_phi_i29$0;label=66;break;}
 case 29: 
 var $72=$lpad_phi_i29$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=65;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $74=___cxa_allocate_exception(4);
 var $75=$74;
 HEAP32[(($75)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($74,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=27;break; }
 case 32: 
 throw "Reached an unreachable!";
 case 33: 
 var $77=(($3+8)|0);
 HEAP32[(($77)>>2)]=$61;
 var $78=$58|1;
 var $79=(($3)|0);
 HEAP32[(($79)>>2)]=$78;
 var $80=(($3+4)|0);
 HEAP32[(($80)>>2)]=$46;
 var $__p_0_i_i2=$61;label=34;break;
 case 34: 
 var $__p_0_i_i2;
 assert($46 % 1 === 0);(_memcpy($__p_0_i_i2, $44, $46)|0);
 var $82=(($__p_0_i_i2+$46)|0);
 HEAP8[($82)]=0;
 var $83=(($args2+4)|0);
 var $84=(($args2)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85>>>0)>4294967279;
 if($86){label=35;break;}else{label=37;break;}
 case 35: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=67;break; }
 case 36: 
 throw "Reached an unreachable!";
 case 37: 
 var $89=($85>>>0)<11;
 if($89){label=38;break;}else{label=39;break;}
 case 38: 
 var $91=$85<<1;
 var $92=(($91)&255);
 var $93=$4;
 var $94=$4;
 HEAP8[($94)]=$92;
 var $95=(($93+1)|0);
 var $__p_0_i_i6=$95;label=51;break;
 case 39: 
 var $96=((($85)+(16))|0);
 var $97=$96&-16;
 var $98=($97|0)==0;
 var $_size_i32=($98?1:$97);
 label=40;break;
 case 40: 
 var $100=_malloc($_size_i32);
 var $101=($100|0)==0;
 if($101){label=41;break;}else{label=50;break;}
 case 41: 
 var $103=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $104=($103|0)==0;
 if($104){label=48;break;}else{label=42;break;}
 case 42: 
 var $106=$103;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$106]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=43;break; }
 case 43: 
 var $lpad_loopexit_i33$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i33$1 = tempRet0;
 var $lpad_phi_i37$1=$lpad_loopexit_i33$1;var $lpad_phi_i37$0=$lpad_loopexit_i33$0;label=45;break;
 case 44: 
 var $lpad_nonloopexit_i35$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i35$1 = tempRet0;
 var $lpad_phi_i37$1=$lpad_nonloopexit_i35$1;var $lpad_phi_i37$0=$lpad_nonloopexit_i35$0;label=45;break;
 case 45: 
 var $lpad_phi_i37$0;
 var $lpad_phi_i37$1;
 var $108=$lpad_phi_i37$1;
 var $109=($108|0)<0;
 if($109){label=46;break;}else{var $eh_lpad_body40$1=$lpad_phi_i37$1;var $eh_lpad_body40$0=$lpad_phi_i37$0;label=68;break;}
 case 46: 
 var $111=$lpad_phi_i37$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=67;break; }
 case 47: 
 throw "Reached an unreachable!";
 case 48: 
 var $113=___cxa_allocate_exception(4);
 var $114=$113;
 HEAP32[(($114)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($113,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=44;break; }
 case 49: 
 throw "Reached an unreachable!";
 case 50: 
 var $116=(($4+8)|0);
 HEAP32[(($116)>>2)]=$100;
 var $117=$97|1;
 var $118=(($4)|0);
 HEAP32[(($118)>>2)]=$117;
 var $119=(($4+4)|0);
 HEAP32[(($119)>>2)]=$85;
 var $__p_0_i_i6=$100;label=51;break;
 case 51: 
 var $__p_0_i_i6;
 assert($85 % 1 === 0);(_memcpy($__p_0_i_i6, $83, $85)|0);
 var $121=(($__p_0_i_i6+$85)|0);
 HEAP8[($121)]=0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1,$2,$3,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=69;break; }
 case 52: 
 var $123=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($1);
 var $124=$1;
 var $125=HEAP8[($124)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){label=55;break;}else{label=53;break;}
 case 53: 
 var $129=(($1+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($130|0)==0;
 if($131){label=55;break;}else{label=54;break;}
 case 54: 
 _free($130);
 label=55;break;
 case 55: 
 var $133=$4;
 var $134=HEAP8[($133)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=58;break;}else{label=56;break;}
 case 56: 
 var $138=(($4+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)==0;
 if($140){label=58;break;}else{label=57;break;}
 case 57: 
 _free($139);
 label=58;break;
 case 58: 
 var $142=$3;
 var $143=HEAP8[($142)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=61;break;}else{label=59;break;}
 case 59: 
 var $147=(($3+8)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)==0;
 if($149){label=61;break;}else{label=60;break;}
 case 60: 
 _free($148);
 label=61;break;
 case 61: 
 var $151=$2;
 var $152=HEAP8[($151)];
 var $153=$152&1;
 var $154=(($153<<24)>>24)==0;
 if($154){label=64;break;}else{label=62;break;}
 case 62: 
 var $156=(($2+8)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=($157|0)==0;
 if($158){label=64;break;}else{label=63;break;}
 case 63: 
 _free($157);
 label=64;break;
 case 64: 
 STACKTOP=sp;return $123;
 case 65: 
 var $161$0 = ___cxa_find_matching_catch(-1, -1); var $161$1 = tempRet0;
 var $eh_lpad_body$1=$161$1;var $eh_lpad_body$0=$161$0;label=66;break;
 case 66: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $162=$eh_lpad_body$0;
 var $163=$eh_lpad_body$1;
 var $_1=$163;var $_146=$162;label=75;break;
 case 67: 
 var $165$0 = ___cxa_find_matching_catch(-1, -1); var $165$1 = tempRet0;
 var $eh_lpad_body40$1=$165$1;var $eh_lpad_body40$0=$165$0;label=68;break;
 case 68: 
 var $eh_lpad_body40$0;
 var $eh_lpad_body40$1;
 var $166=$eh_lpad_body40$0;
 var $167=$eh_lpad_body40$1;
 var $_0=$167;var $_045=$166;label=72;break;
 case 69: 
 var $169$0 = ___cxa_find_matching_catch(-1, -1); var $169$1 = tempRet0;
 var $170=$169$0;
 var $171=$169$1;
 var $172=$4;
 var $173=HEAP8[($172)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){var $_0=$171;var $_045=$170;label=72;break;}else{label=70;break;}
 case 70: 
 var $177=(($4+8)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=($178|0)==0;
 if($179){var $_0=$171;var $_045=$170;label=72;break;}else{label=71;break;}
 case 71: 
 _free($178);
 var $_0=$171;var $_045=$170;label=72;break;
 case 72: 
 var $_045;
 var $_0;
 var $181=$3;
 var $182=HEAP8[($181)];
 var $183=$182&1;
 var $184=(($183<<24)>>24)==0;
 if($184){var $_1=$_0;var $_146=$_045;label=75;break;}else{label=73;break;}
 case 73: 
 var $186=(($3+8)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($187|0)==0;
 if($188){var $_1=$_0;var $_146=$_045;label=75;break;}else{label=74;break;}
 case 74: 
 _free($187);
 var $_1=$_0;var $_146=$_045;label=75;break;
 case 75: 
 var $_146;
 var $_1;
 var $190=$2;
 var $191=HEAP8[($190)];
 var $192=$191&1;
 var $193=(($192<<24)>>24)==0;
 if($193){label=78;break;}else{label=76;break;}
 case 76: 
 var $195=(($2+8)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=($196|0)==0;
 if($197){label=78;break;}else{label=77;break;}
 case 77: 
 _free($196);
 label=78;break;
 case 78: 
 var $199$0=$_146;
 var $199$1=0;
 var $200$0=$199$0;
 var $200$1=$_1;
 ___resumeException($200$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$v;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($v+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=((($11)+(4))|0);
 var $13=_malloc($12);
 var $14=$13;
 var $15=HEAP8[($1)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($v+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=7;break;
 case 6: 
 var $22=($15&255);
 var $23=$22>>>1;
 var $24=$23;label=7;break;
 case 7: 
 var $24;
 var $25=$13;
 HEAP32[(($25)>>2)]=$24;
 var $26=(($13+4)|0);
 var $27=HEAP8[($1)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=(($v+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($v+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $41=$34;var $40=$32;label=10;break;
 case 9: 
 var $36=$v;
 var $37=(($36+1)|0);
 var $38=($27&255);
 var $39=$38>>>1;
 var $41=$39;var $40=$37;label=10;break;
 case 10: 
 var $40;
 var $41;
 assert($41 % 1 === 0);(_memcpy($26, $40, $41)|0);
 return $14;
  default: assert(0, "bad label: " + label);
 }
}
function ___ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_E3$_0ESF__($fn,$args,$args1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(($args+4)|0);
 var $5=(($args)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6>>>0)>4294967279;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $10=($6>>>0)<11;
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=$6<<1;
 var $13=(($12)&255);
 var $14=$2;
 var $15=$2;
 HEAP8[($15)]=$13;
 var $16=(($14+1)|0);
 var $__p_0_i_i=$16;label=17;break;
 case 5: 
 var $17=((($6)+(16))|0);
 var $18=$17&-16;
 var $19=($18|0)==0;
 var $_size_i=($19?1:$18);
 label=6;break;
 case 6: 
 var $21=_malloc($_size_i);
 var $22=($21|0)==0;
 if($22){label=7;break;}else{label=16;break;}
 case 7: 
 var $24=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $25=($24|0)==0;
 if($25){label=13;break;}else{label=8;break;}
 case 8: 
 var $27=$24;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$27]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $29=$lpad_phi_i$1;
 var $30=($29|0)<0;
 if($30){label=12;break;}else{label=14;break;}
 case 12: 
 var $32=$lpad_phi_i$0;
 ___cxa_call_unexpected($32);
 throw "Reached an unreachable!";
 case 13: 
 var $34=___cxa_allocate_exception(4);
 var $35=$34;
 HEAP32[(($35)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($34,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $38=(($2+8)|0);
 HEAP32[(($38)>>2)]=$21;
 var $39=$18|1;
 var $40=(($2)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=(($2+4)|0);
 HEAP32[(($41)>>2)]=$6;
 var $__p_0_i_i=$21;label=17;break;
 case 17: 
 var $__p_0_i_i;
 assert($6 % 1 === 0);(_memcpy($__p_0_i_i, $4, $6)|0);
 var $42=(($__p_0_i_i+$6)|0);
 HEAP8[($42)]=0;
 var $43=(($args1+4)|0);
 var $44=(($args1)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($45>>>0)>4294967279;
 if($46){label=18;break;}else{label=20;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=45;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $49=($45>>>0)<11;
 if($49){label=21;break;}else{label=22;break;}
 case 21: 
 var $51=$45<<1;
 var $52=(($51)&255);
 var $53=$3;
 var $54=$3;
 HEAP8[($54)]=$52;
 var $55=(($53+1)|0);
 var $__p_0_i_i2=$55;label=34;break;
 case 22: 
 var $56=((($45)+(16))|0);
 var $57=$56&-16;
 var $58=($57|0)==0;
 var $_size_i15=($58?1:$57);
 label=23;break;
 case 23: 
 var $60=_malloc($_size_i15);
 var $61=($60|0)==0;
 if($61){label=24;break;}else{label=33;break;}
 case 24: 
 var $63=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $64=($63|0)==0;
 if($64){label=31;break;}else{label=25;break;}
 case 25: 
 var $66=$63;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=26;break; }
 case 26: 
 var $lpad_loopexit_i16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i16$1 = tempRet0;
 var $lpad_phi_i20$1=$lpad_loopexit_i16$1;var $lpad_phi_i20$0=$lpad_loopexit_i16$0;label=28;break;
 case 27: 
 var $lpad_nonloopexit_i18$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i18$1 = tempRet0;
 var $lpad_phi_i20$1=$lpad_nonloopexit_i18$1;var $lpad_phi_i20$0=$lpad_nonloopexit_i18$0;label=28;break;
 case 28: 
 var $lpad_phi_i20$0;
 var $lpad_phi_i20$1;
 var $68=$lpad_phi_i20$1;
 var $69=($68|0)<0;
 if($69){label=29;break;}else{var $eh_lpad_body$1=$lpad_phi_i20$1;var $eh_lpad_body$0=$lpad_phi_i20$0;label=46;break;}
 case 29: 
 var $71=$lpad_phi_i20$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=45;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $73=___cxa_allocate_exception(4);
 var $74=$73;
 HEAP32[(($74)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($73,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=27;break; }
 case 32: 
 throw "Reached an unreachable!";
 case 33: 
 var $76=(($3+8)|0);
 HEAP32[(($76)>>2)]=$60;
 var $77=$57|1;
 var $78=(($3)|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=(($3+4)|0);
 HEAP32[(($79)>>2)]=$45;
 var $__p_0_i_i2=$60;label=34;break;
 case 34: 
 var $__p_0_i_i2;
 assert($45 % 1 === 0);(_memcpy($__p_0_i_i2, $43, $45)|0);
 var $81=(($__p_0_i_i2+$45)|0);
 HEAP8[($81)]=0;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1,$2,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=47;break; }
 case 35: 
 var $83=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($1);
 var $84=$1;
 var $85=HEAP8[($84)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){label=38;break;}else{label=36;break;}
 case 36: 
 var $89=(($1+8)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=($90|0)==0;
 if($91){label=38;break;}else{label=37;break;}
 case 37: 
 _free($90);
 label=38;break;
 case 38: 
 var $93=$3;
 var $94=HEAP8[($93)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){label=41;break;}else{label=39;break;}
 case 39: 
 var $98=(($3+8)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=41;break;}else{label=40;break;}
 case 40: 
 _free($99);
 label=41;break;
 case 41: 
 var $102=$2;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=44;break;}else{label=42;break;}
 case 42: 
 var $107=(($2+8)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=($108|0)==0;
 if($109){label=44;break;}else{label=43;break;}
 case 43: 
 _free($108);
 label=44;break;
 case 44: 
 STACKTOP=sp;return $83;
 case 45: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1); var $112$1 = tempRet0;
 var $eh_lpad_body$1=$112$1;var $eh_lpad_body$0=$112$0;label=46;break;
 case 46: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $113=$eh_lpad_body$0;
 var $114=$eh_lpad_body$1;
 var $_0=$114;var $_025=$113;label=50;break;
 case 47: 
 var $116$0 = ___cxa_find_matching_catch(-1, -1); var $116$1 = tempRet0;
 var $117=$116$0;
 var $118=$116$1;
 var $119=$3;
 var $120=HEAP8[($119)];
 var $121=$120&1;
 var $122=(($121<<24)>>24)==0;
 if($122){var $_0=$118;var $_025=$117;label=50;break;}else{label=48;break;}
 case 48: 
 var $124=(($3+8)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($125|0)==0;
 if($126){var $_0=$118;var $_025=$117;label=50;break;}else{label=49;break;}
 case 49: 
 _free($125);
 var $_0=$118;var $_025=$117;label=50;break;
 case 50: 
 var $_025;
 var $_0;
 var $128=$2;
 var $129=HEAP8[($128)];
 var $130=$129&1;
 var $131=(($130<<24)>>24)==0;
 if($131){label=53;break;}else{label=51;break;}
 case 51: 
 var $133=(($2+8)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==0;
 if($135){label=53;break;}else{label=52;break;}
 case 52: 
 _free($134);
 label=53;break;
 case 53: 
 var $137$0=$_025;
 var $137$1=0;
 var $138$0=$137$0;
 var $138$1=$_0;
 ___resumeException($138$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEE6invokeEPFS8_vE($fn){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 FUNCTION_TABLE[$fn]($1);
 var $2=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($1);
 var $3=$1;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($1+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 STACKTOP=sp;return $2;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s_0,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=($__s_0|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=0;
 label=38;break;
 case 3: 
 var $5=$__oe;
 var $6=$__ob;
 var $7=((($5)-($6))|0);
 var $8=(($__iob+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)>($7|0);
 var $11=((($9)-($7))|0);
 var $storemerge=($10?$11:0);
 var $12=$__op;
 var $13=((($12)-($6))|0);
 var $14=($13|0)>0;
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 var $16=$__s_0;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+48)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=FUNCTION_TABLE[$19]($__s_0,$__ob,$13);
 var $21=($20|0)==($13|0);
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=(($agg_result)|0);
 HEAP32[(($23)>>2)]=0;
 label=38;break;
 case 6: 
 var $25=($storemerge|0)>0;
 if($25){label=7;break;}else{var $__s_sroa_0_1=$__s_0;label=34;break;}
 case 7: 
 var $27=($storemerge>>>0)>4294967279;
 var $28=($storemerge>>>0)<11;
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 var $30=$storemerge<<1;
 var $31=(($30)&255);
 var $32=$__sp;
 var $33=$__sp;
 HEAP8[($33)]=$31;
 var $34=(($32+1)|0);
 var $__p_0_i=$34;var $_pre_phi=$33;label=21;break;
 case 9: 
 var $35=((($storemerge)+(16))|0);
 var $36=$35&-16;
 var $37=($36|0)==0;
 var $_size_i=($37?1:$36);
 label=10;break;
 case 10: 
 var $39=_malloc($_size_i);
 var $40=($39|0)==0;
 if($40){label=11;break;}else{label=20;break;}
 case 11: 
 var $42=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=12;break;}
 case 12: 
 var $45=$42;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $47=$lpad_phi_i$1;
 var $48=($47|0)<0;
 if($48){label=16;break;}else{label=18;break;}
 case 16: 
 var $50=$lpad_phi_i$0;
 ___cxa_call_unexpected($50);
 throw "Reached an unreachable!";
 case 17: 
 var $52=___cxa_allocate_exception(4);
 var $53=$52;
 HEAP32[(($53)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($52,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $56=(($__sp+8)|0);
 HEAP32[(($56)>>2)]=$39;
 var $57=$36|1;
 var $58=(($__sp)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($__sp+4)|0);
 HEAP32[(($59)>>2)]=$storemerge;
 var $_pre=$__sp;
 var $__p_0_i=$39;var $_pre_phi=$_pre;label=21;break;
 case 21: 
 var $_pre_phi;
 var $__p_0_i;
 _memset($__p_0_i, $__fl, $storemerge)|0;
 var $60=(($__p_0_i+$storemerge)|0);
 HEAP8[($60)]=0;
 var $61=HEAP8[($_pre_phi)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=23;break;}else{label=22;break;}
 case 22: 
 var $65=(($__sp+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $70=$66;label=24;break;
 case 23: 
 var $68=$__sp;
 var $69=(($68+1)|0);
 var $70=$69;label=24;break;
 case 24: 
 var $70;
 var $71=$__s_0;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+48)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$74]($__s_0,$70,$storemerge) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=27;break; }
 case 25: 
 var $76=($75|0)==($storemerge|0);
 if($76){var $storemerge1=0;var $__s_sroa_0_0=$__s_0;label=30;break;}else{label=26;break;}
 case 26: 
 var $78=(($agg_result)|0);
 HEAP32[(($78)>>2)]=0;
 var $storemerge1=1;var $__s_sroa_0_0=0;label=30;break;
 case 27: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $81=HEAP8[($_pre_phi)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=39;break;}else{label=28;break;}
 case 28: 
 var $85=(($__sp+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($86|0)==0;
 if($87){label=39;break;}else{label=29;break;}
 case 29: 
 _free($86);
 label=39;break;
 case 30: 
 var $__s_sroa_0_0;
 var $storemerge1;
 var $90=HEAP8[($_pre_phi)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=33;break;}else{label=31;break;}
 case 31: 
 var $94=(($__sp+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=33;break;}else{label=32;break;}
 case 32: 
 _free($95);
 label=33;break;
 case 33: 
 var $cond=($storemerge1|0)==1;
 if($cond){label=38;break;}else{var $__s_sroa_0_1=$__s_sroa_0_0;label=34;break;}
 case 34: 
 var $__s_sroa_0_1;
 var $99=((($5)-($12))|0);
 var $100=($99|0)>0;
 if($100){label=35;break;}else{label=37;break;}
 case 35: 
 var $102=$__s_sroa_0_1;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+48)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($__s_sroa_0_1,$__op,$99);
 var $107=($106|0)==($99|0);
 if($107){label=37;break;}else{label=36;break;}
 case 36: 
 var $109=(($agg_result)|0);
 HEAP32[(($109)>>2)]=0;
 label=38;break;
 case 37: 
 HEAP32[(($8)>>2)]=0;
 var $111=(($agg_result)|0);
 HEAP32[(($111)>>2)]=$__s_sroa_0_1;
 label=38;break;
 case 38: 
 STACKTOP=sp;return;
 case 39: 
 ___resumeException($80$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail16throw_exception_ISt13runtime_errorEEvRKT_PKcS7_i($x_0_1_val,$current_function,$file,$line){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $1=((($x_0_1_val)-(4))|0);
 var $2=$1;
 var $3=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+1,tempValue);
 var $4=$0;
 var $5=___cxa_allocate_exception(32);
 var $6=(($0)|0);
 HEAP32[(($6)>>2)]=5944;
 var $7=(($0+4)|0);
 HEAP32[(($7)>>2)]=$x_0_1_val;
 var $8=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+1,tempValue);
 var $9=(($0+8)|0);
 HEAP32[(($9)>>2)]=8752;
 var $10=(($0+12)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=(($0+16)|0);
 HEAP32[(($11)>>2)]=$current_function;
 var $12=(($0+20)|0);
 HEAP32[(($12)>>2)]=$file;
 var $13=(($0+24)|0);
 HEAP32[(($13)>>2)]=$line;
 HEAP32[(($6)>>2)]=8824;
 HEAP32[(($9)>>2)]=8844;
 var $14=(($5+28)|0);
 var $15=$14;
 HEAP32[(($15)>>2)]=9208;
 var $16=$5;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorEC2ERKS3_($16,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $18=$5;
 HEAP32[(($18)>>2)]=9020;
 var $19=(($5+8)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=9048;
 HEAP32[(($15)>>2)]=9076;
 var $21=$19;
 var $22=(($0+8)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($21,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=4;break; }
 case 3: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1); var $24$1 = tempRet0;
 var $25=$24$0;
 var $26=$24$1;
 var $_0=$25;var $_048=$26;label=12;break;
 case 4: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $29=$28$0;
 var $30=$28$1;
 HEAP32[(($20)>>2)]=8752;
 var $31=(($5+12)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=5;break;}
 case 5: 
 var $36=$33;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 if($40){label=7;break;}else{label=9;break;}
 case 7: 
 HEAP32[(($32)>>2)]=0;
 label=9;break;
 case 8: 
 var $43$0 = ___cxa_find_matching_catch(-1, -1,0); var $43$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 HEAP32[(($18)>>2)]=5944;
 var $44=(($5+4)|0);
 var $45=$44;
 var $this_idx_val_i_i_i_i_i_i=HEAP32[(($45)>>2)];
 var $46=((($this_idx_val_i_i_i_i_i_i)-(4))|0);
 var $47=$46;
 var $48=(tempValue=HEAP32[(($47)>>2)],HEAP32[(($47)>>2)]=tempValue+-1,tempValue);
 var $49=((($48)-(1))|0);
 var $50=($49|0)<0;
 if($50){label=10;break;}else{var $_0=$29;var $_048=$30;label=12;break;}
 case 10: 
 var $52=HEAP32[(($45)>>2)];
 var $53=((($52)-(12))|0);
 var $54=($53|0)==0;
 if($54){var $_0=$29;var $_048=$30;label=12;break;}else{label=11;break;}
 case 11: 
 _free($53);
 var $_0=$29;var $_048=$30;label=12;break;
 case 12: 
 var $_048;
 var $_0;
 var $55$0=$_0;
 var $55$1=0;
 var $56$0=$55$0;
 var $56$1=$_048;
 var $eh_lpad_body2_i$1=$56$1;var $eh_lpad_body2_i$0=$56$0;var $_051=1;label=15;break;
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($5,15304,(64)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=14;break; }
 case 14: 
 var $58$0 = ___cxa_find_matching_catch(-1, -1); var $58$1 = tempRet0;
 var $eh_lpad_body2_i$1=$58$1;var $eh_lpad_body2_i$0=$58$0;var $_051=0;label=15;break;
 case 15: 
 var $_051;
 var $eh_lpad_body2_i$0;
 var $eh_lpad_body2_i$1;
 var $59=$eh_lpad_body2_i$0;
 var $60=$eh_lpad_body2_i$1;
 HEAP32[(($9)>>2)]=8752;
 var $61=HEAP32[(($10)>>2)];
 var $62=($61|0)==0;
 if($62){label=20;break;}else{label=16;break;}
 case 16: 
 var $64=$61;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 17: 
 if($68){label=18;break;}else{label=20;break;}
 case 18: 
 HEAP32[(($10)>>2)]=0;
 label=20;break;
 case 19: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1,0); var $71$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 HEAP32[(($6)>>2)]=5944;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($7)>>2)];
 var $72=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $73=$72;
 var $74=(tempValue=HEAP32[(($73)>>2)],HEAP32[(($73)>>2)]=tempValue+-1,tempValue);
 var $75=((($74)-(1))|0);
 var $76=($75|0)<0;
 if($76){label=21;break;}else{label=23;break;}
 case 21: 
 var $78=HEAP32[(($7)>>2)];
 var $79=((($78)-(12))|0);
 var $80=($79|0)==0;
 if($80){label=23;break;}else{label=22;break;}
 case 22: 
 _free($79);
 label=23;break;
 case 23: 
 if($_051){label=24;break;}else{label=26;break;}
 case 24: 
 ___cxa_free_exception($5);
 label=26;break;
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $83$0=$59;
 var $83$1=0;
 var $84$0=$83$0;
 var $84$1=$60;
 var $85=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+-1,tempValue);
 var $86=((($85)-(1))|0);
 var $87=($86|0)<0;
 if($87){label=27;break;}else{label=29;break;}
 case 27: 
 var $89=((($x_0_1_val)-(12))|0);
 var $90=($89|0)==0;
 if($90){label=29;break;}else{label=28;break;}
 case 28: 
 _free($89);
 label=29;break;
 case 29: 
 ___resumeException($84$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends16eval_right_shiftILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valueEvE4typeERS8_y($result,$s$0,$s$1){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $1=(($s$0|0) == ($$etemp$0$0|0)) & (($s$1|0) == ($$etemp$0$1|0));
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3$0=($s$0>>>5)|($s$1<<27);
 var $3$1=($s$1>>>5)|(0<<27);
 var $4$0=$3$0;
 var $4=$4$0;
 var $_tr$0=$s$0;
 var $_tr=$_tr$0;
 var $5=$_tr&31;
 var $6=(($result+128)|0);
 var $7=HEAP16[(($6)>>1)];
 var $8=($7&65535);
 var $9=($4>>>0)<($8>>>0);
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP16[(($6)>>1)]=1;
 var $11=$result;
 HEAP32[(($11)>>2)]=0;
 var $12=(($result+130)|0);
 HEAP8[($12)]=0;
 label=13;break;
 case 4: 
 var $13=((($8)-($4))|0);
 var $14=$result;
 var $15=((($8)-(1))|0);
 var $16=(($14+($15<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17>>>($5>>>0);
 var $19=($18|0)==0;
 var $20=((($13)-(1))|0);
 var $rs_0=($19?$20:$13);
 var $21=($rs_0|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP16[(($6)>>1)]=1;
 HEAP32[(($14)>>2)]=0;
 var $23=(($result+130)|0);
 HEAP8[($23)]=0;
 label=13;break;
 case 6: 
 var $25=($5|0)==0;
 if($25){var $i_1=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $26=(((32)-($5))|0);
 var $i_0=0;label=8;break;
 case 8: 
 var $i_0;
 var $28=((($i_0)+($4))|0);
 var $29=((($28)+(1))|0);
 var $30=($29>>>0)<($8>>>0);
 var $31=(($14+($28<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$32>>>($5>>>0);
 var $34=(($14+($i_0<<2))|0);
 HEAP32[(($34)>>2)]=$33;
 if($30){label=9;break;}else{label=12;break;}
 case 9: 
 var $36=(($14+($29<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$37<<$26;
 var $39=$33|$38;
 HEAP32[(($34)>>2)]=$39;
 var $40=((($i_0)+(1))|0);
 var $i_0=$40;label=8;break;
 case 10: 
 var $i_1;
 var $41=($i_1>>>0)<($rs_0>>>0);
 if($41){label=11;break;}else{label=12;break;}
 case 11: 
 var $43=((($i_1)+($4))|0);
 var $44=(($14+($43<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($14+($i_1<<2))|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=((($i_1)+(1))|0);
 var $i_1=$47;label=10;break;
 case 12: 
 var $48=($rs_0>>>0)>32;
 var $extract_t=(($rs_0)&65535);
 var $_extract_t=($48?32:$extract_t);
 HEAP16[(($6)>>1)]=$_extract_t;
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($result,$x,$y,$r){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t=sp;
 var $t1=(sp)+(136);
 var $rem=(sp)+(272);
 var $t2=(sp)+(408);
 var $1=($result|0)==($x|0);
 var $2=($r|0)==($x|0);
 var $or_cond=$1|$2;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$t;
 var $5=$x;
 assert(136 % 1 === 0);(_memcpy($4, $5, 136)|0);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($result,$t,$y,$r);
 label=116;break;
 case 3: 
 var $7=($result|0)==($y|0);
 var $8=($r|0)==($y|0);
 var $or_cond494=$7|$8;
 if($or_cond494){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$t1;
 var $11=$y;
 assert(136 % 1 === 0);(_memcpy($10, $11, 136)|0);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($result,$x,$t1,$r);
 label=116;break;
 case 5: 
 var $13=($result|0)==($r|0);
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 var $14=$rem;
 HEAP32[(($14)>>2)]=0;
 var $15=(($rem+128)|0);
 HEAP16[(($15)>>1)]=1;
 var $16=(($rem+130)|0);
 HEAP8[($16)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($result,$x,$y,$rem);
 var $17=(($rem+128)|0);
 var $18=HEAP16[(($17)>>1)];
 var $19=($18&65535);
 var $20=($18&65535)>32;
 var $_=($20?32:$18);
 var $21=(($result+128)|0);
 HEAP16[(($21)>>1)]=$_;
 var $22=$rem;
 var $23=(($22+($19<<2))|0);
 var $24=$23;
 var $25=$rem;
 var $26=((($24)-($25))|0);
 var $27=$result;
 var $28=$rem;
 assert($26 % 1 === 0);(_memcpy($27, $28, $26)|0);
 var $29=(($rem+130)|0);
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($result+130)|0);
 HEAP8[($32)]=$31;
 label=116;break;
 case 7: 
 var $34=(($y+128)|0);
 var $35=HEAP16[(($34)>>1)];
 var $36=($35&65535);
 var $37=((($36)-(1))|0);
 var $38=($37|0)==0;
 if($38){label=8;break;}else{label=9;break;}
 case 8: 
 var $40=$y;
 var $41=HEAP32[(($40)>>2)];
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$x,$41,$r);
 label=116;break;
 case 9: 
 var $43=$x;
 var $44=$y;
 var $45=(($x+128)|0);
 var $46=HEAP16[(($45)>>1)];
 var $47=($46&65535);
 var $48=((($47)-(1))|0);
 var $49=($48|0)==0;
 if($49){label=10;break;}else{label=13;break;}
 case 10: 
 var $51=HEAP32[(($43)>>2)];
 var $52=($51|0)==0;
 if($52){label=11;break;}else{label=13;break;}
 case 11: 
 var $53=(($x+128)|0);
 var $54=($46&65535)>32;
 var $_495=($54?32:$46);
 var $55=(($r+128)|0);
 HEAP16[(($55)>>1)]=$_495;
 var $56=$x;
 var $57=HEAP16[(($53)>>1)];
 var $58=($57&65535);
 var $59=(($56+($58<<2))|0);
 var $60=$59;
 var $61=$x;
 var $62=((($60)-($61))|0);
 var $63=$r;
 var $64=$x;
 _memmove($63,$64,$62,4,0);
 var $65=(($x+130)|0);
 var $66=HEAP8[($65)];
 var $67=$66&1;
 var $68=(($r+130)|0);
 HEAP8[($68)]=$67;
 var $69=($result|0)==0;
 if($69){label=116;break;}else{label=12;break;}
 case 12: 
 var $70=(($x+128)|0);
 var $71=HEAP16[(($70)>>1)];
 var $72=($71&65535)>32;
 var $_496=($72?32:$71);
 var $73=(($result+128)|0);
 HEAP16[(($73)>>1)]=$_496;
 var $74=$x;
 var $75=HEAP16[(($70)>>1)];
 var $76=($75&65535);
 var $77=(($74+($76<<2))|0);
 var $78=$77;
 var $79=$x;
 var $80=((($78)-($79))|0);
 var $81=$result;
 var $82=$x;
 _memmove($81,$82,$80,4,0);
 var $83=(($x+130)|0);
 var $84=HEAP8[($83)];
 var $85=$84&1;
 var $86=(($result+130)|0);
 HEAP8[($86)]=$85;
 label=116;break;
 case 13: 
 var $87=(($x+128)|0);
 var $88=($46&65535)>32;
 var $_497=($88?32:$46);
 var $89=(($r+128)|0);
 HEAP16[(($89)>>1)]=$_497;
 var $90=$x;
 var $91=HEAP16[(($87)>>1)];
 var $92=($91&65535);
 var $93=(($90+($92<<2))|0);
 var $94=$93;
 var $95=$x;
 var $96=((($94)-($95))|0);
 var $97=$r;
 var $98=$x;
 _memmove($97,$98,$96,4,0);
 var $99=(($x+130)|0);
 var $100=HEAP8[($99)];
 var $101=$100&1;
 var $102=(($r+130)|0);
 HEAP8[($102)]=$101;
 HEAP8[($102)]=0;
 var $103=($result|0)==0;
 if($103){label=15;break;}else{label=14;break;}
 case 14: 
 var $105=(($result+128)|0);
 HEAP16[(($105)>>1)]=1;
 var $106=$result;
 HEAP32[(($106)>>2)]=0;
 var $107=(($result+130)|0);
 HEAP8[($107)]=0;
 label=15;break;
 case 15: 
 var $109=($48>>>0)>($37>>>0);
 if($109){label=18;break;}else{label=16;break;}
 case 16: 
 var $111=($48>>>0)<($37>>>0);
 if($111){label=116;break;}else{label=17;break;}
 case 17: 
 var $113=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $114=($113|0)<0;
 if($114){label=116;break;}else{label=18;break;}
 case 18: 
 var $116=$t2;
 HEAP32[(($116)>>2)]=0;
 var $117=(($t2+128)|0);
 HEAP16[(($117)>>1)]=1;
 var $118=(($t2+130)|0);
 HEAP8[($118)]=0;
 if($49){label=19;break;}else{label=22;break;}
 case 19: 
 if($103){label=21;break;}else{label=20;break;}
 case 20: 
 var $121=HEAP32[(($43)>>2)];
 var $122=HEAP32[(($44)>>2)];
 var $123=(((($121>>>0))/(($122>>>0)))&-1);
 var $124=(($result+128)|0);
 HEAP16[(($124)>>1)]=1;
 var $125=$result;
 HEAP32[(($125)>>2)]=$123;
 var $126=(($result+130)|0);
 HEAP8[($126)]=0;
 label=21;break;
 case 21: 
 var $128=HEAP32[(($43)>>2)];
 var $129=HEAP32[(($44)>>2)];
 var $130=(((($128>>>0))%(($129>>>0)))&-1);
 var $131=(($r+128)|0);
 HEAP16[(($131)>>1)]=1;
 var $132=$r;
 HEAP32[(($132)>>2)]=$130;
 HEAP8[($102)]=0;
 label=116;break;
 case 22: 
 var $134=($48|0)==1;
 if($134){label=23;break;}else{label=26;break;}
 case 23: 
 var $136=(($43+4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138$0=$137;
 var $138$1=0;
 var $139$0=0;
 var $139$1=$138$0;
 var $140=HEAP32[(($43)>>2)];
 var $141$0=$140;
 var $141$1=0;
 var $142$0=$139$0|$141$0;
 var $142$1=$139$1|$141$1;
 var $143=(($44+4)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145$0=$144;
 var $145$1=0;
 var $146$0=0;
 var $146$1=$145$0;
 var $147=HEAP32[(($44)>>2)];
 var $148$0=$147;
 var $148$1=0;
 var $149$0=$146$0|$148$0;
 var $149$1=$146$1|$148$1;
 if($103){label=25;break;}else{label=24;break;}
 case 24: 
 var $151$0=___udivdi3($142$0,$142$1,$149$0,$149$1);var $151$1=tempRet0;
 var $152=$result;
 var $153$0=$151$0;
 var $153=$153$0;
 HEAP32[(($152)>>2)]=$153;
 var $154$0=$151$1;
 var $154$1=0;
 var $155$0=$154$0;
 var $155=$155$0;
 var $156=(($152+4)|0);
 HEAP32[(($156)>>2)]=$155;
 var $157=($155|0)!=0;
 var $158=($157?2:1);
 var $159=(($result+128)|0);
 HEAP16[(($159)>>1)]=$158;
 var $160=(($result+130)|0);
 HEAP8[($160)]=0;
 label=25;break;
 case 25: 
 var $162$0=___uremdi3($142$0,$142$1,$149$0,$149$1);var $162$1=tempRet0;
 var $163=$r;
 var $164$0=$162$0;
 var $164=$164$0;
 HEAP32[(($163)>>2)]=$164;
 var $165$0=$162$1;
 var $165$1=0;
 var $166$0=$165$0;
 var $166=$166$0;
 var $167=(($163+4)|0);
 HEAP32[(($167)>>2)]=$166;
 var $168=($166|0)!=0;
 var $169=($168?2:1);
 var $170=(($r+128)|0);
 HEAP16[(($170)>>1)]=$169;
 HEAP8[($102)]=0;
 label=116;break;
 case 26: 
 if($103){label=27;break;}else{label=28;break;}
 case 27: 
 var $172=$r;
 var $_pre478=(($result+128)|0);
 var $prem_0=$172;var $pr_0=0;var $_pre_phi=$_pre478;label=31;break;
 case 28: 
 var $174=((($47)-($37))|0);
 var $175=($174>>>0)>32;
 var $extract_t=(($174)&65535);
 var $_extract_t=($175?32:$extract_t);
 var $176=(($result+128)|0);
 HEAP16[(($176)>>1)]=$_extract_t;
 var $177=$r;
 var $178=$result;
 var $storemerge5=1;label=29;break;
 case 29: 
 var $storemerge5;
 var $180=($storemerge5>>>0)<($174>>>0);
 if($180){label=30;break;}else{var $prem_0=$177;var $pr_0=$178;var $_pre_phi=$176;label=31;break;}
 case 30: 
 var $182=(($178+($storemerge5<<2))|0);
 HEAP32[(($182)>>2)]=0;
 var $183=((($storemerge5)+(1))|0);
 var $storemerge5=$183;label=29;break;
 case 31: 
 var $_pre_phi;
 var $pr_0;
 var $prem_0;
 var $184=(($44+($37<<2))|0);
 var $185=((($36)-(2))|0);
 var $186=(($44+($185<<2))|0);
 var $187=(($r+128)|0);
 var $188=(($t2+128)|0);
 var $189=$r;
 var $190=$t2;
 var $191=(($t2+130)|0);
 var $192=$r;
 var $193=(($result+130)|0);
 var $r_order_0=$48;var $r_neg_0=0;var $prem_1=$prem_0;var $first_pass_0=1;label=32;break;
 case 32: 
 var $first_pass_0;
 var $prem_1;
 var $r_neg_0;
 var $r_order_0;
 var $194=(($prem_1+($r_order_0<<2))|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=HEAP32[(($184)>>2)];
 var $197=($195>>>0)>($196>>>0);
 var $198=($r_order_0|0)==0;
 if($197){label=36;break;}else{label=33;break;}
 case 33: 
 if($198){label=37;break;}else{label=34;break;}
 case 34: 
 var $201$0=$195;
 var $201$1=0;
 var $202$0=0;
 var $202$1=$201$0;
 var $203=((($r_order_0)-(1))|0);
 var $204=(($prem_1+($203<<2))|0);
 var $205=HEAP32[(($204)>>2)];
 var $206$0=$205;
 var $206$1=0;
 var $207$0=$202$0|$206$0;
 var $207$1=$202$1|$206$1;
 var $208$0=$196;
 var $208$1=0;
 var $209$0=___udivdi3($207$0,$207$1,$208$0,$208$1);var $209$1=tempRet0;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $210=(($209$1>>>0) > ($$etemp$0$1>>>0)) | (((($209$1>>>0) == ($$etemp$0$1>>>0) & ($209$0>>>0) >  ($$etemp$0$0>>>0))));
 if($210){var $r_order_2=$r_order_0;var $guess_1=1;label=41;break;}else{label=35;break;}
 case 35: 
 var $212$0=$209$0;
 var $212=$212$0;
 var $r_order_1=$203;var $guess_0=$212;label=39;break;
 case 36: 
 if($198){label=37;break;}else{label=38;break;}
 case 37: 
 var $214=HEAP32[(($prem_1)>>2)];
 var $215=(((($214>>>0))/(($196>>>0)))&-1);
 var $r_order_1=$r_order_0;var $guess_0=$215;label=39;break;
 case 38: 
 var $217$0=$195;
 var $217$1=0;
 var $218$0=0;
 var $218$1=$217$0;
 var $219=((($r_order_0)-(1))|0);
 var $220=(($prem_1+($219<<2))|0);
 var $221=HEAP32[(($220)>>2)];
 var $222$0=$221;
 var $222$1=0;
 var $223$0=$218$0|$222$0;
 var $223$1=$218$1|$222$1;
 var $224$0=$196;
 var $224$1=0;
 var $225$0=0;
 var $225$1=$224$0;
 var $226=HEAP32[(($186)>>2)];
 var $227$0=$226;
 var $227$1=0;
 var $228$0=$225$0|$227$0;
 var $228$1=$225$1|$227$1;
 var $229$0=___udivdi3($223$0,$223$1,$228$0,$228$1);var $229$1=tempRet0;
 var $230$0=$229$0;
 var $230=$230$0;
 var $r_order_1=$r_order_0;var $guess_0=$230;label=39;break;
 case 39: 
 var $guess_0;
 var $r_order_1;
 var $232=($guess_0|0)==0;
 if($232){label=40;break;}else{var $r_order_2=$r_order_1;var $guess_1=$guess_0;label=41;break;}
 case 40: 
 ___assert_fail(3032,2856,186,3576);
 throw "Reached an unreachable!";
 case 41: 
 var $guess_1;
 var $r_order_2;
 var $234=((($r_order_2)-($37))|0);
 if($103){label=59;break;}else{label=42;break;}
 case 42: 
 var $236=$r_neg_0&1;
 var $237=(($236<<24)>>24)==0;
 var $238=(($pr_0+($234<<2))|0);
 var $239=HEAP32[(($238)>>2)];
 if($237){label=51;break;}else{label=43;break;}
 case 43: 
 var $241=($239>>>0)>($guess_1>>>0);
 if($241){label=44;break;}else{label=45;break;}
 case 44: 
 var $243=((($239)-($guess_1))|0);
 HEAP32[(($238)>>2)]=$243;
 label=59;break;
 case 45: 
 var $244=((($234)+(1))|0);
 var $245=($244>>>0)>32;
 var $extract_t484=(($244)&65535);
 var $_extract_t484=($245?32:$extract_t484);
 HEAP16[(($117)>>1)]=$_extract_t484;
 var $246=(($116+($234<<2))|0);
 HEAP32[(($246)>>2)]=$guess_1;
 var $storemerge4=0;label=46;break;
 case 46: 
 var $storemerge4;
 var $248=($storemerge4>>>0)<($234>>>0);
 if($248){label=47;break;}else{label=48;break;}
 case 47: 
 var $250=(($116+($storemerge4<<2))|0);
 HEAP32[(($250)>>2)]=0;
 var $251=((($storemerge4)+(1))|0);
 var $storemerge4=$251;label=46;break;
 case 48: 
 var $253=HEAP8[($193)];
 var $254=$253&1;
 var $255=(($254<<24)>>24)!=0;
 var $256=HEAP8[($118)];
 var $257=$256&1;
 var $258=(($257<<24)>>24)!=0;
 var $259=$255^$258;
 if($259){label=49;break;}else{label=50;break;}
 case 49: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 50: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 51: 
 var $263=$239^-1;
 var $264=($guess_1>>>0)<($263>>>0);
 if($264){label=52;break;}else{label=53;break;}
 case 52: 
 var $266=((($239)+($guess_1))|0);
 HEAP32[(($238)>>2)]=$266;
 label=59;break;
 case 53: 
 var $267=((($234)+(1))|0);
 var $268=($267>>>0)>32;
 var $extract_t488=(($267)&65535);
 var $_extract_t488=($268?32:$extract_t488);
 HEAP16[(($117)>>1)]=$_extract_t488;
 var $269=(($116+($234<<2))|0);
 HEAP32[(($269)>>2)]=$guess_1;
 var $storemerge3=0;label=54;break;
 case 54: 
 var $storemerge3;
 var $271=($storemerge3>>>0)<($234>>>0);
 if($271){label=55;break;}else{label=56;break;}
 case 55: 
 var $273=(($116+($storemerge3<<2))|0);
 HEAP32[(($273)>>2)]=0;
 var $274=((($storemerge3)+(1))|0);
 var $storemerge3=$274;label=54;break;
 case 56: 
 var $276=HEAP8[($193)];
 var $277=$276&1;
 var $278=(($277<<24)>>24)!=0;
 var $279=HEAP8[($118)];
 var $280=$279&1;
 var $281=(($280<<24)>>24)!=0;
 var $282=$278^$281;
 if($282){label=57;break;}else{label=58;break;}
 case 57: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 58: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 59: 
 var $285=HEAP16[(($34)>>1)];
 var $286=($285&65535);
 var $287=((($286)+($234))|0);
 var $288=((($287)+(1))|0);
 var $289=($288>>>0)>32;
 var $extract_t485=(($288)&65535);
 var $_in24_sroa_speculated_sroa_speculated_off0=($289?32:$extract_t485);
 HEAP16[(($117)>>1)]=$_in24_sroa_speculated_sroa_speculated_off0;
 var $290=($_in24_sroa_speculated_sroa_speculated_off0&65535);
 var $291=($290|0)!=($288|0);
 var $storemerge1=0;label=60;break;
 case 60: 
 var $storemerge1;
 var $293=($storemerge1>>>0)<($234>>>0);
 if($293){label=61;break;}else{label=62;break;}
 case 61: 
 var $295=(($116+($storemerge1<<2))|0);
 HEAP32[(($295)>>2)]=0;
 var $296=((($storemerge1)+(1))|0);
 var $storemerge1=$296;label=60;break;
 case 62: 
 var $297$0=$guess_1;
 var $297$1=0;
 var $storemerge2=0;var $carry_0$1=0;var $carry_0$0=0;label=63;break;
 case 63: 
 var $carry_0$0;
 var $carry_0$1;
 var $storemerge2;
 var $299=($storemerge2>>>0)<($286>>>0);
 if($299){label=64;break;}else{label=65;break;}
 case 64: 
 var $301=(($44+($storemerge2<<2))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303$0=$302;
 var $303$1=0;
 var $304$0=___muldi3($303$0,$303$1,$297$0,$297$1);var $304$1=tempRet0;
 var $305$0=_i64Add($carry_0$0,$carry_0$1,$304$0,$304$1);var $305$1=tempRet0;
 var $306$0=$305$0;
 var $306=$306$0;
 var $307=((($storemerge2)+($234))|0);
 var $308=(($116+($307<<2))|0);
 HEAP32[(($308)>>2)]=$306;
 var $309$0=$305$1;
 var $309$1=0;
 var $310=((($storemerge2)+(1))|0);
 var $storemerge2=$310;var $carry_0$1=$309$1;var $carry_0$0=$309$0;label=63;break;
 case 65: 
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $312=(($carry_0$0|0) == ($$etemp$1$0|0)) & (($carry_0$1|0) == ($$etemp$1$1|0));
 if($312){label=68;break;}else{label=66;break;}
 case 66: 
 if($291){label=70;break;}else{label=67;break;}
 case 67: 
 var $315$0=$carry_0$0;
 var $315=$315$0;
 var $316=HEAP16[(($117)>>1)];
 var $317=($316&65535);
 var $318=((($317)-(1))|0);
 var $319=(($116+($318<<2))|0);
 HEAP32[(($319)>>2)]=$315;
 label=70;break;
 case 68: 
 if($291){label=70;break;}else{label=69;break;}
 case 69: 
 var $320=HEAP16[(($117)>>1)];
 var $321=($320&65535);
 var $322=((($321)-(1))|0);
 var $323=($322>>>0)>32;
 var $extract_t487=(($322)&65535);
 var $_extract_t487=($323?32:$extract_t487);
 HEAP16[(($117)>>1)]=$_extract_t487;
 label=70;break;
 case 70: 
 var $324=HEAP8[($102)];
 var $325=$324&1;
 var $326=(($325<<24)>>24)!=0;
 var $327=HEAP8[($118)];
 var $328=$327&1;
 var $329=(($328<<24)>>24)!=0;
 var $330=$326^$329;
 if($330){label=71;break;}else{label=72;break;}
 case 71: 
 var $332=($326?-1:1);
 var $storemerge_i_i14=$332;label=74;break;
 case 72: 
 var $334=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$t2);
 var $335=(($325<<24)>>24)==0;
 if($335){var $storemerge_i_i14=$334;label=74;break;}else{label=73;break;}
 case 73: 
 var $337=(((-$334))|0);
 var $storemerge_i_i14=$337;label=74;break;
 case 74: 
 var $storemerge_i_i14;
 var $338=($storemerge_i_i14|0)>0;
 if($338){label=75;break;}else{var $storemerge_i_i=0;label=78;break;}
 case 75: 
 if($330){label=76;break;}else{label=77;break;}
 case 76: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 var $r_neg_1=$r_neg_0;var $prem_2=$prem_1;label=84;break;
 case 77: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 var $r_neg_1=$r_neg_0;var $prem_2=$prem_1;label=84;break;
 case 78: 
 var $storemerge_i_i;
 var $342=HEAP16[(($187)>>1)];
 var $343=HEAP16[(($188)>>1)];
 var $344=($342&65535)<($343&65535);
 var $_498=($344?$343:$342);
 var $_in25_sroa_speculated_sroa_speculated=($_498&65535);
 var $345=($storemerge_i_i>>>0)<($_in25_sroa_speculated_sroa_speculated>>>0);
 if($345){label=79;break;}else{label=80;break;}
 case 79: 
 var $347=(($189+($storemerge_i_i<<2))|0);
 var $348=(($190+($storemerge_i_i<<2))|0);
 var $349=HEAP32[(($347)>>2)];
 var $350=HEAP32[(($348)>>2)];
 HEAP32[(($347)>>2)]=$350;
 HEAP32[(($348)>>2)]=$349;
 var $351=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$351;label=78;break;
 case 80: 
 var $352=HEAP8[($102)];
 var $353=$352&1;
 var $354=HEAP8[($191)];
 var $355=$354&1;
 HEAP8[($102)]=$355;
 HEAP8[($191)]=$353;
 HEAP16[(($187)>>1)]=$343;
 HEAP16[(($188)>>1)]=$342;
 var $356=(($355<<24)>>24)!=0;
 var $357=(($353<<24)>>24)!=0;
 var $358=$356^$357;
 if($358){label=81;break;}else{label=82;break;}
 case 81: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 label=83;break;
 case 82: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 label=83;break;
 case 83: 
 var $361=$r_neg_0&1;
 var $362=$361^1;
 var $r_neg_1=$362;var $prem_2=$192;label=84;break;
 case 84: 
 var $prem_2;
 var $r_neg_1;
 if($103){var $first_pass_1=$first_pass_0;label=89;break;}else{label=85;break;}
 case 85: 
 var $364=$first_pass_0&1;
 var $365=(($364<<24)>>24)==0;
 if($365){var $first_pass_1=$first_pass_0;label=89;break;}else{label=86;break;}
 case 86: 
 var $_pre=HEAP16[(($_pre_phi)>>1)];
 var $368=$_pre;label=87;break;
 case 87: 
 var $368;
 var $369=($368&65535);
 var $370=((($369)-(1))|0);
 var $371=(($pr_0+($370<<2))|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=($372|0)==0;
 if($373){label=88;break;}else{var $first_pass_1=0;label=89;break;}
 case 88: 
 var $374=($370>>>0)>32;
 var $extract_t486=(($370)&65535);
 var $_extract_t486=($374?32:$extract_t486);
 HEAP16[(($_pre_phi)>>1)]=$_extract_t486;
 var $368=$_extract_t486;label=87;break;
 case 89: 
 var $first_pass_1;
 var $375=HEAP16[(($187)>>1)];
 var $376=($375&65535);
 var $377=((($376)-(1))|0);
 var $378=($377>>>0)<($37>>>0);
 if($378){label=92;break;}else{label=90;break;}
 case 90: 
 var $380=($377>>>0)>($37>>>0);
 if($380){var $r_order_0=$377;var $r_neg_0=$r_neg_1;var $prem_1=$prem_2;var $first_pass_0=$first_pass_1;label=32;break;}else{label=91;break;}
 case 91: 
 var $382=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $383=($382|0)>-1;
 if($383){var $r_order_0=$377;var $r_neg_0=$r_neg_1;var $prem_1=$prem_2;var $first_pass_0=$first_pass_1;label=32;break;}else{label=92;break;}
 case 92: 
 var $385=$r_neg_1&1;
 var $386=(($385<<24)>>24)==0;
 if($386){label=114;break;}else{label=93;break;}
 case 93: 
 var $388=(($375<<16)>>16)==1;
 if($388){label=94;break;}else{label=95;break;}
 case 94: 
 var $389=HEAP32[(($192)>>2)];
 var $390=($389|0)==0;
 if($390){label=114;break;}else{label=95;break;}
 case 95: 
 if($103){label=103;break;}else{label=96;break;}
 case 96: 
 var $392=HEAP8[($193)];
 var $393=$392&1;
 var $394=(($393<<24)>>24)==0;
 var $395=$result;
 var $396=HEAP32[(($395)>>2)];
 if($394){label=97;break;}else{label=99;break;}
 case 97: 
 var $398=($396|0)==0;
 if($398){label=102;break;}else{label=98;break;}
 case 98: 
 var $400=((($396)-(1))|0);
 HEAP32[(($395)>>2)]=$400;
 label=103;break;
 case 99: 
 var $402=($396|0)==-1;
 if($402){label=101;break;}else{label=100;break;}
 case 100: 
 var $404=((($396)+(1))|0);
 HEAP32[(($395)>>2)]=$404;
 label=103;break;
 case 101: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($result,$result,5520);
 label=103;break;
 case 102: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($result,$result,5520);
 label=103;break;
 case 103: 
 var $407=(($y+130)|0);
 var $408=HEAP8[($407)];
 var $409=$408&1;
 var $410=(($409<<24)>>24)==0;
 var $411=HEAP8[($102)];
 var $412=$411&1;
 if($410){label=111;break;}else{label=104;break;}
 case 104: 
 var $414=$412^1;
 HEAP8[($102)]=$414;
 var $415=(($412<<24)>>24)==0;
 if($415){label=105;break;}else{var $426=$414;label=108;break;}
 case 105: 
 var $417=HEAP16[(($187)>>1)];
 var $418=(($417<<16)>>16)==1;
 if($418){label=106;break;}else{var $426=$414;label=108;break;}
 case 106: 
 var $420=HEAP32[(($192)>>2)];
 var $421=($420|0)==0;
 if($421){label=107;break;}else{var $426=$414;label=108;break;}
 case 107: 
 HEAP8[($102)]=0;
 var $423=HEAP8[($407)];
 var $424=$423&1;
 var $425=(($424<<24)>>24)!=0;
 if($425){label=109;break;}else{label=110;break;}
 case 108: 
 var $426;
 var $427=$426&1;
 var $428=(($427<<24)>>24)!=0;
 var $429=HEAP8[($407)];
 var $430=$429&1;
 var $431=(($430<<24)>>24)!=0;
 var $432=$428^$431;
 if($432){label=109;break;}else{label=110;break;}
 case 109: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$y);
 label=114;break;
 case 110: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$y);
 label=114;break;
 case 111: 
 var $436=(($412<<24)>>24)==0;
 if($436){label=113;break;}else{label=112;break;}
 case 112: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$y,$r);
 label=114;break;
 case 113: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$y,$r);
 label=114;break;
 case 114: 
 var $439=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $440=($439|0)<0;
 if($440){label=116;break;}else{label=115;break;}
 case 115: 
 ___assert_fail(2744,2856,294,3576);
 throw "Reached an unreachable!";
 case 116: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$x,$y,$r){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+416)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t_i=sp;
 var $t=(sp)+(136);
 var $rem=(sp)+(272);
 var $1=(sp)+(408);
 var $2=($result|0)==($x|0);
 var $3=($r|0)==($x|0);
 var $or_cond=$2|$3;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$t;
 var $6=$x;
 assert(136 % 1 === 0);(_memcpy($5, $6, 136)|0);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$t,$y,$r);
 label=86;break;
 case 3: 
 var $8=($result|0)==($r|0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$rem;
 HEAP32[(($9)>>2)]=0;
 var $10=(($rem+128)|0);
 HEAP16[(($10)>>1)]=1;
 var $11=(($rem+130)|0);
 HEAP8[($11)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$x,$y,$rem);
 var $12=(($rem+128)|0);
 var $13=HEAP16[(($12)>>1)];
 var $14=($13&65535);
 var $15=($13&65535)>32;
 var $_=($15?32:$13);
 var $16=(($result+128)|0);
 HEAP16[(($16)>>1)]=$_;
 var $17=$rem;
 var $18=(($17+($14<<2))|0);
 var $19=$18;
 var $20=$rem;
 var $21=((($19)-($20))|0);
 var $22=$result;
 var $23=$rem;
 assert($21 % 1 === 0);(_memcpy($22, $23, $21)|0);
 var $24=(($rem+130)|0);
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($result+130)|0);
 HEAP8[($27)]=$26;
 label=86;break;
 case 5: 
 var $29=($y|0)==0;
 if($29){label=6;break;}else{label=26;break;}
 case 6: 
 var $31=(($1)|0);
 HEAP32[(($31)>>2)]=5944;
 var $32=(($1+4)|0);
 label=7;break;
 case 7: 
 var $34=_malloc(38);
 var $35=($34|0)==0;
 if($35){label=8;break;}else{label=21;break;}
 case 8: 
 var $37=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=15;break;}else{label=9;break;}
 case 9: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 10: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=12;break;
 case 12: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $42=$lpad_phi_i$1;
 var $43=($42|0)<0;
 if($43){label=13;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=18;break;}
 case 13: 
 var $45=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=17;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=11;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $eh_lpad_body$1=$51$1;var $eh_lpad_body$0=$51$0;label=18;break;
 case 18: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $52=$eh_lpad_body$1;
 var $53=($52|0)<0;
 if($53){label=19;break;}else{label=20;break;}
 case 19: 
 var $55=$eh_lpad_body$0;
 ___cxa_call_unexpected($55);
 throw "Reached an unreachable!";
 case 20: 
 ___resumeException($eh_lpad_body$0)
 case 21: 
 var $57=$34;
 var $58=(($34+4)|0);
 var $59=$58;
 HEAP32[(($59)>>2)]=25;
 HEAP32[(($57)>>2)]=25;
 var $60=(($34+12)|0);
 HEAP32[(($32)>>2)]=$60;
 var $61=(($34+8)|0);
 var $62=$61;
 HEAP32[(($62)>>2)]=0;
 assert(26 % 1 === 0);(_memcpy($60, 2536, 26)|0);
 HEAP32[(($31)>>2)]=5912;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt14overflow_errorEEvRKT_PKcS7_i($1,4520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 HEAP32[(($31)>>2)]=5944;
 var $this_idx_val_i_i=HEAP32[(($32)>>2)];
 var $66=((($this_idx_val_i_i)-(4))|0);
 var $67=$66;
 var $68=(tempValue=HEAP32[(($67)>>2)],HEAP32[(($67)>>2)]=tempValue+-1,tempValue);
 var $69=((($68)-(1))|0);
 var $70=($69|0)<0;
 if($70){label=24;break;}else{label=87;break;}
 case 24: 
 var $72=HEAP32[(($32)>>2)];
 var $73=((($72)-(12))|0);
 var $74=($73|0)==0;
 if($74){label=87;break;}else{label=25;break;}
 case 25: 
 _free($73);
 label=87;break;
 case 26: 
 var $75=(($x+128)|0);
 var $76=HEAP16[(($75)>>1)];
 var $77=($76&65535);
 var $78=((($77)-(1))|0);
 var $79=(($x+128)|0);
 var $80=($76&65535)>32;
 var $_249=($80?32:$76);
 var $81=(($r+128)|0);
 HEAP16[(($81)>>1)]=$_249;
 var $82=$x;
 var $83=HEAP16[(($79)>>1)];
 var $84=($83&65535);
 var $85=(($82+($84<<2))|0);
 var $86=$85;
 var $87=$x;
 var $88=((($86)-($87))|0);
 var $89=$r;
 var $90=$x;
 _memmove($89,$90,$88,4,0);
 var $91=(($x+130)|0);
 var $92=HEAP8[($91)];
 var $93=$92&1;
 var $94=(($r+130)|0);
 HEAP8[($94)]=$93;
 HEAP8[($94)]=0;
 var $95=$r;
 if(($78|0)==0){ label=27;break;}else if(($78|0)==1){ label=37;break;}else{label=43;break;}
 case 27: 
 var $97=HEAP32[(($95)>>2)];
 var $98=($97>>>0)<($y>>>0);
 var $99=($result|0)==0;
 if($98){label=28;break;}else{label=30;break;}
 case 28: 
 if($99){label=86;break;}else{label=29;break;}
 case 29: 
 var $102=(($result+128)|0);
 HEAP16[(($102)>>1)]=1;
 var $103=$result;
 HEAP32[(($103)>>2)]=0;
 var $104=(($result+130)|0);
 HEAP8[($104)]=0;
 label=86;break;
 case 30: 
 if($99){label=31;break;}else{label=32;break;}
 case 31: 
 var $_pre240=(($x+130)|0);
 var $_pre_phi241=$_pre240;label=34;break;
 case 32: 
 var $107=(((($97>>>0))/(($y>>>0)))&-1);
 var $108=(($result+128)|0);
 HEAP16[(($108)>>1)]=1;
 var $109=$result;
 HEAP32[(($109)>>2)]=$107;
 var $110=(($result+130)|0);
 HEAP8[($110)]=0;
 var $111=(($x+130)|0);
 var $112=HEAP8[($111)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)!=0;
 HEAP8[($110)]=$113;
 var $115=($107|0)==0;
 var $or_cond250=$114&$115;
 if($or_cond250){label=33;break;}else{var $_pre_phi241=$111;label=34;break;}
 case 33: 
 HEAP8[($110)]=0;
 var $_pre_phi241=$111;label=34;break;
 case 34: 
 var $_pre_phi241;
 var $117=HEAP32[(($95)>>2)];
 var $118=(((($117>>>0))%(($y>>>0)))&-1);
 HEAP32[(($95)>>2)]=$118;
 var $119=HEAP8[($_pre_phi241)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 HEAP8[($94)]=$120;
 if($121){label=86;break;}else{label=35;break;}
 case 35: 
 var $123=(($r+128)|0);
 var $124=HEAP16[(($123)>>1)];
 var $125=(($124<<16)>>16)==1;
 var $126=($118|0)==0;
 var $or_cond251=$125&$126;
 if($or_cond251){label=36;break;}else{label=86;break;}
 case 36: 
 HEAP8[($94)]=0;
 label=86;break;
 case 37: 
 var $129=(($95+($78<<2))|0);
 var $130=HEAP32[(($129)>>2)];
 var $131$0=$130;
 var $131$1=0;
 var $132$0=0;
 var $132$1=$131$0;
 var $133=HEAP32[(($95)>>2)];
 var $134$0=$133;
 var $134$1=0;
 var $135$0=$132$0|$134$0;
 var $135$1=$132$1|$134$1;
 var $136=($result|0)==0;
 var $_pre242$0=$y;
 var $_pre242$1=0;
 if($136){label=38;break;}else{label=39;break;}
 case 38: 
 var $_pre244=(($x+130)|0);
 var $_pre_phi245=$_pre244;label=41;break;
 case 39: 
 var $138$0=___udivdi3($135$0,$135$1,$_pre242$0,$_pre242$1);var $138$1=tempRet0;
 var $139=$result;
 var $140$0=$138$0;
 var $140=$140$0;
 HEAP32[(($139)>>2)]=$140;
 var $141$0=$138$1;
 var $141$1=0;
 var $142$0=$141$0;
 var $142=$142$0;
 var $143=(($139+4)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=($142|0)!=0;
 var $145=($144?2:1);
 var $146=(($result+128)|0);
 HEAP16[(($146)>>1)]=$145;
 var $147=(($result+130)|0);
 HEAP8[($147)]=0;
 var $148=(($x+130)|0);
 var $149=HEAP8[($148)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 HEAP8[($147)]=$150;
 var $brmerge=$151|$144;
 var $brmerge_not=$brmerge^1;
 var $152=($140|0)==0;
 var $or_cond252=$brmerge_not&$152;
 if($or_cond252){label=40;break;}else{var $_pre_phi245=$148;label=41;break;}
 case 40: 
 HEAP8[($147)]=0;
 var $_pre_phi245=$148;label=41;break;
 case 41: 
 var $_pre_phi245;
 var $154$0=___uremdi3($135$0,$135$1,$_pre242$0,$_pre242$1);var $154$1=tempRet0;
 var $155$0=$154$0;
 var $155=$155$0;
 HEAP32[(($95)>>2)]=$155;
 var $156=(($95+4)|0);
 HEAP32[(($156)>>2)]=0;
 var $157=(($r+128)|0);
 HEAP16[(($157)>>1)]=1;
 HEAP8[($94)]=0;
 var $158=HEAP8[($_pre_phi245)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)!=0;
 HEAP8[($94)]=$159;
 var $161=($155|0)==0;
 var $or_cond253=$160&$161;
 if($or_cond253){label=42;break;}else{label=86;break;}
 case 42: 
 HEAP8[($94)]=0;
 label=86;break;
 case 43: 
 var $164=($result|0)==0;
 if($164){var $pres_0_ph=0;label=46;break;}else{label=44;break;}
 case 44: 
 var $165=($76&65535)>32;
 var $_254=($165?32:$76);
 var $166=(($result+128)|0);
 HEAP16[(($166)>>1)]=$_254;
 var $167=$result;
 var $168=($_254&65535);
 var $169=($168>>>0)>($78>>>0);
 if($169){label=45;break;}else{var $pres_0_ph=$167;label=46;break;}
 case 45: 
 var $171=(($167+($78<<2))|0);
 HEAP32[(($171)>>2)]=0;
 var $pres_0_ph=$167;label=46;break;
 case 46: 
 var $pres_0_ph;
 var $172$0=$y;
 var $172$1=0;
 var $173=(($r+128)|0);
 var $r_order_0=$78;label=47;break;
 case 47: 
 var $r_order_0;
 var $174=(($95+($r_order_0<<2))|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($175>>>0)>=($y>>>0);
 var $177=($r_order_0|0)==0;
 var $or_cond255=$176|$177;
 if($or_cond255){label=54;break;}else{label=48;break;}
 case 48: 
 var $178$0=$175;
 var $178$1=0;
 var $179$0=0;
 var $179$1=$178$0;
 var $180=((($r_order_0)-(1))|0);
 var $181=(($95+($180<<2))|0);
 var $182=HEAP32[(($181)>>2)];
 var $183$0=$182;
 var $183$1=0;
 var $184$0=$179$0|$183$0;
 var $184$1=$179$1|$183$1;
 var $185$0=___uremdi3($184$0,$184$1,$172$0,$172$1);var $185$1=tempRet0;
 var $186=HEAP16[(($173)>>1)];
 var $187=($186&65535);
 var $188=((($187)-(1))|0);
 var $189=($188>>>0)>32;
 var $extract_t246=(($188)&65535);
 var $_in16_sroa_speculated_sroa_speculated_off0=($189?32:$extract_t246);
 HEAP16[(($173)>>1)]=$_in16_sroa_speculated_sroa_speculated_off0;
 var $190$0=$185$0;
 var $190=$190$0;
 HEAP32[(($181)>>2)]=$190;
 if($164){label=50;break;}else{label=49;break;}
 case 49: 
 var $192$0=___udivdi3($184$0,$184$1,$172$0,$172$1);var $192$1=tempRet0;
 var $193$0=$192$0;
 var $193=$193$0;
 var $194=(($pres_0_ph+($180<<2))|0);
 HEAP32[(($194)>>2)]=$193;
 label=50;break;
 case 50: 
 var $196=($180|0)==0;
 if($196){var $r_order_3=0;label=61;break;}else{label=51;break;}
 case 51: 
 var $198=HEAP32[(($181)>>2)];
 var $199=($198|0)==0;
 if($199){label=52;break;}else{var $r_order_2=$180;label=60;break;}
 case 52: 
 var $200=((($r_order_0)-(2))|0);
 var $201=HEAP16[(($173)>>1)];
 var $202=($201&65535);
 var $203=((($202)-(1))|0);
 var $204=($203>>>0)>32;
 var $extract_t247=(($203)&65535);
 var $_in17_sroa_speculated_sroa_speculated_off0=($204?32:$extract_t247);
 HEAP16[(($173)>>1)]=$_in17_sroa_speculated_sroa_speculated_off0;
 if($164){var $r_order_2=$200;label=60;break;}else{label=53;break;}
 case 53: 
 var $206=(($pres_0_ph+($200<<2))|0);
 HEAP32[(($206)>>2)]=0;
 var $r_order_2=$200;label=60;break;
 case 54: 
 if($164){var $212=$175;label=56;break;}else{label=55;break;}
 case 55: 
 var $209=(((($175>>>0))/(($y>>>0)))&-1);
 var $210=(($pres_0_ph+($r_order_0<<2))|0);
 HEAP32[(($210)>>2)]=$209;
 var $_pre=HEAP32[(($174)>>2)];
 var $212=$_pre;label=56;break;
 case 56: 
 var $212;
 var $213=(((($212>>>0))%(($y>>>0)))&-1);
 HEAP32[(($174)>>2)]=$213;
 var $214=($r_order_0|0)==0;
 if($214){var $r_order_3=0;label=61;break;}else{label=57;break;}
 case 57: 
 var $216=($213|0)==0;
 if($216){label=58;break;}else{var $r_order_2=$r_order_0;label=60;break;}
 case 58: 
 var $217=((($r_order_0)-(1))|0);
 var $218=HEAP16[(($173)>>1)];
 var $219=($218&65535);
 var $220=((($219)-(1))|0);
 var $221=($220>>>0)>32;
 var $extract_t=(($220)&65535);
 var $_in15_sroa_speculated_sroa_speculated_off0=($221?32:$extract_t);
 HEAP16[(($173)>>1)]=$_in15_sroa_speculated_sroa_speculated_off0;
 if($164){var $r_order_2=$217;label=60;break;}else{label=59;break;}
 case 59: 
 var $223=(($pres_0_ph+($217<<2))|0);
 HEAP32[(($223)>>2)]=0;
 var $r_order_2=$217;label=60;break;
 case 60: 
 var $r_order_2;
 var $224=($r_order_2|0)==0;
 if($224){var $r_order_3=$r_order_2;label=61;break;}else{var $r_order_0=$r_order_2;label=47;break;}
 case 61: 
 var $r_order_3;
 var $225=(($95+($r_order_3<<2))|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($226>>>0)<($y>>>0);
 if($227){label=62;break;}else{var $r_order_0=$r_order_3;label=47;break;}
 case 62: 
 if($164){label=73;break;}else{label=63;break;}
 case 63: 
 var $230=$result;
 var $231=(($result+128)|0);
 var $_pre233=HEAP16[(($231)>>1)];
 var $233=$_pre233;label=64;break;
 case 64: 
 var $233;
 var $234=(($233<<16)>>16)==1;
 if($234){var $245=1;label=68;break;}else{label=65;break;}
 case 65: 
 var $236=($233&65535);
 var $237=((($236)-(1))|0);
 var $238=(($230+($237<<2))|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=66;break;}else{var $243=$233;label=67;break;}
 case 66: 
 var $242=((($233)-(1))&65535);
 HEAP16[(($231)>>1)]=$242;
 var $233=$242;label=64;break;
 case 67: 
 var $243;
 var $244=(($243<<16)>>16)==1;
 if($244){var $245=$244;label=68;break;}else{var $250=$244;label=70;break;}
 case 68: 
 var $245;
 var $246=HEAP32[(($230)>>2)];
 var $247=($246|0)==0;
 if($247){label=69;break;}else{var $250=$245;label=70;break;}
 case 69: 
 var $249=(($result+130)|0);
 HEAP8[($249)]=0;
 var $250=$245;label=70;break;
 case 70: 
 var $250;
 var $251=(($x+130)|0);
 var $252=HEAP8[($251)];
 var $253=$252&1;
 var $254=(($253<<24)>>24)==0;
 var $255=(($result+130)|0);
 HEAP8[($255)]=$253;
 var $_not=$250^1;
 var $brmerge256=$254|$_not;
 if($brmerge256){label=73;break;}else{label=71;break;}
 case 71: 
 var $257=HEAP32[(($230)>>2)];
 var $258=($257|0)==0;
 if($258){label=72;break;}else{label=73;break;}
 case 72: 
 HEAP8[($255)]=0;
 label=73;break;
 case 73: 
 var $_pre232=HEAP16[(($173)>>1)];
 var $261=$_pre232;label=74;break;
 case 74: 
 var $261;
 var $262=(($261<<16)>>16)==1;
 if($262){var $273=1;label=78;break;}else{label=75;break;}
 case 75: 
 var $264=($261&65535);
 var $265=((($264)-(1))|0);
 var $266=(($95+($265<<2))|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==0;
 if($268){label=76;break;}else{var $271=$261;label=77;break;}
 case 76: 
 var $270=((($261)-(1))&65535);
 HEAP16[(($173)>>1)]=$270;
 var $261=$270;label=74;break;
 case 77: 
 var $271;
 var $272=(($271<<16)>>16)==1;
 if($272){var $273=$272;label=78;break;}else{var $277=$272;label=80;break;}
 case 78: 
 var $273;
 var $274=HEAP32[(($95)>>2)];
 var $275=($274|0)==0;
 if($275){label=79;break;}else{var $277=$273;label=80;break;}
 case 79: 
 HEAP8[($94)]=0;
 var $277=$273;label=80;break;
 case 80: 
 var $277;
 var $278=(($x+130)|0);
 var $279=HEAP8[($278)];
 var $280=$279&1;
 var $281=(($280<<24)>>24)==0;
 HEAP8[($94)]=$280;
 var $_not257=$277^1;
 var $brmerge258=$281|$_not257;
 var $_mux=($281?0:$280);
 if($brmerge258){var $286=$_mux;label=83;break;}else{label=81;break;}
 case 81: 
 var $283=HEAP32[(($95)>>2)];
 var $284=($283|0)==0;
 if($284){label=82;break;}else{var $286=$280;label=83;break;}
 case 82: 
 HEAP8[($94)]=0;
 var $286=0;label=83;break;
 case 83: 
 var $286;
 var $287=$t_i;
 var $288=$t_i;
 var $289=(($t_i+128)|0);
 var $290=(($t_i+130)|0);
 HEAP16[(($289)>>1)]=1;
 HEAP32[(($288)>>2)]=$y;
 HEAP8[($290)]=0;
 var $291=(($286<<24)>>24)==0;
 if($291){label=84;break;}else{label=86;break;}
 case 84: 
 var $292=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$t_i);
 var $293=($292|0)<0;
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 ___assert_fail(2504,2856,437,3576);
 throw "Reached an unreachable!";
 case 86: 
 STACKTOP=sp;return;
 case 87: 
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($this,$o){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+128)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($o+128)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=(($2<<16)>>16)==(($4<<16)>>16);
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=($2&65535)>($4&65535);
 var $8=($7?1:-1);
 var $_0=$8;label=7;break;
 case 3: 
 var $10=$this;
 var $11=$o;
 var $12=($2&65535);
 var $storemerge_in=$12;label=4;break;
 case 4: 
 var $storemerge_in;
 var $storemerge=((($storemerge_in)-(1))|0);
 var $14=($storemerge|0)>-1;
 if($14){label=5;break;}else{var $_0=0;label=7;break;}
 case 5: 
 var $16=(($10+($storemerge<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($11+($storemerge<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($17|0)==($19|0);
 if($20){var $storemerge_in=$storemerge;label=4;break;}else{label=6;break;}
 case 6: 
 var $22=($17>>>0)>($19>>>0);
 var $23=($22?1:-1);
 var $_0=$23;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($a+128)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=(($b+128)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=($2&65535)<($5&65535);
 var $_=($7?$3:$6);
 var $_96=($7?$6:$3);
 var $8=($_96|0)==1;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 var $10=(($a+130)|0);
 var $11=HEAP8[($10)];
 var $12=$11&1;
 var $13=$a;
 var $14=HEAP32[(($13)>>2)];
 var $15$0=$14;
 var $15$1=0;
 var $16=$b;
 var $17=HEAP32[(($16)>>2)];
 var $18$0=$17;
 var $18$1=0;
 var $19$0=_i64Add($15$0,$15$1,$18$0,$18$1);var $19$1=tempRet0;
 var $20=$result;
 var $21$0=$19$0;
 var $21=$21$0;
 HEAP32[(($20)>>2)]=$21;
 var $22$0=$19$1;
 var $22$1=0;
 var $23$0=$22$0;
 var $23=$23$0;
 var $24=(($20+4)|0);
 HEAP32[(($24)>>2)]=$23;
 var $25=($23|0)!=0;
 var $26=($25?2:1);
 var $27=(($result+128)|0);
 HEAP16[(($27)>>1)]=$26;
 var $28=(($result+130)|0);
 var $29=(($12<<24)>>24)==0;
 HEAP8[($28)]=$12;
 var $brmerge=$29|$25;
 var $brmerge_not=$brmerge^1;
 var $30=($21|0)==0;
 var $or_cond=$brmerge_not&$30;
 if($or_cond){label=3;break;}else{label=26;break;}
 case 3: 
 HEAP8[($28)]=0;
 label=26;break;
 case 4: 
 var $32=($_96>>>0)>32;
 var $extract_t=(($_96)&65535);
 var $_extract_t=($32?32:$extract_t);
 var $33=(($result+128)|0);
 HEAP16[(($33)>>1)]=$_extract_t;
 var $34=$a;
 var $35=$b;
 var $36=$result;
 var $37=(($36+($_<<2))|0);
 var $_98=($7?$35:$34);
 var $_99=($7?$34:$35);
 var $pr_0=$36;var $pb_0=$_99;var $pa_0=$_98;var $carry_0$1=0;var $carry_0$0=0;label=5;break;
 case 5: 
 var $carry_0$0;
 var $carry_0$1;
 var $pa_0;
 var $pb_0;
 var $pr_0;
 var $38=($pr_0|0)==($37|0);
 if($38){label=7;break;}else{label=6;break;}
 case 6: 
 var $40=HEAP32[(($pa_0)>>2)];
 var $41$0=$40;
 var $41$1=0;
 var $42=HEAP32[(($pb_0)>>2)];
 var $43$0=$42;
 var $43$1=0;
 var $44$0=_i64Add($41$0,$41$1,$43$0,$43$1);var $44$1=tempRet0;
 var $45$0=_i64Add($carry_0$0,$carry_0$1,$44$0,$44$1);var $45$1=tempRet0;
 var $46$0=$45$0;
 var $46=$46$0;
 HEAP32[(($pr_0)>>2)]=$46;
 var $47$0=$45$1;
 var $47$1=0;
 var $48=(($pr_0+4)|0);
 var $49=(($pa_0+4)|0);
 var $50=(($pb_0+4)|0);
 var $pr_0=$48;var $pb_0=$50;var $pa_0=$49;var $carry_0$1=$47$1;var $carry_0$0=$47$0;label=5;break;
 case 7: 
 var $52=(($36+($_96<<2))|0);
 var $pr_1=$37;var $pa_1=$pa_0;var $carry_1$1=$carry_0$1;var $carry_1$0=$carry_0$0;label=8;break;
 case 8: 
 var $carry_1$0;
 var $carry_1$1;
 var $pa_1;
 var $pr_1;
 var $54=($pr_1|0)==($52|0);
 if($54){label=13;break;}else{label=9;break;}
 case 9: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $56=(($carry_1$0|0) == ($$etemp$0$0|0)) & (($carry_1$1|0) == ($$etemp$0$1|0));
 if($56){label=10;break;}else{label=12;break;}
 case 10: 
 var $58=($pa_1|0)==($pr_1|0);
 if($58){label=16;break;}else{label=11;break;}
 case 11: 
 var $60=$52;
 var $61=$pr_1;
 var $62=((($60)-($61))|0);
 var $63=$pr_1;
 var $64=$pa_1;
 _memmove($63,$64,$62,4,0);
 label=13;break;
 case 12: 
 var $66=HEAP32[(($pa_1)>>2)];
 var $67$0=$66;
 var $67$1=0;
 var $68$0=_i64Add($carry_1$0,$carry_1$1,$67$0,$67$1);var $68$1=tempRet0;
 var $69$0=$68$0;
 var $69=$69$0;
 HEAP32[(($pr_1)>>2)]=$69;
 var $70$0=$68$1;
 var $70$1=0;
 var $71=(($pr_1+4)|0);
 var $72=(($pa_1+4)|0);
 var $pr_1=$71;var $pa_1=$72;var $carry_1$1=$70$1;var $carry_1$0=$70$0;label=8;break;
 case 13: 
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $73=(($carry_1$0|0) == ($$etemp$1$0|0)) & (($carry_1$1|0) == ($$etemp$1$1|0));
 if($73){label=16;break;}else{label=14;break;}
 case 14: 
 var $74=((($_96)+(1))|0);
 var $75=($74>>>0)>32;
 var $extract_t95=(($74)&65535);
 var $_extract_t95=($75?32:$extract_t95);
 HEAP16[(($33)>>1)]=$_extract_t95;
 var $76=($_extract_t95&65535);
 var $77=($76>>>0)>($_96>>>0);
 if($77){label=15;break;}else{label=16;break;}
 case 15: 
 var $79$0=$carry_1$0;
 var $79=$79$0;
 var $80=(($36+($_96<<2))|0);
 HEAP32[(($80)>>2)]=$79;
 label=16;break;
 case 16: 
 var $_pre=HEAP16[(($33)>>1)];
 var $82=$_pre;label=17;break;
 case 17: 
 var $82;
 var $83=(($82<<16)>>16)==1;
 if($83){var $94=1;label=21;break;}else{label=18;break;}
 case 18: 
 var $85=($82&65535);
 var $86=((($85)-(1))|0);
 var $87=(($36+($86<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==0;
 if($89){label=19;break;}else{var $92=$82;label=20;break;}
 case 19: 
 var $91=((($82)-(1))&65535);
 HEAP16[(($33)>>1)]=$91;
 var $82=$91;label=17;break;
 case 20: 
 var $92;
 var $93=(($92<<16)>>16)==1;
 if($93){var $94=$93;label=21;break;}else{var $99=$93;label=23;break;}
 case 21: 
 var $94;
 var $95=HEAP32[(($36)>>2)];
 var $96=($95|0)==0;
 if($96){label=22;break;}else{var $99=$94;label=23;break;}
 case 22: 
 var $98=(($result+130)|0);
 HEAP8[($98)]=0;
 var $99=$94;label=23;break;
 case 23: 
 var $99;
 var $100=(($a+130)|0);
 var $101=HEAP8[($100)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 var $104=(($result+130)|0);
 HEAP8[($104)]=$102;
 var $_not=$99^1;
 var $brmerge97=$103|$_not;
 if($brmerge97){label=26;break;}else{label=24;break;}
 case 24: 
 var $106=HEAP32[(($36)>>2)];
 var $107=($106|0)==0;
 if($107){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP8[($104)]=0;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($a+128)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=(($b+128)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=($2&65535)<($5&65535);
 var $_=($7?$3:$6);
 var $_86=($7?$6:$3);
 var $8=($_86|0)==1;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 var $10=(($a+130)|0);
 var $11=HEAP8[($10)];
 var $12=$11&1;
 var $13=$a;
 var $14=HEAP32[(($13)>>2)];
 var $15=$b;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16>>>0)>($14>>>0);
 var $18=$12^1;
 var $al_0=($17?$16:$14);
 var $bl_0=($17?$14:$16);
 var $s_0=($17?$18:$12);
 var $19=((($al_0)-($bl_0))|0);
 var $20=(($result+128)|0);
 HEAP16[(($20)>>1)]=1;
 var $21=$result;
 HEAP32[(($21)>>2)]=$19;
 var $22=(($result+130)|0);
 var $23=$s_0&1;
 var $24=(($23<<24)>>24)!=0;
 HEAP8[($22)]=$23;
 var $25=($al_0|0)==($bl_0|0);
 var $or_cond87=$24&$25;
 if($or_cond87){label=3;break;}else{label=31;break;}
 case 3: 
 HEAP8[($22)]=0;
 label=31;break;
 case 4: 
 var $27=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($a,$b);
 var $28=($_86>>>0)>32;
 var $extract_t=(($_86)&65535);
 var $_extract_t=($28?32:$extract_t);
 var $29=(($result+128)|0);
 HEAP16[(($29)>>1)]=$_extract_t;
 var $30=$a;
 var $31=$b;
 var $32=$result;
 var $33=($27|0)<0;
 if($33){var $swapped_0_ph=1;var $pb_0_ph=$30;var $pa_0_ph=$31;label=5;break;}else{label=6;break;}
 case 5: 
 var $pa_0_ph;
 var $pb_0_ph;
 var $swapped_0_ph;
 var $storemerge=0;var $borrow_0$1=0;var $borrow_0$0=0;label=8;break;
 case 6: 
 var $35=($27|0)==0;
 if($35){label=7;break;}else{var $swapped_0_ph=0;var $pb_0_ph=$31;var $pa_0_ph=$30;label=5;break;}
 case 7: 
 HEAP16[(($29)>>1)]=1;
 HEAP32[(($32)>>2)]=0;
 var $37=(($result+130)|0);
 HEAP8[($37)]=0;
 label=31;break;
 case 8: 
 var $borrow_0$0;
 var $borrow_0$1;
 var $storemerge;
 var $39=($storemerge>>>0)<($_>>>0);
 if($39){label=9;break;}else{var $i_0=$storemerge;var $borrow_1$1=$borrow_0$1;var $borrow_1$0=$borrow_0$0;label=10;break;}
 case 9: 
 var $41=(($pa_0_ph+($storemerge<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43$0=$42;
 var $43$1=0;
 var $44=(($pb_0_ph+($storemerge<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46$0=$45;
 var $46$1=0;
 var $47$0=_i64Subtract($43$0,$43$1,$46$0,$46$1);var $47$1=tempRet0;
 var $48$0=_i64Subtract($47$0,$47$1,$borrow_0$0,$borrow_0$1);var $48$1=tempRet0;
 var $49$0=$48$0;
 var $49=$49$0;
 var $50=(($32+($storemerge<<2))|0);
 HEAP32[(($50)>>2)]=$49;
 var $51$0=$48$1;
 var $51$1=0;
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;
 var $52$0=$51$0&$$etemp$0$0;
 var $52$1=$51$1&$$etemp$0$1;
 var $53=((($storemerge)+(1))|0);
 var $storemerge=$53;var $borrow_0$1=$52$1;var $borrow_0$0=$52$0;label=8;break;
 case 10: 
 var $borrow_1$0;
 var $borrow_1$1;
 var $i_0;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $54=(($borrow_1$0|0) != ($$etemp$1$0|0)) | (($borrow_1$1|0) != ($$etemp$1$1|0));
 var $55=($i_0>>>0)<($_86>>>0);
 var $or_cond=$54&$55;
 if($or_cond){label=11;break;}else{label=12;break;}
 case 11: 
 var $57=(($pa_0_ph+($i_0<<2))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59$0=$58;
 var $59$1=0;
 var $60$0=_i64Subtract($59$0,$59$1,$borrow_1$0,$borrow_1$1);var $60$1=tempRet0;
 var $61$0=$60$0;
 var $61=$61$0;
 var $62=(($32+($i_0<<2))|0);
 HEAP32[(($62)>>2)]=$61;
 var $63$0=$60$1;
 var $63$1=0;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $64$0=$63$0&$$etemp$2$0;
 var $64$1=$63$1&$$etemp$2$1;
 var $65=((($i_0)+(1))|0);
 var $i_0=$65;var $borrow_1$1=$64$1;var $borrow_1$0=$64$0;label=10;break;
 case 12: 
 var $66=($_86|0)==($i_0|0);
 var $67=($pa_0_ph|0)==($32|0);
 var $or_cond88=$66|$67;
 if($or_cond88){label=14;break;}else{label=13;break;}
 case 13: 
 var $69=(($pa_0_ph+($i_0<<2))|0);
 var $70=(($32+($i_0<<2))|0);
 var $_idx1=$_86<<2;
 var $71=((($i_0)*(-4))&-1);
 var $72=((($_idx1)+($71))|0);
 var $73=$70;
 var $74=$69;
 _memmove($73,$74,$72,4,0);
 label=14;break;
 case 14: 
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $76=(($borrow_1$0|0) == ($$etemp$3$0|0)) & (($borrow_1$1|0) == ($$etemp$3$1|0));
 if($76){label=17;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2696,2600,192,3600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $_pre=HEAP16[(($29)>>1)];
 var $81=$_pre;label=18;break;
 case 18: 
 var $81;
 var $82=(($81<<16)>>16)==1;
 if($82){var $94=1;var $93=1;label=22;break;}else{label=19;break;}
 case 19: 
 var $84=($81&65535);
 var $85=((($84)-(1))|0);
 var $86=(($32+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=20;break;}else{var $91=$81;label=21;break;}
 case 20: 
 var $90=((($81)-(1))&65535);
 HEAP16[(($29)>>1)]=$90;
 var $81=$90;label=18;break;
 case 21: 
 var $91;
 var $92=(($91<<16)>>16)==1;
 if($92){var $94=$91;var $93=$92;label=22;break;}else{var $100=$91;var $99=$92;label=24;break;}
 case 22: 
 var $93;
 var $94;
 var $95=HEAP32[(($32)>>2)];
 var $96=($95|0)==0;
 if($96){label=23;break;}else{var $100=$94;var $99=$93;label=24;break;}
 case 23: 
 var $98=(($result+130)|0);
 HEAP8[($98)]=0;
 var $100=$94;var $99=$93;label=24;break;
 case 24: 
 var $99;
 var $100;
 var $101=(($a+130)|0);
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $105=(($result+130)|0);
 HEAP8[($105)]=$103;
 var $_not=$99^1;
 var $brmerge=$104|$_not;
 var $_mux=($104?0:$103);
 if($brmerge){var $111=$_mux;var $110=$100;label=27;break;}else{label=25;break;}
 case 25: 
 var $107=HEAP32[(($32)>>2)];
 var $108=($107|0)==0;
 if($108){label=26;break;}else{var $111=$103;var $110=1;label=27;break;}
 case 26: 
 HEAP8[($105)]=0;
 var $111=0;var $110=1;label=27;break;
 case 27: 
 var $110;
 var $111;
 var $112=(($swapped_0_ph<<24)>>24)==0;
 if($112){label=31;break;}else{label=28;break;}
 case 28: 
 var $114=$111^1;
 HEAP8[($105)]=$114;
 var $115=(($111<<24)>>24)==0;
 var $116=(($110<<16)>>16)==1;
 var $or_cond89=$115&$116;
 if($or_cond89){label=29;break;}else{label=31;break;}
 case 29: 
 var $118=HEAP32[(($32)>>2)];
 var $119=($118|0)==0;
 if($119){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP8[($105)]=0;
 label=31;break;
 case 31: 
 return;
 case 32: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($result,$a,$o){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($result|0)==($a|0);
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $_pre53=(($result+128)|0);
 var $_pre_phi=$_pre53;label=4;break;
 case 3: 
 var $2=(($a+128)|0);
 var $3=HEAP16[(($2)>>1)];
 var $4=($3&65535)>32;
 var $_=($4?32:$3);
 var $5=(($result+128)|0);
 HEAP16[(($5)>>1)]=$_;
 var $_pre_phi=$5;label=4;break;
 case 4: 
 var $_pre_phi;
 var $7=HEAP32[(($o)>>2)];
 var $8$0=$7;
 var $8$1=0;
 var $9=$result;
 var $10=$a;
 var $storemerge=0;var $carry_0$1=$8$1;var $carry_0$0=$8$0;label=5;break;
 case 5: 
 var $carry_0$0;
 var $carry_0$1;
 var $storemerge;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $12=(($carry_0$0|0) == ($$etemp$0$0|0)) & (($carry_0$1|0) == ($$etemp$0$1|0));
 if($12){label=8;break;}else{label=6;break;}
 case 6: 
 var $14=HEAP16[(($_pre_phi)>>1)];
 var $15=($14&65535);
 var $16=($storemerge>>>0)<($15>>>0);
 if($16){label=7;break;}else{label=8;break;}
 case 7: 
 var $18=(($10+($storemerge<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20$0=$19;
 var $20$1=0;
 var $21$0=_i64Add($carry_0$0,$carry_0$1,$20$0,$20$1);var $21$1=tempRet0;
 var $22$0=$21$0;
 var $22=$22$0;
 var $23=(($9+($storemerge<<2))|0);
 HEAP32[(($23)>>2)]=$22;
 var $24$0=$21$1;
 var $24$1=0;
 var $25=((($storemerge)+(1))|0);
 var $storemerge=$25;var $carry_0$1=$24$1;var $carry_0$0=$24$0;label=5;break;
 case 8: 
 if($1){label=11;break;}else{var $i_0=$storemerge;label=9;break;}
 case 9: 
 var $i_0;
 var $26=HEAP16[(($_pre_phi)>>1)];
 var $27=($26&65535);
 var $28=($i_0>>>0)<($27>>>0);
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 var $30=(($10+($i_0<<2))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($9+($i_0<<2))|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=((($i_0)+(1))|0);
 var $i_0=$33;label=9;break;
 case 11: 
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $34=(($carry_0$0|0) == ($$etemp$1$0|0)) & (($carry_0$1|0) == ($$etemp$1$1|0));
 if($34){label=14;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP16[(($_pre_phi)>>1)];
 var $36=($35&65535);
 var $37=((($36)+(1))|0);
 var $38=($37>>>0)>32;
 var $extract_t=(($37)&65535);
 var $_extract_t=($38?32:$extract_t);
 HEAP16[(($_pre_phi)>>1)]=$_extract_t;
 var $39=($_extract_t&65535)>($35&65535);
 if($39){label=13;break;}else{label=14;break;}
 case 13: 
 var $41$0=$carry_0$0;
 var $41=$41$0;
 var $42=(($9+($36<<2))|0);
 HEAP32[(($42)>>2)]=$41;
 label=14;break;
 case 14: 
 var $_pre=HEAP16[(($_pre_phi)>>1)];
 var $44=$_pre;label=15;break;
 case 15: 
 var $44;
 var $45=(($44<<16)>>16)==1;
 if($45){var $56=1;label=19;break;}else{label=16;break;}
 case 16: 
 var $47=($44&65535);
 var $48=((($47)-(1))|0);
 var $49=(($9+($48<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==0;
 if($51){label=17;break;}else{var $54=$44;label=18;break;}
 case 17: 
 var $53=((($44)-(1))&65535);
 HEAP16[(($_pre_phi)>>1)]=$53;
 var $44=$53;label=15;break;
 case 18: 
 var $54;
 var $55=(($54<<16)>>16)==1;
 if($55){var $56=$55;label=19;break;}else{var $61=$55;label=21;break;}
 case 19: 
 var $56;
 var $57=HEAP32[(($9)>>2)];
 var $58=($57|0)==0;
 if($58){label=20;break;}else{var $61=$56;label=21;break;}
 case 20: 
 var $60=(($result+130)|0);
 HEAP8[($60)]=0;
 var $61=$56;label=21;break;
 case 21: 
 var $61;
 var $62=(($a+130)|0);
 var $63=HEAP8[($62)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 var $66=(($result+130)|0);
 HEAP8[($66)]=$64;
 var $_not=$61^1;
 var $brmerge=$65|$_not;
 if($brmerge){label=24;break;}else{label=22;break;}
 case 22: 
 var $68=HEAP32[(($9)>>2)];
 var $69=($68|0)==0;
 if($69){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP8[($66)]=0;
 label=24;break;
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($result,$a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($a+128)|0);
 var $1=HEAP16[(($0)>>1)];
 var $2=($1&65535)>32;
 var $_=($2?32:$1);
 var $3=(($result+128)|0);
 HEAP16[(($3)>>1)]=$_;
 var $4=$result;
 var $5=$a;
 var $6=HEAP32[(($5)>>2)];
 var $7=HEAP32[(($b)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=8;break;}else{label=2;break;}
 case 2: 
 var $10=((($6)-($7))|0);
 HEAP32[(($4)>>2)]=$10;
 var $11=($result|0)==($a|0);
 if($11){label=6;break;}else{label=3;break;}
 case 3: 
 var $13=(($5+4)|0);
 var $14=HEAP16[(($0)>>1)];
 var $15=($14&65535);
 var $16=(($4+4)|0);
 var $_idx=$15<<2;
 var $17=((($_idx)-(4))|0);
 var $18=$16;
 var $19=$13;
 _memmove($18,$19,$17,4,0);
 var $20=(($a+130)|0);
 var $21=HEAP8[($20)];
 var $22=$21&1;
 var $23=(($22<<24)>>24)==0;
 var $24=(($result+130)|0);
 HEAP8[($24)]=$22;
 if($23){label=26;break;}else{label=4;break;}
 case 4: 
 var $26=HEAP16[(($3)>>1)];
 var $27=(($26<<16)>>16)==1;
 var $28=($6|0)==($7|0);
 var $or_cond=$27&$28;
 if($or_cond){label=5;break;}else{label=26;break;}
 case 5: 
 HEAP8[($24)]=0;
 label=26;break;
 case 6: 
 var $31=HEAP16[(($0)>>1)];
 var $32=(($31<<16)>>16)==1;
 var $33=($6|0)==($7|0);
 var $or_cond53=$32&$33;
 if($or_cond53){label=7;break;}else{label=26;break;}
 case 7: 
 var $35=(($a+130)|0);
 HEAP8[($35)]=0;
 label=26;break;
 case 8: 
 var $37=(($_<<16)>>16)==1;
 if($37){label=9;break;}else{label=11;break;}
 case 9: 
 var $39=((($7)-($6))|0);
 HEAP32[(($4)>>2)]=$39;
 var $40=(($a+130)|0);
 var $41=HEAP8[($40)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 var $44=(($result+130)|0);
 var $45=$42^1;
 HEAP8[($44)]=$45;
 var $46=($7|0)==($6|0);
 var $or_cond54=$43&$46;
 if($or_cond54){label=10;break;}else{label=26;break;}
 case 10: 
 HEAP8[($44)]=0;
 label=26;break;
 case 11: 
 var $49=((($6)-($7))|0);
 HEAP32[(($4)>>2)]=$49;
 var $storemerge=1;label=12;break;
 case 12: 
 var $storemerge;
 var $51=(($5+($storemerge<<2))|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($52|0)==0;
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=(($4+($storemerge<<2))|0);
 HEAP32[(($55)>>2)]=-1;
 var $56=((($storemerge)+(1))|0);
 var $storemerge=$56;label=12;break;
 case 14: 
 var $58=((($52)-(1))|0);
 var $59=(($4+($storemerge<<2))|0);
 HEAP32[(($59)>>2)]=$58;
 var $60=($result|0)==($a|0);
 if($60){label=16;break;}else{label=15;break;}
 case 15: 
 var $62=((($storemerge)+(1))|0);
 var $63=(($5+($62<<2))|0);
 var $64=HEAP16[(($0)>>1)];
 var $65=($64&65535);
 var $66=(($4+($62<<2))|0);
 var $_idx1=$65<<2;
 var $67=((($62)*(-4))&-1);
 var $68=((($_idx1)+($67))|0);
 var $69=$66;
 var $70=$63;
 _memmove($69,$70,$68,4,0);
 label=16;break;
 case 16: 
 var $_pre=HEAP16[(($3)>>1)];
 var $73=$_pre;label=17;break;
 case 17: 
 var $73;
 var $74=(($73<<16)>>16)==1;
 if($74){var $85=1;label=21;break;}else{label=18;break;}
 case 18: 
 var $76=($73&65535);
 var $77=((($76)-(1))|0);
 var $78=(($4+($77<<2))|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){label=19;break;}else{var $83=$73;label=20;break;}
 case 19: 
 var $82=((($73)-(1))&65535);
 HEAP16[(($3)>>1)]=$82;
 var $73=$82;label=17;break;
 case 20: 
 var $83;
 var $84=(($83<<16)>>16)==1;
 if($84){var $85=$84;label=21;break;}else{var $90=$84;label=23;break;}
 case 21: 
 var $85;
 var $86=HEAP32[(($4)>>2)];
 var $87=($86|0)==0;
 if($87){label=22;break;}else{var $90=$85;label=23;break;}
 case 22: 
 var $89=(($result+130)|0);
 HEAP8[($89)]=0;
 var $90=$85;label=23;break;
 case 23: 
 var $90;
 var $91=(($a+130)|0);
 var $92=HEAP8[($91)];
 var $93=$92&1;
 var $94=(($93<<24)>>24)==0;
 var $95=(($result+130)|0);
 HEAP8[($95)]=$93;
 var $_not=$90^1;
 var $brmerge=$94|$_not;
 if($brmerge){label=26;break;}else{label=24;break;}
 case 24: 
 var $97=HEAP32[(($4)>>2)];
 var $98=($97|0)==0;
 if($98){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP8[($95)]=0;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail16throw_exception_ISt14overflow_errorEEvRKT_PKcS7_i($x,$current_function){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $1=(($x+4)|0);
 var $_idx_val_i_i_i_i_i=HEAP32[(($1)>>2)];
 var $2=((($_idx_val_i_i_i_i_i)-(4))|0);
 var $3=$2;
 var $4=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+1,tempValue);
 var $5=$0;
 var $6=___cxa_allocate_exception(32);
 var $7=(($0)|0);
 HEAP32[(($7)>>2)]=5944;
 var $8=(($0+4)|0);
 HEAP32[(($8)>>2)]=$_idx_val_i_i_i_i_i;
 var $9=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+1,tempValue);
 HEAP32[(($7)>>2)]=5912;
 var $10=(($0+8)|0);
 HEAP32[(($10)>>2)]=8752;
 var $11=(($0+12)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($0+16)|0);
 HEAP32[(($12)>>2)]=$current_function;
 var $13=(($0+20)|0);
 HEAP32[(($13)>>2)]=2856;
 var $14=(($0+24)|0);
 HEAP32[(($14)>>2)]=325;
 HEAP32[(($7)>>2)]=8776;
 HEAP32[(($10)>>2)]=8796;
 var $15=(($6+28)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=9208;
 var $17=$6;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorEC2ERKS3_($17,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $19=$6;
 HEAP32[(($19)>>2)]=8924;
 var $20=(($6+8)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=8952;
 HEAP32[(($16)>>2)]=8980;
 var $22=$20;
 var $23=(($0+8)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($22,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=4;break; }
 case 3: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_0=$26;var $_050=$27;label=12;break;
 case 4: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 var $31=$29$1;
 HEAP32[(($21)>>2)]=8752;
 var $32=(($6+12)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=9;break;}else{label=5;break;}
 case 5: 
 var $37=$34;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+16)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 if($41){label=7;break;}else{label=9;break;}
 case 7: 
 HEAP32[(($33)>>2)]=0;
 label=9;break;
 case 8: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 HEAP32[(($19)>>2)]=5944;
 var $45=(($6+4)|0);
 var $46=$45;
 var $this_idx_val_i_i_i_i_i_i=HEAP32[(($46)>>2)];
 var $47=((($this_idx_val_i_i_i_i_i_i)-(4))|0);
 var $48=$47;
 var $49=(tempValue=HEAP32[(($48)>>2)],HEAP32[(($48)>>2)]=tempValue+-1,tempValue);
 var $50=((($49)-(1))|0);
 var $51=($50|0)<0;
 if($51){label=10;break;}else{var $_0=$30;var $_050=$31;label=12;break;}
 case 10: 
 var $53=HEAP32[(($46)>>2)];
 var $54=((($53)-(12))|0);
 var $55=($54|0)==0;
 if($55){var $_0=$30;var $_050=$31;label=12;break;}else{label=11;break;}
 case 11: 
 _free($54);
 var $_0=$30;var $_050=$31;label=12;break;
 case 12: 
 var $_050;
 var $_0;
 var $56$0=$_0;
 var $56$1=0;
 var $57$0=$56$0;
 var $57$1=$_050;
 var $eh_lpad_body2_i$1=$57$1;var $eh_lpad_body2_i$0=$57$0;var $_053=1;label=15;break;
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($6,15272,(866)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=14;break; }
 case 14: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $eh_lpad_body2_i$1=$59$1;var $eh_lpad_body2_i$0=$59$0;var $_053=0;label=15;break;
 case 15: 
 var $_053;
 var $eh_lpad_body2_i$0;
 var $eh_lpad_body2_i$1;
 var $60=$eh_lpad_body2_i$0;
 var $61=$eh_lpad_body2_i$1;
 HEAP32[(($10)>>2)]=8752;
 var $62=HEAP32[(($11)>>2)];
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=16;break;}
 case 16: 
 var $65=$62;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 17: 
 if($69){label=18;break;}else{label=20;break;}
 case 18: 
 HEAP32[(($11)>>2)]=0;
 label=20;break;
 case 19: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,0); var $72$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 HEAP32[(($7)>>2)]=5944;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($8)>>2)];
 var $73=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $74=$73;
 var $75=(tempValue=HEAP32[(($74)>>2)],HEAP32[(($74)>>2)]=tempValue+-1,tempValue);
 var $76=((($75)-(1))|0);
 var $77=($76|0)<0;
 if($77){label=21;break;}else{label=23;break;}
 case 21: 
 var $79=HEAP32[(($8)>>2)];
 var $80=((($79)-(12))|0);
 var $81=($80|0)==0;
 if($81){label=23;break;}else{label=22;break;}
 case 22: 
 _free($80);
 label=23;break;
 case 23: 
 if($_053){label=24;break;}else{label=26;break;}
 case 24: 
 ___cxa_free_exception($6);
 label=26;break;
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $84$0=$60;
 var $84$1=0;
 var $85$0=$84$0;
 var $85$1=$61;
 var $86=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
 var $87=((($86)-(1))|0);
 var $88=($87|0)<0;
 if($88){label=27;break;}else{label=29;break;}
 case 27: 
 var $90=((($_idx_val_i_i_i_i_i)-(12))|0);
 var $91=($90|0)==0;
 if($91){label=29;break;}else{label=28;break;}
 case 28: 
 _free($90);
 label=29;break;
 case 29: 
 ___resumeException($85$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail19error_info_injectorISt14overflow_errorED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(28)+20)|0);
 var $2=(($1+8)|0);
 HEAP32[(($2)>>2)]=8752;
 var $3=(($1+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=2;break;}
 case 2: 
 var $7=$4;
 var $8=$4;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11]($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($3)>>2)]=0;
 label=6;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 HEAP32[(($1)>>2)]=5944;
 var $16=(($1+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($16)>>2)];
 var $17=((($this_idx_val_i_i_i_i)-(4))|0);
 var $18=$17;
 var $19=(tempValue=HEAP32[(($18)>>2)],HEAP32[(($18)>>2)]=tempValue+-1,tempValue);
 var $20=((($19)-(1))|0);
 var $21=($20|0)<0;
 if($21){label=7;break;}else{label=9;break;}
 case 7: 
 var $23=HEAP32[(($16)>>2)];
 var $24=((($23)-(12))|0);
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 _free($24);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=10;break;
 case 9: 
 var $25=($this|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=$this;
 _free($26);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail19error_info_injectorISt14overflow_errorED0Ev($this){
 var label=0;
 var $1=((($this)-(28)+20)|0);
 var $2=$1;
 __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorED0Ev($2);
 return;
}
function __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(32)+24)|0);
 var $2=(($1+8)|0);
 HEAP32[(($2)>>2)]=8752;
 var $3=(($1+12)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=6;break;}else{label=2;break;}
 case 2: 
 var $8=$5;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11]($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($3)>>2)]=0;
 label=6;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 HEAP32[(($1)>>2)]=5944;
 var $16=(($1+4)|0);
 var $17=$16;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($17)>>2)];
 var $18=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=((($20)-(1))|0);
 var $22=($21|0)<0;
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=HEAP32[(($17)>>2)];
 var $25=((($24)-(12))|0);
 var $26=($25|0)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 _free($25);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=8752;
 var $_sum1=((($6)+(12))|0);
 var $10=(($1+$_sum1)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=2;break;}
 case 2: 
 var $15=$12;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($19){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=0;
 label=6;break;
 case 5: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $23=$7;
 HEAP32[(($23)>>2)]=5944;
 var $_sum2=((($6)+(4))|0);
 var $24=(($1+$_sum2)|0);
 var $25=$24;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($25)>>2)];
 var $26=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=((($28)-(1))|0);
 var $30=($29|0)<0;
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=HEAP32[(($25)>>2)];
 var $33=((($32)-(12))|0);
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 _free($33);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=10;break;
 case 9: 
 var $25=($this|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=$this;
 _free($26);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE5cloneEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break;
 case 2: 
 var $2=_malloc(32);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=12;break;}
 case 3: 
 var $5=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $6=($5|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $10=$lpad_phi_i$1;
 var $11=($10|0)<0;
 if($11){label=8;break;}else{label=10;break;}
 case 8: 
 var $13=$lpad_phi_i$0;
 ___cxa_call_unexpected($13);
 throw "Reached an unreachable!";
 case 9: 
 var $15=___cxa_allocate_exception(4);
 var $16=$15;
 HEAP32[(($16)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($15,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 10: 
 ___resumeException($lpad_phi_i$0)
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $19=(($2+28)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=9208;
 var $21=$2;
 var $22=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorEC2ERKS3_($21,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 var $24=$2;
 HEAP32[(($24)>>2)]=8924;
 var $25=(($2+8)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=8952;
 HEAP32[(($20)>>2)]=8980;
 var $27=$25;
 var $28=($this|0)==0;
 var $29=(($this+8)|0);
 var $_=($28?0:$29);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($27,$_) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=15;break; }
 case 14: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 var $33=$31$1;
 var $_0=$32;var $_011=$33;label=24;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=$35$0;
 var $37=$35$1;
 HEAP32[(($26)>>2)]=8752;
 var $38=(($2+12)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=20;break;}else{label=16;break;}
 case 16: 
 var $43=$40;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 17: 
 if($47){label=18;break;}else{label=20;break;}
 case 18: 
 HEAP32[(($39)>>2)]=0;
 label=20;break;
 case 19: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 HEAP32[(($24)>>2)]=5944;
 var $51=(($2+4)|0);
 var $52=$51;
 var $this_idx_val_i_i_i_i=HEAP32[(($52)>>2)];
 var $53=((($this_idx_val_i_i_i_i)-(4))|0);
 var $54=$53;
 var $55=(tempValue=HEAP32[(($54)>>2)],HEAP32[(($54)>>2)]=tempValue+-1,tempValue);
 var $56=((($55)-(1))|0);
 var $57=($56|0)<0;
 if($57){label=21;break;}else{var $_0=$36;var $_011=$37;label=24;break;}
 case 21: 
 var $59=HEAP32[(($52)>>2)];
 var $60=((($59)-(12))|0);
 var $61=($60|0)==0;
 if($61){var $_0=$36;var $_011=$37;label=24;break;}else{label=22;break;}
 case 22: 
 _free($60);
 var $_0=$36;var $_011=$37;label=24;break;
 case 23: 
 var $63=$2;
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)-(12))|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($2+$67)|0);
 var $69=$68;
 return $69;
 case 24: 
 var $_011;
 var $_0;
 var $70$0=$_0;
 var $70$1=0;
 var $71$0=$70$0;
 var $71$1=$_011;
 _free($2);
 ___resumeException($71$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE7rethrowEv($this){
 var label=0;
 var $1=___cxa_allocate_exception(32);
 var $2=(($1+28)|0);
 var $3=$2;
 HEAP32[(($3)>>2)]=9208;
 var $4=$1;
 var $5=(($this)|0);
 __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorEC2ERKS3_($4,$5);
 var $6=$1;
 HEAP32[(($6)>>2)]=8924;
 var $7=(($1+8)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=8952;
 HEAP32[(($3)>>2)]=8980;
 ___cxa_throw($1,15272,(866));
 throw "Reached an unreachable!";
}
function __ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev($this){
 var label=0;
 var $1=((($this)-(32)+24)|0);
 var $2=$1;
 __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev($2);
 return;
}
function __ZTv0_n12_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE5cloneEv($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 var $9=__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE5cloneEv($8);
 return $9;
}
function __ZTv0_n16_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEE7rethrowEv($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(16))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $7=___cxa_allocate_exception(32);
 var $8=(($7+28)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=9208;
 var $10=$7;
 var $11=$6;
 __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorEC2ERKS3_($10,$11);
 var $12=$7;
 HEAP32[(($12)>>2)]=8924;
 var $13=(($7+8)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=8952;
 HEAP32[(($9)>>2)]=8980;
 ___cxa_throw($7,15272,(866));
 throw "Reached an unreachable!";
}
function __ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEED0Ev($8);
 return;
}
function __ZN5boost16exception_detail19error_info_injectorISt14overflow_errorEC2ERKS3_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=5944;
 var $3=(($this+4)|0);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($0+4)|0);
 var $_idx_val_i_i=HEAP32[(($6)>>2)];
 HEAP32[(($3)>>2)]=$_idx_val_i_i;
 var $7=((($_idx_val_i_i)-(4))|0);
 var $8=$7;
 var $9=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+1,tempValue);
 label=3;break;
 case 3: 
 HEAP32[(($2)>>2)]=5912;
 var $10=(($this+8)|0);
 HEAP32[(($10)>>2)]=8752;
 var $11=(($this+12)|0);
 var $12=(($0+12)|0);
 var $13=HEAP32[(($12)>>2)];
 HEAP32[(($11)>>2)]=$13;
 var $14=($13|0)==0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=$13;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+12)|0);
 var $19=HEAP32[(($18)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $21=(($this+16)|0);
 var $22=(($0+16)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($21)>>2)]=$23;
 var $24=(($this+20)|0);
 var $25=(($0+20)|0);
 var $26=HEAP32[(($25)>>2)];
 HEAP32[(($24)>>2)]=$26;
 var $27=(($this+24)|0);
 var $28=(($0+24)|0);
 var $29=HEAP32[(($28)>>2)];
 HEAP32[(($27)>>2)]=$29;
 HEAP32[(($2)>>2)]=8776;
 HEAP32[(($10)>>2)]=8796;
 return;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 HEAP32[(($2)>>2)]=5944;
 var $this_idx_val_i_i=HEAP32[(($3)>>2)];
 var $32=((($this_idx_val_i_i)-(4))|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=((($34)-(1))|0);
 var $36=($35|0)<0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $38=HEAP32[(($3)>>2)];
 var $39=((($38)-(12))|0);
 var $40=($39|0)==0;
 if($40){label=9;break;}else{label=8;break;}
 case 8: 
 _free($39);
 label=9;break;
 case 9: 
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail10clone_baseD1Ev($this){
 var label=0;
 return;
}
function __ZN5boost16exception_detail10clone_baseD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(($b+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){var $47=0;label=16;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+20)|0);
 var $9=HEAP32[(($8)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($1,$3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { var $data_sroa_0_0=0;label=10;break; }
 case 3: 
 var $10=(($1)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){var $47=$11;label=16;break;}else{label=4;break;}
 case 4: 
 var $14=$11;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+12)|0);
 var $17=HEAP32[(($16)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=11;break; }
 case 5: 
 var $_pr=HEAP32[(($10)>>2)];
 var $18=($_pr|0)==0;
 if($18){var $47=$11;label=16;break;}else{label=6;break;}
 case 6: 
 var $20=$_pr;
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+16)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$23]($_pr) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=9;break; }
 case 7: 
 if($24){label=8;break;}else{var $47=$11;label=16;break;}
 case 8: 
 HEAP32[(($10)>>2)]=0;
 var $47=$11;label=16;break;
 case 9: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1,0); var $27$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $data_sroa_0_0;
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 var $31=$29$1;
 var $_0=$31;var $_034=$30;var $data_sroa_0_3=$data_sroa_0_0;label=25;break;
 case 11: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 var $34=$33$0;
 var $35=$33$1;
 var $36=HEAP32[(($10)>>2)];
 var $37=($36|0)==0;
 if($37){var $data_sroa_0_335=$11;var $_03436=$34;var $_038=$35;label=26;break;}else{label=12;break;}
 case 12: 
 var $39=$36;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=15;break; }
 case 13: 
 if($43){label=14;break;}else{var $_0=$35;var $_034=$34;var $data_sroa_0_3=$11;label=25;break;}
 case 14: 
 HEAP32[(($10)>>2)]=0;
 var $_0=$35;var $_034=$34;var $data_sroa_0_3=$11;label=25;break;
 case 15: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1,0); var $46$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 16: 
 var $47;
 var $48=(($b+12)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($a+12)|0);
 HEAP32[(($50)>>2)]=$49;
 var $51=(($b+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($a+16)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=(($b+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($a+8)|0);
 HEAP32[(($56)>>2)]=$55;
 var $57=(($a+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==0;
 if($59){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=$58;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { var $data_sroa_0_0=$47;label=10;break; }
 case 18: 
 if($65){label=19;break;}else{label=20;break;}
 case 19: 
 HEAP32[(($57)>>2)]=0;
 label=20;break;
 case 20: 
 HEAP32[(($57)>>2)]=$47;
 var $67=($47|0)==0;
 if($67){label=24;break;}else{label=21;break;}
 case 21: 
 var $69=$47;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { var $data_sroa_0_0=$47;label=10;break; }
 case 22: 
 var $74=$47;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+16)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$77]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=23;break; }
 case 23: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1,0); var $80$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 24: 
 STACKTOP=sp;return;
 case 25: 
 var $data_sroa_0_3;
 var $_034;
 var $_0;
 var $81=($data_sroa_0_3|0)==0;
 if($81){var $_03437=$_034;var $_039=$_0;label=28;break;}else{var $data_sroa_0_335=$data_sroa_0_3;var $_03436=$_034;var $_038=$_0;label=26;break;}
 case 26: 
 var $_038;
 var $_03436;
 var $data_sroa_0_335;
 var $82=$data_sroa_0_335;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+16)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($data_sroa_0_335) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_03437=$_03436;var $_039=$_038;label=28;break; } else { label=27;break; }
 case 27: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 28: 
 var $_039;
 var $_03437;
 var $89$0=$_03437;
 var $89$1=0;
 var $90$0=$89$0;
 var $90$1=$_039;
 ___resumeException($90$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail19error_info_injectorISt13runtime_errorED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(28)+20)|0);
 var $2=(($1+8)|0);
 HEAP32[(($2)>>2)]=8752;
 var $3=(($1+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=2;break;}
 case 2: 
 var $7=$4;
 var $8=$4;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11]($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($3)>>2)]=0;
 label=6;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 HEAP32[(($1)>>2)]=5944;
 var $16=(($1+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($16)>>2)];
 var $17=((($this_idx_val_i_i_i_i)-(4))|0);
 var $18=$17;
 var $19=(tempValue=HEAP32[(($18)>>2)],HEAP32[(($18)>>2)]=tempValue+-1,tempValue);
 var $20=((($19)-(1))|0);
 var $21=($20|0)<0;
 if($21){label=7;break;}else{label=9;break;}
 case 7: 
 var $23=HEAP32[(($16)>>2)];
 var $24=((($23)-(12))|0);
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 _free($24);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=10;break;
 case 9: 
 var $25=($this|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=$this;
 _free($26);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail19error_info_injectorISt13runtime_errorED0Ev($this){
 var label=0;
 var $1=((($this)-(28)+20)|0);
 var $2=$1;
 __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorED0Ev($2);
 return;
}
function __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(32)+24)|0);
 var $2=(($1+8)|0);
 HEAP32[(($2)>>2)]=8752;
 var $3=(($1+12)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=6;break;}else{label=2;break;}
 case 2: 
 var $8=$5;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11]($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($3)>>2)]=0;
 label=6;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 HEAP32[(($1)>>2)]=5944;
 var $16=(($1+4)|0);
 var $17=$16;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($17)>>2)];
 var $18=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=((($20)-(1))|0);
 var $22=($21|0)<0;
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=HEAP32[(($17)>>2)];
 var $25=((($24)-(12))|0);
 var $26=($25|0)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 _free($25);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=8752;
 var $_sum1=((($6)+(12))|0);
 var $10=(($1+$_sum1)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=2;break;}
 case 2: 
 var $15=$12;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($19){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=0;
 label=6;break;
 case 5: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $23=$7;
 HEAP32[(($23)>>2)]=5944;
 var $_sum2=((($6)+(4))|0);
 var $24=(($1+$_sum2)|0);
 var $25=$24;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($25)>>2)];
 var $26=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=((($28)-(1))|0);
 var $30=($29|0)<0;
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=HEAP32[(($25)>>2)];
 var $33=((($32)-(12))|0);
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 _free($33);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=10;break;
 case 9: 
 var $25=($this|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=$this;
 _free($26);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE5cloneEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break;
 case 2: 
 var $2=_malloc(32);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=12;break;}
 case 3: 
 var $5=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $6=($5|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $10=$lpad_phi_i$1;
 var $11=($10|0)<0;
 if($11){label=8;break;}else{label=10;break;}
 case 8: 
 var $13=$lpad_phi_i$0;
 ___cxa_call_unexpected($13);
 throw "Reached an unreachable!";
 case 9: 
 var $15=___cxa_allocate_exception(4);
 var $16=$15;
 HEAP32[(($16)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($15,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 10: 
 ___resumeException($lpad_phi_i$0)
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $19=(($2+28)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=9208;
 var $21=$2;
 var $22=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorEC2ERKS3_($21,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 var $24=$2;
 HEAP32[(($24)>>2)]=9020;
 var $25=(($2+8)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=9048;
 HEAP32[(($20)>>2)]=9076;
 var $27=$25;
 var $28=($this|0)==0;
 var $29=(($this+8)|0);
 var $_=($28?0:$29);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($27,$_) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=15;break; }
 case 14: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 var $33=$31$1;
 var $_0=$32;var $_011=$33;label=24;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=$35$0;
 var $37=$35$1;
 HEAP32[(($26)>>2)]=8752;
 var $38=(($2+12)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=20;break;}else{label=16;break;}
 case 16: 
 var $43=$40;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 17: 
 if($47){label=18;break;}else{label=20;break;}
 case 18: 
 HEAP32[(($39)>>2)]=0;
 label=20;break;
 case 19: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 HEAP32[(($24)>>2)]=5944;
 var $51=(($2+4)|0);
 var $52=$51;
 var $this_idx_val_i_i_i_i=HEAP32[(($52)>>2)];
 var $53=((($this_idx_val_i_i_i_i)-(4))|0);
 var $54=$53;
 var $55=(tempValue=HEAP32[(($54)>>2)],HEAP32[(($54)>>2)]=tempValue+-1,tempValue);
 var $56=((($55)-(1))|0);
 var $57=($56|0)<0;
 if($57){label=21;break;}else{var $_0=$36;var $_011=$37;label=24;break;}
 case 21: 
 var $59=HEAP32[(($52)>>2)];
 var $60=((($59)-(12))|0);
 var $61=($60|0)==0;
 if($61){var $_0=$36;var $_011=$37;label=24;break;}else{label=22;break;}
 case 22: 
 _free($60);
 var $_0=$36;var $_011=$37;label=24;break;
 case 23: 
 var $63=$2;
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)-(12))|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($2+$67)|0);
 var $69=$68;
 return $69;
 case 24: 
 var $_011;
 var $_0;
 var $70$0=$_0;
 var $70$1=0;
 var $71$0=$70$0;
 var $71$1=$_011;
 _free($2);
 ___resumeException($71$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE7rethrowEv($this){
 var label=0;
 var $1=___cxa_allocate_exception(32);
 var $2=(($1+28)|0);
 var $3=$2;
 HEAP32[(($3)>>2)]=9208;
 var $4=$1;
 var $5=(($this)|0);
 __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorEC2ERKS3_($4,$5);
 var $6=$1;
 HEAP32[(($6)>>2)]=9020;
 var $7=(($1+8)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=9048;
 HEAP32[(($3)>>2)]=9076;
 ___cxa_throw($1,15304,(64));
 throw "Reached an unreachable!";
}
function __ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev($this){
 var label=0;
 var $1=((($this)-(32)+24)|0);
 var $2=$1;
 __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev($2);
 return;
}
function __ZTv0_n12_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE5cloneEv($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 var $9=__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE5cloneEv($8);
 return $9;
}
function __ZTv0_n16_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEE7rethrowEv($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(16))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $7=___cxa_allocate_exception(32);
 var $8=(($7+28)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=9208;
 var $10=$7;
 var $11=$6;
 __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorEC2ERKS3_($10,$11);
 var $12=$7;
 HEAP32[(($12)>>2)]=9020;
 var $13=(($7+8)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=9048;
 HEAP32[(($9)>>2)]=9076;
 ___cxa_throw($7,15304,(64));
 throw "Reached an unreachable!";
}
function __ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEED0Ev($8);
 return;
}
function __ZN5boost16exception_detail19error_info_injectorISt13runtime_errorEC2ERKS3_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=5944;
 var $3=(($this+4)|0);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($0+4)|0);
 var $_idx_val_i=HEAP32[(($6)>>2)];
 HEAP32[(($3)>>2)]=$_idx_val_i;
 var $7=((($_idx_val_i)-(4))|0);
 var $8=$7;
 var $9=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+1,tempValue);
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 HEAP32[(($10)>>2)]=8752;
 var $11=(($this+12)|0);
 var $12=(($0+12)|0);
 var $13=HEAP32[(($12)>>2)];
 HEAP32[(($11)>>2)]=$13;
 var $14=($13|0)==0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=$13;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+12)|0);
 var $19=HEAP32[(($18)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $21=(($this+16)|0);
 var $22=(($0+16)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($21)>>2)]=$23;
 var $24=(($this+20)|0);
 var $25=(($0+20)|0);
 var $26=HEAP32[(($25)>>2)];
 HEAP32[(($24)>>2)]=$26;
 var $27=(($this+24)|0);
 var $28=(($0+24)|0);
 var $29=HEAP32[(($28)>>2)];
 HEAP32[(($27)>>2)]=$29;
 HEAP32[(($2)>>2)]=8824;
 HEAP32[(($10)>>2)]=8844;
 return;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 HEAP32[(($2)>>2)]=5944;
 var $this_idx_val_i_i=HEAP32[(($3)>>2)];
 var $32=((($this_idx_val_i_i)-(4))|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=((($34)-(1))|0);
 var $36=($35|0)<0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $38=HEAP32[(($3)>>2)];
 var $39=((($38)-(12))|0);
 var $40=($39|0)==0;
 if($40){label=9;break;}else{label=8;break;}
 case 8: 
 _free($39);
 label=9;break;
 case 9: 
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__last;
 var $2=$__first;
 var $3=((($1)-($2))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$this;
 HEAP8[($11)]=$10;
 var $12=$this;
 var $13=(($12+1)|0);
 var $_0=$__first;var $__p_0=$13;label=17;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=($15|0)==0;
 var $_size_i=($16?1:$15);
 label=6;break;
 case 6: 
 var $18=_malloc($_size_i);
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=16;break;}
 case 7: 
 var $21=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=13;break;}else{label=8;break;}
 case 8: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $26=$lpad_phi_i$1;
 var $27=($26|0)<0;
 if($27){label=12;break;}else{label=14;break;}
 case 12: 
 var $29=$lpad_phi_i$0;
 ___cxa_call_unexpected($29);
 throw "Reached an unreachable!";
 case 13: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $35=(($this+8)|0);
 HEAP32[(($35)>>2)]=$18;
 var $36=$15|1;
 var $37=(($this)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($this+4)|0);
 HEAP32[(($38)>>2)]=$3;
 var $_0=$__first;var $__p_0=$18;label=17;break;
 case 17: 
 var $__p_0;
 var $_0;
 var $39=($_0|0)==($__last|0);
 if($39){label=19;break;}else{label=18;break;}
 case 18: 
 var $41=HEAP8[($_0)];
 HEAP8[($__p_0)]=$41;
 var $42=(($_0+1)|0);
 var $43=(($__p_0+1)|0);
 var $_0=$42;var $__p_0=$43;label=17;break;
 case 19: 
 HEAP8[($__p_0)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7588;
 var $2=$this;
 var $3=(($this+64)|0);
 HEAP32[(($3)>>2)]=7628;
 var $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=7608;
 var $5=(($this+12)|0);
 HEAP32[(($5)>>2)]=7768;
 var $6=(($this+44)|0);
 var $7=$6;
 var $8=HEAP8[($7)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=4;break;}else{label=2;break;}
 case 2: 
 var $12=(($this+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==0;
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 _free($13);
 label=4;break;
 case 4: 
 HEAP32[(($5)>>2)]=7912;
 var $16=(($this+16)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=(tempValue=HEAP32[(($18)>>2)],HEAP32[(($18)>>2)]=tempValue+-1,tempValue);
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=(($17)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+8)|0);
 var $26=HEAP32[(($25)>>2)];
 FUNCTION_TABLE[$26]($22);
 label=6;break;
 case 6: 
 var $27=(($this+64)|0);
 __ZNSt3__18ios_baseD2Ev($27);
 var $28=($this|0)==0;
 if($28){label=8;break;}else{label=7;break;}
 case 7: 
 _free($2);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(144)+136)|0);
 HEAP32[(($1)>>2)]=7588;
 var $2=(($1+64)|0);
 HEAP32[(($2)>>2)]=7628;
 var $3=(($1+8)|0);
 HEAP32[(($3)>>2)]=7608;
 var $4=(($1+12)|0);
 HEAP32[(($4)>>2)]=7768;
 var $5=(($1+44)|0);
 var $6=$5;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=2;break;}
 case 2: 
 var $11=(($1+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=$12;
 _free($15);
 label=4;break;
 case 4: 
 HEAP32[(($4)>>2)]=7912;
 var $16=(($1+16)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$17;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($23);
 label=6;break;
 case 6: 
 var $28=$2;
 __ZNSt3__18ios_baseD2Ev($28);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(144)+136)|0);
 HEAP32[(($1)>>2)]=7588;
 var $2=(($1+64)|0);
 HEAP32[(($2)>>2)]=7628;
 var $3=(($1+8)|0);
 HEAP32[(($3)>>2)]=7608;
 var $4=(($1+12)|0);
 HEAP32[(($4)>>2)]=7768;
 var $5=(($1+44)|0);
 var $6=$5;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=2;break;}
 case 2: 
 var $11=(($1+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=$12;
 _free($15);
 label=4;break;
 case 4: 
 HEAP32[(($4)>>2)]=7912;
 var $16=(($1+16)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 var $23=$17;
 var $24=$17;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+8)|0);
 var $27=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$27]($23);
 label=6;break;
 case 6: 
 var $28=$2;
 __ZNSt3__18ios_baseD2Ev($28);
 var $29=($1|0)==0;
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $31=$1;
 _free($31);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=7588;
 var $_sum=((($6)+(64))|0);
 var $9=(($1+$_sum)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=7628;
 var $_sum1=((($6)+(8))|0);
 var $11=(($1+$_sum1)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=7608;
 var $_sum2=((($6)+(12))|0);
 var $13=(($1+$_sum2)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=7768;
 var $_sum3=((($6)+(44))|0);
 var $15=(($1+$_sum3)|0);
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=4;break;}else{label=2;break;}
 case 2: 
 var $_sum4=((($6)+(52))|0);
 var $20=(($1+$_sum4)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=4;break;}else{label=3;break;}
 case 3: 
 _free($22);
 label=4;break;
 case 4: 
 HEAP32[(($14)>>2)]=7912;
 var $_sum5=((($6)+(16))|0);
 var $25=(($1+$_sum5)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+4)|0);
 var $29=(tempValue=HEAP32[(($28)>>2)],HEAP32[(($28)>>2)]=tempValue+-1,tempValue);
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($27)|0);
 var $33=$27;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+8)|0);
 var $36=HEAP32[(($35)>>2)];
 FUNCTION_TABLE[$36]($32);
 label=6;break;
 case 6: 
 var $37=$9;
 __ZNSt3__18ios_baseD2Ev($37);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=7588;
 var $_sum=((($6)+(64))|0);
 var $9=(($1+$_sum)|0);
 var $10=$9;
 HEAP32[(($10)>>2)]=7628;
 var $_sum1=((($6)+(8))|0);
 var $11=(($1+$_sum1)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=7608;
 var $_sum2=((($6)+(12))|0);
 var $13=(($1+$_sum2)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=7768;
 var $_sum3=((($6)+(44))|0);
 var $15=(($1+$_sum3)|0);
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=4;break;}else{label=2;break;}
 case 2: 
 var $_sum4=((($6)+(52))|0);
 var $20=(($1+$_sum4)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=4;break;}else{label=3;break;}
 case 3: 
 _free($22);
 label=4;break;
 case 4: 
 HEAP32[(($14)>>2)]=7912;
 var $_sum5=((($6)+(16))|0);
 var $25=(($1+$_sum5)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+4)|0);
 var $29=(tempValue=HEAP32[(($28)>>2)],HEAP32[(($28)>>2)]=tempValue+-1,tempValue);
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($27)|0);
 var $33=$27;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+8)|0);
 var $36=HEAP32[(($35)>>2)];
 FUNCTION_TABLE[$36]($32);
 label=6;break;
 case 6: 
 var $37=$9;
 __ZNSt3__18ios_baseD2Ev($37);
 var $38=($7|0)==0;
 if($38){label=8;break;}else{label=7;break;}
 case 7: 
 _free($7);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7768;
 var $2=(($this+32)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+40)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 HEAP32[(($1)>>2)]=7912;
 var $12=(($this+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4)|0);
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+-1,tempValue);
 var $16=($15|0)==0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=(($13)|0);
 var $19=$13;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 FUNCTION_TABLE[$22]($18);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7768;
 var $2=(($this+32)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+40)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 HEAP32[(($1)>>2)]=7912;
 var $12=(($this+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4)|0);
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+-1,tempValue);
 var $16=($15|0)==0;
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 var $18=(($13)|0);
 var $19=$13;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+8)|0);
 var $22=HEAP32[(($21)>>2)];
 FUNCTION_TABLE[$22]($18);
 label=6;break;
 case 6: 
 var $23=($this|0)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=$this;
 _free($25);
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$__off$0,$__off$1,$__way,$__wch){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{var $8=$2;label=3;break;}
 case 2: 
 HEAP32[(($1)>>2)]=$4;
 var $8=$4;label=3;break;
 case 3: 
 var $8;
 var $9=$__wch&24;
 if(($9|0)==0){ label=4;break;}else if(($9|0)==24){ label=5;break;}else{label=7;break;}
 case 4: 
 var $11=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($11)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($11+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $12=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($12)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($12+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 label=34;break;
 case 5: 
 if(($__way|0)==2){ label=12;break;}else if(($__way|0)==0){ var $__noff_0$1=0;var $__noff_0$0=0;label=17;break;}else if(($__way|0)==1){ label=6;break;}else{label=16;break;}
 case 6: 
 var $15=$agg_result;
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 var $st$7$0=(($15)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($15+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 var $16=(($agg_result+8)|0);
 var $$etemp$9$0=-1;
 var $$etemp$9$1=-1;
 var $st$10$0=(($16)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9$0;
 var $st$11$1=(($16+4)|0);
 HEAP32[(($st$11$1)>>2)]=$$etemp$9$1;
 label=34;break;
 case 7: 
 if(($__way|0)==2){ label=12;break;}else if(($__way|0)==0){ var $__noff_0$1=0;var $__noff_0$0=0;label=17;break;}else if(($__way|0)==1){ label=8;break;}else{label=16;break;}
 case 8: 
 var $18=$__wch&8;
 var $19=($18|0)==0;
 if($19){label=10;break;}else{label=9;break;}
 case 9: 
 var $21=(($this+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($this+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$22;
 var $26=$24;
 var $27=((($25)-($26))|0);
 var $storemerge_in=$27;label=11;break;
 case 10: 
 var $29=(($this+20)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$4;
 var $32=$30;
 var $33=((($31)-($32))|0);
 var $storemerge_in=$33;label=11;break;
 case 11: 
 var $storemerge_in;
 var $storemerge$0=$storemerge_in;
 var $storemerge$1=((((($storemerge_in|0)<0))|0)?-1:0);
 var $__noff_0$1=$storemerge$1;var $__noff_0$0=$storemerge$0;label=17;break;
 case 12: 
 var $36=(($this+32)|0);
 var $37=$36;
 var $38=HEAP8[($37)];
 var $39=$38&1;
 var $40=(($39<<24)>>24)==0;
 if($40){label=14;break;}else{label=13;break;}
 case 13: 
 var $42=(($this+40)|0);
 var $43=HEAP32[(($42)>>2)];
 var $47=$43;label=15;break;
 case 14: 
 var $45=$36;
 var $46=(($45+1)|0);
 var $47=$46;label=15;break;
 case 15: 
 var $47;
 var $48=$8;
 var $49=$47;
 var $50=((($48)-($49))|0);
 var $51$0=$50;
 var $51$1=((((($50|0)<0))|0)?-1:0);
 var $__noff_0$1=$51$1;var $__noff_0$0=$51$0;label=17;break;
 case 16: 
 var $53=$agg_result;
 var $$etemp$12$0=0;
 var $$etemp$12$1=0;
 var $st$13$0=(($53)|0);
 HEAP32[(($st$13$0)>>2)]=$$etemp$12$0;
 var $st$14$1=(($53+4)|0);
 HEAP32[(($st$14$1)>>2)]=$$etemp$12$1;
 var $54=(($agg_result+8)|0);
 var $$etemp$15$0=-1;
 var $$etemp$15$1=-1;
 var $st$16$0=(($54)|0);
 HEAP32[(($st$16$0)>>2)]=$$etemp$15$0;
 var $st$17$1=(($54+4)|0);
 HEAP32[(($st$17$1)>>2)]=$$etemp$15$1;
 label=34;break;
 case 17: 
 var $__noff_0$0;
 var $__noff_0$1;
 var $56$0=_i64Add($__noff_0$0,$__noff_0$1,$__off$0,$__off$1);var $56$1=tempRet0;
 var $$etemp$18$0=0;
 var $$etemp$18$1=0;
 var $57=(($56$1|0) < ($$etemp$18$1|0)) | (((($56$1|0) == ($$etemp$18$1|0) & ($56$0>>>0) <  ($$etemp$18$0>>>0))));
 if($57){label=22;break;}else{label=18;break;}
 case 18: 
 var $59=(($this+32)|0);
 var $60=$59;
 var $61=HEAP8[($60)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=20;break;}else{label=19;break;}
 case 19: 
 var $65=(($this+40)|0);
 var $66=HEAP32[(($65)>>2)];
 var $70=$66;label=21;break;
 case 20: 
 var $68=$59;
 var $69=(($68+1)|0);
 var $70=$69;label=21;break;
 case 21: 
 var $70;
 var $71=$8;
 var $72=$70;
 var $73=((($71)-($72))|0);
 var $74$0=$73;
 var $74$1=((((($73|0)<0))|0)?-1:0);
 var $75=(($74$1|0) < ($56$1|0)) | (((($74$1|0) == ($56$1|0) & ($74$0>>>0) <  ($56$0>>>0))));
 if($75){label=22;break;}else{label=23;break;}
 case 22: 
 var $77=$agg_result;
 var $$etemp$19$0=0;
 var $$etemp$19$1=0;
 var $st$20$0=(($77)|0);
 HEAP32[(($st$20$0)>>2)]=$$etemp$19$0;
 var $st$21$1=(($77+4)|0);
 HEAP32[(($st$21$1)>>2)]=$$etemp$19$1;
 var $78=(($agg_result+8)|0);
 var $$etemp$22$0=-1;
 var $$etemp$22$1=-1;
 var $st$23$0=(($78)|0);
 HEAP32[(($st$23$0)>>2)]=$$etemp$22$0;
 var $st$24$1=(($78+4)|0);
 HEAP32[(($st$24$1)>>2)]=$$etemp$22$1;
 label=34;break;
 case 23: 
 var $$etemp$25$0=0;
 var $$etemp$25$1=0;
 var $80=(($56$0|0) == ($$etemp$25$0|0)) & (($56$1|0) == ($$etemp$25$1|0));
 var $_pre=$__wch&8;
 if($80){label=29;break;}else{label=24;break;}
 case 24: 
 var $82=($_pre|0)==0;
 if($82){label=27;break;}else{label=25;break;}
 case 25: 
 var $84=(($this+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==0;
 if($86){label=26;break;}else{label=27;break;}
 case 26: 
 var $88=$agg_result;
 var $$etemp$26$0=0;
 var $$etemp$26$1=0;
 var $st$27$0=(($88)|0);
 HEAP32[(($st$27$0)>>2)]=$$etemp$26$0;
 var $st$28$1=(($88+4)|0);
 HEAP32[(($st$28$1)>>2)]=$$etemp$26$1;
 var $89=(($agg_result+8)|0);
 var $$etemp$29$0=-1;
 var $$etemp$29$1=-1;
 var $st$30$0=(($89)|0);
 HEAP32[(($st$30$0)>>2)]=$$etemp$29$0;
 var $st$31$1=(($89+4)|0);
 HEAP32[(($st$31$1)>>2)]=$$etemp$29$1;
 label=34;break;
 case 27: 
 var $91=$__wch&16;
 var $92=($91|0)!=0;
 var $93=($4|0)==0;
 var $or_cond=$92&$93;
 if($or_cond){label=28;break;}else{label=29;break;}
 case 28: 
 var $95=$agg_result;
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $st$33$0=(($95)|0);
 HEAP32[(($st$33$0)>>2)]=$$etemp$32$0;
 var $st$34$1=(($95+4)|0);
 HEAP32[(($st$34$1)>>2)]=$$etemp$32$1;
 var $96=(($agg_result+8)|0);
 var $$etemp$35$0=-1;
 var $$etemp$35$1=-1;
 var $st$36$0=(($96)|0);
 HEAP32[(($st$36$0)>>2)]=$$etemp$35$0;
 var $st$37$1=(($96+4)|0);
 HEAP32[(($st$37$1)>>2)]=$$etemp$35$1;
 label=34;break;
 case 29: 
 var $97=($_pre|0)==0;
 if($97){label=31;break;}else{label=30;break;}
 case 30: 
 var $99=(($this+8)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101$0=$56$0;
 var $101=$101$0;
 var $102=(($100+$101)|0);
 var $103=(($this+12)|0);
 HEAP32[(($103)>>2)]=$102;
 var $104=(($this+16)|0);
 HEAP32[(($104)>>2)]=$8;
 label=31;break;
 case 31: 
 var $106=$__wch&16;
 var $107=($106|0)==0;
 if($107){label=33;break;}else{label=32;break;}
 case 32: 
 var $109=(($this+20)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111$0=$56$0;
 var $111=$111$0;
 var $112=(($110+$111)|0);
 HEAP32[(($3)>>2)]=$112;
 label=33;break;
 case 33: 
 var $114=$agg_result;
 var $$etemp$38$0=0;
 var $$etemp$38$1=0;
 var $st$39$0=(($114)|0);
 HEAP32[(($st$39$0)>>2)]=$$etemp$38$0;
 var $st$40$1=(($114+4)|0);
 HEAP32[(($st$40$1)>>2)]=$$etemp$38$1;
 var $115=(($agg_result+8)|0);
 var $st$41$0=(($115)|0);
 HEAP32[(($st$41$0)>>2)]=$56$0;
 var $st$42$1=(($115+4)|0);
 HEAP32[(($st$42$1)>>2)]=$56$1;
 label=34;break;
 case 34: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$__sp,$__wch){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__sp; $__sp=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__sp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($__sp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($__sp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($__sp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+16)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__sp+8)|0);
 var $ld$0$0=(($5)|0);
 var $6$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$1$1)>>2)];
 FUNCTION_TABLE[$4]($agg_result,$this,$6$0,$6$1,0,$__wch);
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{var $8=$2;label=3;break;}
 case 2: 
 HEAP32[(($1)>>2)]=$4;
 var $8=$4;label=3;break;
 case 3: 
 var $8;
 var $9=(($this+48)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&8;
 var $12=($11|0)==0;
 if($12){var $storemerge=-1;label=8;break;}else{label=4;break;}
 case 4: 
 var $14=(($this+16)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15>>>0)<($8>>>0);
 var $17=(($this+12)|0);
 var $18=HEAP32[(($17)>>2)];
 if($16){label=5;break;}else{var $20=$15;label=6;break;}
 case 5: 
 HEAP32[(($14)>>2)]=$8;
 var $20=$8;label=6;break;
 case 6: 
 var $20;
 var $21=($18>>>0)<($20>>>0);
 if($21){label=7;break;}else{var $storemerge=-1;label=8;break;}
 case 7: 
 var $23=HEAP8[($18)];
 var $24=($23&255);
 var $storemerge=$24;label=8;break;
 case 8: 
 var $storemerge;
 return $storemerge;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{var $8=$2;label=3;break;}
 case 2: 
 HEAP32[(($1)>>2)]=$4;
 var $8=$4;label=3;break;
 case 3: 
 var $8;
 var $9=(($this+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($10>>>0)<($12>>>0);
 if($13){label=4;break;}else{var $_0=-1;label=9;break;}
 case 4: 
 var $15=($__c|0)==-1;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 var $16=((($12)-(1))|0);
 HEAP32[(($9)>>2)]=$10;
 HEAP32[(($11)>>2)]=$16;
 var $17=(($this+16)|0);
 HEAP32[(($17)>>2)]=$8;
 var $_0=0;label=9;break;
 case 6: 
 var $19=(($this+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20&16;
 var $22=($21|0)==0;
 var $23=((($12)-(1))|0);
 if($22){label=7;break;}else{var $_pre_phi=$23;label=8;break;}
 case 7: 
 var $25=HEAP8[($23)];
 var $sext=$__c<<24;
 var $26=$sext>>24;
 var $27=(($25<<24)>>24);
 var $28=($26|0)==($27|0);
 if($28){var $_pre_phi=$23;label=8;break;}else{var $_0=-1;label=9;break;}
 case 8: 
 var $_pre_phi;
 HEAP32[(($9)>>2)]=$10;
 HEAP32[(($11)>>2)]=$_pre_phi;
 var $29=(($this+16)|0);
 HEAP32[(($29)>>2)]=$8;
 var $30=(($__c)&255);
 HEAP8[($_pre_phi)]=$30;
 var $_0=$__c;label=9;break;
 case 9: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__c|0)==-1;
 if($1){var $_0=0;label=37;break;}else{label=2;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($this+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=(($this+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($this+28)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($11|0)==($13|0);
 if($14){label=4;break;}else{label=3;break;}
 case 3: 
 var $_phi_trans_insert=(($this+44)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $121=$11;var $120=$13;var $119=$_pre;label=29;break;
 case 4: 
 var $16=(($this+48)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&16;
 var $19=($18|0)==0;
 if($19){var $_0=-1;label=37;break;}else{label=5;break;}
 case 5: 
 var $21=(($this+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$11;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=(($this+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$27;
 var $29=((($28)-($24))|0);
 var $30=(($this+32)|0);
 var $31=$30;
 var $32=$30;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=6;break;}else{label=7;break;}
 case 6: 
 var $37=($33&255);
 var $38=$37>>>1;
 var $__sz_0_i=$38;var $__cap_0_i=10;label=8;break;
 case 7: 
 var $40=(($30)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41&-2;
 var $43=((($42)-(1))|0);
 var $44=(($this+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $__sz_0_i=$45;var $__cap_0_i=$43;label=8;break;
 case 8: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $47=($__sz_0_i|0)==($__cap_0_i|0);
 if($47){label=9;break;}else{var $__is_short_0_off0_in_in_i=$33;label=11;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($30,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=27;break; }
 case 10: 
 var $49=HEAP8[($32)];
 var $__is_short_0_off0_in_in_i=$49;label=11;break;
 case 11: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=12;break;}else{label=13;break;}
 case 12: 
 var $52=(($31+1)|0);
 var $53=$__sz_0_i<<1;
 var $54=((($53)+(2))|0);
 var $55=(($54)&255);
 HEAP8[($32)]=$55;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$52;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=14;break;
 case 13: 
 var $57=(($this+40)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=((($__sz_0_i)+(1))|0);
 var $60=(($this+36)|0);
 HEAP32[(($60)>>2)]=$59;
 var $_pn_i=$58;var $__p_0_sum_pre_phi_i=$59;label=14;break;
 case 14: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=0;
 var $62=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($62)]=0;
 var $63=HEAP8[($32)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){var $72=10;var $71=$63;label=16;break;}else{label=15;break;}
 case 15: 
 var $67=(($30)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&-2;
 var $phitmp=((($69)-(1))|0);
 var $70=(($68)&255);
 var $72=$phitmp;var $71=$70;label=16;break;
 case 16: 
 var $71;
 var $72;
 var $73=($71&255);
 var $74=$73&1;
 var $75=($74|0)==0;
 if($75){label=18;break;}else{label=17;break;}
 case 17: 
 var $77=(($this+36)|0);
 var $78=HEAP32[(($77)>>2)];
 var $81=$78;label=19;break;
 case 18: 
 var $80=$73>>>1;
 var $81=$80;label=19;break;
 case 19: 
 var $81;
 var $82=($81>>>0)<($72>>>0);
 if($82){label=20;break;}else{label=21;break;}
 case 20: 
 var $84=((($72)-($81))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($30,$84,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 21: 
 var $86=$71&1;
 var $87=(($86<<24)>>24)==0;
 if($87){label=23;break;}else{label=22;break;}
 case 22: 
 var $89=(($this+40)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+$72)|0);
 HEAP8[($91)]=0;
 var $92=(($this+36)|0);
 HEAP32[(($92)>>2)]=$72;
 label=24;break;
 case 23: 
 var $94=(($31+1+$72)|0);
 HEAP8[($94)]=0;
 var $95=$72<<1;
 var $96=(($95)&255);
 HEAP8[($32)]=$96;
 label=24;break;
 case 24: 
 var $97=HEAP8[($32)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=26;break;}else{label=25;break;}
 case 25: 
 var $101=(($this+40)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($this+36)|0);
 var $104=HEAP32[(($103)>>2)];
 var $115=$104;var $114=$102;label=28;break;
 case 26: 
 var $106=(($31+1)|0);
 var $107=($97&255);
 var $108=$107>>>1;
 var $115=$108;var $114=$106;label=28;break;
 case 27: 
 var $110$0 = ___cxa_find_matching_catch(-1, -1,0); var $110$1 = tempRet0;
 var $111=$110$0;
 var $112=___cxa_begin_catch($111);
 ___cxa_end_catch();
 var $_0=-1;label=37;break;
 case 28: 
 var $114;
 var $115;
 var $116=(($114+$115)|0);
 HEAP32[(($21)>>2)]=$114;
 HEAP32[(($12)>>2)]=$116;
 var $117=(($114+$25)|0);
 HEAP32[(($10)>>2)]=$117;
 var $118=(($114+$29)|0);
 HEAP32[(($26)>>2)]=$118;
 var $121=$117;var $120=$116;var $119=$118;label=29;break;
 case 29: 
 var $119;
 var $120;
 var $121;
 var $122=(($121+1)|0);
 var $123=(($this+44)|0);
 var $124=($122>>>0)<($119>>>0);
 var $_=($124?$119:$122);
 HEAP32[(($123)>>2)]=$_;
 var $125=(($this+48)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=$126&8;
 var $128=($127|0)==0;
 if($128){label=34;break;}else{label=30;break;}
 case 30: 
 var $130=(($this+32)|0);
 var $131=$130;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=32;break;}else{label=31;break;}
 case 31: 
 var $136=(($this+40)|0);
 var $137=HEAP32[(($136)>>2)];
 var $141=$137;label=33;break;
 case 32: 
 var $139=$130;
 var $140=(($139+1)|0);
 var $141=$140;label=33;break;
 case 33: 
 var $141;
 var $142=(($141+$9)|0);
 HEAP32[(($5)>>2)]=$141;
 HEAP32[(($3)>>2)]=$142;
 var $143=(($this+16)|0);
 HEAP32[(($143)>>2)]=$_;
 label=34;break;
 case 34: 
 var $145=($121|0)==($120|0);
 if($145){label=35;break;}else{label=36;break;}
 case 35: 
 var $147=(($this)|0);
 var $148=$this;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+52)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=$__c&255;
 var $153=FUNCTION_TABLE[$151]($147,$152);
 var $_0=$153;label=37;break;
 case 36: 
 var $155=(($__c)&255);
 HEAP32[(($10)>>2)]=$122;
 HEAP8[($121)]=$155;
 var $156=$__c&255;
 var $_0=$156;label=37;break;
 case 37: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+32)|0);
 var $2=($1|0)==($__s|0);
 if($2){label=21;break;}else{label=2;break;}
 case 2: 
 var $4=$__s;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($__s+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $14=$10;label=5;break;
 case 4: 
 var $12=$__s;
 var $13=(($12+1)|0);
 var $14=$13;label=5;break;
 case 5: 
 var $14;
 var $15=($5&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($__s+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=8;break;
 case 7: 
 var $22=$15>>>1;
 var $23=$22;label=8;break;
 case 8: 
 var $23;
 var $24=$1;
 var $25=$1;
 var $26=HEAP8[($25)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){var $35=10;var $34=$26;label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($1)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31&-2;
 var $phitmp_i_i=((($32)-(1))|0);
 var $33=(($31)&255);
 var $35=$phitmp_i_i;var $34=$33;label=10;break;
 case 10: 
 var $34;
 var $35;
 var $36=($35>>>0)<($23>>>0);
 if($36){label=17;break;}else{label=11;break;}
 case 11: 
 var $38=$34&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($this+40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $45=$42;label=14;break;
 case 13: 
 var $44=(($24+1)|0);
 var $45=$44;label=14;break;
 case 14: 
 var $45;
 _memmove($45,$14,$23,1,0);
 var $46=(($45+$23)|0);
 HEAP8[($46)]=0;
 var $47=HEAP8[($25)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=16;break;}else{label=15;break;}
 case 15: 
 var $51=(($this+36)|0);
 HEAP32[(($51)>>2)]=$23;
 label=21;break;
 case 16: 
 var $53=$23<<1;
 var $54=(($53)&255);
 HEAP8[($25)]=$54;
 label=21;break;
 case 17: 
 var $56=($34&255);
 var $57=$56&1;
 var $58=($57|0)==0;
 if($58){label=19;break;}else{label=18;break;}
 case 18: 
 var $60=(($this+36)|0);
 var $61=HEAP32[(($60)>>2)];
 var $64=$61;label=20;break;
 case 19: 
 var $63=$56>>>1;
 var $64=$63;label=20;break;
 case 20: 
 var $64;
 var $65=((($23)-($35))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($1,$35,$65,$64,0,$64,$23,$14);
 label=21;break;
 case 21: 
 var $66=(($this+44)|0);
 HEAP32[(($66)>>2)]=0;
 var $67=(($this+48)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68&8;
 var $70=($69|0)==0;
 if($70){label=26;break;}else{label=22;break;}
 case 22: 
 var $72=$1;
 var $73=HEAP8[($72)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=(($this+40)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($this+36)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(($78+$80)|0);
 HEAP32[(($66)>>2)]=$81;
 var $82=(($this+40)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($this+40)|0);
 var $85=HEAP32[(($84)>>2)];
 var $98=$85;var $97=$81;var $96=$83;label=25;break;
 case 24: 
 var $87=$1;
 var $88=(($87+1)|0);
 var $89=($73&255);
 var $90=$89>>>1;
 var $91=(($88+$90)|0);
 HEAP32[(($66)>>2)]=$91;
 var $92=$1;
 var $93=(($92+1)|0);
 var $94=$1;
 var $95=(($94+1)|0);
 var $98=$95;var $97=$91;var $96=$93;label=25;break;
 case 25: 
 var $96;
 var $97;
 var $98;
 var $99=(($this+8)|0);
 HEAP32[(($99)>>2)]=$96;
 var $100=(($this+12)|0);
 HEAP32[(($100)>>2)]=$98;
 var $101=(($this+16)|0);
 HEAP32[(($101)>>2)]=$97;
 label=26;break;
 case 26: 
 var $103=$68&16;
 var $104=($103|0)==0;
 if($104){label=43;break;}else{label=27;break;}
 case 27: 
 var $106=$1;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=28;break;}else{label=29;break;}
 case 28: 
 var $110=($107&255);
 var $111=$110>>>1;
 var $112=$1;
 var $113=(($112+1)|0);
 var $114=(($113+$111)|0);
 HEAP32[(($66)>>2)]=$114;
 var $127=10;var $126=$107;var $125=$111;label=30;break;
 case 29: 
 var $116=(($this+36)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($this+40)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+$117)|0);
 HEAP32[(($66)>>2)]=$120;
 var $121=(($1)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122&-2;
 var $phitmp=((($123)-(1))|0);
 var $124=(($122)&255);
 var $127=$phitmp;var $126=$124;var $125=$117;label=30;break;
 case 30: 
 var $125;
 var $126;
 var $127;
 var $128=$1;
 var $129=($126&255);
 var $130=$129&1;
 var $131=($130|0)==0;
 if($131){label=32;break;}else{label=31;break;}
 case 31: 
 var $133=(($this+36)|0);
 var $134=HEAP32[(($133)>>2)];
 var $137=$134;label=33;break;
 case 32: 
 var $136=$129>>>1;
 var $137=$136;label=33;break;
 case 33: 
 var $137;
 var $138=($137>>>0)<($127>>>0);
 if($138){label=34;break;}else{label=35;break;}
 case 34: 
 var $140=((($127)-($137))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($1,$140,0);
 label=38;break;
 case 35: 
 var $142=$126&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=37;break;}else{label=36;break;}
 case 36: 
 var $145=(($this+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($146+$127)|0);
 HEAP8[($147)]=0;
 var $148=(($this+36)|0);
 HEAP32[(($148)>>2)]=$127;
 label=38;break;
 case 37: 
 var $150=(($128+1+$127)|0);
 HEAP8[($150)]=0;
 var $151=$127<<1;
 var $152=(($151)&255);
 HEAP8[($106)]=$152;
 label=38;break;
 case 38: 
 var $153=HEAP8[($106)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=40;break;}else{label=39;break;}
 case 39: 
 var $157=(($this+40)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($this+40)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=(($this+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $170=$162;var $169=$158;var $168=$160;label=41;break;
 case 40: 
 var $164=(($128+1)|0);
 var $165=(($128+1)|0);
 var $166=($153&255);
 var $167=$166>>>1;
 var $170=$167;var $169=$164;var $168=$165;label=41;break;
 case 41: 
 var $168;
 var $169;
 var $170;
 var $171=(($168+$170)|0);
 var $172=(($this+24)|0);
 HEAP32[(($172)>>2)]=$169;
 var $173=(($this+20)|0);
 HEAP32[(($173)>>2)]=$169;
 var $174=(($this+28)|0);
 HEAP32[(($174)>>2)]=$171;
 var $175=HEAP32[(($67)>>2)];
 var $176=$175&3;
 var $177=($176|0)==0;
 if($177){label=43;break;}else{label=42;break;}
 case 42: 
 var $179=(($169+$125)|0);
 HEAP32[(($172)>>2)]=$179;
 label=43;break;
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114numeric_limitsIN5boost14multiprecision6numberINS2_8backends15cpp_int_backendILj1024ELj1024ELNS2_16cpp_integer_typeE1ELNS2_18cpp_int_check_typeE0EvEELNS2_26expression_template_optionE0EEEE3maxEv($agg_result){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(136);
 var $3=$1;
 var $4=$2;
 var $5=HEAP8[(19792)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=2;break;}else{label=4;break;}
 case 2: 
 var $8=___cxa_guard_acquire(19792);
 var $9=($8|0)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE0ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEC1IiEERKT_PNS_11enable_if_cIXaasr14is_convertibleINS0_6detail9canonicalISA_S6_E4typeES6_EE5valuentsr6detail24is_restricted_conversionISH_S6_EE5valueEvE4typeE($2,0);
 __ZN5boost14multiprecisioncoINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE0ELNS0_18cpp_int_check_typeE0EvEEEENS0_6numberIT_LNS0_26expression_template_optionE0EEERKSA_($1,$2);
 __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEC1INS3_ILj1024ELj1024ELS4_0ELS5_0EvEELS7_0EEERKNS1_IT_XT0_EEEPNS_11enable_if_cIXaasr5boost14is_convertibleISB_S6_EE5valuentsr6detail24is_restricted_conversionISB_S6_EE5valueEvE4typeE(16216,$1);
 label=4;break;
 case 4: 
 var $11=$agg_result;
 assert(136 % 1 === 0);(_memcpy($11, 16216, 136)|0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEC1INS3_ILj1024ELj1024ELS4_0ELS5_0EvEELS7_0EEERKNS1_IT_XT0_EEEPNS_11enable_if_cIXaasr5boost14is_convertibleISB_S6_EE5valuentsr6detail24is_restricted_conversionISB_S6_EE5valueEvE4typeE($this,$val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 HEAP32[(($0)>>2)]=0;
 var $1=(($this+128)|0);
 HEAP16[(($1)>>1)]=1;
 var $2=(($this+130)|0);
 HEAP8[($2)]=0;
 var $3=(($val+128)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4>>>0)>32;
 var $extract_t=(($4)&65535);
 var $_in_sroa_speculated_sroa_speculated_off0=($5?32:$extract_t);
 HEAP16[(($1)>>1)]=$_in_sroa_speculated_sroa_speculated_off0;
 var $6=$val;
 var $7=HEAP32[(($3)>>2)];
 var $8=($_in_sroa_speculated_sroa_speculated_off0&65535);
 var $9=($8>>>0)<($7>>>0);
 var $_=($9?$8:$7);
 var $10=(($6+($_<<2))|0);
 var $11=$10;
 var $12=$val;
 var $13=((($11)-($12))|0);
 var $14=$this;
 var $15=$val;
 _memmove($14,$15,$13,4,0);
 HEAP8[($2)]=0;
 var $_pre=HEAP16[(($1)>>1)];
 var $17=$_pre;label=2;break;
 case 2: 
 var $17;
 var $18=(($17<<16)>>16)==1;
 if($18){label=6;break;}else{label=3;break;}
 case 3: 
 var $20=($17&65535);
 var $21=((($20)-(1))|0);
 var $22=(($0+($21<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){label=4;break;}else{var $27=$17;label=5;break;}
 case 4: 
 var $26=((($17)-(1))&65535);
 HEAP16[(($1)>>1)]=$26;
 var $17=$26;label=2;break;
 case 5: 
 var $27;
 var $28=(($27<<16)>>16)==1;
 if($28){label=6;break;}else{label=8;break;}
 case 6: 
 var $29=HEAP32[(($0)>>2)];
 var $30=($29|0)==0;
 if($30){label=7;break;}else{label=8;break;}
 case 7: 
 HEAP8[($2)]=0;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecisioncoINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE0ELNS0_18cpp_int_check_typeE0EvEEEENS0_6numberIT_LNS0_26expression_template_optionE0EEERKSA_($agg_result,$v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $result=sp;
 var $1=$result;
 HEAP32[(($1)>>2)]=0;
 var $2=(($result+128)|0);
 var $3=(($v+128)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=32;
 var $5=$v;
 var $6=$result;
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $8=($storemerge_i>>>0)<($4>>>0);
 if($8){label=3;break;}else{label=4;break;}
 case 3: 
 var $10=(($5+($storemerge_i<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11^-1;
 var $13=(($6+($storemerge_i<<2))|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=((($storemerge_i)+(1))|0);
 var $storemerge_i=$14;label=2;break;
 case 4: 
 var $16=(($result+128)|0);
 var $storemerge1_i=$4;label=5;break;
 case 5: 
 var $storemerge1_i;
 var $18=HEAP32[(($16)>>2)];
 var $19=($storemerge1_i>>>0)<($18>>>0);
 if($19){label=6;break;}else{var $24=$18;label=7;break;}
 case 6: 
 var $21=(($6+($storemerge1_i<<2))|0);
 HEAP32[(($21)>>2)]=-1;
 var $22=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$22;label=5;break;
 case 7: 
 var $24;
 var $25=($24|0)==1;
 if($25){label=10;break;}else{label=8;break;}
 case 8: 
 var $27=((($24)-(1))|0);
 var $28=(($6+($27<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($16)>>2)]=$27;
 var $24=$27;label=7;break;
 case 10: 
 var $32=$agg_result;
 var $33=$result;
 assert(136 % 1 === 0);(_memcpy($32, $33, 136)|0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE0ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEC1IiEERKT_PNS_11enable_if_cIXaasr14is_convertibleINS0_6detail9canonicalISA_S6_E4typeES6_EE5valuentsr6detail24is_restricted_conversionISH_S6_EE5valueEvE4typeE($this,$v_val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($v_val|0)<0;
 if($1){label=3;break;}else{var $3=$v_val;label=2;break;}
 case 2: 
 var $3;
 var $4=$this;
 HEAP32[(($4)>>2)]=$3;
 var $5=(($this+128)|0);
 HEAP32[(($5)>>2)]=1;
 label=27;break;
 case 3: 
 var $7=(((-$v_val))|0);
 var $8=$this;
 HEAP32[(($8)>>2)]=$7;
 var $9=(($this+128)|0);
 HEAP32[(($9)>>2)]=1;
 var $10=($7|0)==0;
 if($10){label=27;break;}else{label=4;break;}
 case 4: 
 var $12=$this;
 var $storemerge_i_i_i_i_i=1;label=5;break;
 case 5: 
 var $storemerge_i_i_i_i_i;
 var $14=($storemerge_i_i_i_i_i>>>0)<32;
 if($14){label=6;break;}else{label=7;break;}
 case 6: 
 var $16=(($12+($storemerge_i_i_i_i_i<<2))|0);
 HEAP32[(($16)>>2)]=0;
 var $17=((($storemerge_i_i_i_i_i)+(1))|0);
 var $storemerge_i_i_i_i_i=$17;label=5;break;
 case 7: 
 HEAP32[(($9)>>2)]=32;
 var $storemerge1_i_i_i_i_i=0;label=8;break;
 case 8: 
 var $storemerge1_i_i_i_i_i;
 var $20=($storemerge1_i_i_i_i_i>>>0)<32;
 if($20){label=9;break;}else{label=10;break;}
 case 9: 
 var $22=(($12+($storemerge1_i_i_i_i_i<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$23^-1;
 HEAP32[(($22)>>2)]=$24;
 var $25=((($storemerge1_i_i_i_i_i)+(1))|0);
 var $storemerge1_i_i_i_i_i=$25;label=8;break;
 case 10: 
 var $_pre=HEAP32[(($9)>>2)];
 var $28=$_pre;label=11;break;
 case 11: 
 var $28;
 var $29=($28|0)==1;
 if($29){label=14;break;}else{label=12;break;}
 case 12: 
 var $31=((($28)-(1))|0);
 var $32=(($8+($31<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($9)>>2)]=$31;
 var $28=$31;label=11;break;
 case 14: 
 var $36=HEAP32[(($8)>>2)];
 var $37=($36|0)==-1;
 var $38=$this;
 if($37){label=16;break;}else{label=15;break;}
 case 15: 
 var $40=((($36)+(1))|0);
 HEAP32[(($38)>>2)]=$40;
 label=27;break;
 case 16: 
 var $42=(($this+128)|0);
 var $storemerge_i_i_i_i_i_i_i_i=0;var $44=0;var $carry_i_i_i_i_i_i_i_i_0$1=0;var $carry_i_i_i_i_i_i_i_i_0$0=1;label=17;break;
 case 17: 
 var $carry_i_i_i_i_i_i_i_i_0$0;
 var $carry_i_i_i_i_i_i_i_i_0$1;
 var $44;
 var $storemerge_i_i_i_i_i_i_i_i;
 if($44){label=20;break;}else{label=18;break;}
 case 18: 
 var $46=HEAP32[(($42)>>2)];
 var $47=($storemerge_i_i_i_i_i_i_i_i>>>0)<($46>>>0);
 if($47){label=19;break;}else{label=20;break;}
 case 19: 
 var $49=(($38+($storemerge_i_i_i_i_i_i_i_i<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $51$0=$50;
 var $51$1=0;
 var $52$0=_i64Add($carry_i_i_i_i_i_i_i_i_0$0,$carry_i_i_i_i_i_i_i_i_0$1,$51$0,$51$1);var $52$1=tempRet0;
 var $53$0=$52$0;
 var $53=$53$0;
 HEAP32[(($49)>>2)]=$53;
 var $54$0=$52$1;
 var $54$1=0;
 var $55=((($storemerge_i_i_i_i_i_i_i_i)+(1))|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $phitmp=(($54$0|0) == ($$etemp$0$0|0)) & (($54$1|0) == ($$etemp$0$1|0));
 var $storemerge_i_i_i_i_i_i_i_i=$55;var $44=$phitmp;var $carry_i_i_i_i_i_i_i_i_0$1=$54$1;var $carry_i_i_i_i_i_i_i_i_0$0=$54$0;label=17;break;
 case 20: 
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $56=(($carry_i_i_i_i_i_i_i_i_0$0|0) == ($$etemp$1$0|0)) & (($carry_i_i_i_i_i_i_i_i_0$1|0) == ($$etemp$1$1|0));
 if($56){label=23;break;}else{label=21;break;}
 case 21: 
 var $57=HEAP32[(($42)>>2)];
 var $58=((($57)+(1))|0);
 var $59=($58>>>0)>32;
 var $_=($59?32:$58);
 HEAP32[(($42)>>2)]=$_;
 var $60=($_>>>0)>($57>>>0);
 if($60){label=22;break;}else{label=23;break;}
 case 22: 
 var $62$0=$carry_i_i_i_i_i_i_i_i_0$0;
 var $62=$62$0;
 var $63=(($38+($57<<2))|0);
 HEAP32[(($63)>>2)]=$62;
 label=23;break;
 case 23: 
 var $_pre54=HEAP32[(($42)>>2)];
 var $65=$_pre54;label=24;break;
 case 24: 
 var $65;
 var $66=($65|0)==1;
 if($66){label=27;break;}else{label=25;break;}
 case 25: 
 var $68=((($65)-(1))|0);
 var $69=(($38+($68<<2))|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)==0;
 if($71){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP32[(($42)>>2)]=$68;
 var $65=$68;label=24;break;
 case 27: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecisionmiINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($agg_result,$a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $result=(sp)+(16);
 var $3=$result;
 HEAP32[(($3)>>2)]=0;
 var $4=(($result+128)|0);
 HEAP16[(($4)>>1)]=1;
 var $5=(($result+130)|0);
 HEAP8[($5)]=0;
 var $6=(($result)|0);
 var $7=(($a)|0);
 var $8=HEAP32[(($b)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=($8|0)==0;
 if($11){label=9;break;}else{label=2;break;}
 case 2: 
 var $13=($8|0)<0;
 if($13){label=3;break;}else{label=6;break;}
 case 3: 
 var $15=(((-$8))|0);
 HEAP32[(($1)>>2)]=$15;
 var $16=(($a+130)|0);
 var $17=HEAP8[($16)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=5;break;}else{label=4;break;}
 case 4: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$1);
 label=10;break;
 case 5: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$1);
 label=10;break;
 case 6: 
 HEAP32[(($2)>>2)]=$8;
 var $23=(($a+130)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=8;break;}else{label=7;break;}
 case 7: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$2);
 label=10;break;
 case 8: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$2);
 label=10;break;
 case 9: 
 var $29=(($a+128)|0);
 var $30=HEAP16[(($29)>>1)];
 var $31=($30&65535);
 var $32=($30&65535)>32;
 var $_=($32?32:$30);
 var $33=(($result+128)|0);
 HEAP16[(($33)>>1)]=$_;
 var $34=$a;
 var $35=(($34+($31<<2))|0);
 var $36=$35;
 var $37=$a;
 var $38=((($36)-($37))|0);
 var $39=$result;
 var $40=$a;
 assert($38 % 1 === 0);(_memcpy($39, $40, $38)|0);
 var $41=(($a+130)|0);
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($result+130)|0);
 HEAP8[($44)]=$43;
 label=10;break;
 case 10: 
 var $45=$agg_result;
 var $46=$result;
 assert(136 % 1 === 0);(_memcpy($45, $46, 136)|0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEaSINS0_6detail8functionENS0_11default_ops9powm_funcES8_S8_S8_EENS_9enable_ifINS_14is_convertibleINSA_10expressionIT_T0_T1_T2_T3_E11result_typeES8_EERS8_E4typeERKSM_($this,$e){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i_i_i_i_i_i_i_i=sp;
 var $y_i_i_i_i_i_i_i_i=(sp)+(264);
 var $b_i_i_i_i_i_i_i_i=(sp)+(528);
 var $t_i_i_i_i_i_i_i_i=(sp)+(792);
 var $x2_i_i_i_i_i_i_i_i=(sp)+(1056);
 var $1=(($e+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($e+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($e+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($this)|0);
 var $8=(($2)|0);
 var $9=(($4)|0);
 var $10=(($6)|0);
 var $11=$x_i_i_i_i_i_i_i_i;
 var $12=$y_i_i_i_i_i_i_i_i;
 var $13=$b_i_i_i_i_i_i_i_i;
 var $14=$t_i_i_i_i_i_i_i_i;
 var $15=$x2_i_i_i_i_i_i_i_i;
 var $16=$x_i_i_i_i_i_i_i_i;
 var $17=(($x_i_i_i_i_i_i_i_i+256)|0);
 var $18=(($x_i_i_i_i_i_i_i_i+258)|0);
 __ZN5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj1024ELj1024ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_11enable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($y_i_i_i_i_i_i_i_i,$8);
 __ZN5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj1024ELj1024ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_11enable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($b_i_i_i_i_i_i_i_i,$9);
 var $19=$t_i_i_i_i_i_i_i_i;
 HEAP32[(($19)>>2)]=0;
 var $20=(($t_i_i_i_i_i_i_i_i+256)|0);
 HEAP16[(($20)>>1)]=1;
 var $21=(($t_i_i_i_i_i_i_i_i+258)|0);
 HEAP8[($21)]=0;
 HEAP16[(($17)>>1)]=1;
 HEAP32[(($16)>>2)]=1;
 HEAP8[($18)]=0;
 var $22=(($b_i_i_i_i_i_i_i_i+256)|0);
 var $23=$b_i_i_i_i_i_i_i_i;
 var $24=(($b_i_i_i_i_i_i_i_i+258)|0);
 var $25=(($y_i_i_i_i_i_i_i_i+258)|0);
 var $26=(($y_i_i_i_i_i_i_i_i+256)|0);
 var $27=$y_i_i_i_i_i_i_i_i;
 var $_pre=HEAP16[(($22)>>1)];
 var $28=$_pre;label=2;break;
 case 2: 
 var $28;
 var $29=(($28<<16)>>16)==1;
 if($29){label=3;break;}else{label=4;break;}
 case 3: 
 var $30=HEAP32[(($23)>>2)];
 var $31=($30|0)==0;
 if($31){label=22;break;}else{label=4;break;}
 case 4: 
 var $32=HEAP8[($24)];
 var $33=$32&1;
 var $not_=(($33<<24)>>24)==0;
 if($not_){label=5;break;}else{label=22;break;}
 case 5: 
 var $35=(($28<<16)>>16)==0;
 if($35){label=11;break;}else{label=6;break;}
 case 6: 
 var $36=HEAP32[(($23)>>2)];
 var $37=$36&1;
 var $38=($37|0)==0;
 if($38){label=11;break;}else{label=7;break;}
 case 7: 
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($t_i_i_i_i_i_i_i_i,$x_i_i_i_i_i_i_i_i,$y_i_i_i_i_i_i_i_i);
 var $40=HEAP8[($21)];
 var $41=$40&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_(0,$t_i_i_i_i_i_i_i_i,$10,$x_i_i_i_i_i_i_i_i);
 var $42=(($41<<24)>>24)==0;
 HEAP8[($18)]=$41;
 if($42){label=11;break;}else{label=8;break;}
 case 8: 
 var $44=HEAP16[(($17)>>1)];
 var $45=(($44<<16)>>16)==1;
 if($45){label=9;break;}else{label=11;break;}
 case 9: 
 var $47=HEAP32[(($16)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP8[($18)]=0;
 label=11;break;
 case 11: 
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($t_i_i_i_i_i_i_i_i,$y_i_i_i_i_i_i_i_i,$y_i_i_i_i_i_i_i_i);
 var $50=HEAP8[($21)];
 var $51=$50&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_(0,$t_i_i_i_i_i_i_i_i,$10,$y_i_i_i_i_i_i_i_i);
 var $52=(($51<<24)>>24)==0;
 HEAP8[($25)]=$51;
 if($52){label=15;break;}else{label=12;break;}
 case 12: 
 var $54=HEAP16[(($26)>>1)];
 var $55=(($54<<16)>>16)==1;
 if($55){label=13;break;}else{label=15;break;}
 case 13: 
 var $57=HEAP32[(($27)>>2)];
 var $58=($57|0)==0;
 if($58){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP8[($25)]=0;
 label=15;break;
 case 15: 
 var $60=($28&65535);
 var $61=(($28<<16)>>16)==0;
 if($61){label=16;break;}else{label=17;break;}
 case 16: 
 HEAP16[(($22)>>1)]=1;
 HEAP32[(($23)>>2)]=0;
 HEAP8[($24)]=0;
 var $28=1;label=2;break;
 case 17: 
 var $63=((($60)-(1))|0);
 var $64=(($23+($63<<2))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65>>>0)<2;
 var $_=($66?$63:$60);
 var $67=($_|0)==0;
 if($67){label=18;break;}else{var $i_i_i_i_i_i_i_i_i_i_0=0;label=19;break;}
 case 18: 
 HEAP16[(($22)>>1)]=1;
 HEAP32[(($23)>>2)]=0;
 HEAP8[($24)]=0;
 var $28=1;label=2;break;
 case 19: 
 var $i_i_i_i_i_i_i_i_i_i_0;
 var $69=((($i_i_i_i_i_i_i_i_i_i_0)+(1))|0);
 var $70=($69>>>0)<($60>>>0);
 var $71=(($23+($i_i_i_i_i_i_i_i_i_i_0<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=$72>>>1;
 if($70){label=20;break;}else{label=21;break;}
 case 20: 
 var $75=(($23+($69<<2))|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=$76<<31;
 var $78=$73|$77;
 HEAP32[(($71)>>2)]=$78;
 var $i_i_i_i_i_i_i_i_i_i_0=$69;label=19;break;
 case 21: 
 HEAP32[(($71)>>2)]=$73;
 var $79=($_>>>0)>64;
 var $extract_t=(($_)&65535);
 var $_extract_t=($79?64:$extract_t);
 HEAP16[(($22)>>1)]=$_extract_t;
 var $28=$_extract_t;label=2;break;
 case 22: 
 __ZN5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj2048ELj2048ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_12disable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($x2_i_i_i_i_i_i_i_i,$x_i_i_i_i_i_i_i_i);
 var $80=(($x2_i_i_i_i_i_i_i_i+130)|0);
 var $81=HEAP8[($80)];
 var $82=$81&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_(0,$x2_i_i_i_i_i_i_i_i,$10,$7);
 var $83=(($82<<24)>>24)==0;
 var $84=(($this+130)|0);
 HEAP8[($84)]=$82;
 if($83){label=26;break;}else{label=23;break;}
 case 23: 
 var $86=(($this+128)|0);
 var $87=HEAP16[(($86)>>1)];
 var $88=(($87<<16)>>16)==1;
 if($88){label=24;break;}else{label=26;break;}
 case 24: 
 var $90=$this;
 var $91=HEAP32[(($90)>>2)];
 var $92=($91|0)==0;
 if($92){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP8[($84)]=0;
 label=26;break;
 case 26: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj1024ELj1024ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_11enable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($this,$other){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 HEAP32[(($0)>>2)]=0;
 var $1=(($this+256)|0);
 HEAP16[(($1)>>1)]=1;
 var $2=(($this+258)|0);
 HEAP8[($2)]=0;
 var $3=(($other+128)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535)>64;
 var $_=($5?64:$4);
 HEAP16[(($1)>>1)]=$_;
 var $6=$other;
 var $7=HEAP16[(($3)>>1)];
 var $8=($_&65535)<($7&65535);
 var $_in1_sroa_speculated_sroa_speculated_in=($8?$_:$7);
 var $_in1_sroa_speculated_sroa_speculated=($_in1_sroa_speculated_sroa_speculated_in&65535);
 var $9=(($6+($_in1_sroa_speculated_sroa_speculated<<2))|0);
 var $10=$9;
 var $11=$other;
 var $12=((($10)-($11))|0);
 var $13=$this;
 var $14=$other;
 _memmove($13,$14,$12,4,0);
 var $15=(($other+130)|0);
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)!=0;
 HEAP8[($2)]=$17;
 var $_pre_pre=HEAP16[(($1)>>1)];
 var $19=(($_pre_pre<<16)>>16)==1;
 var $or_cond=$18&$19;
 if($or_cond){label=2;break;}else{var $24=$_pre_pre;label=4;break;}
 case 2: 
 var $21=HEAP32[(($0)>>2)];
 var $22=($21|0)==0;
 if($22){label=3;break;}else{var $24=1;label=4;break;}
 case 3: 
 HEAP8[($2)]=0;
 var $24=1;label=4;break;
 case 4: 
 var $24;
 var $25=(($24<<16)>>16)==1;
 if($25){label=8;break;}else{label=5;break;}
 case 5: 
 var $27=($24&65535);
 var $28=((($27)-(1))|0);
 var $29=(($0+($28<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=6;break;}else{var $34=$24;label=7;break;}
 case 6: 
 var $33=((($24)-(1))&65535);
 HEAP16[(($1)>>1)]=$33;
 var $24=$33;label=4;break;
 case 7: 
 var $34;
 var $35=(($34<<16)>>16)==1;
 if($35){label=8;break;}else{label=10;break;}
 case 8: 
 var $36=HEAP32[(($0)>>2)];
 var $37=($36|0)==0;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP8[($2)]=0;
 label=10;break;
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($result,$a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $l=sp;
 var $l2=(sp)+(8);
 var $t=(sp)+(16);
 var $t3=(sp)+(280);
 var $1=(($a+256)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=(($b+256)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=$a;
 var $8=$b;
 var $9=(($2<<16)>>16)==1;
 if($9){label=2;break;}else{label=9;break;}
 case 2: 
 var $11=(($b+258)|0);
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)!=0;
 var $15=(($a+258)|0);
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)!=0;
 var $19=$14^$18;
 var $20=($19&1);
 var $21=(($5<<16)>>16)==1;
 var $22=HEAP32[(($7)>>2)];
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 var $24$0=$22;
 var $24$1=0;
 var $25=HEAP32[(($8)>>2)];
 var $26$0=$25;
 var $26$1=0;
 var $27$0=___muldi3($24$0,$24$1,$26$0,$26$1);var $27$1=tempRet0;
 var $28=$result;
 var $29$0=$27$0;
 var $29=$29$0;
 HEAP32[(($28)>>2)]=$29;
 var $30$0=$27$1;
 var $30$1=0;
 var $31$0=$30$0;
 var $31=$31$0;
 var $32=(($28+4)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=($31|0)!=0;
 var $34=($33?2:1);
 var $35=(($result+256)|0);
 HEAP16[(($35)>>1)]=$34;
 var $36=(($result+258)|0);
 HEAP8[($36)]=0;
 var $_pre_phi=$36;label=5;break;
 case 4: 
 HEAP32[(($l)>>2)]=$22;
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($result,$b,$l);
 var $_pre86=(($result+258)|0);
 var $_pre_phi=$_pre86;label=5;break;
 case 5: 
 var $_pre_phi;
 HEAP8[($_pre_phi)]=$20;
 if($19){label=6;break;}else{label=41;break;}
 case 6: 
 var $40=(($result+256)|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=(($41<<16)>>16)==1;
 if($42){label=7;break;}else{label=41;break;}
 case 7: 
 var $44=$result;
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==0;
 if($46){label=8;break;}else{label=41;break;}
 case 8: 
 HEAP8[($_pre_phi)]=0;
 label=41;break;
 case 9: 
 var $49=(($5<<16)>>16)==1;
 if($49){label=10;break;}else{label=14;break;}
 case 10: 
 var $51=(($b+258)|0);
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)!=0;
 var $55=(($a+258)|0);
 var $56=HEAP8[($55)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)!=0;
 var $59=$54^$58;
 var $60=($59&1);
 var $61=HEAP32[(($8)>>2)];
 HEAP32[(($l2)>>2)]=$61;
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($result,$a,$l2);
 var $62=(($result+258)|0);
 HEAP8[($62)]=$60;
 if($59){label=11;break;}else{label=41;break;}
 case 11: 
 var $64=(($result+256)|0);
 var $65=HEAP16[(($64)>>1)];
 var $66=(($65<<16)>>16)==1;
 if($66){label=12;break;}else{label=41;break;}
 case 12: 
 var $68=$result;
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){label=13;break;}else{label=41;break;}
 case 13: 
 HEAP8[($62)]=0;
 label=41;break;
 case 14: 
 var $73=($result|0)==($a|0);
 if($73){label=15;break;}else{label=16;break;}
 case 15: 
 var $75=$t;
 var $76=$a;
 assert(264 % 1 === 0);(_memcpy($75, $76, 264)|0);
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($a,$t,$b);
 label=41;break;
 case 16: 
 var $78=($result|0)==($b|0);
 if($78){label=17;break;}else{label=18;break;}
 case 17: 
 var $80=$t3;
 var $81=$b;
 assert(264 % 1 === 0);(_memcpy($80, $81, 264)|0);
 __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($b,$a,$t3);
 label=41;break;
 case 18: 
 var $82=((($3)+($6))|0);
 var $83=($82>>>0)>64;
 var $extract_t=(($82)&65535);
 var $_extract_t=($83?64:$extract_t);
 var $84=(($result+256)|0);
 HEAP16[(($84)>>1)]=$_extract_t;
 var $85=$result;
 var $86=$result;
 var $87=($_extract_t&65535);
 var $88=$87<<2;
 _memset($86, 0, $88)|0;
 var $storemerge=0;label=19;break;
 case 19: 
 var $storemerge;
 var $90=($storemerge>>>0)<($3>>>0);
 var $91=HEAP16[(($84)>>1)];
 if($90){label=20;break;}else{var $136=$91;label=32;break;}
 case 20: 
 var $92=($91&65535);
 var $93=((($92)-($storemerge))|0);
 var $94=($6>>>0)<($93>>>0);
 var $_=($94?$6:$93);
 var $95=(($7+($storemerge<<2))|0);
 var $storemerge1=0;var $carry_1$1=0;var $carry_1$0=0;label=21;break;
 case 21: 
 var $carry_1$0;
 var $carry_1$1;
 var $storemerge1;
 var $97=($storemerge1>>>0)<($_>>>0);
 if($97){label=22;break;}else{label=29;break;}
 case 22: 
 var $99=((($storemerge)+($storemerge1))|0);
 var $100=HEAP16[(($84)>>1)];
 var $101=($100&65535);
 var $102=($99>>>0)<($101>>>0);
 if($102){label=25;break;}else{label=23;break;}
 case 23: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2432,2360,132,3624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=42;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $106=HEAP32[(($95)>>2)];
 var $107$0=$106;
 var $107$1=0;
 var $108=(($8+($storemerge1<<2))|0);
 var $109=HEAP32[(($108)>>2)];
 var $110$0=$109;
 var $110$1=0;
 var $111$0=___muldi3($107$0,$107$1,$110$0,$110$1);var $111$1=tempRet0;
 var $112$0=_i64Add($carry_1$0,$carry_1$1,$111$0,$111$1);var $112$1=tempRet0;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $113$0=$112$0^$$etemp$0$0;
 var $113$1=$112$1^$$etemp$0$1;
 var $114=(($85+($99<<2))|0);
 var $115=HEAP32[(($114)>>2)];
 var $116$0=$115;
 var $116$1=0;
 var $117=(($116$1>>>0) > ($113$1>>>0)) | (((($116$1>>>0) == ($113$1>>>0) & ($116$0>>>0) >  ($113$0>>>0))));
 if($117){label=26;break;}else{label=28;break;}
 case 26: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2224,2360,138,3624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=42;break; }
 case 27: 
 throw "Reached an unreachable!";
 case 28: 
 var $121$0=_i64Add($112$0,$112$1,$116$0,$116$1);var $121$1=tempRet0;
 var $122$0=$121$0;
 var $122=$122$0;
 HEAP32[(($114)>>2)]=$122;
 var $123$0=$121$1;
 var $123$1=0;
 var $124=((($storemerge1)+(1))|0);
 var $storemerge1=$124;var $carry_1$1=$123$1;var $carry_1$0=$123$0;label=21;break;
 case 29: 
 var $126=((($storemerge)+($6))|0);
 var $127=HEAP16[(($84)>>1)];
 var $128=($127&65535);
 var $129=($126>>>0)<($128>>>0);
 if($129){label=30;break;}else{label=31;break;}
 case 30: 
 var $131$0=$carry_1$0;
 var $131=$131$0;
 var $132=(($85+($126<<2))|0);
 HEAP32[(($132)>>2)]=$131;
 label=31;break;
 case 31: 
 var $134=((($storemerge)+(1))|0);
 var $storemerge=$134;label=19;break;
 case 32: 
 var $136;
 var $137=(($136<<16)>>16)==1;
 if($137){var $148=1;label=36;break;}else{label=33;break;}
 case 33: 
 var $139=($136&65535);
 var $140=((($139)-(1))|0);
 var $141=(($85+($140<<2))|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=34;break;}else{var $146=$136;label=35;break;}
 case 34: 
 var $145=((($136)-(1))&65535);
 HEAP16[(($84)>>1)]=$145;
 var $136=$145;label=32;break;
 case 35: 
 var $146;
 var $147=(($146<<16)>>16)==1;
 if($147){var $148=$147;label=36;break;}else{var $153=$147;label=38;break;}
 case 36: 
 var $148;
 var $149=HEAP32[(($85)>>2)];
 var $150=($149|0)==0;
 if($150){label=37;break;}else{var $153=$148;label=38;break;}
 case 37: 
 var $152=(($result+258)|0);
 HEAP8[($152)]=0;
 var $153=$148;label=38;break;
 case 38: 
 var $153;
 var $154=(($a+258)|0);
 var $155=HEAP8[($154)];
 var $156=$155&1;
 var $157=(($156<<24)>>24)!=0;
 var $158=(($b+258)|0);
 var $159=HEAP8[($158)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)!=0;
 var $162=$157^$161;
 var $163=(($result+258)|0);
 var $164=($162&1);
 HEAP8[($163)]=$164;
 var $_not=$162^1;
 var $_not87=$153^1;
 var $brmerge=$_not|$_not87;
 if($brmerge){label=41;break;}else{label=39;break;}
 case 39: 
 var $166=HEAP32[(($85)>>2)];
 var $167=($166|0)==0;
 if($167){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP8[($163)]=0;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
 case 42: 
 var $170$0 = ___cxa_find_matching_catch(-1, -1,0); var $170$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEC1ILj2048ELj2048ELS3_1ELS4_0EvEERKNS2_IXT_EXT0_EXT1_EXT2_ET3_EEPNS_12disable_if_cIXsr30is_implicit_cpp_int_conversionIS8_S5_EE5valueEvE4typeE($this,$other){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=$this;
 HEAP32[(($0)>>2)]=0;
 var $1=(($this+128)|0);
 HEAP16[(($1)>>1)]=1;
 var $2=(($this+130)|0);
 HEAP8[($2)]=0;
 var $3=(($other+256)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535)>32;
 var $_=($5?32:$4);
 HEAP16[(($1)>>1)]=$_;
 var $6=$other;
 var $7=HEAP16[(($3)>>1)];
 var $8=($_&65535)<($7&65535);
 var $_in1_sroa_speculated_sroa_speculated_in=($8?$_:$7);
 var $_in1_sroa_speculated_sroa_speculated=($_in1_sroa_speculated_sroa_speculated_in&65535);
 var $9=(($6+($_in1_sroa_speculated_sroa_speculated<<2))|0);
 var $10=$9;
 var $11=$other;
 var $12=((($10)-($11))|0);
 var $13=$this;
 var $14=$other;
 _memmove($13,$14,$12,4,0);
 var $15=(($other+258)|0);
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)!=0;
 HEAP8[($2)]=$17;
 var $_pre_pre=HEAP16[(($1)>>1)];
 var $19=(($_pre_pre<<16)>>16)==1;
 var $or_cond=$18&$19;
 if($or_cond){label=2;break;}else{var $24=$_pre_pre;label=4;break;}
 case 2: 
 var $21=HEAP32[(($0)>>2)];
 var $22=($21|0)==0;
 if($22){label=3;break;}else{var $24=1;label=4;break;}
 case 3: 
 HEAP8[($2)]=0;
 var $24=1;label=4;break;
 case 4: 
 var $24;
 var $25=(($24<<16)>>16)==1;
 if($25){label=8;break;}else{label=5;break;}
 case 5: 
 var $27=($24&65535);
 var $28=((($27)-(1))|0);
 var $29=(($0+($28<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=6;break;}else{var $34=$24;label=7;break;}
 case 6: 
 var $33=((($24)-(1))&65535);
 HEAP16[(($1)>>1)]=$33;
 var $24=$33;label=4;break;
 case 7: 
 var $34;
 var $35=(($34<<16)>>16)==1;
 if($35){label=8;break;}else{label=10;break;}
 case 8: 
 var $36=HEAP32[(($0)>>2)];
 var $37=($36|0)==0;
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP8[($2)]=0;
 label=10;break;
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_($result,$x,$y,$r){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+928)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t=sp;
 var $t1=(sp)+(264);
 var $rem=(sp)+(400);
 var $t2=(sp)+(664);
 var $1=($result|0)==($x|0);
 var $2=($r|0)==($x|0);
 var $or_cond1107=$1|$2;
 if($or_cond1107){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$t;
 var $5=$x;
 assert(264 % 1 === 0);(_memcpy($4, $5, 264)|0);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_($result,$t,$y,$r);
 label=263;break;
 case 3: 
 var $7=$y;
 var $8=($7|0)==($result|0);
 var $9=($7|0)==($r|0);
 var $or_cond1108=$8|$9;
 if($or_cond1108){label=4;break;}else{label=5;break;}
 case 4: 
 var $11=$t1;
 var $12=$y;
 assert(136 % 1 === 0);(_memcpy($11, $12, 136)|0);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_($result,$x,$t1,$r);
 label=263;break;
 case 5: 
 var $14=($result|0)==($r|0);
 if($14){label=6;break;}else{label=7;break;}
 case 6: 
 var $15=$rem;
 HEAP32[(($15)>>2)]=0;
 var $16=(($rem+256)|0);
 HEAP16[(($16)>>1)]=1;
 var $17=(($rem+258)|0);
 HEAP8[($17)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_NS3_ILj1024ELj1024ELS4_1ELS5_0EvEEEEvPT_RKT0_RKT1_RS8_($result,$x,$y,$rem);
 var $18=(($rem+256)|0);
 var $19=HEAP16[(($18)>>1)];
 var $20=($19&65535);
 var $21=($19&65535)>64;
 var $_=($21?64:$19);
 var $22=(($result+256)|0);
 HEAP16[(($22)>>1)]=$_;
 var $23=$rem;
 var $24=(($23+($20<<2))|0);
 var $25=$24;
 var $26=$rem;
 var $27=((($25)-($26))|0);
 var $28=$result;
 var $29=$rem;
 assert($27 % 1 === 0);(_memcpy($28, $29, $27)|0);
 var $30=(($rem+258)|0);
 var $31=HEAP8[($30)];
 var $32=$31&1;
 var $33=(($result+258)|0);
 HEAP8[($33)]=$32;
 label=263;break;
 case 7: 
 var $35=(($y+128)|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=($36&65535);
 var $38=((($37)-(1))|0);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$y;
 var $42=HEAP32[(($41)>>2)];
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$x,$42,$r);
 label=263;break;
 case 9: 
 var $44=$x;
 var $45=$y;
 var $46=(($x+256)|0);
 var $47=HEAP16[(($46)>>1)];
 var $48=($47&65535);
 var $49=((($48)-(1))|0);
 var $50=($49|0)==0;
 if($50){label=10;break;}else{label=13;break;}
 case 10: 
 var $52=HEAP32[(($44)>>2)];
 var $53=($52|0)==0;
 if($53){label=11;break;}else{label=13;break;}
 case 11: 
 var $54=(($x+256)|0);
 var $55=($47&65535)>64;
 var $_1109=($55?64:$47);
 var $56=(($r+256)|0);
 HEAP16[(($56)>>1)]=$_1109;
 var $57=$x;
 var $58=HEAP16[(($54)>>1)];
 var $59=($58&65535);
 var $60=(($57+($59<<2))|0);
 var $61=$60;
 var $62=$x;
 var $63=((($61)-($62))|0);
 var $64=$r;
 var $65=$x;
 _memmove($64,$65,$63,4,0);
 var $66=(($x+258)|0);
 var $67=HEAP8[($66)];
 var $68=$67&1;
 var $69=(($r+258)|0);
 HEAP8[($69)]=$68;
 var $70=($result|0)==0;
 if($70){label=263;break;}else{label=12;break;}
 case 12: 
 var $71=(($x+256)|0);
 var $72=HEAP16[(($71)>>1)];
 var $73=($72&65535)>64;
 var $_1110=($73?64:$72);
 var $74=(($result+256)|0);
 HEAP16[(($74)>>1)]=$_1110;
 var $75=$x;
 var $76=HEAP16[(($71)>>1)];
 var $77=($76&65535);
 var $78=(($75+($77<<2))|0);
 var $79=$78;
 var $80=$x;
 var $81=((($79)-($80))|0);
 var $82=$result;
 var $83=$x;
 _memmove($82,$83,$81,4,0);
 var $84=(($x+258)|0);
 var $85=HEAP8[($84)];
 var $86=$85&1;
 var $87=(($result+258)|0);
 HEAP8[($87)]=$86;
 label=263;break;
 case 13: 
 var $88=(($x+256)|0);
 var $89=($47&65535)>64;
 var $_1111=($89?64:$47);
 var $90=(($r+256)|0);
 HEAP16[(($90)>>1)]=$_1111;
 var $91=$x;
 var $92=HEAP16[(($88)>>1)];
 var $93=($92&65535);
 var $94=(($91+($93<<2))|0);
 var $95=$94;
 var $96=$x;
 var $97=((($95)-($96))|0);
 var $98=$r;
 var $99=$x;
 _memmove($98,$99,$97,4,0);
 var $100=(($x+258)|0);
 var $101=HEAP8[($100)];
 var $102=$101&1;
 var $103=(($r+258)|0);
 HEAP8[($103)]=$102;
 HEAP8[($103)]=0;
 var $104=($result|0)==0;
 if($104){label=15;break;}else{label=14;break;}
 case 14: 
 var $106=(($result+256)|0);
 HEAP16[(($106)>>1)]=1;
 var $107=$result;
 HEAP32[(($107)>>2)]=0;
 var $108=(($result+258)|0);
 HEAP8[($108)]=0;
 label=15;break;
 case 15: 
 var $110=($49>>>0)>($38>>>0);
 if($110){label=18;break;}else{label=16;break;}
 case 16: 
 var $112=($49>>>0)<($38>>>0);
 if($112){label=263;break;}else{label=17;break;}
 case 17: 
 var $114=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $115=($114|0)<0;
 if($115){label=263;break;}else{label=18;break;}
 case 18: 
 var $117=$t2;
 HEAP32[(($117)>>2)]=0;
 var $118=(($t2+256)|0);
 HEAP16[(($118)>>1)]=1;
 var $119=(($t2+258)|0);
 HEAP8[($119)]=0;
 if($50){label=19;break;}else{label=22;break;}
 case 19: 
 if($104){label=21;break;}else{label=20;break;}
 case 20: 
 var $122=HEAP32[(($44)>>2)];
 var $123=HEAP32[(($45)>>2)];
 var $124=(((($122>>>0))/(($123>>>0)))&-1);
 var $125=(($result+256)|0);
 HEAP16[(($125)>>1)]=1;
 var $126=$result;
 HEAP32[(($126)>>2)]=$124;
 var $127=(($result+258)|0);
 HEAP8[($127)]=0;
 label=21;break;
 case 21: 
 var $129=HEAP32[(($44)>>2)];
 var $130=HEAP32[(($45)>>2)];
 var $131=(((($129>>>0))%(($130>>>0)))&-1);
 var $132=(($r+256)|0);
 HEAP16[(($132)>>1)]=1;
 var $133=$r;
 HEAP32[(($133)>>2)]=$131;
 HEAP8[($103)]=0;
 label=263;break;
 case 22: 
 var $135=($49|0)==1;
 if($135){label=23;break;}else{label=26;break;}
 case 23: 
 var $137=(($44+4)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139$0=$138;
 var $139$1=0;
 var $140$0=0;
 var $140$1=$139$0;
 var $141=HEAP32[(($44)>>2)];
 var $142$0=$141;
 var $142$1=0;
 var $143$0=$140$0|$142$0;
 var $143$1=$140$1|$142$1;
 var $144=(($45+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146$0=$145;
 var $146$1=0;
 var $147$0=0;
 var $147$1=$146$0;
 var $148=HEAP32[(($45)>>2)];
 var $149$0=$148;
 var $149$1=0;
 var $150$0=$147$0|$149$0;
 var $150$1=$147$1|$149$1;
 if($104){label=25;break;}else{label=24;break;}
 case 24: 
 var $152$0=___udivdi3($143$0,$143$1,$150$0,$150$1);var $152$1=tempRet0;
 var $153=$result;
 var $154$0=$152$0;
 var $154=$154$0;
 HEAP32[(($153)>>2)]=$154;
 var $155$0=$152$1;
 var $155$1=0;
 var $156$0=$155$0;
 var $156=$156$0;
 var $157=(($153+4)|0);
 HEAP32[(($157)>>2)]=$156;
 var $158=($156|0)!=0;
 var $159=($158?2:1);
 var $160=(($result+256)|0);
 HEAP16[(($160)>>1)]=$159;
 var $161=(($result+258)|0);
 HEAP8[($161)]=0;
 label=25;break;
 case 25: 
 var $163$0=___uremdi3($143$0,$143$1,$150$0,$150$1);var $163$1=tempRet0;
 var $164=$r;
 var $165$0=$163$0;
 var $165=$165$0;
 HEAP32[(($164)>>2)]=$165;
 var $166$0=$163$1;
 var $166$1=0;
 var $167$0=$166$0;
 var $167=$167$0;
 var $168=(($164+4)|0);
 HEAP32[(($168)>>2)]=$167;
 var $169=($167|0)!=0;
 var $170=($169?2:1);
 var $171=(($r+256)|0);
 HEAP16[(($171)>>1)]=$170;
 HEAP8[($103)]=0;
 label=263;break;
 case 26: 
 if($104){label=27;break;}else{label=28;break;}
 case 27: 
 var $173=$r;
 var $_pre1082=(($result+256)|0);
 var $pr_0=0;var $prem_0=$173;var $_pre_phi=$_pre1082;label=31;break;
 case 28: 
 var $175=((($48)-($38))|0);
 var $176=($175>>>0)>64;
 var $extract_t=(($175)&65535);
 var $_extract_t=($176?64:$extract_t);
 var $177=(($result+256)|0);
 HEAP16[(($177)>>1)]=$_extract_t;
 var $178=$r;
 var $179=$result;
 var $storemerge5=1;label=29;break;
 case 29: 
 var $storemerge5;
 var $181=($storemerge5>>>0)<($175>>>0);
 if($181){label=30;break;}else{var $pr_0=$179;var $prem_0=$178;var $_pre_phi=$177;label=31;break;}
 case 30: 
 var $183=(($179+($storemerge5<<2))|0);
 HEAP32[(($183)>>2)]=0;
 var $184=((($storemerge5)+(1))|0);
 var $storemerge5=$184;label=29;break;
 case 31: 
 var $_pre_phi;
 var $prem_0;
 var $pr_0;
 var $185=(($45+($38<<2))|0);
 var $186=((($37)-(2))|0);
 var $187=(($45+($186<<2))|0);
 var $188=(($r+256)|0);
 var $189=(($t2+256)|0);
 var $190=$r;
 var $191=$t2;
 var $192=(($t2+258)|0);
 var $193=$r;
 var $194=(($result+258)|0);
 var $first_pass_0=1;var $prem_1=$prem_0;var $r_neg_0=0;var $r_order_0=$49;label=32;break;
 case 32: 
 var $r_order_0;
 var $r_neg_0;
 var $prem_1;
 var $first_pass_0;
 var $195=(($prem_1+($r_order_0<<2))|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=HEAP32[(($185)>>2)];
 var $198=($196>>>0)>($197>>>0);
 var $199=($r_order_0|0)==0;
 if($198){label=36;break;}else{label=33;break;}
 case 33: 
 if($199){label=37;break;}else{label=34;break;}
 case 34: 
 var $202$0=$196;
 var $202$1=0;
 var $203$0=0;
 var $203$1=$202$0;
 var $204=((($r_order_0)-(1))|0);
 var $205=(($prem_1+($204<<2))|0);
 var $206=HEAP32[(($205)>>2)];
 var $207$0=$206;
 var $207$1=0;
 var $208$0=$203$0|$207$0;
 var $208$1=$203$1|$207$1;
 var $209$0=$197;
 var $209$1=0;
 var $210$0=___udivdi3($208$0,$208$1,$209$0,$209$1);var $210$1=tempRet0;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $211=(($210$1>>>0) > ($$etemp$0$1>>>0)) | (((($210$1>>>0) == ($$etemp$0$1>>>0) & ($210$0>>>0) >  ($$etemp$0$0>>>0))));
 if($211){var $guess_1=1;var $r_order_2=$r_order_0;label=41;break;}else{label=35;break;}
 case 35: 
 var $213$0=$210$0;
 var $213=$213$0;
 var $guess_0=$213;var $r_order_1=$204;label=39;break;
 case 36: 
 if($199){label=37;break;}else{label=38;break;}
 case 37: 
 var $215=HEAP32[(($prem_1)>>2)];
 var $216=(((($215>>>0))/(($197>>>0)))&-1);
 var $guess_0=$216;var $r_order_1=$r_order_0;label=39;break;
 case 38: 
 var $218$0=$196;
 var $218$1=0;
 var $219$0=0;
 var $219$1=$218$0;
 var $220=((($r_order_0)-(1))|0);
 var $221=(($prem_1+($220<<2))|0);
 var $222=HEAP32[(($221)>>2)];
 var $223$0=$222;
 var $223$1=0;
 var $224$0=$219$0|$223$0;
 var $224$1=$219$1|$223$1;
 var $225$0=$197;
 var $225$1=0;
 var $226$0=0;
 var $226$1=$225$0;
 var $227=HEAP32[(($187)>>2)];
 var $228$0=$227;
 var $228$1=0;
 var $229$0=$226$0|$228$0;
 var $229$1=$226$1|$228$1;
 var $230$0=___udivdi3($224$0,$224$1,$229$0,$229$1);var $230$1=tempRet0;
 var $231$0=$230$0;
 var $231=$231$0;
 var $guess_0=$231;var $r_order_1=$r_order_0;label=39;break;
 case 39: 
 var $r_order_1;
 var $guess_0;
 var $233=($guess_0|0)==0;
 if($233){label=40;break;}else{var $guess_1=$guess_0;var $r_order_2=$r_order_1;label=41;break;}
 case 40: 
 ___assert_fail(3032,2856,186,3576);
 throw "Reached an unreachable!";
 case 41: 
 var $r_order_2;
 var $guess_1;
 var $235=((($r_order_2)-($38))|0);
 if($104){label=59;break;}else{label=42;break;}
 case 42: 
 var $237=$r_neg_0&1;
 var $238=(($237<<24)>>24)==0;
 var $239=(($pr_0+($235<<2))|0);
 var $240=HEAP32[(($239)>>2)];
 if($238){label=51;break;}else{label=43;break;}
 case 43: 
 var $242=($240>>>0)>($guess_1>>>0);
 if($242){label=44;break;}else{label=45;break;}
 case 44: 
 var $244=((($240)-($guess_1))|0);
 HEAP32[(($239)>>2)]=$244;
 label=59;break;
 case 45: 
 var $245=((($235)+(1))|0);
 var $246=($245>>>0)>64;
 var $extract_t1088=(($245)&65535);
 var $_extract_t1088=($246?64:$extract_t1088);
 HEAP16[(($118)>>1)]=$_extract_t1088;
 var $247=(($117+($235<<2))|0);
 HEAP32[(($247)>>2)]=$guess_1;
 var $storemerge4=0;label=46;break;
 case 46: 
 var $storemerge4;
 var $249=($storemerge4>>>0)<($235>>>0);
 if($249){label=47;break;}else{label=48;break;}
 case 47: 
 var $251=(($117+($storemerge4<<2))|0);
 HEAP32[(($251)>>2)]=0;
 var $252=((($storemerge4)+(1))|0);
 var $storemerge4=$252;label=46;break;
 case 48: 
 var $254=HEAP8[($194)];
 var $255=$254&1;
 var $256=(($255<<24)>>24)!=0;
 var $257=HEAP8[($119)];
 var $258=$257&1;
 var $259=(($258<<24)>>24)!=0;
 var $260=$256^$259;
 if($260){label=49;break;}else{label=50;break;}
 case 49: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 50: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 51: 
 var $264=$240^-1;
 var $265=($guess_1>>>0)<($264>>>0);
 if($265){label=52;break;}else{label=53;break;}
 case 52: 
 var $267=((($240)+($guess_1))|0);
 HEAP32[(($239)>>2)]=$267;
 label=59;break;
 case 53: 
 var $268=((($235)+(1))|0);
 var $269=($268>>>0)>64;
 var $extract_t1100=(($268)&65535);
 var $_extract_t1100=($269?64:$extract_t1100);
 HEAP16[(($118)>>1)]=$_extract_t1100;
 var $270=(($117+($235<<2))|0);
 HEAP32[(($270)>>2)]=$guess_1;
 var $storemerge3=0;label=54;break;
 case 54: 
 var $storemerge3;
 var $272=($storemerge3>>>0)<($235>>>0);
 if($272){label=55;break;}else{label=56;break;}
 case 55: 
 var $274=(($117+($storemerge3<<2))|0);
 HEAP32[(($274)>>2)]=0;
 var $275=((($storemerge3)+(1))|0);
 var $storemerge3=$275;label=54;break;
 case 56: 
 var $277=HEAP8[($194)];
 var $278=$277&1;
 var $279=(($278<<24)>>24)!=0;
 var $280=HEAP8[($119)];
 var $281=$280&1;
 var $282=(($281<<24)>>24)!=0;
 var $283=$279^$282;
 if($283){label=57;break;}else{label=58;break;}
 case 57: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 58: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$result,$t2);
 label=59;break;
 case 59: 
 var $286=HEAP16[(($35)>>1)];
 var $287=($286&65535);
 var $288=((($287)+($235))|0);
 var $289=((($288)+(1))|0);
 var $290=($289>>>0)>64;
 var $extract_t1089=(($289)&65535);
 var $_in44_sroa_speculated_sroa_speculated_off0=($290?64:$extract_t1089);
 HEAP16[(($118)>>1)]=$_in44_sroa_speculated_sroa_speculated_off0;
 var $291=($_in44_sroa_speculated_sroa_speculated_off0&65535);
 var $292=($291|0)!=($289|0);
 var $storemerge1=0;label=60;break;
 case 60: 
 var $storemerge1;
 var $294=($storemerge1>>>0)<($235>>>0);
 if($294){label=61;break;}else{label=62;break;}
 case 61: 
 var $296=(($117+($storemerge1<<2))|0);
 HEAP32[(($296)>>2)]=0;
 var $297=((($storemerge1)+(1))|0);
 var $storemerge1=$297;label=60;break;
 case 62: 
 var $298$0=$guess_1;
 var $298$1=0;
 var $storemerge2=0;var $carry_0$1=0;var $carry_0$0=0;label=63;break;
 case 63: 
 var $carry_0$0;
 var $carry_0$1;
 var $storemerge2;
 var $300=($storemerge2>>>0)<($287>>>0);
 if($300){label=64;break;}else{label=65;break;}
 case 64: 
 var $302=(($45+($storemerge2<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304$0=$303;
 var $304$1=0;
 var $305$0=___muldi3($304$0,$304$1,$298$0,$298$1);var $305$1=tempRet0;
 var $306$0=_i64Add($carry_0$0,$carry_0$1,$305$0,$305$1);var $306$1=tempRet0;
 var $307$0=$306$0;
 var $307=$307$0;
 var $308=((($storemerge2)+($235))|0);
 var $309=(($117+($308<<2))|0);
 HEAP32[(($309)>>2)]=$307;
 var $310$0=$306$1;
 var $310$1=0;
 var $311=((($storemerge2)+(1))|0);
 var $storemerge2=$311;var $carry_0$1=$310$1;var $carry_0$0=$310$0;label=63;break;
 case 65: 
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $313=(($carry_0$0|0) == ($$etemp$1$0|0)) & (($carry_0$1|0) == ($$etemp$1$1|0));
 if($313){label=68;break;}else{label=66;break;}
 case 66: 
 if($292){label=70;break;}else{label=67;break;}
 case 67: 
 var $316$0=$carry_0$0;
 var $316=$316$0;
 var $317=HEAP16[(($118)>>1)];
 var $318=($317&65535);
 var $319=((($318)-(1))|0);
 var $320=(($117+($319<<2))|0);
 HEAP32[(($320)>>2)]=$316;
 label=70;break;
 case 68: 
 if($292){label=70;break;}else{label=69;break;}
 case 69: 
 var $321=HEAP16[(($118)>>1)];
 var $322=($321&65535);
 var $323=((($322)-(1))|0);
 var $324=($323>>>0)>64;
 var $extract_t1099=(($323)&65535);
 var $_extract_t1099=($324?64:$extract_t1099);
 HEAP16[(($118)>>1)]=$_extract_t1099;
 label=70;break;
 case 70: 
 var $325=HEAP8[($103)];
 var $326=$325&1;
 var $327=(($326<<24)>>24)!=0;
 var $328=HEAP8[($119)];
 var $329=$328&1;
 var $330=(($329<<24)>>24)!=0;
 var $331=$327^$330;
 if($331){label=71;break;}else{label=72;break;}
 case 71: 
 var $333=($327?-1:1);
 var $storemerge_i_i34=$333;label=74;break;
 case 72: 
 var $335=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj2048ELj2048ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$t2);
 var $336=(($326<<24)>>24)==0;
 if($336){var $storemerge_i_i34=$335;label=74;break;}else{label=73;break;}
 case 73: 
 var $338=(((-$335))|0);
 var $storemerge_i_i34=$338;label=74;break;
 case 74: 
 var $storemerge_i_i34;
 var $339=($storemerge_i_i34|0)>0;
 if($339){label=75;break;}else{var $storemerge_i_i28=0;label=78;break;}
 case 75: 
 if($331){label=76;break;}else{label=77;break;}
 case 76: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 var $prem_2=$prem_1;var $r_neg_1=$r_neg_0;label=84;break;
 case 77: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 var $prem_2=$prem_1;var $r_neg_1=$r_neg_0;label=84;break;
 case 78: 
 var $storemerge_i_i28;
 var $343=HEAP16[(($188)>>1)];
 var $344=HEAP16[(($189)>>1)];
 var $345=($343&65535)<($344&65535);
 var $_1112=($345?$344:$343);
 var $_in45_sroa_speculated_sroa_speculated=($_1112&65535);
 var $346=($storemerge_i_i28>>>0)<($_in45_sroa_speculated_sroa_speculated>>>0);
 if($346){label=79;break;}else{label=80;break;}
 case 79: 
 var $348=(($190+($storemerge_i_i28<<2))|0);
 var $349=(($191+($storemerge_i_i28<<2))|0);
 var $350=HEAP32[(($348)>>2)];
 var $351=HEAP32[(($349)>>2)];
 HEAP32[(($348)>>2)]=$351;
 HEAP32[(($349)>>2)]=$350;
 var $352=((($storemerge_i_i28)+(1))|0);
 var $storemerge_i_i28=$352;label=78;break;
 case 80: 
 var $353=HEAP8[($103)];
 var $354=$353&1;
 var $355=HEAP8[($192)];
 var $356=$355&1;
 HEAP8[($103)]=$356;
 HEAP8[($192)]=$354;
 HEAP16[(($188)>>1)]=$344;
 HEAP16[(($189)>>1)]=$343;
 var $357=(($356<<24)>>24)!=0;
 var $358=(($354<<24)>>24)!=0;
 var $359=$357^$358;
 if($359){label=81;break;}else{label=82;break;}
 case 81: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 label=83;break;
 case 82: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($r,$r,$t2);
 label=83;break;
 case 83: 
 var $362=$r_neg_0&1;
 var $363=$362^1;
 var $prem_2=$193;var $r_neg_1=$363;label=84;break;
 case 84: 
 var $r_neg_1;
 var $prem_2;
 if($104){var $first_pass_1=$first_pass_0;label=89;break;}else{label=85;break;}
 case 85: 
 var $365=$first_pass_0&1;
 var $366=(($365<<24)>>24)==0;
 if($366){var $first_pass_1=$first_pass_0;label=89;break;}else{label=86;break;}
 case 86: 
 var $_pre1078=HEAP16[(($_pre_phi)>>1)];
 var $369=$_pre1078;label=87;break;
 case 87: 
 var $369;
 var $370=($369&65535);
 var $371=((($370)-(1))|0);
 var $372=(($pr_0+($371<<2))|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=($373|0)==0;
 if($374){label=88;break;}else{var $first_pass_1=0;label=89;break;}
 case 88: 
 var $375=($371>>>0)>64;
 var $extract_t1098=(($371)&65535);
 var $_extract_t1098=($375?64:$extract_t1098);
 HEAP16[(($_pre_phi)>>1)]=$_extract_t1098;
 var $369=$_extract_t1098;label=87;break;
 case 89: 
 var $first_pass_1;
 var $376=HEAP16[(($188)>>1)];
 var $377=($376&65535);
 var $378=((($377)-(1))|0);
 var $379=($378>>>0)<($38>>>0);
 if($379){label=92;break;}else{label=90;break;}
 case 90: 
 var $381=($378>>>0)>($38>>>0);
 if($381){var $first_pass_0=$first_pass_1;var $prem_1=$prem_2;var $r_neg_0=$r_neg_1;var $r_order_0=$378;label=32;break;}else{label=91;break;}
 case 91: 
 var $383=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $384=($383|0)>-1;
 if($384){var $first_pass_0=$first_pass_1;var $prem_1=$prem_2;var $r_neg_0=$r_neg_1;var $r_order_0=$378;label=32;break;}else{label=92;break;}
 case 92: 
 var $386=$r_neg_1&1;
 var $387=(($386<<24)>>24)==0;
 if($387){label=261;break;}else{label=93;break;}
 case 93: 
 var $389=(($376<<16)>>16)==1;
 if($389){label=94;break;}else{label=95;break;}
 case 94: 
 var $390=HEAP32[(($193)>>2)];
 var $391=($390|0)==0;
 if($391){label=261;break;}else{label=95;break;}
 case 95: 
 if($104){label=136;break;}else{label=96;break;}
 case 96: 
 var $393=HEAP8[($194)];
 var $394=$393&1;
 var $395=(($394<<24)>>24)==0;
 var $396=$result;
 var $397=HEAP32[(($396)>>2)];
 if($395){label=97;break;}else{label=99;break;}
 case 97: 
 var $399=($397|0)==0;
 if($399){label=118;break;}else{label=98;break;}
 case 98: 
 var $401=((($397)-(1))|0);
 HEAP32[(($396)>>2)]=$401;
 label=136;break;
 case 99: 
 var $403=($397|0)==-1;
 if($403){label=101;break;}else{label=100;break;}
 case 100: 
 var $405=((($397)+(1))|0);
 HEAP32[(($396)>>2)]=$405;
 label=136;break;
 case 101: 
 var $407=$result;
 var $storemerge_i5_i_i=0;var $409=0;var $carry_i_i_i13_0$1=0;var $carry_i_i_i13_0$0=1;label=102;break;
 case 102: 
 var $carry_i_i_i13_0$0;
 var $carry_i_i_i13_0$1;
 var $409;
 var $storemerge_i5_i_i;
 if($409){label=105;break;}else{label=103;break;}
 case 103: 
 var $411=HEAP16[(($_pre_phi)>>1)];
 var $412=($411&65535);
 var $413=($storemerge_i5_i_i>>>0)<($412>>>0);
 if($413){label=104;break;}else{label=105;break;}
 case 104: 
 var $415=(($407+($storemerge_i5_i_i<<2))|0);
 var $416=HEAP32[(($415)>>2)];
 var $417$0=$416;
 var $417$1=0;
 var $418$0=_i64Add($carry_i_i_i13_0$0,$carry_i_i_i13_0$1,$417$0,$417$1);var $418$1=tempRet0;
 var $419$0=$418$0;
 var $419=$419$0;
 HEAP32[(($415)>>2)]=$419;
 var $420$0=$418$1;
 var $420$1=0;
 var $421=((($storemerge_i5_i_i)+(1))|0);
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $phitmp=(($420$0|0) == ($$etemp$2$0|0)) & (($420$1|0) == ($$etemp$2$1|0));
 var $storemerge_i5_i_i=$421;var $409=$phitmp;var $carry_i_i_i13_0$1=$420$1;var $carry_i_i_i13_0$0=$420$0;label=102;break;
 case 105: 
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $422=(($carry_i_i_i13_0$0|0) == ($$etemp$3$0|0)) & (($carry_i_i_i13_0$1|0) == ($$etemp$3$1|0));
 if($422){label=108;break;}else{label=106;break;}
 case 106: 
 var $423=HEAP16[(($_pre_phi)>>1)];
 var $424=($423&65535);
 var $425=((($424)+(1))|0);
 var $426=($425>>>0)>64;
 var $extract_t1096=(($425)&65535);
 var $_extract_t1096=($426?64:$extract_t1096);
 HEAP16[(($_pre_phi)>>1)]=$_extract_t1096;
 var $427=($_extract_t1096&65535)>($423&65535);
 if($427){label=107;break;}else{label=108;break;}
 case 107: 
 var $429$0=$carry_i_i_i13_0$0;
 var $429=$429$0;
 var $430=(($407+($424<<2))|0);
 HEAP32[(($430)>>2)]=$429;
 label=108;break;
 case 108: 
 var $_pre1077=HEAP16[(($_pre_phi)>>1)];
 var $432=$_pre1077;label=109;break;
 case 109: 
 var $432;
 var $433=(($432<<16)>>16)==1;
 if($433){var $444=1;label=113;break;}else{label=110;break;}
 case 110: 
 var $435=($432&65535);
 var $436=((($435)-(1))|0);
 var $437=(($407+($436<<2))|0);
 var $438=HEAP32[(($437)>>2)];
 var $439=($438|0)==0;
 if($439){label=111;break;}else{var $442=$432;label=112;break;}
 case 111: 
 var $441=((($432)-(1))&65535);
 HEAP16[(($_pre_phi)>>1)]=$441;
 var $432=$441;label=109;break;
 case 112: 
 var $442;
 var $443=(($442<<16)>>16)==1;
 if($443){var $444=$443;label=113;break;}else{var $448=$443;label=115;break;}
 case 113: 
 var $444;
 var $445=HEAP32[(($407)>>2)];
 var $446=($445|0)==0;
 if($446){label=114;break;}else{var $448=$444;label=115;break;}
 case 114: 
 HEAP8[($194)]=0;
 var $448=$444;label=115;break;
 case 115: 
 var $448;
 var $449=HEAP8[($194)];
 var $450=$449&1;
 var $451=(($450<<24)>>24)==0;
 HEAP8[($194)]=$450;
 var $_not=$448^1;
 var $brmerge=$451|$_not;
 if($brmerge){label=136;break;}else{label=116;break;}
 case 116: 
 var $453=HEAP32[(($407)>>2)];
 var $454=($453|0)==0;
 if($454){label=117;break;}else{label=136;break;}
 case 117: 
 HEAP8[($194)]=0;
 label=136;break;
 case 118: 
 var $456=HEAP16[(($_pre_phi)>>1)];
 var $457=($456&65535)>64;
 var $_1113=($457?64:$456);
 HEAP16[(($_pre_phi)>>1)]=$_1113;
 var $458=$result;
 var $459=HEAP32[(($458)>>2)];
 var $460=($459|0)==0;
 if($460){label=121;break;}else{label=119;break;}
 case 119: 
 var $462=((($459)-(1))|0);
 HEAP32[(($458)>>2)]=$462;
 var $463=(($_1113<<16)>>16)==1;
 var $464=($462|0)==0;
 var $or_cond1114=$463&$464;
 if($or_cond1114){label=120;break;}else{label=136;break;}
 case 120: 
 HEAP8[($194)]=0;
 label=136;break;
 case 121: 
 var $467=(($_1113<<16)>>16)==1;
 if($467){label=122;break;}else{label=123;break;}
 case 122: 
 var $469=(((1)-($459))|0);
 HEAP32[(($458)>>2)]=$469;
 HEAP8[($194)]=1;
 var $470=($459|0)==1;
 label=136;break;
 case 123: 
 var $472=((($459)-(1))|0);
 HEAP32[(($458)>>2)]=$472;
 var $storemerge_i_i_i21=1;label=124;break;
 case 124: 
 var $storemerge_i_i_i21;
 var $474=(($458+($storemerge_i_i_i21<<2))|0);
 var $475=HEAP32[(($474)>>2)];
 var $476=($475|0)==0;
 if($476){label=125;break;}else{label=126;break;}
 case 125: 
 HEAP32[(($474)>>2)]=-1;
 var $478=((($storemerge_i_i_i21)+(1))|0);
 var $storemerge_i_i_i21=$478;label=124;break;
 case 126: 
 var $480=((($475)-(1))|0);
 HEAP32[(($474)>>2)]=$480;
 var $_pre1076=HEAP16[(($_pre_phi)>>1)];
 var $482=$_pre1076;label=127;break;
 case 127: 
 var $482;
 var $483=(($482<<16)>>16)==1;
 if($483){var $494=1;label=131;break;}else{label=128;break;}
 case 128: 
 var $485=($482&65535);
 var $486=((($485)-(1))|0);
 var $487=(($458+($486<<2))|0);
 var $488=HEAP32[(($487)>>2)];
 var $489=($488|0)==0;
 if($489){label=129;break;}else{var $492=$482;label=130;break;}
 case 129: 
 var $491=((($482)-(1))&65535);
 HEAP16[(($_pre_phi)>>1)]=$491;
 var $482=$491;label=127;break;
 case 130: 
 var $492;
 var $493=(($492<<16)>>16)==1;
 if($493){var $494=$493;label=131;break;}else{var $498=$493;label=133;break;}
 case 131: 
 var $494;
 var $495=HEAP32[(($458)>>2)];
 var $496=($495|0)==0;
 if($496){label=132;break;}else{var $498=$494;label=133;break;}
 case 132: 
 HEAP8[($194)]=0;
 var $498=$494;label=133;break;
 case 133: 
 var $498;
 var $499=HEAP8[($194)];
 var $500=$499&1;
 var $501=(($500<<24)>>24)==0;
 HEAP8[($194)]=$500;
 var $_not1115=$498^1;
 var $brmerge1116=$501|$_not1115;
 if($brmerge1116){label=136;break;}else{label=134;break;}
 case 134: 
 var $503=HEAP32[(($458)>>2)];
 var $504=($503|0)==0;
 if($504){label=135;break;}else{label=136;break;}
 case 135: 
 HEAP8[($194)]=0;
 label=136;break;
 case 136: 
 var $506=(($y+130)|0);
 var $507=HEAP8[($506)];
 var $508=$507&1;
 var $509=(($508<<24)>>24)==0;
 var $510=HEAP8[($103)];
 var $511=$510&1;
 if($509){label=198;break;}else{label=137;break;}
 case 137: 
 var $513=$511^1;
 HEAP8[($103)]=$513;
 var $514=(($511<<24)>>24)==0;
 if($514){label=138;break;}else{var $525=$513;label=141;break;}
 case 138: 
 var $516=HEAP16[(($188)>>1)];
 var $517=(($516<<16)>>16)==1;
 if($517){label=139;break;}else{var $525=$513;label=141;break;}
 case 139: 
 var $519=HEAP32[(($193)>>2)];
 var $520=($519|0)==0;
 if($520){label=140;break;}else{var $525=$513;label=141;break;}
 case 140: 
 HEAP8[($103)]=0;
 var $522=HEAP8[($506)];
 var $523=$522&1;
 var $524=(($523<<24)>>24)!=0;
 if($524){var $532=0;label=142;break;}else{var $623=0;label=167;break;}
 case 141: 
 var $525;
 var $526=$525&1;
 var $527=(($526<<24)>>24)!=0;
 var $528=HEAP8[($506)];
 var $529=$528&1;
 var $530=(($529<<24)>>24)!=0;
 var $531=$527^$530;
 if($531){var $532=$526;label=142;break;}else{var $623=$526;label=167;break;}
 case 142: 
 var $532;
 var $533=HEAP16[(($188)>>1)];
 var $534=($533&65535);
 var $535=HEAP16[(($35)>>1)];
 var $536=($535&65535);
 var $537=($533&65535)<($535&65535);
 var $_1117=($537?$534:$536);
 var $_1118=($537?$536:$534);
 var $538=($_1118|0)==1;
 if($538){label=143;break;}else{label=145;break;}
 case 143: 
 var $540=HEAP32[(($193)>>2)];
 var $541$0=$540;
 var $541$1=0;
 var $542=HEAP32[(($45)>>2)];
 var $543$0=$542;
 var $543$1=0;
 var $544$0=_i64Add($541$0,$541$1,$543$0,$543$1);var $544$1=tempRet0;
 var $545$0=$544$0;
 var $545=$545$0;
 HEAP32[(($193)>>2)]=$545;
 var $546$0=$544$1;
 var $546$1=0;
 var $547$0=$546$0;
 var $547=$547$0;
 var $548=(($193+4)|0);
 HEAP32[(($548)>>2)]=$547;
 var $549=($547|0)!=0;
 var $550=($549?2:1);
 HEAP16[(($188)>>1)]=$550;
 var $551=(($532<<24)>>24)==0;
 HEAP8[($103)]=$532;
 var $brmerge1119=$551|$549;
 var $brmerge1119_not=$brmerge1119^1;
 var $552=($545|0)==0;
 var $or_cond1120=$brmerge1119_not&$552;
 if($or_cond1120){label=144;break;}else{label=261;break;}
 case 144: 
 HEAP8[($103)]=0;
 label=261;break;
 case 145: 
 var $554=($_1118>>>0)>64;
 var $extract_t1091=(($_1118)&65535);
 var $_extract_t1091=($554?64:$extract_t1091);
 HEAP16[(($188)>>1)]=$_extract_t1091;
 var $555=(($193+($_1117<<2))|0);
 var $_1144=($537?$193:$45);
 var $_1145=($537?$45:$193);
 var $carry_i_i_i_0$1=0;var $carry_i_i_i_0$0=0;var $pa_i5_i_i_0=$_1145;var $pb_i6_i_i_0=$_1144;var $pr_i7_i_i_0=$193;label=146;break;
 case 146: 
 var $pr_i7_i_i_0;
 var $pb_i6_i_i_0;
 var $pa_i5_i_i_0;
 var $carry_i_i_i_0$0;
 var $carry_i_i_i_0$1;
 var $556=($pr_i7_i_i_0|0)==($555|0);
 if($556){label=148;break;}else{label=147;break;}
 case 147: 
 var $558=HEAP32[(($pa_i5_i_i_0)>>2)];
 var $559$0=$558;
 var $559$1=0;
 var $560=HEAP32[(($pb_i6_i_i_0)>>2)];
 var $561$0=$560;
 var $561$1=0;
 var $562$0=_i64Add($559$0,$559$1,$561$0,$561$1);var $562$1=tempRet0;
 var $563$0=_i64Add($carry_i_i_i_0$0,$carry_i_i_i_0$1,$562$0,$562$1);var $563$1=tempRet0;
 var $564$0=$563$0;
 var $564=$564$0;
 HEAP32[(($pr_i7_i_i_0)>>2)]=$564;
 var $565$0=$563$1;
 var $565$1=0;
 var $566=(($pr_i7_i_i_0+4)|0);
 var $567=(($pa_i5_i_i_0+4)|0);
 var $568=(($pb_i6_i_i_0+4)|0);
 var $carry_i_i_i_0$1=$565$1;var $carry_i_i_i_0$0=$565$0;var $pa_i5_i_i_0=$567;var $pb_i6_i_i_0=$568;var $pr_i7_i_i_0=$566;label=146;break;
 case 148: 
 var $570=(($193+($_1118<<2))|0);
 var $carry_i_i_i_1$1=$carry_i_i_i_0$1;var $carry_i_i_i_1$0=$carry_i_i_i_0$0;var $pa_i5_i_i_1=$pa_i5_i_i_0;var $pr_i7_i_i_1=$555;label=149;break;
 case 149: 
 var $pr_i7_i_i_1;
 var $pa_i5_i_i_1;
 var $carry_i_i_i_1$0;
 var $carry_i_i_i_1$1;
 var $572=($pr_i7_i_i_1|0)==($570|0);
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $573=(($carry_i_i_i_1$0|0) == ($$etemp$4$0|0)) & (($carry_i_i_i_1$1|0) == ($$etemp$4$1|0));
 if($572){label=154;break;}else{label=150;break;}
 case 150: 
 if($573){label=151;break;}else{label=153;break;}
 case 151: 
 var $576=($pa_i5_i_i_1|0)==($pr_i7_i_i_1|0);
 if($576){label=157;break;}else{label=152;break;}
 case 152: 
 var $578=$570;
 var $579=$pr_i7_i_i_1;
 var $580=((($578)-($579))|0);
 var $581=$pr_i7_i_i_1;
 var $582=$pa_i5_i_i_1;
 _memmove($581,$582,$580,4,0);
 label=157;break;
 case 153: 
 var $584=HEAP32[(($pa_i5_i_i_1)>>2)];
 var $585$0=$584;
 var $585$1=0;
 var $586$0=_i64Add($carry_i_i_i_1$0,$carry_i_i_i_1$1,$585$0,$585$1);var $586$1=tempRet0;
 var $587$0=$586$0;
 var $587=$587$0;
 HEAP32[(($pr_i7_i_i_1)>>2)]=$587;
 var $588$0=$586$1;
 var $588$1=0;
 var $589=(($pr_i7_i_i_1+4)|0);
 var $590=(($pa_i5_i_i_1+4)|0);
 var $carry_i_i_i_1$1=$588$1;var $carry_i_i_i_1$0=$588$0;var $pa_i5_i_i_1=$590;var $pr_i7_i_i_1=$589;label=149;break;
 case 154: 
 if($573){label=157;break;}else{label=155;break;}
 case 155: 
 var $591=((($_1118)+(1))|0);
 var $592=($591>>>0)>64;
 var $extract_t1092=(($591)&65535);
 var $_extract_t1092=($592?64:$extract_t1092);
 HEAP16[(($188)>>1)]=$_extract_t1092;
 var $593=($_extract_t1092&65535);
 var $594=($593>>>0)>($_1118>>>0);
 if($594){label=156;break;}else{label=157;break;}
 case 156: 
 var $596$0=$carry_i_i_i_1$0;
 var $596=$596$0;
 var $597=(($193+($_1118<<2))|0);
 HEAP32[(($597)>>2)]=$596;
 label=157;break;
 case 157: 
 var $_pre1074=HEAP16[(($188)>>1)];
 var $599=$_pre1074;label=158;break;
 case 158: 
 var $599;
 var $600=(($599<<16)>>16)==1;
 if($600){var $611=1;label=162;break;}else{label=159;break;}
 case 159: 
 var $602=($599&65535);
 var $603=((($602)-(1))|0);
 var $604=(($193+($603<<2))|0);
 var $605=HEAP32[(($604)>>2)];
 var $606=($605|0)==0;
 if($606){label=160;break;}else{var $609=$599;label=161;break;}
 case 160: 
 var $608=((($599)-(1))&65535);
 HEAP16[(($188)>>1)]=$608;
 var $599=$608;label=158;break;
 case 161: 
 var $609;
 var $610=(($609<<16)>>16)==1;
 if($610){var $611=$610;label=162;break;}else{var $615=$610;label=164;break;}
 case 162: 
 var $611;
 var $612=HEAP32[(($193)>>2)];
 var $613=($612|0)==0;
 if($613){label=163;break;}else{var $615=$611;label=164;break;}
 case 163: 
 HEAP8[($103)]=0;
 var $615=$611;label=164;break;
 case 164: 
 var $615;
 var $616=HEAP8[($103)];
 var $617=$616&1;
 var $618=(($617<<24)>>24)==0;
 HEAP8[($103)]=$617;
 var $_not1121=$615^1;
 var $brmerge1122=$618|$_not1121;
 if($brmerge1122){label=261;break;}else{label=165;break;}
 case 165: 
 var $620=HEAP32[(($193)>>2)];
 var $621=($620|0)==0;
 if($621){label=166;break;}else{label=261;break;}
 case 166: 
 HEAP8[($103)]=0;
 label=261;break;
 case 167: 
 var $623;
 var $624=HEAP16[(($188)>>1)];
 var $625=($624&65535);
 var $626=HEAP16[(($35)>>1)];
 var $627=($626&65535);
 var $628=($624&65535)<($626&65535);
 var $_1123=($628?$625:$627);
 var $_1124=($628?$627:$625);
 var $629=($_1124|0)==1;
 if($629){label=168;break;}else{label=170;break;}
 case 168: 
 var $631=HEAP32[(($193)>>2)];
 var $632=HEAP32[(($45)>>2)];
 var $633=($632>>>0)>($631>>>0);
 var $634=$623^1;
 var $_1125=($633?$631:$632);
 var $_1126=($633?$632:$631);
 var $_1127=($633?$634:$623);
 var $635=((($_1126)-($_1125))|0);
 HEAP16[(($188)>>1)]=1;
 HEAP32[(($193)>>2)]=$635;
 var $636=$_1127&1;
 var $637=(($636<<24)>>24)!=0;
 HEAP8[($103)]=$636;
 var $638=($_1126|0)==($_1125|0);
 var $or_cond1128=$637&$638;
 if($or_cond1128){label=169;break;}else{label=261;break;}
 case 169: 
 HEAP8[($103)]=0;
 label=261;break;
 case 170: 
 var $640=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $641=($_1124>>>0)>64;
 var $extract_t1090=(($_1124)&65535);
 var $_extract_t1090=($641?64:$extract_t1090);
 HEAP16[(($188)>>1)]=$_extract_t1090;
 var $642=($640|0)<0;
 if($642){var $pa_i_i_i7_0_ph=$45;var $pb_i_i_i8_0_ph=$193;var $swapped_i_i_i_0_ph=1;label=171;break;}else{label=172;break;}
 case 171: 
 var $swapped_i_i_i_0_ph;
 var $pb_i_i_i8_0_ph;
 var $pa_i_i_i7_0_ph;
 var $storemerge_i_i_i10=0;var $borrow_i_i_i_0$1=0;var $borrow_i_i_i_0$0=0;label=174;break;
 case 172: 
 var $644=($640|0)==0;
 if($644){label=173;break;}else{var $pa_i_i_i7_0_ph=$193;var $pb_i_i_i8_0_ph=$45;var $swapped_i_i_i_0_ph=0;label=171;break;}
 case 173: 
 HEAP16[(($188)>>1)]=1;
 HEAP32[(($193)>>2)]=0;
 HEAP8[($103)]=0;
 label=261;break;
 case 174: 
 var $borrow_i_i_i_0$0;
 var $borrow_i_i_i_0$1;
 var $storemerge_i_i_i10;
 var $647=($storemerge_i_i_i10>>>0)<($_1123>>>0);
 if($647){label=175;break;}else{var $borrow_i_i_i_1$1=$borrow_i_i_i_0$1;var $borrow_i_i_i_1$0=$borrow_i_i_i_0$0;var $i_i_i_i9_0=$storemerge_i_i_i10;label=176;break;}
 case 175: 
 var $649=(($pa_i_i_i7_0_ph+($storemerge_i_i_i10<<2))|0);
 var $650=HEAP32[(($649)>>2)];
 var $651$0=$650;
 var $651$1=0;
 var $652=(($pb_i_i_i8_0_ph+($storemerge_i_i_i10<<2))|0);
 var $653=HEAP32[(($652)>>2)];
 var $654$0=$653;
 var $654$1=0;
 var $655$0=_i64Subtract($651$0,$651$1,$654$0,$654$1);var $655$1=tempRet0;
 var $656$0=_i64Subtract($655$0,$655$1,$borrow_i_i_i_0$0,$borrow_i_i_i_0$1);var $656$1=tempRet0;
 var $657$0=$656$0;
 var $657=$657$0;
 var $658=(($193+($storemerge_i_i_i10<<2))|0);
 HEAP32[(($658)>>2)]=$657;
 var $659$0=$656$1;
 var $659$1=0;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $660$0=$659$0&$$etemp$5$0;
 var $660$1=$659$1&$$etemp$5$1;
 var $661=((($storemerge_i_i_i10)+(1))|0);
 var $storemerge_i_i_i10=$661;var $borrow_i_i_i_0$1=$660$1;var $borrow_i_i_i_0$0=$660$0;label=174;break;
 case 176: 
 var $i_i_i_i9_0;
 var $borrow_i_i_i_1$0;
 var $borrow_i_i_i_1$1;
 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 var $662=(($borrow_i_i_i_1$0|0) != ($$etemp$6$0|0)) | (($borrow_i_i_i_1$1|0) != ($$etemp$6$1|0));
 var $663=($i_i_i_i9_0>>>0)<($_1124>>>0);
 var $or_cond1066=$662&$663;
 if($or_cond1066){label=177;break;}else{label=178;break;}
 case 177: 
 var $665=(($pa_i_i_i7_0_ph+($i_i_i_i9_0<<2))|0);
 var $666=HEAP32[(($665)>>2)];
 var $667$0=$666;
 var $667$1=0;
 var $668$0=_i64Subtract($667$0,$667$1,$borrow_i_i_i_1$0,$borrow_i_i_i_1$1);var $668$1=tempRet0;
 var $669$0=$668$0;
 var $669=$669$0;
 var $670=(($193+($i_i_i_i9_0<<2))|0);
 HEAP32[(($670)>>2)]=$669;
 var $671$0=$668$1;
 var $671$1=0;
 var $$etemp$7$0=1;
 var $$etemp$7$1=0;
 var $672$0=$671$0&$$etemp$7$0;
 var $672$1=$671$1&$$etemp$7$1;
 var $673=((($i_i_i_i9_0)+(1))|0);
 var $borrow_i_i_i_1$1=$672$1;var $borrow_i_i_i_1$0=$672$0;var $i_i_i_i9_0=$673;label=176;break;
 case 178: 
 var $674=($_1124|0)==($i_i_i_i9_0|0);
 var $675=($pa_i_i_i7_0_ph|0)==($193|0);
 var $or_cond1129=$674|$675;
 if($or_cond1129){label=180;break;}else{label=179;break;}
 case 179: 
 var $677=(($pa_i_i_i7_0_ph+($i_i_i_i9_0<<2))|0);
 var $678=(($193+($i_i_i_i9_0<<2))|0);
 var $_idx1_i_i_i=$_1124<<2;
 var $679=((($i_i_i_i9_0)*(-4))&-1);
 var $680=((($_idx1_i_i_i)+($679))|0);
 var $681=$678;
 var $682=$677;
 _memmove($681,$682,$680,4,0);
 label=180;break;
 case 180: 
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $684=(($borrow_i_i_i_1$0|0) == ($$etemp$8$0|0)) & (($borrow_i_i_i_1$1|0) == ($$etemp$8$1|0));
 if($684){label=183;break;}else{label=181;break;}
 case 181: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2696,2600,192,3600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { label=197;break; }
 case 182: 
 throw "Reached an unreachable!";
 case 183: 
 var $_pre1075=HEAP16[(($188)>>1)];
 var $689=$_pre1075;label=184;break;
 case 184: 
 var $689;
 var $690=(($689<<16)>>16)==1;
 if($690){var $702=1;var $701=1;label=188;break;}else{label=185;break;}
 case 185: 
 var $692=($689&65535);
 var $693=((($692)-(1))|0);
 var $694=(($193+($693<<2))|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=($695|0)==0;
 if($696){label=186;break;}else{var $699=$689;label=187;break;}
 case 186: 
 var $698=((($689)-(1))&65535);
 HEAP16[(($188)>>1)]=$698;
 var $689=$698;label=184;break;
 case 187: 
 var $699;
 var $700=(($699<<16)>>16)==1;
 if($700){var $702=$699;var $701=$700;label=188;break;}else{var $707=$699;var $706=$700;label=190;break;}
 case 188: 
 var $701;
 var $702;
 var $703=HEAP32[(($193)>>2)];
 var $704=($703|0)==0;
 if($704){label=189;break;}else{var $707=$702;var $706=$701;label=190;break;}
 case 189: 
 HEAP8[($103)]=0;
 var $707=$702;var $706=$701;label=190;break;
 case 190: 
 var $706;
 var $707;
 var $708=HEAP8[($103)];
 var $709=$708&1;
 var $710=(($709<<24)>>24)==0;
 HEAP8[($103)]=$709;
 var $_not1130=$706^1;
 var $brmerge1131=$710|$_not1130;
 var $_mux=($710?0:$709);
 if($brmerge1131){var $716=$_mux;var $715=$707;label=193;break;}else{label=191;break;}
 case 191: 
 var $712=HEAP32[(($193)>>2)];
 var $713=($712|0)==0;
 if($713){label=192;break;}else{var $716=$709;var $715=1;label=193;break;}
 case 192: 
 HEAP8[($103)]=0;
 var $716=0;var $715=1;label=193;break;
 case 193: 
 var $715;
 var $716;
 var $717=(($swapped_i_i_i_0_ph<<24)>>24)==0;
 if($717){label=261;break;}else{label=194;break;}
 case 194: 
 var $719=$716^1;
 HEAP8[($103)]=$719;
 var $720=(($716<<24)>>24)==0;
 var $721=(($715<<16)>>16)==1;
 var $or_cond1132=$720&$721;
 if($or_cond1132){label=195;break;}else{label=261;break;}
 case 195: 
 var $723=HEAP32[(($193)>>2)];
 var $724=($723|0)==0;
 if($724){label=196;break;}else{label=261;break;}
 case 196: 
 HEAP8[($103)]=0;
 label=261;break;
 case 197: 
 var $727$0 = ___cxa_find_matching_catch(-1, -1,0); var $727$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 198: 
 var $729=(($511<<24)>>24)==0;
 var $730=HEAP16[(($35)>>1)];
 var $731=($730&65535);
 var $732=HEAP16[(($188)>>1)];
 var $733=($732&65535);
 var $734=($730&65535)<($732&65535);
 var $_1137=($734?$731:$733);
 var $_1138=($734?$733:$731);
 var $735=($_1138|0)==1;
 if($729){label=223;break;}else{label=199;break;}
 case 199: 
 if($735){label=200;break;}else{label=201;break;}
 case 200: 
 var $737=HEAP32[(($45)>>2)];
 var $738$0=$737;
 var $738$1=0;
 var $739=HEAP32[(($193)>>2)];
 var $740$0=$739;
 var $740$1=0;
 var $741$0=_i64Add($738$0,$738$1,$740$0,$740$1);var $741$1=tempRet0;
 var $742$0=$741$0;
 var $742=$742$0;
 HEAP32[(($193)>>2)]=$742;
 var $743$0=$741$1;
 var $743$1=0;
 var $744$0=$743$0;
 var $744=$744$0;
 var $745=(($193+4)|0);
 HEAP32[(($745)>>2)]=$744;
 var $746=($744|0)!=0;
 var $747=($746?2:1);
 HEAP16[(($188)>>1)]=$747;
 HEAP8[($103)]=0;
 label=261;break;
 case 201: 
 var $748=($_1138>>>0)>64;
 var $extract_t1094=(($_1138)&65535);
 var $_extract_t1094=($748?64:$extract_t1094);
 HEAP16[(($188)>>1)]=$_extract_t1094;
 var $749=(($193+($_1137<<2))|0);
 var $_1146=($734?$45:$193);
 var $_1147=($734?$193:$45);
 var $carry_i_i_0$1=0;var $carry_i_i_0$0=0;var $pa_i5_i_0=$_1147;var $pb_i6_i_0=$_1146;var $pr_i7_i_0=$193;label=202;break;
 case 202: 
 var $pr_i7_i_0;
 var $pb_i6_i_0;
 var $pa_i5_i_0;
 var $carry_i_i_0$0;
 var $carry_i_i_0$1;
 var $750=($pr_i7_i_0|0)==($749|0);
 if($750){label=204;break;}else{label=203;break;}
 case 203: 
 var $752=HEAP32[(($pa_i5_i_0)>>2)];
 var $753$0=$752;
 var $753$1=0;
 var $754=HEAP32[(($pb_i6_i_0)>>2)];
 var $755$0=$754;
 var $755$1=0;
 var $756$0=_i64Add($753$0,$753$1,$755$0,$755$1);var $756$1=tempRet0;
 var $757$0=_i64Add($carry_i_i_0$0,$carry_i_i_0$1,$756$0,$756$1);var $757$1=tempRet0;
 var $758$0=$757$0;
 var $758=$758$0;
 HEAP32[(($pr_i7_i_0)>>2)]=$758;
 var $759$0=$757$1;
 var $759$1=0;
 var $760=(($pr_i7_i_0+4)|0);
 var $761=(($pa_i5_i_0+4)|0);
 var $762=(($pb_i6_i_0+4)|0);
 var $carry_i_i_0$1=$759$1;var $carry_i_i_0$0=$759$0;var $pa_i5_i_0=$761;var $pb_i6_i_0=$762;var $pr_i7_i_0=$760;label=202;break;
 case 204: 
 var $764=(($193+($_1138<<2))|0);
 var $carry_i_i_1$1=$carry_i_i_0$1;var $carry_i_i_1$0=$carry_i_i_0$0;var $pa_i5_i_1=$pa_i5_i_0;var $pr_i7_i_1=$749;label=205;break;
 case 205: 
 var $pr_i7_i_1;
 var $pa_i5_i_1;
 var $carry_i_i_1$0;
 var $carry_i_i_1$1;
 var $766=($pr_i7_i_1|0)==($764|0);
 var $$etemp$9$0=0;
 var $$etemp$9$1=0;
 var $767=(($carry_i_i_1$0|0) == ($$etemp$9$0|0)) & (($carry_i_i_1$1|0) == ($$etemp$9$1|0));
 if($766){label=210;break;}else{label=206;break;}
 case 206: 
 if($767){label=207;break;}else{label=209;break;}
 case 207: 
 var $770=($pa_i5_i_1|0)==($pr_i7_i_1|0);
 if($770){label=213;break;}else{label=208;break;}
 case 208: 
 var $772=$764;
 var $773=$pr_i7_i_1;
 var $774=((($772)-($773))|0);
 var $775=$pr_i7_i_1;
 var $776=$pa_i5_i_1;
 _memmove($775,$776,$774,4,0);
 label=213;break;
 case 209: 
 var $778=HEAP32[(($pa_i5_i_1)>>2)];
 var $779$0=$778;
 var $779$1=0;
 var $780$0=_i64Add($carry_i_i_1$0,$carry_i_i_1$1,$779$0,$779$1);var $780$1=tempRet0;
 var $781$0=$780$0;
 var $781=$781$0;
 HEAP32[(($pr_i7_i_1)>>2)]=$781;
 var $782$0=$780$1;
 var $782$1=0;
 var $783=(($pr_i7_i_1+4)|0);
 var $784=(($pa_i5_i_1+4)|0);
 var $carry_i_i_1$1=$782$1;var $carry_i_i_1$0=$782$0;var $pa_i5_i_1=$784;var $pr_i7_i_1=$783;label=205;break;
 case 210: 
 if($767){label=213;break;}else{label=211;break;}
 case 211: 
 var $785=((($_1138)+(1))|0);
 var $786=($785>>>0)>64;
 var $extract_t1095=(($785)&65535);
 var $_extract_t1095=($786?64:$extract_t1095);
 HEAP16[(($188)>>1)]=$_extract_t1095;
 var $787=($_extract_t1095&65535);
 var $788=($787>>>0)>($_1138>>>0);
 if($788){label=212;break;}else{label=213;break;}
 case 212: 
 var $790$0=$carry_i_i_1$0;
 var $790=$790$0;
 var $791=(($193+($_1138<<2))|0);
 HEAP32[(($791)>>2)]=$790;
 label=213;break;
 case 213: 
 var $_pre=HEAP16[(($188)>>1)];
 var $793=$_pre;label=214;break;
 case 214: 
 var $793;
 var $794=(($793<<16)>>16)==1;
 if($794){var $805=1;label=218;break;}else{label=215;break;}
 case 215: 
 var $796=($793&65535);
 var $797=((($796)-(1))|0);
 var $798=(($193+($797<<2))|0);
 var $799=HEAP32[(($798)>>2)];
 var $800=($799|0)==0;
 if($800){label=216;break;}else{var $803=$793;label=217;break;}
 case 216: 
 var $802=((($793)-(1))&65535);
 HEAP16[(($188)>>1)]=$802;
 var $793=$802;label=214;break;
 case 217: 
 var $803;
 var $804=(($803<<16)>>16)==1;
 if($804){var $805=$804;label=218;break;}else{var $809=$804;label=220;break;}
 case 218: 
 var $805;
 var $806=HEAP32[(($193)>>2)];
 var $807=($806|0)==0;
 if($807){label=219;break;}else{var $809=$805;label=220;break;}
 case 219: 
 HEAP8[($103)]=0;
 var $809=$805;label=220;break;
 case 220: 
 var $809;
 var $810=HEAP8[($506)];
 var $811=$810&1;
 var $812=(($811<<24)>>24)==0;
 HEAP8[($103)]=$811;
 var $_not1135=$809^1;
 var $brmerge1136=$812|$_not1135;
 if($brmerge1136){label=261;break;}else{label=221;break;}
 case 221: 
 var $814=HEAP32[(($193)>>2)];
 var $815=($814|0)==0;
 if($815){label=222;break;}else{label=261;break;}
 case 222: 
 HEAP8[($103)]=0;
 label=261;break;
 case 223: 
 if($735){label=224;break;}else{label=228;break;}
 case 224: 
 var $818=HEAP32[(($45)>>2)];
 var $819=HEAP32[(($193)>>2)];
 var $820=($819>>>0)>($818>>>0);
 if($820){label=226;break;}else{label=225;break;}
 case 225: 
 var $821=((($818)-($819))|0);
 HEAP16[(($188)>>1)]=1;
 HEAP32[(($193)>>2)]=$821;
 HEAP8[($103)]=0;
 label=261;break;
 case 226: 
 var $823=((($819)-($818))|0);
 HEAP16[(($188)>>1)]=1;
 HEAP32[(($193)>>2)]=$823;
 HEAP8[($103)]=1;
 var $824=($819|0)==($818|0);
 if($824){label=227;break;}else{label=261;break;}
 case 227: 
 HEAP8[($103)]=0;
 label=261;break;
 case 228: 
 var $827=(($730<<16)>>16)==(($732<<16)>>16);
 if($827){var $storemerge_in_i_i_i=$731;label=230;break;}else{label=229;break;}
 case 229: 
 var $829=($730&65535)>($732&65535);
 var $830=($829?1:-1);
 var $_0=$830;label=233;break;
 case 230: 
 var $storemerge_in_i_i_i;
 var $storemerge_i_i_i=((($storemerge_in_i_i_i)-(1))|0);
 var $832=($storemerge_i_i_i|0)>-1;
 if($832){label=231;break;}else{var $_0=0;label=233;break;}
 case 231: 
 var $834=(($45+($storemerge_i_i_i<<2))|0);
 var $835=HEAP32[(($834)>>2)];
 var $836=(($193+($storemerge_i_i_i<<2))|0);
 var $837=HEAP32[(($836)>>2)];
 var $838=($835|0)==($837|0);
 if($838){var $storemerge_in_i_i_i=$storemerge_i_i_i;label=230;break;}else{label=232;break;}
 case 232: 
 var $840=($835>>>0)>($837>>>0);
 var $841=($840?1:-1);
 var $_0=$841;label=233;break;
 case 233: 
 var $_0;
 var $842=($_1138>>>0)>64;
 var $extract_t1093=(($_1138)&65535);
 var $_extract_t1093=($842?64:$extract_t1093);
 HEAP16[(($188)>>1)]=$_extract_t1093;
 var $843=($_0|0)<0;
 if($843){var $swapped_i_i_0_ph=1;var $pb_i_i_0_ph=$45;var $pa_i_i_0_ph=$193;label=234;break;}else{label=235;break;}
 case 234: 
 var $pa_i_i_0_ph;
 var $pb_i_i_0_ph;
 var $swapped_i_i_0_ph;
 var $storemerge_i_i=0;var $borrow_i_i_0$1=0;var $borrow_i_i_0$0=0;label=237;break;
 case 235: 
 var $845=($_0|0)==0;
 if($845){label=236;break;}else{var $swapped_i_i_0_ph=0;var $pb_i_i_0_ph=$193;var $pa_i_i_0_ph=$45;label=234;break;}
 case 236: 
 HEAP16[(($188)>>1)]=1;
 HEAP32[(($193)>>2)]=0;
 HEAP8[($103)]=0;
 label=261;break;
 case 237: 
 var $borrow_i_i_0$0;
 var $borrow_i_i_0$1;
 var $storemerge_i_i;
 var $848=($storemerge_i_i>>>0)<($_1137>>>0);
 if($848){label=238;break;}else{var $i_i_i_0=$storemerge_i_i;var $borrow_i_i_1$1=$borrow_i_i_0$1;var $borrow_i_i_1$0=$borrow_i_i_0$0;label=239;break;}
 case 238: 
 var $850=(($pa_i_i_0_ph+($storemerge_i_i<<2))|0);
 var $851=HEAP32[(($850)>>2)];
 var $852$0=$851;
 var $852$1=0;
 var $853=(($pb_i_i_0_ph+($storemerge_i_i<<2))|0);
 var $854=HEAP32[(($853)>>2)];
 var $855$0=$854;
 var $855$1=0;
 var $856$0=_i64Subtract($852$0,$852$1,$855$0,$855$1);var $856$1=tempRet0;
 var $857$0=_i64Subtract($856$0,$856$1,$borrow_i_i_0$0,$borrow_i_i_0$1);var $857$1=tempRet0;
 var $858$0=$857$0;
 var $858=$858$0;
 var $859=(($193+($storemerge_i_i<<2))|0);
 HEAP32[(($859)>>2)]=$858;
 var $860$0=$857$1;
 var $860$1=0;
 var $$etemp$10$0=1;
 var $$etemp$10$1=0;
 var $861$0=$860$0&$$etemp$10$0;
 var $861$1=$860$1&$$etemp$10$1;
 var $862=((($storemerge_i_i)+(1))|0);
 var $storemerge_i_i=$862;var $borrow_i_i_0$1=$861$1;var $borrow_i_i_0$0=$861$0;label=237;break;
 case 239: 
 var $borrow_i_i_1$0;
 var $borrow_i_i_1$1;
 var $i_i_i_0;
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $863=(($borrow_i_i_1$0|0) != ($$etemp$11$0|0)) | (($borrow_i_i_1$1|0) != ($$etemp$11$1|0));
 var $864=($i_i_i_0>>>0)<($_1138>>>0);
 var $or_cond=$863&$864;
 if($or_cond){label=240;break;}else{label=241;break;}
 case 240: 
 var $866=(($pa_i_i_0_ph+($i_i_i_0<<2))|0);
 var $867=HEAP32[(($866)>>2)];
 var $868$0=$867;
 var $868$1=0;
 var $869$0=_i64Subtract($868$0,$868$1,$borrow_i_i_1$0,$borrow_i_i_1$1);var $869$1=tempRet0;
 var $870$0=$869$0;
 var $870=$870$0;
 var $871=(($193+($i_i_i_0<<2))|0);
 HEAP32[(($871)>>2)]=$870;
 var $872$0=$869$1;
 var $872$1=0;
 var $$etemp$12$0=1;
 var $$etemp$12$1=0;
 var $873$0=$872$0&$$etemp$12$0;
 var $873$1=$872$1&$$etemp$12$1;
 var $874=((($i_i_i_0)+(1))|0);
 var $i_i_i_0=$874;var $borrow_i_i_1$1=$873$1;var $borrow_i_i_1$0=$873$0;label=239;break;
 case 241: 
 var $875=($_1138|0)==($i_i_i_0|0);
 var $876=($pa_i_i_0_ph|0)==($193|0);
 var $or_cond1139=$875|$876;
 if($or_cond1139){label=243;break;}else{label=242;break;}
 case 242: 
 var $878=(($pa_i_i_0_ph+($i_i_i_0<<2))|0);
 var $879=(($193+($i_i_i_0<<2))|0);
 var $_idx1_i_i=$_1138<<2;
 var $880=((($i_i_i_0)*(-4))&-1);
 var $881=((($_idx1_i_i)+($880))|0);
 var $882=$879;
 var $883=$878;
 _memmove($882,$883,$881,4,0);
 label=243;break;
 case 243: 
 var $$etemp$13$0=0;
 var $$etemp$13$1=0;
 var $885=(($borrow_i_i_1$0|0) == ($$etemp$13$0|0)) & (($borrow_i_i_1$1|0) == ($$etemp$13$1|0));
 if($885){label=246;break;}else{label=244;break;}
 case 244: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2696,2600,192,3600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=245;break; } else { label=260;break; }
 case 245: 
 throw "Reached an unreachable!";
 case 246: 
 var $_pre1073=HEAP16[(($188)>>1)];
 var $890=$_pre1073;label=247;break;
 case 247: 
 var $890;
 var $891=(($890<<16)>>16)==1;
 if($891){var $903=1;var $902=1;label=251;break;}else{label=248;break;}
 case 248: 
 var $893=($890&65535);
 var $894=((($893)-(1))|0);
 var $895=(($193+($894<<2))|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=($896|0)==0;
 if($897){label=249;break;}else{var $900=$890;label=250;break;}
 case 249: 
 var $899=((($890)-(1))&65535);
 HEAP16[(($188)>>1)]=$899;
 var $890=$899;label=247;break;
 case 250: 
 var $900;
 var $901=(($900<<16)>>16)==1;
 if($901){var $903=$900;var $902=$901;label=251;break;}else{var $908=$900;var $907=$901;label=253;break;}
 case 251: 
 var $902;
 var $903;
 var $904=HEAP32[(($193)>>2)];
 var $905=($904|0)==0;
 if($905){label=252;break;}else{var $908=$903;var $907=$902;label=253;break;}
 case 252: 
 HEAP8[($103)]=0;
 var $908=$903;var $907=$902;label=253;break;
 case 253: 
 var $907;
 var $908;
 var $909=HEAP8[($506)];
 var $910=$909&1;
 var $911=(($910<<24)>>24)==0;
 HEAP8[($103)]=$910;
 var $_not1140=$907^1;
 var $brmerge1141=$911|$_not1140;
 var $_mux1142=($911?0:$910);
 if($brmerge1141){var $917=$_mux1142;var $916=$908;label=256;break;}else{label=254;break;}
 case 254: 
 var $913=HEAP32[(($193)>>2)];
 var $914=($913|0)==0;
 if($914){label=255;break;}else{var $917=$910;var $916=1;label=256;break;}
 case 255: 
 HEAP8[($103)]=0;
 var $917=0;var $916=1;label=256;break;
 case 256: 
 var $916;
 var $917;
 var $918=(($swapped_i_i_0_ph<<24)>>24)==0;
 if($918){label=261;break;}else{label=257;break;}
 case 257: 
 var $920=$917^1;
 HEAP8[($103)]=$920;
 var $921=(($917<<24)>>24)==0;
 var $922=(($916<<16)>>16)==1;
 var $or_cond1143=$921&$922;
 if($or_cond1143){label=258;break;}else{label=261;break;}
 case 258: 
 var $924=HEAP32[(($193)>>2)];
 var $925=($924|0)==0;
 if($925){label=259;break;}else{label=261;break;}
 case 259: 
 HEAP8[($103)]=0;
 label=261;break;
 case 260: 
 var $928$0 = ___cxa_find_matching_catch(-1, -1,0); var $928$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 261: 
 var $929=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$y);
 var $930=($929|0)<0;
 if($930){label=263;break;}else{label=262;break;}
 case 262: 
 ___assert_fail(2744,2856,294,3576);
 throw "Reached an unreachable!";
 case 263: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$x,$y,$r){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+800)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $t_i=sp;
 var $t=(sp)+(264);
 var $rem=(sp)+(528);
 var $1=(sp)+(792);
 var $2=($result|0)==($x|0);
 var $3=($r|0)==($x|0);
 var $or_cond=$2|$3;
 if($or_cond){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$t;
 var $6=$x;
 assert(264 % 1 === 0);(_memcpy($5, $6, 264)|0);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$t,$y,$r);
 label=86;break;
 case 3: 
 var $8=($result|0)==($r|0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$rem;
 HEAP32[(($9)>>2)]=0;
 var $10=(($rem+256)|0);
 HEAP16[(($10)>>1)]=1;
 var $11=(($rem+258)|0);
 HEAP8[($11)]=0;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvPT_RKT0_mRS7_($result,$x,$y,$rem);
 var $12=(($rem+256)|0);
 var $13=HEAP16[(($12)>>1)];
 var $14=($13&65535);
 var $15=($13&65535)>64;
 var $_=($15?64:$13);
 var $16=(($result+256)|0);
 HEAP16[(($16)>>1)]=$_;
 var $17=$rem;
 var $18=(($17+($14<<2))|0);
 var $19=$18;
 var $20=$rem;
 var $21=((($19)-($20))|0);
 var $22=$result;
 var $23=$rem;
 assert($21 % 1 === 0);(_memcpy($22, $23, $21)|0);
 var $24=(($rem+258)|0);
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($result+258)|0);
 HEAP8[($27)]=$26;
 label=86;break;
 case 5: 
 var $29=($y|0)==0;
 if($29){label=6;break;}else{label=26;break;}
 case 6: 
 var $31=(($1)|0);
 HEAP32[(($31)>>2)]=5944;
 var $32=(($1+4)|0);
 label=7;break;
 case 7: 
 var $34=_malloc(38);
 var $35=($34|0)==0;
 if($35){label=8;break;}else{label=21;break;}
 case 8: 
 var $37=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=15;break;}else{label=9;break;}
 case 9: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 10: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=12;break;
 case 12: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $42=$lpad_phi_i$1;
 var $43=($42|0)<0;
 if($43){label=13;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=18;break;}
 case 13: 
 var $45=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=17;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=11;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $eh_lpad_body$1=$51$1;var $eh_lpad_body$0=$51$0;label=18;break;
 case 18: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $52=$eh_lpad_body$1;
 var $53=($52|0)<0;
 if($53){label=19;break;}else{label=20;break;}
 case 19: 
 var $55=$eh_lpad_body$0;
 ___cxa_call_unexpected($55);
 throw "Reached an unreachable!";
 case 20: 
 ___resumeException($eh_lpad_body$0)
 case 21: 
 var $57=$34;
 var $58=(($34+4)|0);
 var $59=$58;
 HEAP32[(($59)>>2)]=25;
 HEAP32[(($57)>>2)]=25;
 var $60=(($34+12)|0);
 HEAP32[(($32)>>2)]=$60;
 var $61=(($34+8)|0);
 var $62=$61;
 HEAP32[(($62)>>2)]=0;
 assert(26 % 1 === 0);(_memcpy($60, 2536, 26)|0);
 HEAP32[(($31)>>2)]=5912;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail16throw_exception_ISt14overflow_errorEEvRKT_PKcS7_i($1,4240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 HEAP32[(($31)>>2)]=5944;
 var $this_idx_val_i_i=HEAP32[(($32)>>2)];
 var $66=((($this_idx_val_i_i)-(4))|0);
 var $67=$66;
 var $68=(tempValue=HEAP32[(($67)>>2)],HEAP32[(($67)>>2)]=tempValue+-1,tempValue);
 var $69=((($68)-(1))|0);
 var $70=($69|0)<0;
 if($70){label=24;break;}else{label=87;break;}
 case 24: 
 var $72=HEAP32[(($32)>>2)];
 var $73=((($72)-(12))|0);
 var $74=($73|0)==0;
 if($74){label=87;break;}else{label=25;break;}
 case 25: 
 _free($73);
 label=87;break;
 case 26: 
 var $75=(($x+256)|0);
 var $76=HEAP16[(($75)>>1)];
 var $77=($76&65535);
 var $78=((($77)-(1))|0);
 var $79=(($x+256)|0);
 var $80=($76&65535)>64;
 var $_249=($80?64:$76);
 var $81=(($r+256)|0);
 HEAP16[(($81)>>1)]=$_249;
 var $82=$x;
 var $83=HEAP16[(($79)>>1)];
 var $84=($83&65535);
 var $85=(($82+($84<<2))|0);
 var $86=$85;
 var $87=$x;
 var $88=((($86)-($87))|0);
 var $89=$r;
 var $90=$x;
 _memmove($89,$90,$88,4,0);
 var $91=(($x+258)|0);
 var $92=HEAP8[($91)];
 var $93=$92&1;
 var $94=(($r+258)|0);
 HEAP8[($94)]=$93;
 HEAP8[($94)]=0;
 var $95=$r;
 if(($78|0)==0){ label=27;break;}else if(($78|0)==1){ label=37;break;}else{label=43;break;}
 case 27: 
 var $97=HEAP32[(($95)>>2)];
 var $98=($97>>>0)<($y>>>0);
 var $99=($result|0)==0;
 if($98){label=28;break;}else{label=30;break;}
 case 28: 
 if($99){label=86;break;}else{label=29;break;}
 case 29: 
 var $102=(($result+256)|0);
 HEAP16[(($102)>>1)]=1;
 var $103=$result;
 HEAP32[(($103)>>2)]=0;
 var $104=(($result+258)|0);
 HEAP8[($104)]=0;
 label=86;break;
 case 30: 
 if($99){label=31;break;}else{label=32;break;}
 case 31: 
 var $_pre240=(($x+258)|0);
 var $_pre_phi241=$_pre240;label=34;break;
 case 32: 
 var $107=(((($97>>>0))/(($y>>>0)))&-1);
 var $108=(($result+256)|0);
 HEAP16[(($108)>>1)]=1;
 var $109=$result;
 HEAP32[(($109)>>2)]=$107;
 var $110=(($result+258)|0);
 HEAP8[($110)]=0;
 var $111=(($x+258)|0);
 var $112=HEAP8[($111)];
 var $113=$112&1;
 var $114=(($113<<24)>>24)!=0;
 HEAP8[($110)]=$113;
 var $115=($107|0)==0;
 var $or_cond250=$114&$115;
 if($or_cond250){label=33;break;}else{var $_pre_phi241=$111;label=34;break;}
 case 33: 
 HEAP8[($110)]=0;
 var $_pre_phi241=$111;label=34;break;
 case 34: 
 var $_pre_phi241;
 var $117=HEAP32[(($95)>>2)];
 var $118=(((($117>>>0))%(($y>>>0)))&-1);
 HEAP32[(($95)>>2)]=$118;
 var $119=HEAP8[($_pre_phi241)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 HEAP8[($94)]=$120;
 if($121){label=86;break;}else{label=35;break;}
 case 35: 
 var $123=(($r+256)|0);
 var $124=HEAP16[(($123)>>1)];
 var $125=(($124<<16)>>16)==1;
 var $126=($118|0)==0;
 var $or_cond251=$125&$126;
 if($or_cond251){label=36;break;}else{label=86;break;}
 case 36: 
 HEAP8[($94)]=0;
 label=86;break;
 case 37: 
 var $129=(($95+($78<<2))|0);
 var $130=HEAP32[(($129)>>2)];
 var $131$0=$130;
 var $131$1=0;
 var $132$0=0;
 var $132$1=$131$0;
 var $133=HEAP32[(($95)>>2)];
 var $134$0=$133;
 var $134$1=0;
 var $135$0=$132$0|$134$0;
 var $135$1=$132$1|$134$1;
 var $136=($result|0)==0;
 var $_pre242$0=$y;
 var $_pre242$1=0;
 if($136){label=38;break;}else{label=39;break;}
 case 38: 
 var $_pre244=(($x+258)|0);
 var $_pre_phi245=$_pre244;label=41;break;
 case 39: 
 var $138$0=___udivdi3($135$0,$135$1,$_pre242$0,$_pre242$1);var $138$1=tempRet0;
 var $139=$result;
 var $140$0=$138$0;
 var $140=$140$0;
 HEAP32[(($139)>>2)]=$140;
 var $141$0=$138$1;
 var $141$1=0;
 var $142$0=$141$0;
 var $142=$142$0;
 var $143=(($139+4)|0);
 HEAP32[(($143)>>2)]=$142;
 var $144=($142|0)!=0;
 var $145=($144?2:1);
 var $146=(($result+256)|0);
 HEAP16[(($146)>>1)]=$145;
 var $147=(($result+258)|0);
 HEAP8[($147)]=0;
 var $148=(($x+258)|0);
 var $149=HEAP8[($148)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 HEAP8[($147)]=$150;
 var $brmerge=$151|$144;
 var $brmerge_not=$brmerge^1;
 var $152=($140|0)==0;
 var $or_cond252=$brmerge_not&$152;
 if($or_cond252){label=40;break;}else{var $_pre_phi245=$148;label=41;break;}
 case 40: 
 HEAP8[($147)]=0;
 var $_pre_phi245=$148;label=41;break;
 case 41: 
 var $_pre_phi245;
 var $154$0=___uremdi3($135$0,$135$1,$_pre242$0,$_pre242$1);var $154$1=tempRet0;
 var $155$0=$154$0;
 var $155=$155$0;
 HEAP32[(($95)>>2)]=$155;
 var $156=(($95+4)|0);
 HEAP32[(($156)>>2)]=0;
 var $157=(($r+256)|0);
 HEAP16[(($157)>>1)]=1;
 HEAP8[($94)]=0;
 var $158=HEAP8[($_pre_phi245)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)!=0;
 HEAP8[($94)]=$159;
 var $161=($155|0)==0;
 var $or_cond253=$160&$161;
 if($or_cond253){label=42;break;}else{label=86;break;}
 case 42: 
 HEAP8[($94)]=0;
 label=86;break;
 case 43: 
 var $164=($result|0)==0;
 if($164){var $pres_0_ph=0;label=46;break;}else{label=44;break;}
 case 44: 
 var $165=($76&65535)>64;
 var $_254=($165?64:$76);
 var $166=(($result+256)|0);
 HEAP16[(($166)>>1)]=$_254;
 var $167=$result;
 var $168=($_254&65535);
 var $169=($168>>>0)>($78>>>0);
 if($169){label=45;break;}else{var $pres_0_ph=$167;label=46;break;}
 case 45: 
 var $171=(($167+($78<<2))|0);
 HEAP32[(($171)>>2)]=0;
 var $pres_0_ph=$167;label=46;break;
 case 46: 
 var $pres_0_ph;
 var $172$0=$y;
 var $172$1=0;
 var $173=(($r+256)|0);
 var $r_order_0=$78;label=47;break;
 case 47: 
 var $r_order_0;
 var $174=(($95+($r_order_0<<2))|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($175>>>0)>=($y>>>0);
 var $177=($r_order_0|0)==0;
 var $or_cond255=$176|$177;
 if($or_cond255){label=54;break;}else{label=48;break;}
 case 48: 
 var $178$0=$175;
 var $178$1=0;
 var $179$0=0;
 var $179$1=$178$0;
 var $180=((($r_order_0)-(1))|0);
 var $181=(($95+($180<<2))|0);
 var $182=HEAP32[(($181)>>2)];
 var $183$0=$182;
 var $183$1=0;
 var $184$0=$179$0|$183$0;
 var $184$1=$179$1|$183$1;
 var $185$0=___uremdi3($184$0,$184$1,$172$0,$172$1);var $185$1=tempRet0;
 var $186=HEAP16[(($173)>>1)];
 var $187=($186&65535);
 var $188=((($187)-(1))|0);
 var $189=($188>>>0)>64;
 var $extract_t246=(($188)&65535);
 var $_in16_sroa_speculated_sroa_speculated_off0=($189?64:$extract_t246);
 HEAP16[(($173)>>1)]=$_in16_sroa_speculated_sroa_speculated_off0;
 var $190$0=$185$0;
 var $190=$190$0;
 HEAP32[(($181)>>2)]=$190;
 if($164){label=50;break;}else{label=49;break;}
 case 49: 
 var $192$0=___udivdi3($184$0,$184$1,$172$0,$172$1);var $192$1=tempRet0;
 var $193$0=$192$0;
 var $193=$193$0;
 var $194=(($pres_0_ph+($180<<2))|0);
 HEAP32[(($194)>>2)]=$193;
 label=50;break;
 case 50: 
 var $196=($180|0)==0;
 if($196){var $r_order_3=0;label=61;break;}else{label=51;break;}
 case 51: 
 var $198=HEAP32[(($181)>>2)];
 var $199=($198|0)==0;
 if($199){label=52;break;}else{var $r_order_2=$180;label=60;break;}
 case 52: 
 var $200=((($r_order_0)-(2))|0);
 var $201=HEAP16[(($173)>>1)];
 var $202=($201&65535);
 var $203=((($202)-(1))|0);
 var $204=($203>>>0)>64;
 var $extract_t247=(($203)&65535);
 var $_in17_sroa_speculated_sroa_speculated_off0=($204?64:$extract_t247);
 HEAP16[(($173)>>1)]=$_in17_sroa_speculated_sroa_speculated_off0;
 if($164){var $r_order_2=$200;label=60;break;}else{label=53;break;}
 case 53: 
 var $206=(($pres_0_ph+($200<<2))|0);
 HEAP32[(($206)>>2)]=0;
 var $r_order_2=$200;label=60;break;
 case 54: 
 if($164){var $212=$175;label=56;break;}else{label=55;break;}
 case 55: 
 var $209=(((($175>>>0))/(($y>>>0)))&-1);
 var $210=(($pres_0_ph+($r_order_0<<2))|0);
 HEAP32[(($210)>>2)]=$209;
 var $_pre=HEAP32[(($174)>>2)];
 var $212=$_pre;label=56;break;
 case 56: 
 var $212;
 var $213=(((($212>>>0))%(($y>>>0)))&-1);
 HEAP32[(($174)>>2)]=$213;
 var $214=($r_order_0|0)==0;
 if($214){var $r_order_3=0;label=61;break;}else{label=57;break;}
 case 57: 
 var $216=($213|0)==0;
 if($216){label=58;break;}else{var $r_order_2=$r_order_0;label=60;break;}
 case 58: 
 var $217=((($r_order_0)-(1))|0);
 var $218=HEAP16[(($173)>>1)];
 var $219=($218&65535);
 var $220=((($219)-(1))|0);
 var $221=($220>>>0)>64;
 var $extract_t=(($220)&65535);
 var $_in15_sroa_speculated_sroa_speculated_off0=($221?64:$extract_t);
 HEAP16[(($173)>>1)]=$_in15_sroa_speculated_sroa_speculated_off0;
 if($164){var $r_order_2=$217;label=60;break;}else{label=59;break;}
 case 59: 
 var $223=(($pres_0_ph+($217<<2))|0);
 HEAP32[(($223)>>2)]=0;
 var $r_order_2=$217;label=60;break;
 case 60: 
 var $r_order_2;
 var $224=($r_order_2|0)==0;
 if($224){var $r_order_3=$r_order_2;label=61;break;}else{var $r_order_0=$r_order_2;label=47;break;}
 case 61: 
 var $r_order_3;
 var $225=(($95+($r_order_3<<2))|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($226>>>0)<($y>>>0);
 if($227){label=62;break;}else{var $r_order_0=$r_order_3;label=47;break;}
 case 62: 
 if($164){label=73;break;}else{label=63;break;}
 case 63: 
 var $230=$result;
 var $231=(($result+256)|0);
 var $_pre233=HEAP16[(($231)>>1)];
 var $233=$_pre233;label=64;break;
 case 64: 
 var $233;
 var $234=(($233<<16)>>16)==1;
 if($234){var $245=1;label=68;break;}else{label=65;break;}
 case 65: 
 var $236=($233&65535);
 var $237=((($236)-(1))|0);
 var $238=(($230+($237<<2))|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=66;break;}else{var $243=$233;label=67;break;}
 case 66: 
 var $242=((($233)-(1))&65535);
 HEAP16[(($231)>>1)]=$242;
 var $233=$242;label=64;break;
 case 67: 
 var $243;
 var $244=(($243<<16)>>16)==1;
 if($244){var $245=$244;label=68;break;}else{var $250=$244;label=70;break;}
 case 68: 
 var $245;
 var $246=HEAP32[(($230)>>2)];
 var $247=($246|0)==0;
 if($247){label=69;break;}else{var $250=$245;label=70;break;}
 case 69: 
 var $249=(($result+258)|0);
 HEAP8[($249)]=0;
 var $250=$245;label=70;break;
 case 70: 
 var $250;
 var $251=(($x+258)|0);
 var $252=HEAP8[($251)];
 var $253=$252&1;
 var $254=(($253<<24)>>24)==0;
 var $255=(($result+258)|0);
 HEAP8[($255)]=$253;
 var $_not=$250^1;
 var $brmerge256=$254|$_not;
 if($brmerge256){label=73;break;}else{label=71;break;}
 case 71: 
 var $257=HEAP32[(($230)>>2)];
 var $258=($257|0)==0;
 if($258){label=72;break;}else{label=73;break;}
 case 72: 
 HEAP8[($255)]=0;
 label=73;break;
 case 73: 
 var $_pre232=HEAP16[(($173)>>1)];
 var $261=$_pre232;label=74;break;
 case 74: 
 var $261;
 var $262=(($261<<16)>>16)==1;
 if($262){var $273=1;label=78;break;}else{label=75;break;}
 case 75: 
 var $264=($261&65535);
 var $265=((($264)-(1))|0);
 var $266=(($95+($265<<2))|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==0;
 if($268){label=76;break;}else{var $271=$261;label=77;break;}
 case 76: 
 var $270=((($261)-(1))&65535);
 HEAP16[(($173)>>1)]=$270;
 var $261=$270;label=74;break;
 case 77: 
 var $271;
 var $272=(($271<<16)>>16)==1;
 if($272){var $273=$272;label=78;break;}else{var $277=$272;label=80;break;}
 case 78: 
 var $273;
 var $274=HEAP32[(($95)>>2)];
 var $275=($274|0)==0;
 if($275){label=79;break;}else{var $277=$273;label=80;break;}
 case 79: 
 HEAP8[($94)]=0;
 var $277=$273;label=80;break;
 case 80: 
 var $277;
 var $278=(($x+258)|0);
 var $279=HEAP8[($278)];
 var $280=$279&1;
 var $281=(($280<<24)>>24)==0;
 HEAP8[($94)]=$280;
 var $_not257=$277^1;
 var $brmerge258=$281|$_not257;
 var $_mux=($281?0:$280);
 if($brmerge258){var $286=$_mux;label=83;break;}else{label=81;break;}
 case 81: 
 var $283=HEAP32[(($95)>>2)];
 var $284=($283|0)==0;
 if($284){label=82;break;}else{var $286=$280;label=83;break;}
 case 82: 
 HEAP8[($94)]=0;
 var $286=0;label=83;break;
 case 83: 
 var $286;
 var $287=$t_i;
 var $288=$t_i;
 var $289=(($t_i+256)|0);
 var $290=(($t_i+258)|0);
 HEAP16[(($289)>>1)]=1;
 HEAP32[(($288)>>2)]=$y;
 HEAP8[($290)]=0;
 var $291=(($286<<24)>>24)==0;
 if($291){label=84;break;}else{label=86;break;}
 case 84: 
 var $292=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj2048ELj2048ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($r,$t_i);
 var $293=($292|0)<0;
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 ___assert_fail(2504,2856,437,3576);
 throw "Reached an unreachable!";
 case 86: 
 STACKTOP=sp;return;
 case 87: 
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($this,$o){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+256)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($o+128)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=(($2<<16)>>16)==(($4<<16)>>16);
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=($2&65535)>($4&65535);
 var $8=($7?1:-1);
 var $_0=$8;label=7;break;
 case 3: 
 var $10=$this;
 var $11=$o;
 var $12=($2&65535);
 var $storemerge_in=$12;label=4;break;
 case 4: 
 var $storemerge_in;
 var $storemerge=((($storemerge_in)-(1))|0);
 var $14=($storemerge|0)>-1;
 if($14){label=5;break;}else{var $_0=0;label=7;break;}
 case 5: 
 var $16=(($10+($storemerge<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($11+($storemerge<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($17|0)==($19|0);
 if($20){var $storemerge_in=$storemerge;label=4;break;}else{label=6;break;}
 case 6: 
 var $22=($17>>>0)>($19>>>0);
 var $23=($22?1:-1);
 var $_0=$23;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj2048ELj2048ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($this,$o){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+256)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($o+256)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=(($2<<16)>>16)==(($4<<16)>>16);
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=($2&65535)>($4&65535);
 var $8=($7?1:-1);
 var $_0=$8;label=7;break;
 case 3: 
 var $10=$this;
 var $11=$o;
 var $12=($2&65535);
 var $storemerge_in=$12;label=4;break;
 case 4: 
 var $storemerge_in;
 var $storemerge=((($storemerge_in)-(1))|0);
 var $14=($storemerge|0)>-1;
 if($14){label=5;break;}else{var $_0=0;label=7;break;}
 case 5: 
 var $16=(($10+($storemerge<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($11+($storemerge<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($17|0)==($19|0);
 if($20){var $storemerge_in=$storemerge;label=4;break;}else{label=6;break;}
 case 6: 
 var $22=($17>>>0)>($19>>>0);
 var $23=($22?1:-1);
 var $_0=$23;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($a+256)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=(($b+256)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=($2&65535)<($5&65535);
 var $_=($7?$3:$6);
 var $_86=($7?$6:$3);
 var $8=($_86|0)==1;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 var $10=(($a+258)|0);
 var $11=HEAP8[($10)];
 var $12=$11&1;
 var $13=$a;
 var $14=HEAP32[(($13)>>2)];
 var $15=$b;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16>>>0)>($14>>>0);
 var $18=$12^1;
 var $al_0=($17?$16:$14);
 var $bl_0=($17?$14:$16);
 var $s_0=($17?$18:$12);
 var $19=((($al_0)-($bl_0))|0);
 var $20=(($result+256)|0);
 HEAP16[(($20)>>1)]=1;
 var $21=$result;
 HEAP32[(($21)>>2)]=$19;
 var $22=(($result+258)|0);
 var $23=$s_0&1;
 var $24=(($23<<24)>>24)!=0;
 HEAP8[($22)]=$23;
 var $25=($al_0|0)==($bl_0|0);
 var $or_cond87=$24&$25;
 if($or_cond87){label=3;break;}else{label=31;break;}
 case 3: 
 HEAP8[($22)]=0;
 label=31;break;
 case 4: 
 var $27=__ZNK5boost14multiprecision8backends15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj2048ELj2048ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($a,$b);
 var $28=($_86>>>0)>64;
 var $extract_t=(($_86)&65535);
 var $_extract_t=($28?64:$extract_t);
 var $29=(($result+256)|0);
 HEAP16[(($29)>>1)]=$_extract_t;
 var $30=$a;
 var $31=$b;
 var $32=$result;
 var $33=($27|0)<0;
 if($33){var $swapped_0_ph=1;var $pb_0_ph=$30;var $pa_0_ph=$31;label=5;break;}else{label=6;break;}
 case 5: 
 var $pa_0_ph;
 var $pb_0_ph;
 var $swapped_0_ph;
 var $storemerge=0;var $borrow_0$1=0;var $borrow_0$0=0;label=8;break;
 case 6: 
 var $35=($27|0)==0;
 if($35){label=7;break;}else{var $swapped_0_ph=0;var $pb_0_ph=$31;var $pa_0_ph=$30;label=5;break;}
 case 7: 
 HEAP16[(($29)>>1)]=1;
 HEAP32[(($32)>>2)]=0;
 var $37=(($result+258)|0);
 HEAP8[($37)]=0;
 label=31;break;
 case 8: 
 var $borrow_0$0;
 var $borrow_0$1;
 var $storemerge;
 var $39=($storemerge>>>0)<($_>>>0);
 if($39){label=9;break;}else{var $i_0=$storemerge;var $borrow_1$1=$borrow_0$1;var $borrow_1$0=$borrow_0$0;label=10;break;}
 case 9: 
 var $41=(($pa_0_ph+($storemerge<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43$0=$42;
 var $43$1=0;
 var $44=(($pb_0_ph+($storemerge<<2))|0);
 var $45=HEAP32[(($44)>>2)];
 var $46$0=$45;
 var $46$1=0;
 var $47$0=_i64Subtract($43$0,$43$1,$46$0,$46$1);var $47$1=tempRet0;
 var $48$0=_i64Subtract($47$0,$47$1,$borrow_0$0,$borrow_0$1);var $48$1=tempRet0;
 var $49$0=$48$0;
 var $49=$49$0;
 var $50=(($32+($storemerge<<2))|0);
 HEAP32[(($50)>>2)]=$49;
 var $51$0=$48$1;
 var $51$1=0;
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;
 var $52$0=$51$0&$$etemp$0$0;
 var $52$1=$51$1&$$etemp$0$1;
 var $53=((($storemerge)+(1))|0);
 var $storemerge=$53;var $borrow_0$1=$52$1;var $borrow_0$0=$52$0;label=8;break;
 case 10: 
 var $borrow_1$0;
 var $borrow_1$1;
 var $i_0;
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $54=(($borrow_1$0|0) != ($$etemp$1$0|0)) | (($borrow_1$1|0) != ($$etemp$1$1|0));
 var $55=($i_0>>>0)<($_86>>>0);
 var $or_cond=$54&$55;
 if($or_cond){label=11;break;}else{label=12;break;}
 case 11: 
 var $57=(($pa_0_ph+($i_0<<2))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59$0=$58;
 var $59$1=0;
 var $60$0=_i64Subtract($59$0,$59$1,$borrow_1$0,$borrow_1$1);var $60$1=tempRet0;
 var $61$0=$60$0;
 var $61=$61$0;
 var $62=(($32+($i_0<<2))|0);
 HEAP32[(($62)>>2)]=$61;
 var $63$0=$60$1;
 var $63$1=0;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $64$0=$63$0&$$etemp$2$0;
 var $64$1=$63$1&$$etemp$2$1;
 var $65=((($i_0)+(1))|0);
 var $i_0=$65;var $borrow_1$1=$64$1;var $borrow_1$0=$64$0;label=10;break;
 case 12: 
 var $66=($_86|0)==($i_0|0);
 var $67=($pa_0_ph|0)==($32|0);
 var $or_cond88=$66|$67;
 if($or_cond88){label=14;break;}else{label=13;break;}
 case 13: 
 var $69=(($pa_0_ph+($i_0<<2))|0);
 var $70=(($32+($i_0<<2))|0);
 var $_idx1=$_86<<2;
 var $71=((($i_0)*(-4))&-1);
 var $72=((($_idx1)+($71))|0);
 var $73=$70;
 var $74=$69;
 _memmove($73,$74,$72,4,0);
 label=14;break;
 case 14: 
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $76=(($borrow_1$0|0) == ($$etemp$3$0|0)) & (($borrow_1$1|0) == ($$etemp$3$1|0));
 if($76){label=17;break;}else{label=15;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2696,2600,192,3600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $_pre=HEAP16[(($29)>>1)];
 var $81=$_pre;label=18;break;
 case 18: 
 var $81;
 var $82=(($81<<16)>>16)==1;
 if($82){var $94=1;var $93=1;label=22;break;}else{label=19;break;}
 case 19: 
 var $84=($81&65535);
 var $85=((($84)-(1))|0);
 var $86=(($32+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=20;break;}else{var $91=$81;label=21;break;}
 case 20: 
 var $90=((($81)-(1))&65535);
 HEAP16[(($29)>>1)]=$90;
 var $81=$90;label=18;break;
 case 21: 
 var $91;
 var $92=(($91<<16)>>16)==1;
 if($92){var $94=$91;var $93=$92;label=22;break;}else{var $100=$91;var $99=$92;label=24;break;}
 case 22: 
 var $93;
 var $94;
 var $95=HEAP32[(($32)>>2)];
 var $96=($95|0)==0;
 if($96){label=23;break;}else{var $100=$94;var $99=$93;label=24;break;}
 case 23: 
 var $98=(($result+258)|0);
 HEAP8[($98)]=0;
 var $100=$94;var $99=$93;label=24;break;
 case 24: 
 var $99;
 var $100;
 var $101=(($a+258)|0);
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 var $105=(($result+258)|0);
 HEAP8[($105)]=$103;
 var $_not=$99^1;
 var $brmerge=$104|$_not;
 var $_mux=($104?0:$103);
 if($brmerge){var $111=$_mux;var $110=$100;label=27;break;}else{label=25;break;}
 case 25: 
 var $107=HEAP32[(($32)>>2)];
 var $108=($107|0)==0;
 if($108){label=26;break;}else{var $111=$103;var $110=1;label=27;break;}
 case 26: 
 HEAP8[($105)]=0;
 var $111=0;var $110=1;label=27;break;
 case 27: 
 var $110;
 var $111;
 var $112=(($swapped_0_ph<<24)>>24)==0;
 if($112){label=31;break;}else{label=28;break;}
 case 28: 
 var $114=$111^1;
 HEAP8[($105)]=$114;
 var $115=(($111<<24)>>24)==0;
 var $116=(($110<<16)>>16)==1;
 var $or_cond89=$115&$116;
 if($or_cond89){label=29;break;}else{label=31;break;}
 case 29: 
 var $118=HEAP32[(($32)>>2)];
 var $119=($118|0)==0;
 if($119){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP8[($105)]=0;
 label=31;break;
 case 31: 
 return;
 case 32: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($result,$a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($a+256)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=(($b+256)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=($2&65535)<($5&65535);
 var $_=($7?$3:$6);
 var $_96=($7?$6:$3);
 var $8=($_96|0)==1;
 if($8){label=2;break;}else{label=4;break;}
 case 2: 
 var $10=(($a+258)|0);
 var $11=HEAP8[($10)];
 var $12=$11&1;
 var $13=$a;
 var $14=HEAP32[(($13)>>2)];
 var $15$0=$14;
 var $15$1=0;
 var $16=$b;
 var $17=HEAP32[(($16)>>2)];
 var $18$0=$17;
 var $18$1=0;
 var $19$0=_i64Add($15$0,$15$1,$18$0,$18$1);var $19$1=tempRet0;
 var $20=$result;
 var $21$0=$19$0;
 var $21=$21$0;
 HEAP32[(($20)>>2)]=$21;
 var $22$0=$19$1;
 var $22$1=0;
 var $23$0=$22$0;
 var $23=$23$0;
 var $24=(($20+4)|0);
 HEAP32[(($24)>>2)]=$23;
 var $25=($23|0)!=0;
 var $26=($25?2:1);
 var $27=(($result+256)|0);
 HEAP16[(($27)>>1)]=$26;
 var $28=(($result+258)|0);
 var $29=(($12<<24)>>24)==0;
 HEAP8[($28)]=$12;
 var $brmerge=$29|$25;
 var $brmerge_not=$brmerge^1;
 var $30=($21|0)==0;
 var $or_cond=$brmerge_not&$30;
 if($or_cond){label=3;break;}else{label=26;break;}
 case 3: 
 HEAP8[($28)]=0;
 label=26;break;
 case 4: 
 var $32=($_96>>>0)>64;
 var $extract_t=(($_96)&65535);
 var $_extract_t=($32?64:$extract_t);
 var $33=(($result+256)|0);
 HEAP16[(($33)>>1)]=$_extract_t;
 var $34=$a;
 var $35=$b;
 var $36=$result;
 var $37=(($36+($_<<2))|0);
 var $_98=($7?$35:$34);
 var $_99=($7?$34:$35);
 var $pr_0=$36;var $pb_0=$_99;var $pa_0=$_98;var $carry_0$1=0;var $carry_0$0=0;label=5;break;
 case 5: 
 var $carry_0$0;
 var $carry_0$1;
 var $pa_0;
 var $pb_0;
 var $pr_0;
 var $38=($pr_0|0)==($37|0);
 if($38){label=7;break;}else{label=6;break;}
 case 6: 
 var $40=HEAP32[(($pa_0)>>2)];
 var $41$0=$40;
 var $41$1=0;
 var $42=HEAP32[(($pb_0)>>2)];
 var $43$0=$42;
 var $43$1=0;
 var $44$0=_i64Add($41$0,$41$1,$43$0,$43$1);var $44$1=tempRet0;
 var $45$0=_i64Add($carry_0$0,$carry_0$1,$44$0,$44$1);var $45$1=tempRet0;
 var $46$0=$45$0;
 var $46=$46$0;
 HEAP32[(($pr_0)>>2)]=$46;
 var $47$0=$45$1;
 var $47$1=0;
 var $48=(($pr_0+4)|0);
 var $49=(($pa_0+4)|0);
 var $50=(($pb_0+4)|0);
 var $pr_0=$48;var $pb_0=$50;var $pa_0=$49;var $carry_0$1=$47$1;var $carry_0$0=$47$0;label=5;break;
 case 7: 
 var $52=(($36+($_96<<2))|0);
 var $pr_1=$37;var $pa_1=$pa_0;var $carry_1$1=$carry_0$1;var $carry_1$0=$carry_0$0;label=8;break;
 case 8: 
 var $carry_1$0;
 var $carry_1$1;
 var $pa_1;
 var $pr_1;
 var $54=($pr_1|0)==($52|0);
 if($54){label=13;break;}else{label=9;break;}
 case 9: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $56=(($carry_1$0|0) == ($$etemp$0$0|0)) & (($carry_1$1|0) == ($$etemp$0$1|0));
 if($56){label=10;break;}else{label=12;break;}
 case 10: 
 var $58=($pa_1|0)==($pr_1|0);
 if($58){label=16;break;}else{label=11;break;}
 case 11: 
 var $60=$52;
 var $61=$pr_1;
 var $62=((($60)-($61))|0);
 var $63=$pr_1;
 var $64=$pa_1;
 _memmove($63,$64,$62,4,0);
 label=13;break;
 case 12: 
 var $66=HEAP32[(($pa_1)>>2)];
 var $67$0=$66;
 var $67$1=0;
 var $68$0=_i64Add($carry_1$0,$carry_1$1,$67$0,$67$1);var $68$1=tempRet0;
 var $69$0=$68$0;
 var $69=$69$0;
 HEAP32[(($pr_1)>>2)]=$69;
 var $70$0=$68$1;
 var $70$1=0;
 var $71=(($pr_1+4)|0);
 var $72=(($pa_1+4)|0);
 var $pr_1=$71;var $pa_1=$72;var $carry_1$1=$70$1;var $carry_1$0=$70$0;label=8;break;
 case 13: 
 var $$etemp$1$0=0;
 var $$etemp$1$1=0;
 var $73=(($carry_1$0|0) == ($$etemp$1$0|0)) & (($carry_1$1|0) == ($$etemp$1$1|0));
 if($73){label=16;break;}else{label=14;break;}
 case 14: 
 var $74=((($_96)+(1))|0);
 var $75=($74>>>0)>64;
 var $extract_t95=(($74)&65535);
 var $_extract_t95=($75?64:$extract_t95);
 HEAP16[(($33)>>1)]=$_extract_t95;
 var $76=($_extract_t95&65535);
 var $77=($76>>>0)>($_96>>>0);
 if($77){label=15;break;}else{label=16;break;}
 case 15: 
 var $79$0=$carry_1$0;
 var $79=$79$0;
 var $80=(($36+($_96<<2))|0);
 HEAP32[(($80)>>2)]=$79;
 label=16;break;
 case 16: 
 var $_pre=HEAP16[(($33)>>1)];
 var $82=$_pre;label=17;break;
 case 17: 
 var $82;
 var $83=(($82<<16)>>16)==1;
 if($83){var $94=1;label=21;break;}else{label=18;break;}
 case 18: 
 var $85=($82&65535);
 var $86=((($85)-(1))|0);
 var $87=(($36+($86<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==0;
 if($89){label=19;break;}else{var $92=$82;label=20;break;}
 case 19: 
 var $91=((($82)-(1))&65535);
 HEAP16[(($33)>>1)]=$91;
 var $82=$91;label=17;break;
 case 20: 
 var $92;
 var $93=(($92<<16)>>16)==1;
 if($93){var $94=$93;label=21;break;}else{var $99=$93;label=23;break;}
 case 21: 
 var $94;
 var $95=HEAP32[(($36)>>2)];
 var $96=($95|0)==0;
 if($96){label=22;break;}else{var $99=$94;label=23;break;}
 case 22: 
 var $98=(($result+258)|0);
 HEAP8[($98)]=0;
 var $99=$94;label=23;break;
 case 23: 
 var $99;
 var $100=(($a+258)|0);
 var $101=HEAP8[($100)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 var $104=(($result+258)|0);
 HEAP8[($104)]=$102;
 var $_not=$99^1;
 var $brmerge97=$103|$_not;
 if($brmerge97){label=26;break;}else{label=24;break;}
 case 24: 
 var $106=HEAP32[(($36)>>2)];
 var $107=($106|0)==0;
 if($107){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP8[($104)]=0;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends13eval_multiplyILj2048ELj2048ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj2048ELj2048ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($result,$a,$val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($val)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=(($result+256)|0);
 HEAP16[(($4)>>1)]=1;
 var $5=$result;
 HEAP32[(($5)>>2)]=0;
 var $6=(($result+258)|0);
 HEAP8[($6)]=0;
 label=21;break;
 case 3: 
 var $8=($a|0)==($result|0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $_phi_trans_insert=(($result+256)|0);
 var $_pre47=HEAP16[(($_phi_trans_insert)>>1)];
 var $14=$_pre47;label=6;break;
 case 5: 
 var $9=(($a+256)|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=($10&65535)>64;
 var $_=($11?64:$10);
 var $12=(($result+256)|0);
 HEAP16[(($12)>>1)]=$_;
 var $14=$_;label=6;break;
 case 6: 
 var $14;
 var $15=$result;
 var $16=(($result+256)|0);
 var $17=($14&65535);
 var $18=(($15+($17<<2))|0);
 var $19=$a;
 var $storemerge=$19;var $carry_0$1=0;var $carry_0$0=0;var $p_0=$15;label=7;break;
 case 7: 
 var $p_0;
 var $carry_0$0;
 var $carry_0$1;
 var $storemerge;
 var $21=($p_0|0)==($18|0);
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 var $23=HEAP32[(($storemerge)>>2)];
 var $24$0=$23;
 var $24$1=0;
 var $25=HEAP32[(($val)>>2)];
 var $26$0=$25;
 var $26$1=0;
 var $27$0=___muldi3($24$0,$24$1,$26$0,$26$1);var $27$1=tempRet0;
 var $28$0=_i64Add($carry_0$0,$carry_0$1,$27$0,$27$1);var $28$1=tempRet0;
 var $29$0=$28$0;
 var $29=$29$0;
 HEAP32[(($p_0)>>2)]=$29;
 var $30$0=$28$1;
 var $30$1=0;
 var $31=(($p_0+4)|0);
 var $32=(($storemerge+4)|0);
 var $storemerge=$32;var $carry_0$1=$30$1;var $carry_0$0=$30$0;var $p_0=$31;label=7;break;
 case 9: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $34=(($carry_0$0|0) == ($$etemp$0$0|0)) & (($carry_0$1|0) == ($$etemp$0$1|0));
 if($34){label=12;break;}else{label=10;break;}
 case 10: 
 var $35=HEAP16[(($16)>>1)];
 var $36=($35&65535);
 var $37=((($36)+(1))|0);
 var $38=($37>>>0)>64;
 var $extract_t=(($37)&65535);
 var $_extract_t=($38?64:$extract_t);
 HEAP16[(($16)>>1)]=$_extract_t;
 var $39=($_extract_t&65535)>($35&65535);
 if($39){label=11;break;}else{label=12;break;}
 case 11: 
 var $41$0=$carry_0$0;
 var $41=$41$0;
 var $42=(($15+($36<<2))|0);
 HEAP32[(($42)>>2)]=$41;
 label=12;break;
 case 12: 
 var $44=(($a+258)|0);
 var $45=HEAP8[($44)];
 var $46=$45&1;
 var $47=(($46<<24)>>24)!=0;
 var $48=(($result+258)|0);
 HEAP8[($48)]=$46;
 var $_pre_pre=HEAP16[(($16)>>1)];
 var $49=(($_pre_pre<<16)>>16)==1;
 var $or_cond=$47&$49;
 if($or_cond){label=13;break;}else{var $54=$_pre_pre;label=15;break;}
 case 13: 
 var $51=HEAP32[(($15)>>2)];
 var $52=($51|0)==0;
 if($52){label=14;break;}else{var $54=1;label=15;break;}
 case 14: 
 HEAP8[($48)]=0;
 var $54=1;label=15;break;
 case 15: 
 var $54;
 var $55=(($54<<16)>>16)==1;
 if($55){label=19;break;}else{label=16;break;}
 case 16: 
 var $57=($54&65535);
 var $58=((($57)-(1))|0);
 var $59=(($15+($58<<2))|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==0;
 if($61){label=17;break;}else{var $64=$54;label=18;break;}
 case 17: 
 var $63=((($54)-(1))&65535);
 HEAP16[(($16)>>1)]=$63;
 var $54=$63;label=15;break;
 case 18: 
 var $64;
 var $65=(($64<<16)>>16)==1;
 if($65){label=19;break;}else{label=21;break;}
 case 19: 
 var $66=HEAP32[(($15)>>2)];
 var $67=($66|0)==0;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP8[($48)]=0;
 label=21;break;
 case 21: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost6random6detail20generate_uniform_intINS0_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEENS_14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS5_16cpp_integer_typeE1ELNS5_18cpp_int_check_typeE0EvEELNS5_26expression_template_optionE0EEENS5_6numberIT0_XT1_EEERT_RKSE_SI_N4mpl_5bool_ILb1EEE($agg_result,$eng,$min_value,$max_value){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+9864)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $r_i_i75=sp;
 var $result_i77=(sp)+(136);
 var $result_i71=(sp)+(272);
 var $result_i68=(sp)+(408);
 var $result_i62=(sp)+(544);
 var $result_i61=(sp)+(680);
 var $result_i59=(sp)+(816);
 var $r_i_i55=(sp)+(952);
 var $result_i57=(sp)+(1088);
 var $r_i_i43=(sp)+(1224);
 var $result_i45=(sp)+(1360);
 var $result_i31=(sp)+(1496);
 var $r_i_i24=(sp)+(1632);
 var $result_i26=(sp)+(1768);
 var $r_i_i10=(sp)+(1904);
 var $result_i12=(sp)+(2040);
 var $result_i7=(sp)+(2176);
 var $r_i_i=(sp)+(2312);
 var $result_i=(sp)+(2448);
 var $r_i_i_i_i=(sp)+(2584);
 var $a_i_i_i=(sp)+(2720);
 var $range=(sp)+(2856);
 var $bmin=(sp)+(2992);
 var $brange=(sp)+(3128);
 var $1=(sp)+(3264);
 var $2=(sp)+(3400);
 var $3=(sp)+(3536);
 var $4=(sp)+(3672);
 var $5=(sp)+(3808);
 var $limit=(sp)+(3944);
 var $6=(sp)+(4080);
 var $_sroa_087=(sp)+(4216);
 var $7=(sp)+(4352);
 var $8=(sp)+(4488);
 var $9=(sp)+(4624);
 var $10=(sp)+(4632);
 var $11=(sp)+(4768);
 var $12=(sp)+(4904);
 var $13=(sp)+(5040);
 var $14=(sp)+(5048);
 var $_sroa_084=(sp)+(5184);
 var $15=(sp)+(5320);
 var $16=(sp)+(5456);
 var $17=(sp)+(5464);
 var $18=(sp)+(5600);
 var $19=(sp)+(5736);
 var $result=(sp)+(5744);
 var $mult=(sp)+(5880);
 var $20=(sp)+(6016);
 var $21=(sp)+(6152);
 var $22=(sp)+(6288);
 var $23=(sp)+(6424);
 var $24=(sp)+(6560);
 var $25=(sp)+(6696);
 var $26=(sp)+(6832);
 var $27=(sp)+(6968);
 var $28=(sp)+(6976);
 var $29=(sp)+(7112);
 var $30=(sp)+(7248);
 var $result_increment=(sp)+(7384);
 var $31=(sp)+(7520);
 var $32=(sp)+(7656);
 var $33=(sp)+(7792);
 var $34=(sp)+(7928);
 var $35=(sp)+(8064);
 var $36=(sp)+(8200);
 var $bucket_size=(sp)+(8336);
 var $37=(sp)+(8472);
 var $_sroa_081=(sp)+(8608);
 var $38=(sp)+(8744);
 var $39=(sp)+(8880);
 var $40=(sp)+(8888);
 var $41=(sp)+(9024);
 var $42=(sp)+(9160);
 var $_sroa_0=(sp)+(9168);
 var $43=(sp)+(9304);
 var $44=(sp)+(9440);
 var $45=(sp)+(9448);
 var $46=(sp)+(9584);
 var $result1=(sp)+(9592);
 var $47=(sp)+(9728);
 __ZN5boost6random6detail8subtractINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEELb1EEclERKSB_SE_($range,$max_value,$min_value);
 var $48=$bmin;
 HEAP32[(($48)>>2)]=0;
 var $49=(($bmin+128)|0);
 HEAP16[(($49)>>1)]=1;
 var $50=(($bmin+130)|0);
 HEAP8[($50)]=0;
 var $51=$1;
 HEAP32[(($51)>>2)]=-1;
 var $52=(($1+128)|0);
 HEAP16[(($52)>>1)]=1;
 var $53=(($1+130)|0);
 HEAP8[($53)]=0;
 var $54=$2;
 HEAP32[(($54)>>2)]=0;
 var $55=(($2+128)|0);
 HEAP16[(($55)>>1)]=1;
 var $56=(($2+130)|0);
 HEAP8[($56)]=0;
 __ZN5boost6random6detail8subtractINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEELb1EEclERKSB_SE_($brange,$1,$2);
 var $57=(($range)|0);
 var $58=(($range+130)|0);
 var $59=HEAP8[($58)];
 var $60=$59&1;
 var $61=(($60<<24)>>24)==0;
 if($61){label=2;break;}else{label=5;break;}
 case 2: 
 var $63=(($range+128)|0);
 var $64=HEAP16[(($63)>>1)];
 var $65=(($64<<16)>>16)==1;
 if($65){label=3;break;}else{label=5;break;}
 case 3: 
 var $66=$range;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==0;
 if($68){label=4;break;}else{label=5;break;}
 case 4: 
 var $70=$agg_result;
 var $71=$min_value;
 assert(136 % 1 === 0);(_memcpy($70, $71, 136)|0);
 label=146;break;
 case 5: 
 var $72=(($brange)|0);
 var $73=(($brange+130)|0);
 var $74=HEAP8[($73)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)!=0;
 var $77=(($60<<24)>>24)!=0;
 var $tmp_i_i=$76^$77;
 if($tmp_i_i){label=13;break;}else{label=6;break;}
 case 6: 
 var $79=(($brange+128)|0);
 var $80=HEAP16[(($79)>>1)];
 var $81=(($range+128)|0);
 var $82=HEAP16[(($81)>>1)];
 var $83=(($80<<16)>>16)==(($82<<16)>>16);
 if($83){label=7;break;}else{label=14;break;}
 case 7: 
 var $85=$brange;
 var $86=($80&65535);
 var $87=(($85+($86<<2))|0);
 var $88=$range;
 var $storemerge_i_i=$88;var $_0545=$85;label=8;break;
 case 8: 
 var $_0545;
 var $storemerge_i_i;
 var $90=($_0545|0)==($87|0);
 if($90){label=11;break;}else{label=9;break;}
 case 9: 
 var $92=HEAP32[(($_0545)>>2)];
 var $93=HEAP32[(($storemerge_i_i)>>2)];
 var $94=($92|0)==($93|0);
 if($94){label=10;break;}else{label=12;break;}
 case 10: 
 var $96=(($_0545+4)|0);
 var $97=(($storemerge_i_i+4)|0);
 var $storemerge_i_i=$97;var $_0545=$96;label=8;break;
 case 11: 
 var $98=__ZN5boost6random23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($eng);
 var $99=$3;
 HEAP32[(($99)>>2)]=$98;
 var $100=(($3+128)|0);
 HEAP16[(($100)>>1)]=1;
 var $101=(($3+130)|0);
 HEAP8[($101)]=0;
 __ZN5boost6random6detail8subtractINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEELb1EEclERKSB_SE_($4,$3,$bmin);
 var $102=$5;
 var $103=$min_value;
 assert(136 % 1 === 0);(_memcpy($102, $103, 136)|0);
 __ZN5boost6random6detail3addINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEESB_Lb1EEclESB_SB_($agg_result,$4,$5);
 label=146;break;
 case 12: 
 if($tmp_i_i){label=13;break;}else{label=14;break;}
 case 13: 
 var $105=($76?-1:1);
 var $storemerge_i_i_i_i9=$105;label=16;break;
 case 14: 
 var $106=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($72,$57);
 var $107=(($75<<24)>>24)==0;
 if($107){var $storemerge_i_i_i_i9=$106;label=16;break;}else{label=15;break;}
 case 15: 
 var $109=(((-$106))|0);
 var $storemerge_i_i_i_i9=$109;label=16;break;
 case 16: 
 var $storemerge_i_i_i_i9;
 var $110=($storemerge_i_i_i_i9|0)<0;
 if($110){label=17;break;}else{label=100;break;}
 case 17: 
 var $111=$limit;
 var $112=(($limit+128)|0);
 var $113=(($limit+130)|0);
 var $114=(($6+130)|0);
 var $115=$8;
 var $116=$brange;
 var $117=$result_i26;
 var $118=$result_i26;
 var $119=(($result_i26+128)|0);
 var $120=(($result_i26+130)|0);
 var $121=(($result_i26)|0);
 var $122=(($7)|0);
 var $123=$r_i_i24;
 var $124=$r_i_i24;
 var $125=(($r_i_i24+128)|0);
 var $126=(($r_i_i24+130)|0);
 var $127=(($range+130)|0);
 var $128=(($7+130)|0);
 var $129=(($result_i26+130)|0);
 var $_sroa_087_0_cast89=$_sroa_087;
 var $_sroa_087_0__cast=$limit;
 var $130=$12;
 var $131=$result_i31;
 var $132=$result_i31;
 var $133=(($result_i31+128)|0);
 var $134=(($result_i31+130)|0);
 var $135=(($result_i31)|0);
 var $136=(($11)|0);
 var $137=(($result_i31+130)|0);
 var $138=$10;
 var $139=$14;
 var $140=(($10+130)|0);
 var $141=(($14+130)|0);
 var $142=(($limit)|0);
 var $143=$limit;
 var $144=(($10+128)|0);
 var $145=(($14+128)|0);
 var $146=$10;
 var $147=$14;
 var $148=(($result_i31+128)|0);
 var $149=$result_i31;
 var $150=(($result_i26+128)|0);
 var $151=$result_i26;
 var $152=$result;
 var $153=(($result+128)|0);
 var $154=(($result+130)|0);
 var $155=$mult;
 var $156=(($mult+128)|0);
 var $157=(($mult+130)|0);
 var $158=$22;
 var $159=(($22+128)|0);
 var $160=(($22+130)|0);
 var $161=$result_i59;
 var $162=$result_i59;
 var $163=(($result_i59+128)|0);
 var $164=(($result_i59+130)|0);
 var $165=(($result_i59)|0);
 var $166=(($21)|0);
 var $167=(($mult)|0);
 var $168=$20;
 var $169=(($result)|0);
 var $170=(($20)|0);
 var $171=(($20+130)|0);
 var $172=$24;
 var $173=$result_i61;
 var $174=$result_i61;
 var $175=(($result_i61+128)|0);
 var $176=(($result_i61+130)|0);
 var $177=(($result_i61)|0);
 var $178=(($24)|0);
 var $179=$23;
 var $180=$result_i62;
 var $181=$result_i62;
 var $182=(($result_i62+128)|0);
 var $183=(($result_i62+130)|0);
 var $184=(($result_i62)|0);
 var $185=$26;
 var $186=(($23+130)|0);
 var $187=(($25+130)|0);
 var $188=$29;
 var $189=$30;
 var $190=(($30+128)|0);
 var $191=(($30+130)|0);
 var $192=$result_i71;
 var $193=$result_i71;
 var $194=(($result_i71+128)|0);
 var $195=(($result_i71+130)|0);
 var $196=(($result_i71)|0);
 var $197=(($29)|0);
 var $198=(($30)|0);
 var $199=(($29+130)|0);
 var $200=$28;
 var $201=(($28)|0);
 var $202=(($23+128)|0);
 var $203=(($25+128)|0);
 var $204=$23;
 var $205=$25;
 var $206=$31;
 var $207=(($31+128)|0);
 var $208=(($31+130)|0);
 var $209=$result_i77;
 var $210=$result_i77;
 var $211=(($result_i77+128)|0);
 var $212=(($result_i77+130)|0);
 var $213=(($result_i77)|0);
 var $214=$r_i_i75;
 var $215=$r_i_i75;
 var $216=(($r_i_i75+128)|0);
 var $217=(($r_i_i75+130)|0);
 var $218=(($mult+130)|0);
 var $219=(($result_i77+130)|0);
 var $220=$32;
 var $221=$result_i57;
 var $222=$result_i57;
 var $223=(($result_i57+128)|0);
 var $224=(($result_i57+130)|0);
 var $225=(($result_i57)|0);
 var $226=(($34)|0);
 var $227=$r_i_i55;
 var $228=$r_i_i55;
 var $229=(($r_i_i55+128)|0);
 var $230=(($r_i_i55+130)|0);
 var $231=(($34+130)|0);
 var $232=(($result_i57+130)|0);
 var $233=$33;
 var $234=(($result_increment)|0);
 var $235=(($33+130)|0);
 var $236=(($result_increment+130)|0);
 var $237=(($33)|0);
 var $238=(($result_i57+128)|0);
 var $239=$result_i57;
 var $240=(($result_i77+128)|0);
 var $241=$result_i77;
 var $242=$18;
 var $243=$result_i45;
 var $244=$result_i45;
 var $245=(($result_i45+128)|0);
 var $246=(($result_i45+130)|0);
 var $247=(($result_i45)|0);
 var $248=(($15)|0);
 var $249=(($17)|0);
 var $250=$r_i_i43;
 var $251=$r_i_i43;
 var $252=(($r_i_i43+128)|0);
 var $253=(($r_i_i43+130)|0);
 var $254=(($15+130)|0);
 var $255=(($17+130)|0);
 var $256=(($result_i45+130)|0);
 var $_sroa_084_0_cast86=$_sroa_084;
 var $257=(($result_i45+128)|0);
 var $258=$result_i45;
 var $259=(($range+128)|0);
 var $260=(($6+128)|0);
 var $261=$range;
 var $262=$6;
 label=18;break;
 case 18: 
 HEAP32[(($111)>>2)]=0;
 HEAP16[(($112)>>1)]=1;
 HEAP8[($113)]=0;
 __ZNSt3__114numeric_limitsIN5boost14multiprecision6numberINS2_8backends15cpp_int_backendILj1024ELj1024ELNS2_16cpp_integer_typeE1ELNS2_18cpp_int_check_typeE0EvEELNS2_26expression_template_optionE0EEEE3maxEv($6);
 var $263=HEAP8[($58)];
 var $264=$263&1;
 var $265=(($264<<24)>>24)!=0;
 var $266=HEAP8[($114)];
 var $267=$266&1;
 var $268=(($267<<24)>>24)!=0;
 var $tmp_i_i14=$265^$268;
 if($tmp_i_i14){label=45;break;}else{label=19;break;}
 case 19: 
 var $270=HEAP16[(($259)>>1)];
 var $271=HEAP16[(($260)>>1)];
 var $272=(($270<<16)>>16)==(($271<<16)>>16);
 if($272){label=20;break;}else{label=45;break;}
 case 20: 
 var $274=($270&65535);
 var $275=(($261+($274<<2))|0);
 var $storemerge_i_i15=$262;var $_0543=$261;label=21;break;
 case 21: 
 var $_0543;
 var $storemerge_i_i15;
 var $277=($_0543|0)==($275|0);
 if($277){label=24;break;}else{label=22;break;}
 case 22: 
 var $279=HEAP32[(($_0543)>>2)];
 var $280=HEAP32[(($storemerge_i_i15)>>2)];
 var $281=($279|0)==($280|0);
 if($281){label=23;break;}else{label=45;break;}
 case 23: 
 var $283=(($_0543+4)|0);
 var $284=(($storemerge_i_i15+4)|0);
 var $storemerge_i_i15=$284;var $_0543=$283;label=21;break;
 case 24: 
 assert(136 % 1 === 0);(_memcpy($115, $116, 136)|0);
 HEAP32[(($9)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($7,$8,$9);
 HEAP32[(($118)>>2)]=0;
 HEAP16[(($119)>>1)]=1;
 HEAP8[($120)]=0;
 HEAP32[(($124)>>2)]=0;
 HEAP16[(($125)>>1)]=1;
 HEAP8[($126)]=0;
 var $285=HEAP8[($127)];
 var $286=$285&1;
 var $287=(($286<<24)>>24)!=0;
 var $288=HEAP8[($128)];
 var $289=$288&1;
 var $290=(($289<<24)>>24)!=0;
 var $291=$287^$290;
 var $292=($291&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($121,$57,$122,$r_i_i24);
 HEAP8[($129)]=$292;
 if($291){label=25;break;}else{label=28;break;}
 case 25: 
 var $294=HEAP16[(($150)>>1)];
 var $295=(($294<<16)>>16)==1;
 if($295){label=26;break;}else{label=28;break;}
 case 26: 
 var $297=HEAP32[(($151)>>2)];
 var $298=($297|0)==0;
 if($298){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP8[($129)]=0;
 label=28;break;
 case 28: 
 assert(136 % 1 === 0);(_memcpy($_sroa_087_0_cast89, $117, 136)|0);
 assert(131 % 1 === 0);(_memcpy($_sroa_087_0__cast, $_sroa_087_0_cast89, 131)|0);
 assert(136 % 1 === 0);(_memcpy($130, $116, 136)|0);
 HEAP32[(($13)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($11,$12,$13);
 HEAP32[(($132)>>2)]=0;
 HEAP16[(($133)>>1)]=1;
 HEAP8[($134)]=0;
 var $300=HEAP8[($58)];
 var $301=$300&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_(0,$57,$136,$135);
 var $302=(($301<<24)>>24)==0;
 HEAP8[($137)]=$301;
 if($302){label=32;break;}else{label=29;break;}
 case 29: 
 var $304=HEAP16[(($148)>>1)];
 var $305=(($304<<16)>>16)==1;
 if($305){label=30;break;}else{label=32;break;}
 case 30: 
 var $307=HEAP32[(($149)>>2)];
 var $308=($307|0)==0;
 if($308){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP8[($137)]=0;
 label=32;break;
 case 32: 
 assert(136 % 1 === 0);(_memcpy($138, $131, 136)|0);
 assert(136 % 1 === 0);(_memcpy($139, $116, 136)|0);
 var $310=HEAP8[($140)];
 var $311=$310&1;
 var $312=(($311<<24)>>24)!=0;
 var $313=HEAP8[($141)];
 var $314=$313&1;
 var $315=(($314<<24)>>24)!=0;
 var $tmp_i_i36=$312^$315;
 if($tmp_i_i36){label=50;break;}else{label=33;break;}
 case 33: 
 var $317=HEAP16[(($144)>>1)];
 var $318=HEAP16[(($145)>>1)];
 var $319=(($317<<16)>>16)==(($318<<16)>>16);
 if($319){label=34;break;}else{label=50;break;}
 case 34: 
 var $321=($317&65535);
 var $322=(($146+($321<<2))|0);
 var $storemerge_i_i37=$147;var $_0541=$146;label=35;break;
 case 35: 
 var $_0541;
 var $storemerge_i_i37;
 var $324=($_0541|0)==($322|0);
 if($324){label=38;break;}else{label=36;break;}
 case 36: 
 var $326=HEAP32[(($_0541)>>2)];
 var $327=HEAP32[(($storemerge_i_i37)>>2)];
 var $328=($326|0)==($327|0);
 if($328){label=37;break;}else{label=50;break;}
 case 37: 
 var $330=(($_0541+4)|0);
 var $331=(($storemerge_i_i37+4)|0);
 var $storemerge_i_i37=$331;var $_0541=$330;label=35;break;
 case 38: 
 var $332=HEAP8[($113)];
 var $333=$332&1;
 var $334=(($333<<24)>>24)==0;
 var $335=HEAP32[(($143)>>2)];
 if($334){label=39;break;}else{label=41;break;}
 case 39: 
 var $337=($335|0)==-1;
 if($337){label=44;break;}else{label=40;break;}
 case 40: 
 var $339=((($335)+(1))|0);
 HEAP32[(($143)>>2)]=$339;
 label=50;break;
 case 41: 
 var $341=($335|0)==0;
 if($341){label=43;break;}else{label=42;break;}
 case 42: 
 var $343=((($335)-(1))|0);
 HEAP32[(($143)>>2)]=$343;
 label=50;break;
 case 43: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($142,$142,5512);
 label=50;break;
 case 44: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($142,$142,5512);
 label=50;break;
 case 45: 
 HEAP32[(($16)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($15,$range,$16);
 assert(136 % 1 === 0);(_memcpy($242, $116, 136)|0);
 HEAP32[(($19)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($17,$18,$19);
 HEAP32[(($244)>>2)]=0;
 HEAP16[(($245)>>1)]=1;
 HEAP8[($246)]=0;
 HEAP32[(($251)>>2)]=0;
 HEAP16[(($252)>>1)]=1;
 HEAP8[($253)]=0;
 var $347=HEAP8[($254)];
 var $348=$347&1;
 var $349=(($348<<24)>>24)!=0;
 var $350=HEAP8[($255)];
 var $351=$350&1;
 var $352=(($351<<24)>>24)!=0;
 var $353=$349^$352;
 var $354=($353&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($247,$248,$249,$r_i_i43);
 HEAP8[($256)]=$354;
 if($353){label=46;break;}else{label=49;break;}
 case 46: 
 var $356=HEAP16[(($257)>>1)];
 var $357=(($356<<16)>>16)==1;
 if($357){label=47;break;}else{label=49;break;}
 case 47: 
 var $359=HEAP32[(($258)>>2)];
 var $360=($359|0)==0;
 if($360){label=48;break;}else{label=49;break;}
 case 48: 
 HEAP8[($256)]=0;
 label=49;break;
 case 49: 
 assert(136 % 1 === 0);(_memcpy($_sroa_084_0_cast86, $243, 136)|0);
 assert(131 % 1 === 0);(_memcpy($_sroa_087_0__cast, $_sroa_084_0_cast86, 131)|0);
 label=50;break;
 case 50: 
 HEAP32[(($152)>>2)]=0;
 HEAP16[(($153)>>1)]=1;
 HEAP8[($154)]=0;
 HEAP32[(($155)>>2)]=1;
 HEAP16[(($156)>>1)]=1;
 HEAP8[($157)]=0;
 var $363=0;label=51;break;
 case 51: 
 var $363;
 var $364=(($363<<24)>>24)!=0;
 var $365=HEAP8[($113)];
 var $366=$365&1;
 var $367=(($366<<24)>>24)!=0;
 var $368=$364^$367;
 if($368){label=52;break;}else{label=53;break;}
 case 52: 
 var $370=($364?-1:1);
 var $storemerge_i_i_i_i53=$370;label=55;break;
 case 53: 
 var $372=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($167,$142);
 var $373=(($363<<24)>>24)==0;
 if($373){var $storemerge_i_i_i_i53=$372;label=55;break;}else{label=54;break;}
 case 54: 
 var $375=(((-$372))|0);
 var $storemerge_i_i_i_i53=$375;label=55;break;
 case 55: 
 var $storemerge_i_i_i_i53;
 var $376=($storemerge_i_i_i_i53|0)<1;
 if($376){label=56;break;}else{label=73;break;}
 case 56: 
 var $378=__ZN5boost6random23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($eng);
 HEAP32[(($158)>>2)]=$378;
 HEAP16[(($159)>>1)]=1;
 HEAP8[($160)]=0;
 __ZN5boost6random6detail8subtractINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEELb1EEclERKSB_SE_($21,$22,$bmin);
 HEAP32[(($162)>>2)]=0;
 HEAP16[(($163)>>1)]=1;
 HEAP8[($164)]=0;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($165,$166,$167);
 assert(136 % 1 === 0);(_memcpy($168, $161, 136)|0);
 var $379=HEAP8[($154)];
 var $380=$379&1;
 var $381=(($380<<24)>>24)!=0;
 var $382=HEAP8[($171)];
 var $383=$382&1;
 var $384=(($383<<24)>>24)!=0;
 var $385=$381^$384;
 if($385){label=57;break;}else{label=58;break;}
 case 57: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($169,$169,$170);
 label=59;break;
 case 58: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($169,$169,$170);
 label=59;break;
 case 59: 
 assert(136 % 1 === 0);(_memcpy($172, $116, 136)|0);
 HEAP32[(($174)>>2)]=0;
 HEAP16[(($175)>>1)]=1;
 HEAP8[($176)]=0;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($177,$167,$178);
 assert(136 % 1 === 0);(_memcpy($179, $173, 136)|0);
 HEAP32[(($181)>>2)]=0;
 HEAP16[(($182)>>1)]=1;
 HEAP8[($183)]=0;
 var $388=HEAP8[($58)];
 var $389=$388&1;
 var $390=(($389<<24)>>24)!=0;
 var $391=HEAP8[($157)];
 var $392=$391&1;
 var $393=(($392<<24)>>24)!=0;
 var $394=$390^$393;
 if($394){label=60;break;}else{label=61;break;}
 case 60: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($184,$57,$167);
 label=62;break;
 case 61: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($184,$57,$167);
 label=62;break;
 case 62: 
 assert(136 % 1 === 0);(_memcpy($185, $180, 136)|0);
 HEAP32[(($27)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($25,$26,$27);
 var $397=HEAP8[($186)];
 var $398=$397&1;
 var $399=(($398<<24)>>24)!=0;
 var $400=HEAP8[($187)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)!=0;
 var $tmp_i_i63=$399^$402;
 if($tmp_i_i63){label=69;break;}else{label=63;break;}
 case 63: 
 var $404=HEAP16[(($202)>>1)];
 var $405=HEAP16[(($203)>>1)];
 var $406=(($404<<16)>>16)==(($405<<16)>>16);
 if($406){label=64;break;}else{label=69;break;}
 case 64: 
 var $408=($404&65535);
 var $409=(($204+($408<<2))|0);
 var $storemerge_i_i64=$205;var $_0=$204;label=65;break;
 case 65: 
 var $_0;
 var $storemerge_i_i64;
 var $411=($_0|0)==($409|0);
 if($411){label=68;break;}else{label=66;break;}
 case 66: 
 var $413=HEAP32[(($_0)>>2)];
 var $414=HEAP32[(($storemerge_i_i64)>>2)];
 var $415=($413|0)==($414|0);
 if($415){label=67;break;}else{label=69;break;}
 case 67: 
 var $417=(($_0+4)|0);
 var $418=(($storemerge_i_i64+4)|0);
 var $storemerge_i_i64=$418;var $_0=$417;label=65;break;
 case 68: 
 var $419=$agg_result;
 var $420=$result;
 assert(136 % 1 === 0);(_memcpy($419, $420, 136)|0);
 label=146;break;
 case 69: 
 assert(136 % 1 === 0);(_memcpy($188, $116, 136)|0);
 HEAP32[(($189)>>2)]=1;
 HEAP16[(($190)>>1)]=1;
 HEAP8[($191)]=0;
 HEAP32[(($193)>>2)]=0;
 HEAP16[(($194)>>1)]=1;
 HEAP8[($195)]=0;
 var $421=HEAP8[($199)];
 var $422=$421&1;
 var $423=(($422<<24)>>24)==0;
 if($423){label=71;break;}else{label=70;break;}
 case 70: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($196,$197,$198);
 label=72;break;
 case 71: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($196,$197,$198);
 label=72;break;
 case 72: 
 assert(136 % 1 === 0);(_memcpy($200, $192, 136)|0);
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($167,$167,$201);
 var $_pre=HEAP8[($157)];
 var $phitmp=$_pre&1;
 var $363=$phitmp;label=51;break;
 case 73: 
 HEAP32[(($206)>>2)]=0;
 HEAP16[(($207)>>1)]=1;
 HEAP8[($208)]=0;
 HEAP32[(($210)>>2)]=0;
 HEAP16[(($211)>>1)]=1;
 HEAP8[($212)]=0;
 HEAP32[(($215)>>2)]=0;
 HEAP16[(($216)>>1)]=1;
 HEAP8[($217)]=0;
 var $426=HEAP8[($127)];
 var $427=$426&1;
 var $428=(($427<<24)>>24)!=0;
 var $429=$428^$364;
 var $430=($429&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($213,$57,$167,$r_i_i75);
 HEAP8[($219)]=$430;
 if($429){label=74;break;}else{label=77;break;}
 case 74: 
 var $432=HEAP16[(($240)>>1)];
 var $433=(($432<<16)>>16)==1;
 if($433){label=75;break;}else{label=77;break;}
 case 75: 
 var $435=HEAP32[(($241)>>2)];
 var $436=($435|0)==0;
 if($436){label=76;break;}else{label=77;break;}
 case 76: 
 HEAP8[($219)]=0;
 label=77;break;
 case 77: 
 assert(136 % 1 === 0);(_memcpy($220, $209, 136)|0);
 __ZN5boost6random6detail20generate_uniform_intINS0_23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEENS_14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS5_16cpp_integer_typeE1ELNS5_18cpp_int_check_typeE0EvEELNS5_26expression_template_optionE0EEENS5_6numberIT0_XT1_EEERT_RKSE_SI_N4mpl_5bool_ILb1EEE($result_increment,$eng,$31,$32);
 __ZNSt3__114numeric_limitsIN5boost14multiprecision6numberINS2_8backends15cpp_int_backendILj1024ELj1024ELNS2_16cpp_integer_typeE1ELNS2_18cpp_int_check_typeE0EvEELNS2_26expression_template_optionE0EEEE3maxEv($34);
 HEAP32[(($222)>>2)]=0;
 HEAP16[(($223)>>1)]=1;
 HEAP8[($224)]=0;
 HEAP32[(($228)>>2)]=0;
 HEAP16[(($229)>>1)]=1;
 HEAP8[($230)]=0;
 var $438=HEAP8[($231)];
 var $439=$438&1;
 var $440=(($439<<24)>>24)!=0;
 var $441=HEAP8[($218)];
 var $442=$441&1;
 var $443=(($442<<24)>>24)!=0;
 var $444=$440^$443;
 var $445=($444&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($225,$226,$167,$r_i_i55);
 HEAP8[($232)]=$445;
 if($444){label=78;break;}else{label=81;break;}
 case 78: 
 var $447=HEAP16[(($238)>>1)];
 var $448=(($447<<16)>>16)==1;
 if($448){label=79;break;}else{label=81;break;}
 case 79: 
 var $450=HEAP32[(($239)>>2)];
 var $451=($450|0)==0;
 if($451){label=80;break;}else{label=81;break;}
 case 80: 
 HEAP8[($232)]=0;
 label=81;break;
 case 81: 
 assert(136 % 1 === 0);(_memcpy($233, $221, 136)|0);
 var $453=HEAP8[($235)];
 var $454=$453&1;
 var $455=(($454<<24)>>24)!=0;
 var $456=HEAP8[($236)];
 var $457=$456&1;
 var $458=(($457<<24)>>24)!=0;
 var $459=$455^$458;
 if($459){label=82;break;}else{label=83;break;}
 case 82: 
 var $461=($455?-1:1);
 var $storemerge_i_i_i_i50=$461;label=85;break;
 case 83: 
 var $463=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($237,$234);
 var $464=(($454<<24)>>24)==0;
 if($464){var $storemerge_i_i_i_i50=$463;label=85;break;}else{label=84;break;}
 case 84: 
 var $466=(((-$463))|0);
 var $storemerge_i_i_i_i50=$466;label=85;break;
 case 85: 
 var $storemerge_i_i_i_i50;
 var $467=($storemerge_i_i_i_i50|0)<0;
 if($467){label=18;break;}else{label=86;break;}
 case 86: 
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($234,$234,$167);
 var $469=HEAP8[($154)];
 var $470=$469&1;
 var $471=(($470<<24)>>24)!=0;
 var $472=HEAP8[($236)];
 var $473=$472&1;
 var $474=(($473<<24)>>24)!=0;
 var $475=$471^$474;
 if($475){label=87;break;}else{label=88;break;}
 case 87: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($169,$169,$234);
 label=89;break;
 case 88: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($169,$169,$234);
 label=89;break;
 case 89: 
 var $478=HEAP8[($154)];
 var $479=$478&1;
 var $480=(($479<<24)>>24)!=0;
 var $481=HEAP8[($236)];
 var $482=$481&1;
 var $483=(($482<<24)>>24)!=0;
 var $484=$480^$483;
 if($484){label=90;break;}else{label=91;break;}
 case 90: 
 var $486=($480?-1:1);
 var $storemerge_i_i_i_i34=$486;label=93;break;
 case 91: 
 var $488=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($169,$234);
 var $489=(($479<<24)>>24)==0;
 if($489){var $storemerge_i_i_i_i34=$488;label=93;break;}else{label=92;break;}
 case 92: 
 var $491=(((-$488))|0);
 var $storemerge_i_i_i_i34=$491;label=93;break;
 case 93: 
 var $storemerge_i_i_i_i34;
 var $492=($storemerge_i_i_i_i34|0)<0;
 if($492){label=18;break;}else{label=94;break;}
 case 94: 
 var $494=HEAP8[($58)];
 var $495=$494&1;
 var $496=(($495<<24)>>24)!=0;
 var $497=$480^$496;
 if($497){label=95;break;}else{label=96;break;}
 case 95: 
 var $499=($480?-1:1);
 var $storemerge_i_i_i_i29=$499;label=98;break;
 case 96: 
 var $501=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($169,$57);
 var $502=(($479<<24)>>24)==0;
 if($502){var $storemerge_i_i_i_i29=$501;label=98;break;}else{label=97;break;}
 case 97: 
 var $504=(((-$501))|0);
 var $storemerge_i_i_i_i29=$504;label=98;break;
 case 98: 
 var $storemerge_i_i_i_i29;
 var $505=($storemerge_i_i_i_i29|0)>0;
 if($505){label=18;break;}else{label=99;break;}
 case 99: 
 var $507=$35;
 var $508=$result;
 assert(136 % 1 === 0);(_memcpy($507, $508, 136)|0);
 var $509=$36;
 var $510=$min_value;
 assert(136 % 1 === 0);(_memcpy($509, $510, 136)|0);
 __ZN5boost6random6detail3addINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEESB_Lb1EEclESB_SB_($agg_result,$35,$36);
 label=146;break;
 case 100: 
 var $512=$bucket_size;
 HEAP32[(($512)>>2)]=0;
 var $513=(($bucket_size+128)|0);
 HEAP16[(($513)>>1)]=1;
 var $514=(($bucket_size+130)|0);
 HEAP8[($514)]=0;
 __ZNSt3__114numeric_limitsIN5boost14multiprecision6numberINS2_8backends15cpp_int_backendILj1024ELj1024ELNS2_16cpp_integer_typeE1ELNS2_18cpp_int_check_typeE0EvEELNS2_26expression_template_optionE0EEEE3maxEv($37);
 var $515=HEAP8[($73)];
 var $516=$515&1;
 var $517=(($516<<24)>>24)!=0;
 var $518=(($37+130)|0);
 var $519=HEAP8[($518)];
 var $520=$519&1;
 var $521=(($520<<24)>>24)!=0;
 var $tmp_i_i19=$517^$521;
 if($tmp_i_i19){label=127;break;}else{label=101;break;}
 case 101: 
 var $523=(($brange+128)|0);
 var $524=HEAP16[(($523)>>1)];
 var $525=(($37+128)|0);
 var $526=HEAP16[(($525)>>1)];
 var $527=(($524<<16)>>16)==(($526<<16)>>16);
 if($527){label=102;break;}else{label=127;break;}
 case 102: 
 var $529=$brange;
 var $530=($524&65535);
 var $531=(($529+($530<<2))|0);
 var $532=$37;
 var $storemerge_i_i20=$532;var $_0542=$529;label=103;break;
 case 103: 
 var $_0542;
 var $storemerge_i_i20;
 var $534=($_0542|0)==($531|0);
 if($534){label=106;break;}else{label=104;break;}
 case 104: 
 var $536=HEAP32[(($_0542)>>2)];
 var $537=HEAP32[(($storemerge_i_i20)>>2)];
 var $538=($536|0)==($537|0);
 if($538){label=105;break;}else{label=127;break;}
 case 105: 
 var $540=(($_0542+4)|0);
 var $541=(($storemerge_i_i20+4)|0);
 var $storemerge_i_i20=$541;var $_0542=$540;label=103;break;
 case 106: 
 HEAP32[(($39)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($38,$range,$39);
 var $542=$result_i12;
 var $543=$result_i12;
 HEAP32[(($543)>>2)]=0;
 var $544=(($result_i12+128)|0);
 HEAP16[(($544)>>1)]=1;
 var $545=(($result_i12+130)|0);
 HEAP8[($545)]=0;
 var $546=(($result_i12)|0);
 var $547=(($38)|0);
 var $548=$r_i_i10;
 var $549=$r_i_i10;
 HEAP32[(($549)>>2)]=0;
 var $550=(($r_i_i10+128)|0);
 HEAP16[(($550)>>1)]=1;
 var $551=(($r_i_i10+130)|0);
 HEAP8[($551)]=0;
 var $552=(($brange+130)|0);
 var $553=HEAP8[($552)];
 var $554=$553&1;
 var $555=(($554<<24)>>24)!=0;
 var $556=(($38+130)|0);
 var $557=HEAP8[($556)];
 var $558=$557&1;
 var $559=(($558<<24)>>24)!=0;
 var $560=$555^$559;
 var $561=($560&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($546,$72,$547,$r_i_i10);
 var $562=(($result_i12+130)|0);
 HEAP8[($562)]=$561;
 if($560){label=107;break;}else{label=110;break;}
 case 107: 
 var $564=(($result_i12+128)|0);
 var $565=HEAP16[(($564)>>1)];
 var $566=(($565<<16)>>16)==1;
 if($566){label=108;break;}else{label=110;break;}
 case 108: 
 var $568=$result_i12;
 var $569=HEAP32[(($568)>>2)];
 var $570=($569|0)==0;
 if($570){label=109;break;}else{label=110;break;}
 case 109: 
 HEAP8[($562)]=0;
 label=110;break;
 case 110: 
 var $_sroa_081_0_cast83=$_sroa_081;
 assert(136 % 1 === 0);(_memcpy($_sroa_081_0_cast83, $542, 136)|0);
 var $_sroa_081_0__cast=$bucket_size;
 assert(131 % 1 === 0);(_memcpy($_sroa_081_0__cast, $_sroa_081_0_cast83, 131)|0);
 HEAP32[(($42)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($41,$range,$42);
 var $572=$result_i7;
 var $573=$result_i7;
 HEAP32[(($573)>>2)]=0;
 var $574=(($result_i7+128)|0);
 HEAP16[(($574)>>1)]=1;
 var $575=(($result_i7+130)|0);
 HEAP8[($575)]=0;
 var $576=(($result_i7)|0);
 var $577=(($41)|0);
 var $578=HEAP8[($73)];
 var $579=$578&1;
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_(0,$72,$577,$576);
 var $580=(($579<<24)>>24)==0;
 var $581=(($result_i7+130)|0);
 HEAP8[($581)]=$579;
 if($580){label=114;break;}else{label=111;break;}
 case 111: 
 var $583=(($result_i7+128)|0);
 var $584=HEAP16[(($583)>>1)];
 var $585=(($584<<16)>>16)==1;
 if($585){label=112;break;}else{label=114;break;}
 case 112: 
 var $587=$result_i7;
 var $588=HEAP32[(($587)>>2)];
 var $589=($588|0)==0;
 if($589){label=113;break;}else{label=114;break;}
 case 113: 
 HEAP8[($581)]=0;
 label=114;break;
 case 114: 
 var $591=$40;
 assert(136 % 1 === 0);(_memcpy($591, $572, 136)|0);
 var $592=(($40+130)|0);
 var $593=HEAP8[($592)];
 var $594=$593&1;
 var $595=(($594<<24)>>24)!=0;
 var $596=HEAP8[($58)];
 var $597=$596&1;
 var $598=(($597<<24)>>24)!=0;
 var $tmp_i_i1=$595^$598;
 if($tmp_i_i1){label=132;break;}else{label=115;break;}
 case 115: 
 var $600=(($40+128)|0);
 var $601=HEAP16[(($600)>>1)];
 var $602=(($range+128)|0);
 var $603=HEAP16[(($602)>>1)];
 var $604=(($601<<16)>>16)==(($603<<16)>>16);
 if($604){label=116;break;}else{label=132;break;}
 case 116: 
 var $606=$40;
 var $607=($601&65535);
 var $608=(($606+($607<<2))|0);
 var $609=$range;
 var $storemerge_i_i2=$609;var $_0544=$606;label=117;break;
 case 117: 
 var $_0544;
 var $storemerge_i_i2;
 var $611=($_0544|0)==($608|0);
 if($611){label=120;break;}else{label=118;break;}
 case 118: 
 var $613=HEAP32[(($_0544)>>2)];
 var $614=HEAP32[(($storemerge_i_i2)>>2)];
 var $615=($613|0)==($614|0);
 if($615){label=119;break;}else{label=132;break;}
 case 119: 
 var $617=(($_0544+4)|0);
 var $618=(($storemerge_i_i2+4)|0);
 var $storemerge_i_i2=$618;var $_0544=$617;label=117;break;
 case 120: 
 var $619=(($bucket_size)|0);
 var $620=HEAP8[($514)];
 var $621=$620&1;
 var $622=(($621<<24)>>24)==0;
 var $623=$bucket_size;
 var $624=HEAP32[(($623)>>2)];
 if($622){label=121;break;}else{label=123;break;}
 case 121: 
 var $626=($624|0)==-1;
 if($626){label=126;break;}else{label=122;break;}
 case 122: 
 var $628=((($624)+(1))|0);
 HEAP32[(($623)>>2)]=$628;
 label=132;break;
 case 123: 
 var $630=($624|0)==0;
 if($630){label=125;break;}else{label=124;break;}
 case 124: 
 var $632=((($624)-(1))|0);
 HEAP32[(($623)>>2)]=$632;
 label=132;break;
 case 125: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($619,$619,5512);
 label=132;break;
 case 126: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($619,$619,5512);
 label=132;break;
 case 127: 
 HEAP32[(($44)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($43,$brange,$44);
 HEAP32[(($46)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($45,$range,$46);
 var $636=$result_i;
 var $637=$result_i;
 HEAP32[(($637)>>2)]=0;
 var $638=(($result_i+128)|0);
 HEAP16[(($638)>>1)]=1;
 var $639=(($result_i+130)|0);
 HEAP8[($639)]=0;
 var $640=(($result_i)|0);
 var $641=(($43)|0);
 var $642=(($45)|0);
 var $643=$r_i_i;
 var $644=$r_i_i;
 HEAP32[(($644)>>2)]=0;
 var $645=(($r_i_i+128)|0);
 HEAP16[(($645)>>1)]=1;
 var $646=(($r_i_i+130)|0);
 HEAP8[($646)]=0;
 var $647=(($43+130)|0);
 var $648=HEAP8[($647)];
 var $649=$648&1;
 var $650=(($649<<24)>>24)!=0;
 var $651=(($45+130)|0);
 var $652=HEAP8[($651)];
 var $653=$652&1;
 var $654=(($653<<24)>>24)!=0;
 var $655=$650^$654;
 var $656=($655&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($640,$641,$642,$r_i_i);
 var $657=(($result_i+130)|0);
 HEAP8[($657)]=$656;
 if($655){label=128;break;}else{label=131;break;}
 case 128: 
 var $659=(($result_i+128)|0);
 var $660=HEAP16[(($659)>>1)];
 var $661=(($660<<16)>>16)==1;
 if($661){label=129;break;}else{label=131;break;}
 case 129: 
 var $663=$result_i;
 var $664=HEAP32[(($663)>>2)];
 var $665=($664|0)==0;
 if($665){label=130;break;}else{label=131;break;}
 case 130: 
 HEAP8[($657)]=0;
 label=131;break;
 case 131: 
 var $_sroa_0_0_cast80=$_sroa_0;
 assert(136 % 1 === 0);(_memcpy($_sroa_0_0_cast80, $636, 136)|0);
 var $_sroa_0_0__cast=$bucket_size;
 assert(131 % 1 === 0);(_memcpy($_sroa_0_0__cast, $_sroa_0_0_cast80, 131)|0);
 label=132;break;
 case 132: 
 var $667=$47;
 var $668=(($47+128)|0);
 var $669=(($47+130)|0);
 var $670=(($result1)|0);
 var $671=(($bucket_size)|0);
 var $672=$a_i_i_i;
 var $673=$result1;
 var $674=$r_i_i_i_i;
 var $675=$r_i_i_i_i;
 var $676=(($r_i_i_i_i+128)|0);
 var $677=(($r_i_i_i_i+130)|0);
 var $678=(($a_i_i_i+130)|0);
 var $679=(($bucket_size+130)|0);
 var $680=(($result1+130)|0);
 var $681=(($result1+128)|0);
 var $682=$result1;
 label=133;break;
 case 133: 
 var $684=__ZN5boost6random23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($eng);
 HEAP32[(($667)>>2)]=$684;
 HEAP16[(($668)>>1)]=1;
 HEAP8[($669)]=0;
 __ZN5boost6random6detail8subtractINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEELb1EEclERKSB_SE_($result1,$47,$bmin);
 assert(136 % 1 === 0);(_memcpy($672, $673, 136)|0);
 HEAP32[(($675)>>2)]=0;
 HEAP16[(($676)>>1)]=1;
 HEAP8[($677)]=0;
 var $685=HEAP8[($678)];
 var $686=$685&1;
 var $687=(($686<<24)>>24)!=0;
 var $688=HEAP8[($679)];
 var $689=$688&1;
 var $690=(($689<<24)>>24)!=0;
 var $691=$687^$690;
 var $692=($691&1);
 __ZN5boost14multiprecision8backends22divide_unsigned_helperINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvPT_RKT0_RKT1_RS7_($670,$a_i_i_i,$671,$r_i_i_i_i);
 HEAP8[($680)]=$692;
 if($691){label=134;break;}else{var $700=0;label=137;break;}
 case 134: 
 var $694=HEAP16[(($681)>>1)];
 var $695=(($694<<16)>>16)==1;
 if($695){label=135;break;}else{var $700=$692;label=137;break;}
 case 135: 
 var $697=HEAP32[(($682)>>2)];
 var $698=($697|0)==0;
 if($698){label=136;break;}else{var $700=$692;label=137;break;}
 case 136: 
 HEAP8[($680)]=0;
 var $700=0;label=137;break;
 case 137: 
 var $700;
 var $701=(($700<<24)>>24)!=0;
 var $702=HEAP8[($58)];
 var $703=$702&1;
 var $704=(($703<<24)>>24)!=0;
 var $705=$701^$704;
 if($705){label=138;break;}else{label=139;break;}
 case 138: 
 var $707=($701?-1:1);
 var $storemerge_i_i_i_i=$707;label=141;break;
 case 139: 
 var $709=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($670,$57);
 var $710=(($700<<24)>>24)==0;
 if($710){var $storemerge_i_i_i_i=$709;label=141;break;}else{label=140;break;}
 case 140: 
 var $712=(((-$709))|0);
 var $storemerge_i_i_i_i=$712;label=141;break;
 case 141: 
 var $storemerge_i_i_i_i;
 var $713=($storemerge_i_i_i_i|0)<1;
 if($713){label=142;break;}else{label=133;break;}
 case 142: 
 var $715=$result_i68;
 var $716=$result_i68;
 HEAP32[(($716)>>2)]=0;
 var $717=(($result_i68+128)|0);
 HEAP16[(($717)>>1)]=1;
 var $718=(($result_i68+130)|0);
 HEAP8[($718)]=0;
 var $719=(($result_i68)|0);
 var $720=(($min_value)|0);
 var $721=(($min_value+130)|0);
 var $722=HEAP8[($721)];
 var $723=$722&1;
 var $724=(($723<<24)>>24)!=0;
 var $725=$701^$724;
 if($725){label=143;break;}else{label=144;break;}
 case 143: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($719,$670,$720);
 label=145;break;
 case 144: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($719,$670,$720);
 label=145;break;
 case 145: 
 var $728=$agg_result;
 assert(136 % 1 === 0);(_memcpy($728, $715, 136)|0);
 label=146;break;
 case 146: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost6random6detail8subtractINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEELb1EEclERKSB_SE_($agg_result,$x,$y){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $result_i=sp;
 var $1=$result_i;
 var $2=$result_i;
 HEAP32[(($2)>>2)]=0;
 var $3=(($result_i+128)|0);
 HEAP16[(($3)>>1)]=1;
 var $4=(($result_i+130)|0);
 HEAP8[($4)]=0;
 var $5=(($result_i)|0);
 var $6=(($x)|0);
 var $7=(($y)|0);
 var $8=(($x+130)|0);
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)!=0;
 var $12=(($y+130)|0);
 var $13=HEAP8[($12)];
 var $14=$13&1;
 var $15=(($14<<24)>>24)!=0;
 var $16=$11^$15;
 if($16){label=2;break;}else{label=3;break;}
 case 2: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($5,$6,$7);
 label=4;break;
 case 3: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($5,$6,$7);
 label=4;break;
 case 4: 
 var $19=$agg_result;
 assert(136 % 1 === 0);(_memcpy($19, $1, 136)|0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost6random23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+2496)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==624;
 if($3){var $storemerge_i=0;label=3;break;}else{label=2;break;}
 case 2: 
 var $_phi_trans_insert=(($this+($2<<2))|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $phitmp=((($2)+(1))|0);
 var $98=$phitmp;var $97=$_pre;label=12;break;
 case 3: 
 var $storemerge_i;
 var $5=($storemerge_i>>>0)<222;
 if($5){label=4;break;}else{var $storemerge1_i=222;label=5;break;}
 case 4: 
 var $7=(($this+($storemerge_i<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2147483648;
 var $10=((($storemerge_i)+(1))|0);
 var $11=(($this+($10<<2))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&2147483646;
 var $14=$9|$13;
 var $15=((($storemerge_i)+(397))|0);
 var $16=(($this+($15<<2))|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$14>>>1;
 var $19=$17^$18;
 var $20=$12&1;
 var $21=(((-$20))|0);
 var $22=$21&-1727483681;
 var $23=$19^$22;
 HEAP32[(($7)>>2)]=$23;
 var $storemerge_i=$10;label=3;break;
 case 5: 
 var $storemerge1_i;
 var $24=($storemerge1_i>>>0)<227;
 if($24){label=6;break;}else{var $storemerge2_i=227;label=7;break;}
 case 6: 
 var $26=(($this+($storemerge1_i<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$27&-2147483648;
 var $29=((($storemerge1_i)+(1))|0);
 var $30=(($this+($29<<2))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31&2147483646;
 var $33=$28|$32;
 var $34=((($storemerge1_i)+(397))|0);
 var $35=(($this+($34<<2))|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$33>>>1;
 var $38=$36^$37;
 var $39=$31&1;
 var $40=(((-$39))|0);
 var $41=$40&-1727483681;
 var $42=$38^$41;
 HEAP32[(($26)>>2)]=$42;
 var $storemerge1_i=$29;label=5;break;
 case 7: 
 var $storemerge2_i;
 var $43=($storemerge2_i>>>0)<623;
 if($43){label=8;break;}else{var $storemerge3_i=623;label=9;break;}
 case 8: 
 var $45=(($this+($storemerge2_i<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=$46&-2147483648;
 var $48=((($storemerge2_i)+(1))|0);
 var $49=(($this+($48<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=$50&2147483646;
 var $52=$47|$51;
 var $53=((($storemerge2_i)-(227))|0);
 var $54=(($this+($53<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$52>>>1;
 var $57=$55^$56;
 var $58=$50&1;
 var $59=(((-$58))|0);
 var $60=$59&-1727483681;
 var $61=$57^$60;
 HEAP32[(($45)>>2)]=$61;
 var $storemerge2_i=$48;label=7;break;
 case 9: 
 var $storemerge3_i;
 var $62=($storemerge3_i>>>0)<623;
 if($62){label=10;break;}else{label=11;break;}
 case 10: 
 var $64=(($this+($storemerge3_i<<2))|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&-2147483648;
 var $67=((($storemerge3_i)+(1))|0);
 var $68=(($this+($67<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&2147483646;
 var $71=$66|$70;
 var $72=((($storemerge3_i)-(227))|0);
 var $73=(($this+($72<<2))|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$71>>>1;
 var $76=$74^$75;
 var $77=$69&1;
 var $78=(((-$77))|0);
 var $79=$78&-1727483681;
 var $80=$76^$79;
 HEAP32[(($64)>>2)]=$80;
 var $storemerge3_i=$67;label=9;break;
 case 11: 
 var $81=(($this+2492)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$82&-2147483648;
 var $84=(($this)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=$85&2147483646;
 var $87=$83|$86;
 var $88=(($this+1584)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=$87>>>1;
 var $91=$89^$90;
 var $92=$85&1;
 var $93=(((-$92))|0);
 var $94=$93&-1727483681;
 var $95=$91^$94;
 HEAP32[(($81)>>2)]=$95;
 HEAP32[(($1)>>2)]=0;
 var $98=1;var $97=$85;label=12;break;
 case 12: 
 var $97;
 var $98;
 HEAP32[(($1)>>2)]=$98;
 var $99=$97>>>11;
 var $100=$97^$99;
 var $101=$100<<7;
 var $102=$101&-1658038656;
 var $103=$100^$102;
 var $104=$103<<15;
 var $105=$104&-272236544;
 var $106=$103^$105;
 var $107=$106>>>18;
 var $108=$106^$107;
 return $108;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost6random6detail3addINS_14multiprecision6numberINS3_8backends15cpp_int_backendILj1024ELj1024ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0EvEELNS3_26expression_template_optionE0EEESB_Lb1EEclESB_SB_($agg_result,$x,$y){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1656)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $result_i4=sp;
 var $_sroa_063=(sp)+(136);
 var $_sroa_372=(sp)+(264);
 var $_sroa_0=(sp)+(272);
 var $_sroa_3=(sp)+(400);
 var $result_i1=(sp)+(408);
 var $result_i=(sp)+(544);
 var $0=(sp)+(680);
 var $1=(sp)+(816);
 var $2=(sp)+(952);
 var $3=(sp)+(1088);
 var $4=(sp)+(1096);
 var $5=(sp)+(1232);
 var $6=(sp)+(1368);
 var $7=(sp)+(1504);
 var $8=(sp)+(1512);
 var $9=(sp)+(1520);
 var $10=(($y)|0);
 var $11=(($y+130)|0);
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=2;break;}else{label=6;break;}
 case 2: 
 var $16=$0;
 var $17=$x;
 assert(136 % 1 === 0);(_memcpy($16, $17, 136)|0);
 var $18=$result_i1;
 var $19=$result_i1;
 HEAP32[(($19)>>2)]=0;
 var $20=(($result_i1+128)|0);
 HEAP16[(($20)>>1)]=1;
 var $21=(($result_i1+130)|0);
 HEAP8[($21)]=0;
 var $22=(($result_i1)|0);
 var $23=(($0)|0);
 var $24=(($0+130)|0);
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=4;break;}else{label=3;break;}
 case 3: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($22,$23,$10);
 label=5;break;
 case 4: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($22,$23,$10);
 label=5;break;
 case 5: 
 var $30=$agg_result;
 assert(136 % 1 === 0);(_memcpy($30, $18, 136)|0);
 label=25;break;
 case 6: 
 HEAP32[(($3)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($2,$y,$3);
 var $_sroa_0_0_cast50=$_sroa_0;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;
 var $_sroa_3_0_idx=(($_sroa_3)|0);
 var $$etemp$1$0=5;
 var $$etemp$1$1=0;
 var $_sroa_0_0__cast=$2;
 assert(128 % 1 === 0);(_memcpy($_sroa_0_0_cast50, $_sroa_0_0__cast, 128)|0);
 var $32=(($2+128)|0);
 var $33=HEAP16[(($32)>>1)];
 var $34=(($33<<16)>>16)==1;
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 var $36=$2;
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){var $44=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $40=(($2+130)|0);
 var $41=HEAP8[($40)];
 var $42=$41&1;
 var $43=$42^1;
 var $44=$43;label=9;break;
 case 9: 
 var $44;
 var $_sroa_0_0__cast43=$1;
 assert(128 % 1 === 0);(_memcpy($_sroa_0_0__cast43, $_sroa_0_0_cast50, 128)|0);
 var $_sroa_1_128__idx46=(($1+128)|0);
 HEAP16[(($_sroa_1_128__idx46)>>1)]=$33;
 var $_sroa_2_130__idx=(($1+130)|0);
 HEAP8[($_sroa_2_130__idx)]=$44;
 var $_sroa_3_131__raw_idx=(($_sroa_0_0__cast43+131)|0);
 assert(5 % 1 === 0);HEAP8[($_sroa_3_131__raw_idx)]=HEAP8[($_sroa_3_0_idx)];HEAP8[((($_sroa_3_131__raw_idx)+(1))|0)]=HEAP8[((($_sroa_3_0_idx)+(1))|0)];HEAP8[((($_sroa_3_131__raw_idx)+(2))|0)]=HEAP8[((($_sroa_3_0_idx)+(2))|0)];HEAP8[((($_sroa_3_131__raw_idx)+(3))|0)]=HEAP8[((($_sroa_3_0_idx)+(3))|0)];HEAP8[((($_sroa_3_131__raw_idx)+(4))|0)]=HEAP8[((($_sroa_3_0_idx)+(4))|0)];
 var $$etemp$2$0=128;
 var $$etemp$2$1=0;
 var $$etemp$3$0=5;
 var $$etemp$3$1=0;
 var $45=(($x+130)|0);
 var $46=HEAP8[($45)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)!=0;
 var $49=$44&1;
 var $50=(($49<<24)>>24)!=0;
 var $51=$48^$50;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=($48?-1:1);
 var $storemerge_i_i_i_i=$53;label=13;break;
 case 11: 
 var $55=(($1)|0);
 var $56=(($x)|0);
 var $57=__ZNK5boost14multiprecision8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvE16compare_unsignedILj1024ELj1024ELS3_1ELS4_0EvEEiRKNS2_IXT_EXT0_EXT1_EXT2_ET3_EE($56,$55);
 var $58=(($47<<24)>>24)==0;
 if($58){var $storemerge_i_i_i_i=$57;label=13;break;}else{label=12;break;}
 case 12: 
 var $60=(((-$57))|0);
 var $storemerge_i_i_i_i=$60;label=13;break;
 case 13: 
 var $storemerge_i_i_i_i;
 var $61=($storemerge_i_i_i_i|0)>0;
 if($61){label=14;break;}else{label=21;break;}
 case 14: 
 HEAP32[(($7)>>2)]=1;
 __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($6,$y,$7);
 var $_sroa_063_0_cast76=$_sroa_063;
 var $$etemp$4$0=128;
 var $$etemp$4$1=0;
 var $_sroa_372_0_idx=(($_sroa_372)|0);
 var $$etemp$5$0=5;
 var $$etemp$5$1=0;
 var $_sroa_063_0__cast=$6;
 assert(128 % 1 === 0);(_memcpy($_sroa_063_0_cast76, $_sroa_063_0__cast, 128)|0);
 var $63=(($6+128)|0);
 var $64=HEAP16[(($63)>>1)];
 var $65=(($64<<16)>>16)==1;
 if($65){label=15;break;}else{label=16;break;}
 case 15: 
 var $67=$6;
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){var $75=0;label=17;break;}else{label=16;break;}
 case 16: 
 var $71=(($6+130)|0);
 var $72=HEAP8[($71)];
 var $73=$72&1;
 var $74=$73^1;
 var $75=$74;label=17;break;
 case 17: 
 var $75;
 var $_sroa_063_0__cast66=$5;
 assert(128 % 1 === 0);(_memcpy($_sroa_063_0__cast66, $_sroa_063_0_cast76, 128)|0);
 var $_sroa_168_128__idx70=(($5+128)|0);
 HEAP16[(($_sroa_168_128__idx70)>>1)]=$64;
 var $_sroa_271_130__idx=(($5+130)|0);
 HEAP8[($_sroa_271_130__idx)]=$75;
 var $_sroa_372_131__raw_idx=(($_sroa_063_0__cast66+131)|0);
 assert(5 % 1 === 0);HEAP8[($_sroa_372_131__raw_idx)]=HEAP8[($_sroa_372_0_idx)];HEAP8[((($_sroa_372_131__raw_idx)+(1))|0)]=HEAP8[((($_sroa_372_0_idx)+(1))|0)];HEAP8[((($_sroa_372_131__raw_idx)+(2))|0)]=HEAP8[((($_sroa_372_0_idx)+(2))|0)];HEAP8[((($_sroa_372_131__raw_idx)+(3))|0)]=HEAP8[((($_sroa_372_0_idx)+(3))|0)];HEAP8[((($_sroa_372_131__raw_idx)+(4))|0)]=HEAP8[((($_sroa_372_0_idx)+(4))|0)];
 var $$etemp$6$0=128;
 var $$etemp$6$1=0;
 var $$etemp$7$0=5;
 var $$etemp$7$1=0;
 var $76=$result_i4;
 var $77=$result_i4;
 HEAP32[(($77)>>2)]=0;
 var $78=(($result_i4+128)|0);
 HEAP16[(($78)>>1)]=1;
 var $79=(($result_i4+130)|0);
 HEAP8[($79)]=0;
 var $80=(($result_i4)|0);
 var $81=(($x)|0);
 var $82=(($5)|0);
 var $83=HEAP8[($45)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)!=0;
 var $86=$75&1;
 var $87=(($86<<24)>>24)!=0;
 var $88=$85^$87;
 if($88){label=18;break;}else{label=19;break;}
 case 18: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($80,$81,$82);
 label=20;break;
 case 19: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($80,$81,$82);
 label=20;break;
 case 20: 
 var $91=$4;
 assert(136 % 1 === 0);(_memcpy($91, $76, 136)|0);
 HEAP32[(($8)>>2)]=1;
 __ZN5boost14multiprecisionmiINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($agg_result,$4,$8);
 label=25;break;
 case 21: 
 var $93=$9;
 var $94=$x;
 assert(136 % 1 === 0);(_memcpy($93, $94, 136)|0);
 var $95=$result_i;
 var $96=$result_i;
 HEAP32[(($96)>>2)]=0;
 var $97=(($result_i+128)|0);
 HEAP16[(($97)>>1)]=1;
 var $98=(($result_i+130)|0);
 HEAP8[($98)]=0;
 var $99=(($result_i)|0);
 var $100=(($9)|0);
 var $101=(($9+130)|0);
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)!=0;
 var $105=(($y+130)|0);
 var $106=HEAP8[($105)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)!=0;
 var $109=$104^$108;
 if($109){label=22;break;}else{label=23;break;}
 case 22: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($99,$100,$10);
 label=24;break;
 case 23: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_S6_EEvRT_RKT0_RKT1_($99,$100,$10);
 label=24;break;
 case 24: 
 var $112=$agg_result;
 assert(136 % 1 === 0);(_memcpy($112, $95, 136)|0);
 label=25;break;
 case 25: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecisionplINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEEiEENS_9enable_ifINS0_29is_compatible_arithmetic_typeIT0_NS0_6numberIT_LNS0_26expression_template_optionE0EEEEESD_E4typeERKSD_RKS9_($agg_result,$a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+152)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $result=(sp)+(16);
 var $3=$result;
 HEAP32[(($3)>>2)]=0;
 var $4=(($result+128)|0);
 HEAP16[(($4)>>1)]=1;
 var $5=(($result+130)|0);
 HEAP8[($5)]=0;
 var $6=(($result)|0);
 var $7=(($a)|0);
 var $8=HEAP32[(($b)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=($8|0)<0;
 if($11){label=2;break;}else{label=5;break;}
 case 2: 
 var $13=(((-$8))|0);
 HEAP32[(($1)>>2)]=$13;
 var $14=(($a+130)|0);
 var $15=HEAP8[($14)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=4;break;}else{label=3;break;}
 case 3: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$1);
 label=10;break;
 case 4: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$1);
 label=10;break;
 case 5: 
 var $21=($8|0)>0;
 if($21){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($2)>>2)]=$8;
 var $23=(($a+130)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=8;break;}else{label=7;break;}
 case 7: 
 __ZN5boost14multiprecision8backends17subtract_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$2);
 label=10;break;
 case 8: 
 __ZN5boost14multiprecision8backends12add_unsignedINS1_15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEES6_EEvRT_RKT0_RKm($6,$7,$2);
 label=10;break;
 case 9: 
 var $29=(($a+128)|0);
 var $30=HEAP16[(($29)>>1)];
 var $31=($30&65535);
 var $32=($30&65535)>32;
 var $_=($32?32:$30);
 var $33=(($result+128)|0);
 HEAP16[(($33)>>1)]=$_;
 var $34=$a;
 var $35=(($34+($31<<2))|0);
 var $36=$35;
 var $37=$a;
 var $38=((($36)-($37))|0);
 var $39=$result;
 var $40=$a;
 assert($38 % 1 === 0);(_memcpy($39, $40, $38)|0);
 var $41=(($a+130)|0);
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($result+130)|0);
 HEAP8[($44)]=$43;
 label=10;break;
 case 10: 
 var $45=$agg_result;
 var $46=$result;
 assert(136 % 1 === 0);(_memcpy($45, $46, 136)|0);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($result,$a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $l=sp;
 var $l2=(sp)+(8);
 var $t=(sp)+(16);
 var $t3=(sp)+(152);
 var $1=(($a+128)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=(($b+128)|0);
 var $5=HEAP16[(($4)>>1)];
 var $6=($5&65535);
 var $7=$a;
 var $8=$b;
 var $9=(($2<<16)>>16)==1;
 if($9){label=2;break;}else{label=9;break;}
 case 2: 
 var $11=(($b+130)|0);
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)!=0;
 var $15=(($a+130)|0);
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)!=0;
 var $19=$14^$18;
 var $20=($19&1);
 var $21=(($5<<16)>>16)==1;
 var $22=HEAP32[(($7)>>2)];
 if($21){label=3;break;}else{label=4;break;}
 case 3: 
 var $24$0=$22;
 var $24$1=0;
 var $25=HEAP32[(($8)>>2)];
 var $26$0=$25;
 var $26$1=0;
 var $27$0=___muldi3($24$0,$24$1,$26$0,$26$1);var $27$1=tempRet0;
 var $28=$result;
 var $29$0=$27$0;
 var $29=$29$0;
 HEAP32[(($28)>>2)]=$29;
 var $30$0=$27$1;
 var $30$1=0;
 var $31$0=$30$0;
 var $31=$31$0;
 var $32=(($28+4)|0);
 HEAP32[(($32)>>2)]=$31;
 var $33=($31|0)!=0;
 var $34=($33?2:1);
 var $35=(($result+128)|0);
 HEAP16[(($35)>>1)]=$34;
 var $36=(($result+130)|0);
 HEAP8[($36)]=0;
 var $_pre_phi=$36;label=5;break;
 case 4: 
 HEAP32[(($l)>>2)]=$22;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($result,$b,$l);
 var $_pre86=(($result+130)|0);
 var $_pre_phi=$_pre86;label=5;break;
 case 5: 
 var $_pre_phi;
 HEAP8[($_pre_phi)]=$20;
 if($19){label=6;break;}else{label=41;break;}
 case 6: 
 var $40=(($result+128)|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=(($41<<16)>>16)==1;
 if($42){label=7;break;}else{label=41;break;}
 case 7: 
 var $44=$result;
 var $45=HEAP32[(($44)>>2)];
 var $46=($45|0)==0;
 if($46){label=8;break;}else{label=41;break;}
 case 8: 
 HEAP8[($_pre_phi)]=0;
 label=41;break;
 case 9: 
 var $49=(($5<<16)>>16)==1;
 if($49){label=10;break;}else{label=14;break;}
 case 10: 
 var $51=(($b+130)|0);
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)!=0;
 var $55=(($a+130)|0);
 var $56=HEAP8[($55)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)!=0;
 var $59=$54^$58;
 var $60=($59&1);
 var $61=HEAP32[(($8)>>2)];
 HEAP32[(($l2)>>2)]=$61;
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($result,$a,$l2);
 var $62=(($result+130)|0);
 HEAP8[($62)]=$60;
 if($59){label=11;break;}else{label=41;break;}
 case 11: 
 var $64=(($result+128)|0);
 var $65=HEAP16[(($64)>>1)];
 var $66=(($65<<16)>>16)==1;
 if($66){label=12;break;}else{label=41;break;}
 case 12: 
 var $68=$result;
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){label=13;break;}else{label=41;break;}
 case 13: 
 HEAP8[($62)]=0;
 label=41;break;
 case 14: 
 var $73=($result|0)==($a|0);
 if($73){label=15;break;}else{label=16;break;}
 case 15: 
 var $75=$t;
 var $76=$a;
 assert(136 % 1 === 0);(_memcpy($75, $76, 136)|0);
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($a,$t,$b);
 label=41;break;
 case 16: 
 var $78=($result|0)==($b|0);
 if($78){label=17;break;}else{label=18;break;}
 case 17: 
 var $80=$t3;
 var $81=$b;
 assert(136 % 1 === 0);(_memcpy($80, $81, 136)|0);
 __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaaaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT9_EXT10_EXT11_EXT12_ET13_EEEE5valueEvE4typeERS8_RKSA_RKSC_($b,$a,$t3);
 label=41;break;
 case 18: 
 var $82=((($3)+($6))|0);
 var $83=($82>>>0)>32;
 var $extract_t=(($82)&65535);
 var $_extract_t=($83?32:$extract_t);
 var $84=(($result+128)|0);
 HEAP16[(($84)>>1)]=$_extract_t;
 var $85=$result;
 var $86=$result;
 var $87=($_extract_t&65535);
 var $88=$87<<2;
 _memset($86, 0, $88)|0;
 var $storemerge=0;label=19;break;
 case 19: 
 var $storemerge;
 var $90=($storemerge>>>0)<($3>>>0);
 var $91=HEAP16[(($84)>>1)];
 if($90){label=20;break;}else{var $136=$91;label=32;break;}
 case 20: 
 var $92=($91&65535);
 var $93=((($92)-($storemerge))|0);
 var $94=($6>>>0)<($93>>>0);
 var $_=($94?$6:$93);
 var $95=(($7+($storemerge<<2))|0);
 var $storemerge1=0;var $carry_1$1=0;var $carry_1$0=0;label=21;break;
 case 21: 
 var $carry_1$0;
 var $carry_1$1;
 var $storemerge1;
 var $97=($storemerge1>>>0)<($_>>>0);
 if($97){label=22;break;}else{label=29;break;}
 case 22: 
 var $99=((($storemerge)+($storemerge1))|0);
 var $100=HEAP16[(($84)>>1)];
 var $101=($100&65535);
 var $102=($99>>>0)<($101>>>0);
 if($102){label=25;break;}else{label=23;break;}
 case 23: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2432,2360,132,3624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=42;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $106=HEAP32[(($95)>>2)];
 var $107$0=$106;
 var $107$1=0;
 var $108=(($8+($storemerge1<<2))|0);
 var $109=HEAP32[(($108)>>2)];
 var $110$0=$109;
 var $110$1=0;
 var $111$0=___muldi3($107$0,$107$1,$110$0,$110$1);var $111$1=tempRet0;
 var $112$0=_i64Add($carry_1$0,$carry_1$1,$111$0,$111$1);var $112$1=tempRet0;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $113$0=$112$0^$$etemp$0$0;
 var $113$1=$112$1^$$etemp$0$1;
 var $114=(($85+($99<<2))|0);
 var $115=HEAP32[(($114)>>2)];
 var $116$0=$115;
 var $116$1=0;
 var $117=(($116$1>>>0) > ($113$1>>>0)) | (((($116$1>>>0) == ($113$1>>>0) & ($116$0>>>0) >  ($113$0>>>0))));
 if($117){label=26;break;}else{label=28;break;}
 case 26: 
 (function() { try { __THREW__ = 0; return ___assert_fail(2224,2360,138,3624) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=42;break; }
 case 27: 
 throw "Reached an unreachable!";
 case 28: 
 var $121$0=_i64Add($112$0,$112$1,$116$0,$116$1);var $121$1=tempRet0;
 var $122$0=$121$0;
 var $122=$122$0;
 HEAP32[(($114)>>2)]=$122;
 var $123$0=$121$1;
 var $123$1=0;
 var $124=((($storemerge1)+(1))|0);
 var $storemerge1=$124;var $carry_1$1=$123$1;var $carry_1$0=$123$0;label=21;break;
 case 29: 
 var $126=((($storemerge)+($6))|0);
 var $127=HEAP16[(($84)>>1)];
 var $128=($127&65535);
 var $129=($126>>>0)<($128>>>0);
 if($129){label=30;break;}else{label=31;break;}
 case 30: 
 var $131$0=$carry_1$0;
 var $131=$131$0;
 var $132=(($85+($126<<2))|0);
 HEAP32[(($132)>>2)]=$131;
 label=31;break;
 case 31: 
 var $134=((($storemerge)+(1))|0);
 var $storemerge=$134;label=19;break;
 case 32: 
 var $136;
 var $137=(($136<<16)>>16)==1;
 if($137){var $148=1;label=36;break;}else{label=33;break;}
 case 33: 
 var $139=($136&65535);
 var $140=((($139)-(1))|0);
 var $141=(($85+($140<<2))|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=34;break;}else{var $146=$136;label=35;break;}
 case 34: 
 var $145=((($136)-(1))&65535);
 HEAP16[(($84)>>1)]=$145;
 var $136=$145;label=32;break;
 case 35: 
 var $146;
 var $147=(($146<<16)>>16)==1;
 if($147){var $148=$147;label=36;break;}else{var $153=$147;label=38;break;}
 case 36: 
 var $148;
 var $149=HEAP32[(($85)>>2)];
 var $150=($149|0)==0;
 if($150){label=37;break;}else{var $153=$148;label=38;break;}
 case 37: 
 var $152=(($result+130)|0);
 HEAP8[($152)]=0;
 var $153=$148;label=38;break;
 case 38: 
 var $153;
 var $154=(($a+130)|0);
 var $155=HEAP8[($154)];
 var $156=$155&1;
 var $157=(($156<<24)>>24)!=0;
 var $158=(($b+130)|0);
 var $159=HEAP8[($158)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)!=0;
 var $162=$157^$161;
 var $163=(($result+130)|0);
 var $164=($162&1);
 HEAP8[($163)]=$164;
 var $_not=$162^1;
 var $_not87=$153^1;
 var $brmerge=$_not|$_not87;
 if($brmerge){label=41;break;}else{label=39;break;}
 case 39: 
 var $166=HEAP32[(($85)>>2)];
 var $167=($166|0)==0;
 if($167){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP8[($163)]=0;
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
 case 42: 
 var $170$0 = ___cxa_find_matching_catch(-1, -1,0); var $170$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends13eval_multiplyILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_RKm($result,$a,$val){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($val)>>2)];
 var $2=($1|0)==0;
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=(($result+128)|0);
 HEAP16[(($4)>>1)]=1;
 var $5=$result;
 HEAP32[(($5)>>2)]=0;
 var $6=(($result+130)|0);
 HEAP8[($6)]=0;
 label=21;break;
 case 3: 
 var $8=($a|0)==($result|0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $_phi_trans_insert=(($result+128)|0);
 var $_pre47=HEAP16[(($_phi_trans_insert)>>1)];
 var $14=$_pre47;label=6;break;
 case 5: 
 var $9=(($a+128)|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=($10&65535)>32;
 var $_=($11?32:$10);
 var $12=(($result+128)|0);
 HEAP16[(($12)>>1)]=$_;
 var $14=$_;label=6;break;
 case 6: 
 var $14;
 var $15=$result;
 var $16=(($result+128)|0);
 var $17=($14&65535);
 var $18=(($15+($17<<2))|0);
 var $19=$a;
 var $storemerge=$19;var $carry_0$1=0;var $carry_0$0=0;var $p_0=$15;label=7;break;
 case 7: 
 var $p_0;
 var $carry_0$0;
 var $carry_0$1;
 var $storemerge;
 var $21=($p_0|0)==($18|0);
 if($21){label=9;break;}else{label=8;break;}
 case 8: 
 var $23=HEAP32[(($storemerge)>>2)];
 var $24$0=$23;
 var $24$1=0;
 var $25=HEAP32[(($val)>>2)];
 var $26$0=$25;
 var $26$1=0;
 var $27$0=___muldi3($24$0,$24$1,$26$0,$26$1);var $27$1=tempRet0;
 var $28$0=_i64Add($carry_0$0,$carry_0$1,$27$0,$27$1);var $28$1=tempRet0;
 var $29$0=$28$0;
 var $29=$29$0;
 HEAP32[(($p_0)>>2)]=$29;
 var $30$0=$28$1;
 var $30$1=0;
 var $31=(($p_0+4)|0);
 var $32=(($storemerge+4)|0);
 var $storemerge=$32;var $carry_0$1=$30$1;var $carry_0$0=$30$0;var $p_0=$31;label=7;break;
 case 9: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $34=(($carry_0$0|0) == ($$etemp$0$0|0)) & (($carry_0$1|0) == ($$etemp$0$1|0));
 if($34){label=12;break;}else{label=10;break;}
 case 10: 
 var $35=HEAP16[(($16)>>1)];
 var $36=($35&65535);
 var $37=((($36)+(1))|0);
 var $38=($37>>>0)>32;
 var $extract_t=(($37)&65535);
 var $_extract_t=($38?32:$extract_t);
 HEAP16[(($16)>>1)]=$_extract_t;
 var $39=($_extract_t&65535)>($35&65535);
 if($39){label=11;break;}else{label=12;break;}
 case 11: 
 var $41$0=$carry_0$0;
 var $41=$41$0;
 var $42=(($15+($36<<2))|0);
 HEAP32[(($42)>>2)]=$41;
 label=12;break;
 case 12: 
 var $44=(($a+130)|0);
 var $45=HEAP8[($44)];
 var $46=$45&1;
 var $47=(($46<<24)>>24)!=0;
 var $48=(($result+130)|0);
 HEAP8[($48)]=$46;
 var $_pre_pre=HEAP16[(($16)>>1)];
 var $49=(($_pre_pre<<16)>>16)==1;
 var $or_cond=$47&$49;
 if($or_cond){label=13;break;}else{var $54=$_pre_pre;label=15;break;}
 case 13: 
 var $51=HEAP32[(($15)>>2)];
 var $52=($51|0)==0;
 if($52){label=14;break;}else{var $54=1;label=15;break;}
 case 14: 
 HEAP8[($48)]=0;
 var $54=1;label=15;break;
 case 15: 
 var $54;
 var $55=(($54<<16)>>16)==1;
 if($55){label=19;break;}else{label=16;break;}
 case 16: 
 var $57=($54&65535);
 var $58=((($57)-(1))|0);
 var $59=(($15+($58<<2))|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==0;
 if($61){label=17;break;}else{var $64=$54;label=18;break;}
 case 17: 
 var $63=((($54)-(1))&65535);
 HEAP16[(($16)>>1)]=$63;
 var $54=$63;label=15;break;
 case 18: 
 var $64;
 var $65=(($64<<16)>>16)==1;
 if($65){label=19;break;}else{label=21;break;}
 case 19: 
 var $66=HEAP32[(($15)>>2)];
 var $67=($66|0)==0;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP8[($48)]=0;
 label=21;break;
 case 21: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail16throw_exception_ISt11range_errorEEvRKT_PKcS7_i($x,$current_function,$line){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=sp;
 var $1=(($x+4)|0);
 var $_idx_val_i_i_i_i_i=HEAP32[(($1)>>2)];
 var $2=((($_idx_val_i_i_i_i_i)-(4))|0);
 var $3=$2;
 var $4=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+1,tempValue);
 var $5=$0;
 var $6=___cxa_allocate_exception(32);
 var $7=(($0)|0);
 HEAP32[(($7)>>2)]=5944;
 var $8=(($0+4)|0);
 HEAP32[(($8)>>2)]=$_idx_val_i_i_i_i_i;
 var $9=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+1,tempValue);
 HEAP32[(($7)>>2)]=6040;
 var $10=(($0+8)|0);
 HEAP32[(($10)>>2)]=8752;
 var $11=(($0+12)|0);
 HEAP32[(($11)>>2)]=0;
 var $12=(($0+16)|0);
 HEAP32[(($12)>>2)]=$current_function;
 var $13=(($0+20)|0);
 HEAP32[(($13)>>2)]=1944;
 var $14=(($0+24)|0);
 HEAP32[(($14)>>2)]=$line;
 HEAP32[(($7)>>2)]=8872;
 HEAP32[(($10)>>2)]=8892;
 var $15=(($6+28)|0);
 var $16=$15;
 HEAP32[(($16)>>2)]=9208;
 var $17=$6;
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail19error_info_injectorISt11range_errorEC2ERKS3_($17,$0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=3;break; }
 case 2: 
 var $19=$6;
 HEAP32[(($19)>>2)]=9116;
 var $20=(($6+8)|0);
 var $21=$20;
 HEAP32[(($21)>>2)]=9144;
 HEAP32[(($16)>>2)]=9172;
 var $22=$20;
 var $23=(($0+8)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($22,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=4;break; }
 case 3: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_0=$26;var $_050=$27;label=12;break;
 case 4: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 var $31=$29$1;
 HEAP32[(($21)>>2)]=8752;
 var $32=(($6+12)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=9;break;}else{label=5;break;}
 case 5: 
 var $37=$34;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+16)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 if($41){label=7;break;}else{label=9;break;}
 case 7: 
 HEAP32[(($33)>>2)]=0;
 label=9;break;
 case 8: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 HEAP32[(($19)>>2)]=5944;
 var $45=(($6+4)|0);
 var $46=$45;
 var $this_idx_val_i_i_i_i_i_i=HEAP32[(($46)>>2)];
 var $47=((($this_idx_val_i_i_i_i_i_i)-(4))|0);
 var $48=$47;
 var $49=(tempValue=HEAP32[(($48)>>2)],HEAP32[(($48)>>2)]=tempValue+-1,tempValue);
 var $50=((($49)-(1))|0);
 var $51=($50|0)<0;
 if($51){label=10;break;}else{var $_0=$30;var $_050=$31;label=12;break;}
 case 10: 
 var $53=HEAP32[(($46)>>2)];
 var $54=((($53)-(12))|0);
 var $55=($54|0)==0;
 if($55){var $_0=$30;var $_050=$31;label=12;break;}else{label=11;break;}
 case 11: 
 _free($54);
 var $_0=$30;var $_050=$31;label=12;break;
 case 12: 
 var $_050;
 var $_0;
 var $56$0=$_0;
 var $56$1=0;
 var $57$0=$56$0;
 var $57$1=$_050;
 var $eh_lpad_body2_i$1=$57$1;var $eh_lpad_body2_i$0=$57$0;var $_053=1;label=15;break;
 case 13: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($6,15336,(202)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=14;break; }
 case 14: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $eh_lpad_body2_i$1=$59$1;var $eh_lpad_body2_i$0=$59$0;var $_053=0;label=15;break;
 case 15: 
 var $_053;
 var $eh_lpad_body2_i$0;
 var $eh_lpad_body2_i$1;
 var $60=$eh_lpad_body2_i$0;
 var $61=$eh_lpad_body2_i$1;
 HEAP32[(($10)>>2)]=8752;
 var $62=HEAP32[(($11)>>2)];
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=16;break;}
 case 16: 
 var $65=$62;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 17: 
 if($69){label=18;break;}else{label=20;break;}
 case 18: 
 HEAP32[(($11)>>2)]=0;
 label=20;break;
 case 19: 
 var $72$0 = ___cxa_find_matching_catch(-1, -1,0); var $72$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 HEAP32[(($7)>>2)]=5944;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($8)>>2)];
 var $73=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $74=$73;
 var $75=(tempValue=HEAP32[(($74)>>2)],HEAP32[(($74)>>2)]=tempValue+-1,tempValue);
 var $76=((($75)-(1))|0);
 var $77=($76|0)<0;
 if($77){label=21;break;}else{label=23;break;}
 case 21: 
 var $79=HEAP32[(($8)>>2)];
 var $80=((($79)-(12))|0);
 var $81=($80|0)==0;
 if($81){label=23;break;}else{label=22;break;}
 case 22: 
 _free($80);
 label=23;break;
 case 23: 
 if($_053){label=24;break;}else{label=26;break;}
 case 24: 
 ___cxa_free_exception($6);
 label=26;break;
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $84$0=$60;
 var $84$1=0;
 var $85$0=$84$0;
 var $85$1=$61;
 var $86=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
 var $87=((($86)-(1))|0);
 var $88=($87|0)<0;
 if($88){label=27;break;}else{label=29;break;}
 case 27: 
 var $90=((($_idx_val_i_i_i_i_i)-(12))|0);
 var $91=($90|0)==0;
 if($91){label=29;break;}else{label=28;break;}
 case 28: 
 _free($90);
 label=29;break;
 case 29: 
 ___resumeException($85$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail19error_info_injectorISt11range_errorED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail19error_info_injectorISt11range_errorED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(28)+20)|0);
 var $2=(($1+8)|0);
 HEAP32[(($2)>>2)]=8752;
 var $3=(($1+12)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){label=6;break;}else{label=2;break;}
 case 2: 
 var $7=$4;
 var $8=$4;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11]($7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($3)>>2)]=0;
 label=6;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 HEAP32[(($1)>>2)]=5944;
 var $16=(($1+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($16)>>2)];
 var $17=((($this_idx_val_i_i_i_i)-(4))|0);
 var $18=$17;
 var $19=(tempValue=HEAP32[(($18)>>2)],HEAP32[(($18)>>2)]=tempValue+-1,tempValue);
 var $20=((($19)-(1))|0);
 var $21=($20|0)<0;
 if($21){label=7;break;}else{label=9;break;}
 case 7: 
 var $23=HEAP32[(($16)>>2)];
 var $24=((($23)-(12))|0);
 var $25=($24|0)==0;
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 _free($24);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail19error_info_injectorISt11range_errorED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=10;break;
 case 9: 
 var $25=($this|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=$this;
 _free($26);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail19error_info_injectorISt11range_errorED0Ev($this){
 var label=0;
 var $1=((($this)-(28)+20)|0);
 var $2=$1;
 __ZN5boost16exception_detail19error_info_injectorISt11range_errorED0Ev($2);
 return;
}
function __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=((($this)-(32)+24)|0);
 var $2=(($1+8)|0);
 HEAP32[(($2)>>2)]=8752;
 var $3=(($1+12)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=6;break;}else{label=2;break;}
 case 2: 
 var $8=$5;
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+16)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$11]($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($12){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($3)>>2)]=0;
 label=6;break;
 case 5: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1,0); var $15$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 HEAP32[(($1)>>2)]=5944;
 var $16=(($1+4)|0);
 var $17=$16;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($17)>>2)];
 var $18=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+-1,tempValue);
 var $21=((($20)-(1))|0);
 var $22=($21|0)<0;
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=HEAP32[(($17)>>2)];
 var $25=((($24)-(12))|0);
 var $26=($25|0)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 _free($25);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=8752;
 var $_sum1=((($6)+(12))|0);
 var $10=(($1+$_sum1)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=2;break;}
 case 2: 
 var $15=$12;
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16+16)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$18]($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($19){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=0;
 label=6;break;
 case 5: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $23=$7;
 HEAP32[(($23)>>2)]=5944;
 var $_sum2=((($6)+(4))|0);
 var $24=(($1+$_sum2)|0);
 var $25=$24;
 var $this_idx_val_i_i_i_i_i=HEAP32[(($25)>>2)];
 var $26=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $27=$26;
 var $28=(tempValue=HEAP32[(($27)>>2)],HEAP32[(($27)>>2)]=tempValue+-1,tempValue);
 var $29=((($28)-(1))|0);
 var $30=($29|0)<0;
 if($30){label=7;break;}else{label=9;break;}
 case 7: 
 var $32=HEAP32[(($25)>>2)];
 var $33=((($32)-(12))|0);
 var $34=($33|0)==0;
 if($34){label=9;break;}else{label=8;break;}
 case 8: 
 _free($33);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=8752;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=6;break;}else{label=2;break;}
 case 2: 
 var $6=$3;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+16)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=5;break; }
 case 3: 
 if($10){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($2)>>2)]=0;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $14=(($this)|0);
 HEAP32[(($14)>>2)]=5944;
 var $15=(($this+4)|0);
 var $this_idx_val_i_i_i_i_i=HEAP32[(($15)>>2)];
 var $16=((($this_idx_val_i_i_i_i_i)-(4))|0);
 var $17=$16;
 var $18=(tempValue=HEAP32[(($17)>>2)],HEAP32[(($17)>>2)]=tempValue+-1,tempValue);
 var $19=((($18)-(1))|0);
 var $20=($19|0)<0;
 if($20){label=7;break;}else{label=9;break;}
 case 7: 
 var $22=HEAP32[(($15)>>2)];
 var $23=((($22)-(12))|0);
 var $24=($23|0)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 _free($23);
 label=10;break;
 case 9: 
 var $25=($this|0)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $26=$this;
 _free($26);
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE5cloneEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break;
 case 2: 
 var $2=_malloc(32);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=12;break;}
 case 3: 
 var $5=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $6=($5|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $10=$lpad_phi_i$1;
 var $11=($10|0)<0;
 if($11){label=8;break;}else{label=10;break;}
 case 8: 
 var $13=$lpad_phi_i$0;
 ___cxa_call_unexpected($13);
 throw "Reached an unreachable!";
 case 9: 
 var $15=___cxa_allocate_exception(4);
 var $16=$15;
 HEAP32[(($16)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($15,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 10: 
 ___resumeException($lpad_phi_i$0)
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $19=(($2+28)|0);
 var $20=$19;
 HEAP32[(($20)>>2)]=9208;
 var $21=$2;
 var $22=(($this)|0);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail19error_info_injectorISt11range_errorEC2ERKS3_($21,$22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=14;break; }
 case 13: 
 var $24=$2;
 HEAP32[(($24)>>2)]=9116;
 var $25=(($2+8)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=9144;
 HEAP32[(($20)>>2)]=9172;
 var $27=$25;
 var $28=($this|0)==0;
 var $29=(($this+8)|0);
 var $_=($28?0:$29);
 (function() { try { __THREW__ = 0; return __ZN5boost16exception_detail20copy_boost_exceptionEPNS_9exceptionEPKS1_($27,$_) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=15;break; }
 case 14: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=$31$0;
 var $33=$31$1;
 var $_0=$32;var $_011=$33;label=24;break;
 case 15: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $36=$35$0;
 var $37=$35$1;
 HEAP32[(($26)>>2)]=8752;
 var $38=(($2+12)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=($40|0)==0;
 if($41){label=20;break;}else{label=16;break;}
 case 16: 
 var $43=$40;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+16)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=19;break; }
 case 17: 
 if($47){label=18;break;}else{label=20;break;}
 case 18: 
 HEAP32[(($39)>>2)]=0;
 label=20;break;
 case 19: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 20: 
 HEAP32[(($24)>>2)]=5944;
 var $51=(($2+4)|0);
 var $52=$51;
 var $this_idx_val_i_i_i_i=HEAP32[(($52)>>2)];
 var $53=((($this_idx_val_i_i_i_i)-(4))|0);
 var $54=$53;
 var $55=(tempValue=HEAP32[(($54)>>2)],HEAP32[(($54)>>2)]=tempValue+-1,tempValue);
 var $56=((($55)-(1))|0);
 var $57=($56|0)<0;
 if($57){label=21;break;}else{var $_0=$36;var $_011=$37;label=24;break;}
 case 21: 
 var $59=HEAP32[(($52)>>2)];
 var $60=((($59)-(12))|0);
 var $61=($60|0)==0;
 if($61){var $_0=$36;var $_011=$37;label=24;break;}else{label=22;break;}
 case 22: 
 _free($60);
 var $_0=$36;var $_011=$37;label=24;break;
 case 23: 
 var $63=$2;
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)-(12))|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($2+$67)|0);
 var $69=$68;
 return $69;
 case 24: 
 var $_011;
 var $_0;
 var $70$0=$_0;
 var $70$1=0;
 var $71$0=$70$0;
 var $71$1=$_011;
 _free($2);
 ___resumeException($71$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE7rethrowEv($this){
 var label=0;
 var $1=___cxa_allocate_exception(32);
 var $2=(($1+28)|0);
 var $3=$2;
 HEAP32[(($3)>>2)]=9208;
 var $4=$1;
 var $5=(($this)|0);
 __ZN5boost16exception_detail19error_info_injectorISt11range_errorEC2ERKS3_($4,$5);
 var $6=$1;
 HEAP32[(($6)>>2)]=9116;
 var $7=(($1+8)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=9144;
 HEAP32[(($3)>>2)]=9172;
 ___cxa_throw($1,15336,(202));
 throw "Reached an unreachable!";
}
function __ZThn8_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev($this){
 var label=0;
 var $1=((($this)-(32)+24)|0);
 var $2=$1;
 __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev($2);
 return;
}
function __ZTv0_n12_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE5cloneEv($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 var $9=__ZNK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE5cloneEv($8);
 return $9;
}
function __ZTv0_n16_NK5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEE7rethrowEv($this){
 var label=0;
 var $0=$this;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(16))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($0+$5)|0);
 var $7=___cxa_allocate_exception(32);
 var $8=(($7+28)|0);
 var $9=$8;
 HEAP32[(($9)>>2)]=9208;
 var $10=$7;
 var $11=$6;
 __ZN5boost16exception_detail19error_info_injectorISt11range_errorEC2ERKS3_($10,$11);
 var $12=$7;
 HEAP32[(($12)>>2)]=9116;
 var $13=(($7+8)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=9144;
 HEAP32[(($9)>>2)]=9172;
 ___cxa_throw($7,15336,(202));
 throw "Reached an unreachable!";
}
function __ZTv0_n20_N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(20))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $8=$7;
 __ZN5boost16exception_detail10clone_implINS0_19error_info_injectorISt11range_errorEEED0Ev($8);
 return;
}
function __ZN5boost16exception_detail19error_info_injectorISt11range_errorEC2ERKS3_($this,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 HEAP32[(($2)>>2)]=5944;
 var $3=(($this+4)|0);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($0+4)|0);
 var $_idx_val_i_i=HEAP32[(($6)>>2)];
 HEAP32[(($3)>>2)]=$_idx_val_i_i;
 var $7=((($_idx_val_i_i)-(4))|0);
 var $8=$7;
 var $9=(tempValue=HEAP32[(($8)>>2)],HEAP32[(($8)>>2)]=tempValue+1,tempValue);
 label=3;break;
 case 3: 
 HEAP32[(($2)>>2)]=6040;
 var $10=(($this+8)|0);
 HEAP32[(($10)>>2)]=8752;
 var $11=(($this+12)|0);
 var $12=(($0+12)|0);
 var $13=HEAP32[(($12)>>2)];
 HEAP32[(($11)>>2)]=$13;
 var $14=($13|0)==0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=$13;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+12)|0);
 var $19=HEAP32[(($18)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$19]($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 var $21=(($this+16)|0);
 var $22=(($0+16)|0);
 var $23=HEAP32[(($22)>>2)];
 HEAP32[(($21)>>2)]=$23;
 var $24=(($this+20)|0);
 var $25=(($0+20)|0);
 var $26=HEAP32[(($25)>>2)];
 HEAP32[(($24)>>2)]=$26;
 var $27=(($this+24)|0);
 var $28=(($0+24)|0);
 var $29=HEAP32[(($28)>>2)];
 HEAP32[(($27)>>2)]=$29;
 HEAP32[(($2)>>2)]=8872;
 HEAP32[(($10)>>2)]=8892;
 return;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 HEAP32[(($2)>>2)]=5944;
 var $this_idx_val_i_i=HEAP32[(($3)>>2)];
 var $32=((($this_idx_val_i_i)-(4))|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=((($34)-(1))|0);
 var $36=($35|0)<0;
 if($36){label=7;break;}else{label=9;break;}
 case 7: 
 var $38=HEAP32[(($3)>>2)];
 var $39=((($38)-(12))|0);
 var $40=($39|0)==0;
 if($40){label=9;break;}else{label=8;break;}
 case 8: 
 _free($39);
 label=9;break;
 case 9: 
 ___resumeException($31$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends7eval_gtILj1024ELj1024ELNS0_18cpp_int_check_typeE0EvEENS_11enable_if_cIXntsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_ELNS0_16cpp_integer_typeE0EXT1_ET2_EEEE5valueEbE4typeERKNS5_IXT_EXT0_ELS6_1EXT1_ES7_EEl($a,$b){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($b|0)==0;
 var $2=(($a+130)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 if($1){label=2;break;}else{label=5;break;}
 case 2: 
 var $6=(($4<<24)>>24)==0;
 if($6){label=3;break;}else{var $_0=0;label=11;break;}
 case 3: 
 var $8=(($a+128)|0);
 var $9=HEAP16[(($8)>>1)];
 var $10=($9&65535)>1;
 if($10){var $_0=1;label=11;break;}else{label=4;break;}
 case 4: 
 var $12=$a;
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=0;
 var $_0=$14;label=11;break;
 case 5: 
 var $16=($4&255);
 var $_lobit=$b>>>31;
 var $17=($16|0)==($_lobit|0);
 var $18=(($4<<24)>>24)==0;
 if($17){label=6;break;}else{var $_0=$18;label=11;break;}
 case 6: 
 var $20=(($a+128)|0);
 var $21=HEAP16[(($20)>>1)];
 var $22=($21&65535)>1;
 if($18){label=9;break;}else{label=7;break;}
 case 7: 
 if($22){var $_0=0;label=11;break;}else{label=8;break;}
 case 8: 
 var $24=$a;
 var $25=HEAP32[(($24)>>2)];
 var $26=($b|0)<0;
 var $27=(((-$b))|0);
 var $_b=($26?$27:$b);
 var $28=($25>>>0)<($_b>>>0);
 var $_0=$28;label=11;break;
 case 9: 
 if($22){var $_0=1;label=11;break;}else{label=10;break;}
 case 10: 
 var $31=$a;
 var $32=HEAP32[(($31)>>2)];
 var $33=($32>>>0)>($b>>>0);
 var $_0=$33;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN5boost14multiprecision8backends16eval_bitwise_andILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvLj1024ELj1024ELS3_1ELS4_0EvEENS_11enable_if_cIXaantsr18is_trivial_cpp_intINS1_15cpp_int_backendIXT_EXT0_EXT1_EXT2_ET3_EEEE5valuentsr18is_trivial_cpp_intINS6_IXT4_EXT5_EXT6_EXT7_ET8_EEEE5valueEvE4typeERS8_RKSA_($result,$o){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $0=(($result+128)|0);
 var $1=HEAP16[(($0)>>1)];
 var $2=($1&65535);
 var $3=(($o+128)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535);
 var $6=($1&65535)<($4&65535);
 var $_=($6?$5:$2);
 var $7=($_>>>0)>32;
 var $extract_t=(($_)&65535);
 var $_in_sroa_speculated_sroa_speculated_off0=($7?32:$extract_t);
 HEAP16[(($0)>>1)]=$_in_sroa_speculated_sroa_speculated_off0;
 var $8=$result;
 var $9=$o;
 var $storemerge_i=$2;label=2;break;
 case 2: 
 var $storemerge_i;
 var $11=($storemerge_i>>>0)<($_>>>0);
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $13=(($8+($storemerge_i<<2))|0);
 HEAP32[(($13)>>2)]=0;
 var $14=((($storemerge_i)+(1))|0);
 var $storemerge_i=$14;label=2;break;
 case 4: 
 var $16=(($result+130)|0);
 var $17=HEAP8[($16)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 var $20=(($o+130)|0);
 var $21=HEAP8[($20)];
 var $22=$21&1;
 var $23=(($22<<24)>>24)==0;
 if($19){label=5;break;}else{label=14;break;}
 case 5: 
 if($23){var $storemerge1_i=0;label=6;break;}else{var $storemerge4_i=0;var $carry_i_0$1=0;var $carry_i_0$0=1;label=10;break;}
 case 6: 
 var $storemerge1_i;
 var $25=($storemerge1_i>>>0)<($5>>>0);
 if($25){label=7;break;}else{var $storemerge2_i=$5;label=8;break;}
 case 7: 
 var $27=(($8+($storemerge1_i<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($9+($storemerge1_i<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$28&$30;
 HEAP32[(($27)>>2)]=$31;
 var $32=((($storemerge1_i)+(1))|0);
 var $storemerge1_i=$32;label=6;break;
 case 8: 
 var $storemerge2_i;
 var $34=($storemerge2_i>>>0)<($_>>>0);
 if($34){label=9;break;}else{label=29;break;}
 case 9: 
 var $36=(($8+($storemerge2_i<<2))|0);
 HEAP32[(($36)>>2)]=0;
 var $37=((($storemerge2_i)+(1))|0);
 var $storemerge2_i=$37;label=8;break;
 case 10: 
 var $carry_i_0$0;
 var $carry_i_0$1;
 var $storemerge4_i;
 var $39=($storemerge4_i>>>0)<($5>>>0);
 if($39){label=11;break;}else{var $storemerge5_i=$5;var $carry_i_1$1=$carry_i_0$1;var $carry_i_1$0=$carry_i_0$0;label=12;break;}
 case 11: 
 var $41=(($9+($storemerge4_i<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42^-1;
 var $44$0=$43;
 var $44$1=0;
 var $45$0=_i64Add($carry_i_0$0,$carry_i_0$1,$44$0,$44$1);var $45$1=tempRet0;
 var $46=(($8+($storemerge4_i<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48$0=$45$0;
 var $48=$48$0;
 var $49=$47&$48;
 HEAP32[(($46)>>2)]=$49;
 var $50$0=$45$1;
 var $50$1=0;
 var $51=((($storemerge4_i)+(1))|0);
 var $storemerge4_i=$51;var $carry_i_0$1=$50$1;var $carry_i_0$0=$50$0;label=10;break;
 case 12: 
 var $carry_i_1$0;
 var $carry_i_1$1;
 var $storemerge5_i;
 var $53=($storemerge5_i>>>0)<($_>>>0);
 if($53){label=13;break;}else{label=29;break;}
 case 13: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $55$0=_i64Add($carry_i_1$0,$carry_i_1$1,$$etemp$0$0,$$etemp$0$1);var $55$1=tempRet0;
 var $56=(($8+($storemerge5_i<<2))|0);
 var $57=HEAP32[(($56)>>2)];
 var $58$0=$55$0;
 var $58=$58$0;
 var $59=$57&$58;
 HEAP32[(($56)>>2)]=$59;
 var $60$0=$55$1;
 var $60$1=0;
 var $61=((($storemerge5_i)+(1))|0);
 var $storemerge5_i=$61;var $carry_i_1$1=$60$1;var $carry_i_1$0=$60$0;label=12;break;
 case 14: 
 if($23){var $storemerge6_i=0;var $carry5_i_0$1=0;var $carry5_i_0$0=1;label=15;break;}else{var $storemerge9_i=0;var $o_carry_i_0$1=0;var $o_carry_i_0$0=1;var $r_carry_i_0$1=0;var $r_carry_i_0$0=1;label=19;break;}
 case 15: 
 var $carry5_i_0$0;
 var $carry5_i_0$1;
 var $storemerge6_i;
 var $64=($storemerge6_i>>>0)<($5>>>0);
 if($64){label=16;break;}else{var $storemerge7_i=$5;var $carry5_i_1$1=$carry5_i_0$1;var $carry5_i_1$0=$carry5_i_0$0;label=17;break;}
 case 16: 
 var $66=(($8+($storemerge6_i<<2))|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67^-1;
 var $69$0=$68;
 var $69$1=0;
 var $70$0=_i64Add($carry5_i_0$0,$carry5_i_0$1,$69$0,$69$1);var $70$1=tempRet0;
 var $71$0=$70$0;
 var $71=$71$0;
 var $72=(($9+($storemerge6_i<<2))|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=$71&$73;
 HEAP32[(($66)>>2)]=$74;
 var $75$0=$70$1;
 var $75$1=0;
 var $76=((($storemerge6_i)+(1))|0);
 var $storemerge6_i=$76;var $carry5_i_0$1=$75$1;var $carry5_i_0$0=$75$0;label=15;break;
 case 17: 
 var $carry5_i_1$0;
 var $carry5_i_1$1;
 var $storemerge7_i;
 var $78=($storemerge7_i>>>0)<($_>>>0);
 if($78){label=18;break;}else{label=29;break;}
 case 18: 
 var $80=(($8+($storemerge7_i<<2))|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$81^-1;
 var $83$0=$82;
 var $83$1=0;
 var $84$0=_i64Add($carry5_i_1$0,$carry5_i_1$1,$83$0,$83$1);var $84$1=tempRet0;
 HEAP32[(($80)>>2)]=0;
 var $85$0=$84$1;
 var $85$1=0;
 var $86=((($storemerge7_i)+(1))|0);
 var $storemerge7_i=$86;var $carry5_i_1$1=$85$1;var $carry5_i_1$0=$85$0;label=17;break;
 case 19: 
 var $r_carry_i_0$0;
 var $r_carry_i_0$1;
 var $o_carry_i_0$0;
 var $o_carry_i_0$1;
 var $storemerge9_i;
 var $88=($storemerge9_i>>>0)<($5>>>0);
 if($88){label=20;break;}else{var $storemerge10_i=$5;var $o_carry_i_1$1=$o_carry_i_0$1;var $o_carry_i_1$0=$o_carry_i_0$0;var $r_carry_i_1$1=$r_carry_i_0$1;var $r_carry_i_1$0=$r_carry_i_0$0;label=21;break;}
 case 20: 
 var $90=(($8+($storemerge9_i<<2))|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$91^-1;
 var $93$0=$92;
 var $93$1=0;
 var $94$0=_i64Add($r_carry_i_0$0,$r_carry_i_0$1,$93$0,$93$1);var $94$1=tempRet0;
 var $95=(($9+($storemerge9_i<<2))|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$96^-1;
 var $98$0=$97;
 var $98$1=0;
 var $99$0=_i64Add($o_carry_i_0$0,$o_carry_i_0$1,$98$0,$98$1);var $99$1=tempRet0;
 var $100$0=$94$0&$99$0;
 var $100$1=$94$1&$99$1;
 var $101$0=$100$0;
 var $101=$101$0;
 HEAP32[(($90)>>2)]=$101;
 var $102$0=$94$1;
 var $102$1=0;
 var $103$0=$99$1;
 var $103$1=0;
 var $104=((($storemerge9_i)+(1))|0);
 var $storemerge9_i=$104;var $o_carry_i_0$1=$103$1;var $o_carry_i_0$0=$103$0;var $r_carry_i_0$1=$102$1;var $r_carry_i_0$0=$102$0;label=19;break;
 case 21: 
 var $r_carry_i_1$0;
 var $r_carry_i_1$1;
 var $o_carry_i_1$0;
 var $o_carry_i_1$1;
 var $storemerge10_i;
 var $106=($storemerge10_i>>>0)<($_>>>0);
 if($106){label=22;break;}else{label=23;break;}
 case 22: 
 var $108=(($8+($storemerge10_i<<2))|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$109^-1;
 var $111$0=$110;
 var $111$1=0;
 var $112$0=_i64Add($r_carry_i_1$0,$r_carry_i_1$1,$111$0,$111$1);var $112$1=tempRet0;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=0;
 var $113$0=_i64Add($o_carry_i_1$0,$o_carry_i_1$1,$$etemp$1$0,$$etemp$1$1);var $113$1=tempRet0;
 var $114$0=$112$0&$113$0;
 var $114$1=$112$1&$113$1;
 var $115$0=$114$0;
 var $115=$115$0;
 HEAP32[(($108)>>2)]=$115;
 var $116$0=$112$1;
 var $116$1=0;
 var $117$0=$113$1;
 var $117$1=0;
 var $118=((($storemerge10_i)+(1))|0);
 var $storemerge10_i=$118;var $o_carry_i_1$1=$117$1;var $o_carry_i_1$0=$117$0;var $r_carry_i_1$1=$116$1;var $r_carry_i_1$0=$116$0;label=21;break;
 case 23: 
 var $$etemp$2$0=-1;
 var $$etemp$2$1=0;
 var $119$0=_i64Add($r_carry_i_1$0,$r_carry_i_1$1,$$etemp$2$0,$$etemp$2$1);var $119$1=tempRet0;
 var $$etemp$3$0=-1;
 var $$etemp$3$1=0;
 var $120$0=_i64Add($o_carry_i_1$0,$o_carry_i_1$1,$$etemp$3$0,$$etemp$3$1);var $120$1=tempRet0;
 var $121$0=$119$0&$120$0;
 var $121$1=$119$1&$120$1;
 var $122$0=$121$0;
 var $122=$122$0;
 var $123=($122|0)<0;
 if($123){label=24;break;}else{label=29;break;}
 case 24: 
 HEAP8[($16)]=1;
 var $125=HEAP16[(($0)>>1)];
 var $126=(($125<<16)>>16)==1;
 if($126){label=25;break;}else{var $storemerge3_i=0;var $carry10_i_0$1=0;var $carry10_i_0$0=1;label=27;break;}
 case 25: 
 var $128=HEAP32[(($8)>>2)];
 var $129=($128|0)==0;
 if($129){label=26;break;}else{var $storemerge3_i=0;var $carry10_i_0$1=0;var $carry10_i_0$0=1;label=27;break;}
 case 26: 
 HEAP8[($16)]=0;
 var $storemerge3_i=0;var $carry10_i_0$1=0;var $carry10_i_0$0=1;label=27;break;
 case 27: 
 var $carry10_i_0$0;
 var $carry10_i_0$1;
 var $storemerge3_i;
 var $131=($storemerge3_i>>>0)<($_>>>0);
 if($131){label=28;break;}else{label=30;break;}
 case 28: 
 var $133=(($8+($storemerge3_i<<2))|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=$134^-1;
 var $136$0=$135;
 var $136$1=0;
 var $137$0=_i64Add($carry10_i_0$0,$carry10_i_0$1,$136$0,$136$1);var $137$1=tempRet0;
 var $138$0=$137$0;
 var $138=$138$0;
 HEAP32[(($133)>>2)]=$138;
 var $139$0=$137$1;
 var $139$1=0;
 var $140=((($storemerge3_i)+(1))|0);
 var $storemerge3_i=$140;var $carry10_i_0$1=$139$1;var $carry10_i_0$0=$139$0;label=27;break;
 case 29: 
 HEAP8[($16)]=0;
 label=30;break;
 case 30: 
 var $_pre=HEAP16[(($0)>>1)];
 var $142=$_pre;label=31;break;
 case 31: 
 var $142;
 var $143=(($142<<16)>>16)==1;
 if($143){label=35;break;}else{label=32;break;}
 case 32: 
 var $145=($142&65535);
 var $146=((($145)-(1))|0);
 var $147=(($8+($146<<2))|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)==0;
 if($149){label=33;break;}else{var $152=$142;label=34;break;}
 case 33: 
 var $151=((($142)-(1))&65535);
 HEAP16[(($0)>>1)]=$151;
 var $142=$151;label=31;break;
 case 34: 
 var $152;
 var $153=(($152<<16)>>16)==1;
 if($153){label=35;break;}else{label=37;break;}
 case 35: 
 var $154=HEAP32[(($8)>>2)];
 var $155=($154|0)==0;
 if($155){label=36;break;}else{label=37;break;}
 case 36: 
 HEAP8[($16)]=0;
 label=37;break;
 case 37: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+760)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_sroa_0=sp;
 var $_sroa_3=(sp)+(128);
 var $1=(sp)+(136);
 var $2=(sp)+(272);
 var $3=(sp)+(408);
 var $4=(sp)+(544);
 var $args_i4_i_i=(sp)+(680);
 var $args_i3_i_i=(sp)+(704);
 var $args_i2_i_i=(sp)+(728);
 var $args_i1_i_i=(sp)+(744);
 var $args_i_i_i=(sp)+(752);
 var $5=$args_i_i_i;
 var $6=(($args_i_i_i)|0);
 HEAP32[(($6)>>2)]=1;
 var $7=(($args_i_i_i+4)|0);
 HEAP32[(($7)>>2)]=14880;
 __embind_register_function(3528,1,$7,(704),(340));
 var $8=$args_i1_i_i;
 var $9=(($args_i1_i_i)|0);
 HEAP32[(($9)>>2)]=1;
 var $10=(($args_i1_i_i+4)|0);
 HEAP32[(($10)>>2)]=14880;
 __embind_register_function(2480,1,$10,(704),(530));
 var $11=$args_i2_i_i;
 var $12=(($args_i2_i_i)|0);
 HEAP32[(($12)>>2)]=3;
 var $13=(($args_i2_i_i+4)|0);
 HEAP32[(($13)>>2)]=14880;
 var $14=(($args_i2_i_i+8)|0);
 HEAP32[(($14)>>2)]=14880;
 var $15=(($args_i2_i_i+12)|0);
 HEAP32[(($15)>>2)]=14880;
 __embind_register_function(2056,3,$13,(844),(522));
 var $16=$args_i3_i_i;
 var $17=(($args_i3_i_i)|0);
 HEAP32[(($17)>>2)]=4;
 var $18=(($args_i3_i_i+4)|0);
 HEAP32[(($18)>>2)]=14880;
 var $19=(($args_i3_i_i+8)|0);
 HEAP32[(($19)>>2)]=14880;
 var $20=(($args_i3_i_i+12)|0);
 HEAP32[(($20)>>2)]=14880;
 var $21=(($args_i3_i_i+16)|0);
 HEAP32[(($21)>>2)]=14880;
 __embind_register_function(1240,4,$18,(180),(326));
 var $22=$args_i4_i_i;
 var $23=(($args_i4_i_i)|0);
 HEAP32[(($23)>>2)]=4;
 var $24=(($args_i4_i_i+4)|0);
 HEAP32[(($24)>>2)]=14880;
 var $25=(($args_i4_i_i+8)|0);
 HEAP32[(($25)>>2)]=14880;
 var $26=(($args_i4_i_i+12)|0);
 HEAP32[(($26)>>2)]=14880;
 var $27=(($args_i4_i_i+16)|0);
 HEAP32[(($27)>>2)]=14880;
 __embind_register_function(1080,4,$24,(180),(620));
 var $28=HEAP8[(19992)];
 var $29=(($28<<24)>>24)==0;
 if($29){label=2;break;}else{label=9;break;}
 case 2: 
 var $31=$4;
 __ZNSt3__114numeric_limitsIN5boost14multiprecision6numberINS2_8backends15cpp_int_backendILj1024ELj1024ELNS2_16cpp_integer_typeE1ELNS2_18cpp_int_check_typeE0EvEELNS2_26expression_template_optionE0EEEE3maxEv($4);
 var $32=$1;
 var $33=$2;
 var $34=$3;
 var $35=HEAP8[(19784)];
 var $36=(($35<<24)>>24)==0;
 if($36){label=3;break;}else{label=8;break;}
 case 3: 
 var $38=___cxa_guard_acquire(19784);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{label=4;break;}
 case 4: 
 __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE0ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEC1IiEERKT_PNS_11enable_if_cIXaasr14is_convertibleINS0_6detail9canonicalISA_S6_E4typeES6_EE5valuentsr6detail24is_restricted_conversionISH_S6_EE5valueEvE4typeE($3,0);
 __ZN5boost14multiprecisioncoINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE0ELNS0_18cpp_int_check_typeE0EvEEEENS0_6numberIT_LNS0_26expression_template_optionE0EEERKSA_($2,$3);
 __ZN5boost14multiprecision6numberINS0_8backends15cpp_int_backendILj1024ELj1024ELNS0_16cpp_integer_typeE1ELNS0_18cpp_int_check_typeE0EvEELNS0_26expression_template_optionE0EEC1INS3_ILj1024ELj1024ELS4_0ELS5_0EvEELS7_0EEERKNS1_IT_XT0_EEEPNS_11enable_if_cIXaasr5boost14is_convertibleISB_S6_EE5valuentsr6detail24is_restricted_conversionISB_S6_EE5valueEvE4typeE($1,$2);
 var $_sroa_0_0_cast60=$_sroa_0;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;
 var $_sroa_3_0_idx=(($_sroa_3)|0);
 var $$etemp$1$0=5;
 var $$etemp$1$1=0;
 assert(128 % 1 === 0);(_memcpy($_sroa_0_0_cast60, $32, 128)|0);
 var $41=(($1+128)|0);
 var $42=HEAP16[(($41)>>1)];
 var $43=(($42<<16)>>16)==1;
 if($43){label=5;break;}else{label=6;break;}
 case 5: 
 var $45=$1;
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){var $53=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $49=(($1+130)|0);
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=$51^1;
 var $53=$52;label=7;break;
 case 7: 
 var $53;
 assert(128 % 1 === 0);(_memcpy(16080, $_sroa_0_0_cast60, 128)|0);
 HEAP16[((16208)>>1)]=$42;
 HEAP8[(16210)]=$53;
 assert(5 % 1 === 0);HEAP8[(16211)]=HEAP8[($_sroa_3_0_idx)];HEAP8[(16212)]=HEAP8[((($_sroa_3_0_idx)+(1))|0)];HEAP8[(16213)]=HEAP8[((($_sroa_3_0_idx)+(2))|0)];HEAP8[(16214)]=HEAP8[((($_sroa_3_0_idx)+(3))|0)];HEAP8[(16215)]=HEAP8[((($_sroa_3_0_idx)+(4))|0)];
 var $$etemp$2$0=128;
 var $$etemp$2$1=0;
 var $$etemp$3$0=5;
 var $$etemp$3$1=0;
 label=8;break;
 case 8: 
 var $$etemp$4$0=1;
 var $$etemp$4$1=0;
 var $st$5$0=19992;
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=19996;
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function ___getTypeName($ti){
 var label=0;
 var $1=(($ti+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_strdup($2);
 return $3;
}
Module["___getTypeName"] = ___getTypeName;
function __GLOBAL__I_a28(){
 var label=0;
 __embind_register_void(13472,920);
 __embind_register_bool(13480,3312,1,0);
 __embind_register_integer(__ZTIc,2472,-128,127);
 __embind_register_integer(__ZTIa,1888,-128,127);
 __embind_register_integer(__ZTIh,1224,0,255);
 __embind_register_integer(__ZTIs,1056,-32768,32767);
 __embind_register_integer(__ZTIt,880,0,65535);
 __embind_register_integer(__ZTIi,576,-2147483648,2147483647);
 __embind_register_integer(__ZTIj,336,0,-1);
 __embind_register_integer(__ZTIl,168,-2147483648,2147483647);
 __embind_register_integer(__ZTIm,3488,0,-1);
 __embind_register_float(__ZTIf,3192);
 __embind_register_float(__ZTId,3008);
 __embind_register_std_string(14880,2816);
 __embind_register_std_wstring(14856,4,2728);
 __embind_register_emval(15376,2680);
 __embind_register_memory_view(15384,2576);
 return;
}
function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(19384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(19472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(19016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(19104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7840;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7840;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18976);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$this;
 var $6=($__n|0)>0;
 if($6){var $_01011=$__s;var $__i_012=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $8=$__s;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,$__n,$10);
 var $_0=$11;label=6;break;
 case 4: 
 var $__i_012;
 var $_01011;
 var $12=HEAP32[(($5)>>2)];
 var $13=(($12+52)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=HEAP32[(($_01011)>>2)];
 var $16=FUNCTION_TABLE[$14]($this,$15);
 var $17=($16|0)==-1;
 if($17){var $_0=$__i_012;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=((($__i_012)+(1))|0);
 var $20=(($_01011+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01011=$20;var $__i_012=$19;label=4;break;}else{var $_0=$19;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=$__1buf;
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($8,4,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+4)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=$pbase_0;
 var $35=HEAP32[(($20)>>2)];
 var $36=_fwrite($34,1,1,$35);
 var $37=($36|0)==1;
 if($37){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $39=($28|0)==1;
 var $40=($28>>>0)<2;
 if($40){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $42=HEAP32[(($__extbe)>>2)];
 var $43=$42;
 var $44=((($43)-($19))|0);
 var $45=HEAP32[(($20)>>2)];
 var $46=_fwrite($14,1,$44,$45);
 var $47=($46|0)==($44|0);
 if($47){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $49=HEAP32[(($__e)>>2)];
 var $_pbase_0=($39?$49:$pbase_0);
 if($39){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $50=($1?0:$__c);
 var $_0=$50;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7840;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7840;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18976);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(80);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_019=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_019=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 HEAP32[(($__ci)>>2)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+4)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_019=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($13)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($21>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($32)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_019=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_019=$__c;label=11;break;
 case 11: 
 var $_019;
 STACKTOP=sp;return $_019;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=22;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $_sroa_speculated=($11?$10:1);
 var $12=($_sroa_speculated|0)>0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=(($this+32)|0);
 var $__i_044=0;label=6;break;
 case 6: 
 var $__i_044;
 var $15=HEAP32[(($13)>>2)];
 var $16=_fgetc($15);
 var $17=($16|0)==-1;
 if($17){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $19=(($16)&255);
 var $20=(($__extbuf+$__i_044)|0);
 HEAP8[($20)]=$19;
 var $21=((($__i_044)+(1))|0);
 var $22=($21|0)<($_sroa_speculated|0);
 if($22){var $__i_044=$21;label=6;break;}else{label=8;break;}
 case 8: 
 var $23=(($this+53)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($29)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[($41)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7912;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7912;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18984);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $5=$this;
 var $6=($__n|0)>0;
 if($6){var $_01011=$__s;var $__i_012=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__s,1,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_012;
 var $_01011;
 var $11=HEAP32[(($5)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP8[($_01011)];
 var $15=($14&255);
 var $16=FUNCTION_TABLE[$13]($this,$15);
 var $17=($16|0)==-1;
 if($17){var $_0=$__i_012;label=6;break;}else{label=5;break;}
 case 5: 
 var $19=((($__i_012)+(1))|0);
 var $20=(($_01011+1)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_01011=$20;var $__i_012=$19;label=4;break;}else{var $_0=$19;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this+32)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_fwrite($__1buf,1,1,$10);
 var $12=($11|0)==1;
 if($12){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $14=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$14;
 var $15=(($__1buf+1)|0);
 var $16=(($this+36)|0);
 var $17=(($this+40)|0);
 var $18=(($__extbuf+8)|0);
 var $19=$__extbuf;
 var $20=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $22=HEAP32[(($16)>>2)];
 var $23=HEAP32[(($17)>>2)];
 var $24=$22;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($22,$23,$pbase_0,$15,$__e,$14,$18,$__extbe);
 var $29=HEAP32[(($__e)>>2)];
 var $30=($29|0)==($pbase_0|0);
 if($30){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $32=($28|0)==3;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 var $34=HEAP32[(($20)>>2)];
 var $35=_fwrite($pbase_0,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($28|0)==1;
 var $39=($28>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($19))|0);
 var $44=HEAP32[(($20)>>2)];
 var $45=_fwrite($14,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $49=($1?0:$__c);
 var $_0=$49;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7912;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7912;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18984);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(80);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;
 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($5){var $_019=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+48)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)!=-1;
 var $11=($10&1);
 HEAP8[($2)]=$11;
 var $_019=$9;label=11;break;
 case 4: 
 var $13=(($this+48)|0);
 if($5){label=5;break;}else{label=10;break;}
 case 5: 
 var $15=HEAP32[(($13)>>2)];
 var $16=(($15)&255);
 HEAP8[($__ci)]=$16;
 var $17=(($this+36)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($this+40)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($__ci+1)|0);
 var $22=(($__extbuf)|0);
 var $23=(($__extbuf+8)|0);
 var $24=$18;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($18,$20,$__ci,$21,$__inxt,$22,$23,$__enxt);
 if(($28|0)==2|($28|0)==1){ var $_019=-1;label=11;break;}else if(($28|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $30=HEAP32[(($13)>>2)];
 var $31=(($30)&255);
 HEAP8[($22)]=$31;
 var $32=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$32;
 label=7;break;
 case 7: 
 var $33=(($this+32)|0);
 label=8;break;
 case 8: 
 var $34=HEAP32[(($__enxt)>>2)];
 var $35=($34>>>0)>($22>>>0);
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=((($34)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$37;
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24);
 var $40=HEAP32[(($33)>>2)];
 var $41=_ungetc($39,$40);
 var $42=($41|0)==-1;
 if($42){var $_019=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($13)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_019=$__c;label=11;break;
 case 11: 
 var $_019;
 STACKTOP=sp;return $_019;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+48)|0);
 var $7=HEAP32[(($6)>>2)];
 if($__consume){label=3;break;}else{var $_0=$7;label=23;break;}
 case 3: 
 HEAP32[(($6)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$7;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $_sroa_speculated=($11?$10:1);
 var $12=($_sroa_speculated|0)>0;
 if($12){label=5;break;}else{label=8;break;}
 case 5: 
 var $13=(($this+32)|0);
 var $__i_044=0;label=6;break;
 case 6: 
 var $__i_044;
 var $15=HEAP32[(($13)>>2)];
 var $16=_fgetc($15);
 var $17=($16|0)==-1;
 if($17){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $19=(($16)&255);
 var $20=(($__extbuf+$__i_044)|0);
 HEAP8[($20)]=$19;
 var $21=((($__i_044)+(1))|0);
 var $22=($21|0)<($_sroa_speculated|0);
 if($22){var $__i_044=$21;label=6;break;}else{label=8;break;}
 case 8: 
 var $23=(($this+53)|0);
 var $24=HEAP8[($23)];
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$_sroa_speculated;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 HEAP8[($__1buf)]=$34;
 var $__nread_2=$_sroa_speculated;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_fgetc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[($29)];
 HEAP8[($__1buf)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[($40)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[($__1buf)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __GLOBAL__I_a165(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stdin)>>2)];
 HEAP32[((18656)>>2)]=7912;
 __ZNSt3__16localeC2Ev(18660);
 HEAP32[((18664)>>2)]=0; HEAP32[((18668)>>2)]=0; HEAP32[((18672)>>2)]=0; HEAP32[((18676)>>2)]=0; HEAP32[((18680)>>2)]=0; HEAP32[((18684)>>2)]=0;
 HEAP32[((18656)>>2)]=8680;
 HEAP32[((18688)>>2)]=$1;
 HEAP32[((18696)>>2)]=18784;
 HEAP32[((18704)>>2)]=-1;
 HEAP8[(18708)]=0;
 var $2=HEAP32[((18660)>>2)];
 var $3=(($2+4)|0);
 var $4=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+1,tempValue);
 var $5=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,18984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $6=$5;
 HEAP32[((18692)>>2)]=$6;
 var $7=$5;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=FUNCTION_TABLE[$10]($6);
 HEAP32[((18700)>>2)]=$11;
 var $12=HEAP32[((18692)>>2)];
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($12);
 var $18=($17&1);
 HEAP8[(18709)]=$18;
 var $19=HEAP32[((18700)>>2)];
 var $20=($19|0)>8;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $22=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=11;break;}
 case 5: 
 var $25=(($2)|0);
 var $26=$2;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 FUNCTION_TABLE[$29]($25);
 label=11;break;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=(($2)|0);
 var $36=$2;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 FUNCTION_TABLE[$39]($35);
 label=8;break;
 case 8: 
 HEAP32[((18656)>>2)]=7912;
 var $40=HEAP32[((18660)>>2)];
 var $41=(($40+4)|0);
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=(($40)|0);
 var $46=$40;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=10;break;
 case 10: 
 ___resumeException($31$0)
 case 11: 
 HEAP32[((19648)>>2)]=8132;
 HEAP32[((19656)>>2)]=8152;
 HEAP32[((19652)>>2)]=0;
 HEAP32[((19680)>>2)]=18656;
 HEAP32[((19672)>>2)]=0;
 HEAP32[((19676)>>2)]=0;
 HEAP32[((19660)>>2)]=4098;
 HEAP32[((19668)>>2)]=0;
 HEAP32[((19664)>>2)]=6;
 _memset(19688, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19684);
 HEAP32[((19728)>>2)]=0;
 HEAP32[((19732)>>2)]=-1;
 var $50=HEAP32[((_stdout)>>2)];
 HEAP32[((18560)>>2)]=7912;
 __ZNSt3__16localeC2Ev(18564);
 HEAP32[((18568)>>2)]=0; HEAP32[((18572)>>2)]=0; HEAP32[((18576)>>2)]=0; HEAP32[((18580)>>2)]=0; HEAP32[((18584)>>2)]=0; HEAP32[((18588)>>2)]=0;
 HEAP32[((18560)>>2)]=8280;
 HEAP32[((18592)>>2)]=$50;
 var $51=HEAP32[((18564)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+1,tempValue);
 var $54=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($51,18984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 12: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $58=($57|0)==0;
 if($58){label=13;break;}else{label=14;break;}
 case 13: 
 var $60=(($51)|0);
 var $61=$51;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+8)|0);
 var $64=HEAP32[(($63)>>2)];
 FUNCTION_TABLE[$64]($60);
 label=14;break;
 case 14: 
 HEAP32[((18560)>>2)]=7912;
 var $65=HEAP32[((18564)>>2)];
 var $66=(($65+4)|0);
 var $67=(tempValue=HEAP32[(($66)>>2)],HEAP32[(($66)>>2)]=tempValue+-1,tempValue);
 var $68=($67|0)==0;
 if($68){label=15;break;}else{label=16;break;}
 case 15: 
 var $70=(($65)|0);
 var $71=$65;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($70);
 label=16;break;
 case 16: 
 ___resumeException($56$0)
 case 17: 
 var $75=$54;
 var $76=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $77=($76|0)==0;
 if($77){label=18;break;}else{label=19;break;}
 case 18: 
 var $79=(($51)|0);
 var $80=$51;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 FUNCTION_TABLE[$83]($79);
 label=19;break;
 case 19: 
 HEAP32[((18596)>>2)]=$75;
 HEAP32[((18600)>>2)]=18792;
 var $84=$54;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+28)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($75);
 var $89=($88&1);
 HEAP8[(18604)]=$89;
 HEAP32[((19384)>>2)]=8036;
 HEAP32[((19388)>>2)]=8056;
 HEAP32[((19412)>>2)]=18560;
 HEAP32[((19404)>>2)]=0;
 HEAP32[((19408)>>2)]=0;
 HEAP32[((19392)>>2)]=4098;
 HEAP32[((19400)>>2)]=0;
 HEAP32[((19396)>>2)]=6;
 _memset(19420, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19416);
 HEAP32[((19460)>>2)]=0;
 HEAP32[((19464)>>2)]=-1;
 var $90=HEAP32[((_stderr)>>2)];
 HEAP32[((18608)>>2)]=7912;
 __ZNSt3__16localeC2Ev(18612);
 HEAP32[((18616)>>2)]=0; HEAP32[((18620)>>2)]=0; HEAP32[((18624)>>2)]=0; HEAP32[((18628)>>2)]=0; HEAP32[((18632)>>2)]=0; HEAP32[((18636)>>2)]=0;
 HEAP32[((18608)>>2)]=8280;
 HEAP32[((18640)>>2)]=$90;
 var $91=HEAP32[((18612)>>2)];
 var $92=(($91+4)|0);
 var $93=(tempValue=HEAP32[(($92)>>2)],HEAP32[(($92)>>2)]=tempValue+1,tempValue);
 var $94=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($91,18984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $96$0 = ___cxa_find_matching_catch(-1, -1); var $96$1 = tempRet0;
 var $97=(tempValue=HEAP32[(($92)>>2)],HEAP32[(($92)>>2)]=tempValue+-1,tempValue);
 var $98=($97|0)==0;
 if($98){label=21;break;}else{label=22;break;}
 case 21: 
 var $100=(($91)|0);
 var $101=$91;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+8)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($100);
 label=22;break;
 case 22: 
 HEAP32[((18608)>>2)]=7912;
 var $105=HEAP32[((18612)>>2)];
 var $106=(($105+4)|0);
 var $107=(tempValue=HEAP32[(($106)>>2)],HEAP32[(($106)>>2)]=tempValue+-1,tempValue);
 var $108=($107|0)==0;
 if($108){label=23;break;}else{label=24;break;}
 case 23: 
 var $110=(($105)|0);
 var $111=$105;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+8)|0);
 var $114=HEAP32[(($113)>>2)];
 FUNCTION_TABLE[$114]($110);
 label=24;break;
 case 24: 
 ___resumeException($96$0)
 case 25: 
 var $115=$94;
 var $116=(tempValue=HEAP32[(($92)>>2)],HEAP32[(($92)>>2)]=tempValue+-1,tempValue);
 var $117=($116|0)==0;
 if($117){label=26;break;}else{label=27;break;}
 case 26: 
 var $119=(($91)|0);
 var $120=$91;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+8)|0);
 var $123=HEAP32[(($122)>>2)];
 FUNCTION_TABLE[$123]($119);
 label=27;break;
 case 27: 
 HEAP32[((18644)>>2)]=$115;
 HEAP32[((18648)>>2)]=18800;
 var $124=$94;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+28)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=FUNCTION_TABLE[$127]($115);
 var $129=($128&1);
 HEAP8[(18652)]=$129;
 HEAP32[((19560)>>2)]=8036;
 HEAP32[((19564)>>2)]=8056;
 HEAP32[((19588)>>2)]=18608;
 HEAP32[((19580)>>2)]=0;
 HEAP32[((19584)>>2)]=0;
 HEAP32[((19568)>>2)]=4098;
 HEAP32[((19576)>>2)]=0;
 HEAP32[((19572)>>2)]=6;
 _memset(19596, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19592);
 HEAP32[((19636)>>2)]=0;
 HEAP32[((19640)>>2)]=-1;
 var $130=HEAP32[((19560)>>2)];
 var $131=((($130)-(12))|0);
 var $132=$131;
 var $133=HEAP32[(($132)>>2)];
 var $_sum96_i=((($133)+(24))|0);
 var $134=((19560+$_sum96_i)|0);
 var $135=$134;
 var $136=HEAP32[(($135)>>2)];
 HEAP32[((19472)>>2)]=8036;
 HEAP32[((19476)>>2)]=8056;
 HEAP32[((19500)>>2)]=$136;
 var $not__i_i=($136|0)==0;
 var $137=($not__i_i&1);
 HEAP32[((19492)>>2)]=$137;
 HEAP32[((19496)>>2)]=0;
 HEAP32[((19480)>>2)]=4098;
 HEAP32[((19488)>>2)]=0;
 HEAP32[((19484)>>2)]=6;
 _memset(19508, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19504);
 HEAP32[((19548)>>2)]=0;
 HEAP32[((19552)>>2)]=-1;
 var $138=HEAP32[((19648)>>2)];
 var $139=((($138)-(12))|0);
 var $140=$139;
 var $141=HEAP32[(($140)>>2)];
 var $_sum99_i=((($141)+(72))|0);
 var $142=((19648+$_sum99_i)|0);
 var $143=$142;
 HEAP32[(($143)>>2)]=19384;
 var $144=HEAP32[((19560)>>2)];
 var $145=((($144)-(12))|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum100_i=((($147)+(4))|0);
 var $148=((19560+$_sum100_i)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=$150|8192;
 HEAP32[(($149)>>2)]=$151;
 var $152=HEAP32[((19560)>>2)];
 var $153=((($152)-(12))|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $_sum101_i=((($155)+(72))|0);
 var $156=((19560+$_sum101_i)|0);
 var $157=$156;
 HEAP32[(($157)>>2)]=19384;
 HEAP32[((18504)>>2)]=7840;
 __ZNSt3__16localeC2Ev(18508);
 HEAP32[((18512)>>2)]=0; HEAP32[((18516)>>2)]=0; HEAP32[((18520)>>2)]=0; HEAP32[((18524)>>2)]=0; HEAP32[((18528)>>2)]=0; HEAP32[((18532)>>2)]=0;
 HEAP32[((18504)>>2)]=8608;
 HEAP32[((18536)>>2)]=$1;
 HEAP32[((18544)>>2)]=18808;
 HEAP32[((18552)>>2)]=-1;
 HEAP8[(18556)]=0;
 var $158=HEAP32[((18508)>>2)];
 var $159=(($158+4)|0);
 var $160=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+1,tempValue);
 var $161=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($158,18976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $162=$161;
 HEAP32[((18540)>>2)]=$162;
 var $163=$161;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+24)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=FUNCTION_TABLE[$166]($162);
 HEAP32[((18548)>>2)]=$167;
 var $168=HEAP32[((18540)>>2)];
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+28)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=FUNCTION_TABLE[$172]($168);
 var $174=($173&1);
 HEAP8[(18557)]=$174;
 var $175=HEAP32[((18548)>>2)];
 var $176=($175|0)>8;
 if($176){label=29;break;}else{label=30;break;}
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 var $178=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $179=($178|0)==0;
 if($179){label=31;break;}else{label=37;break;}
 case 31: 
 var $181=(($158)|0);
 var $182=$158;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+8)|0);
 var $185=HEAP32[(($184)>>2)];
 FUNCTION_TABLE[$185]($181);
 label=37;break;
 case 32: 
 var $187$0 = ___cxa_find_matching_catch(-1, -1); var $187$1 = tempRet0;
 var $188=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $189=($188|0)==0;
 if($189){label=33;break;}else{label=34;break;}
 case 33: 
 var $191=(($158)|0);
 var $192=$158;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+8)|0);
 var $195=HEAP32[(($194)>>2)];
 FUNCTION_TABLE[$195]($191);
 label=34;break;
 case 34: 
 HEAP32[((18504)>>2)]=7840;
 var $196=HEAP32[((18508)>>2)];
 var $197=(($196+4)|0);
 var $198=(tempValue=HEAP32[(($197)>>2)],HEAP32[(($197)>>2)]=tempValue+-1,tempValue);
 var $199=($198|0)==0;
 if($199){label=35;break;}else{label=36;break;}
 case 35: 
 var $201=(($196)|0);
 var $202=$196;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+8)|0);
 var $205=HEAP32[(($204)>>2)];
 FUNCTION_TABLE[$205]($201);
 label=36;break;
 case 36: 
 ___resumeException($187$0)
 case 37: 
 HEAP32[((19296)>>2)]=8084;
 HEAP32[((19304)>>2)]=8104;
 HEAP32[((19300)>>2)]=0;
 HEAP32[((19328)>>2)]=18504;
 HEAP32[((19320)>>2)]=0;
 HEAP32[((19324)>>2)]=0;
 HEAP32[((19308)>>2)]=4098;
 HEAP32[((19316)>>2)]=0;
 HEAP32[((19312)>>2)]=6;
 _memset(19336, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19332);
 HEAP32[((19376)>>2)]=0;
 HEAP32[((19380)>>2)]=-1;
 HEAP32[((18408)>>2)]=7840;
 __ZNSt3__16localeC2Ev(18412);
 HEAP32[((18416)>>2)]=0; HEAP32[((18420)>>2)]=0; HEAP32[((18424)>>2)]=0; HEAP32[((18428)>>2)]=0; HEAP32[((18432)>>2)]=0; HEAP32[((18436)>>2)]=0;
 HEAP32[((18408)>>2)]=8208;
 HEAP32[((18440)>>2)]=$50;
 var $206=HEAP32[((18412)>>2)];
 var $207=(($206+4)|0);
 var $208=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+1,tempValue);
 var $209=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($206,18976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=38;break; }
 case 38: 
 var $211$0 = ___cxa_find_matching_catch(-1, -1); var $211$1 = tempRet0;
 var $212=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+-1,tempValue);
 var $213=($212|0)==0;
 if($213){label=39;break;}else{label=40;break;}
 case 39: 
 var $215=(($206)|0);
 var $216=$206;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+8)|0);
 var $219=HEAP32[(($218)>>2)];
 FUNCTION_TABLE[$219]($215);
 label=40;break;
 case 40: 
 HEAP32[((18408)>>2)]=7840;
 var $220=HEAP32[((18412)>>2)];
 var $221=(($220+4)|0);
 var $222=(tempValue=HEAP32[(($221)>>2)],HEAP32[(($221)>>2)]=tempValue+-1,tempValue);
 var $223=($222|0)==0;
 if($223){label=41;break;}else{label=42;break;}
 case 41: 
 var $225=(($220)|0);
 var $226=$220;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+8)|0);
 var $229=HEAP32[(($228)>>2)];
 FUNCTION_TABLE[$229]($225);
 label=42;break;
 case 42: 
 ___resumeException($211$0)
 case 43: 
 var $230=$209;
 var $231=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+-1,tempValue);
 var $232=($231|0)==0;
 if($232){label=44;break;}else{label=45;break;}
 case 44: 
 var $234=(($206)|0);
 var $235=$206;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+8)|0);
 var $238=HEAP32[(($237)>>2)];
 FUNCTION_TABLE[$238]($234);
 label=45;break;
 case 45: 
 HEAP32[((18444)>>2)]=$230;
 HEAP32[((18448)>>2)]=18816;
 var $239=$209;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+28)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=FUNCTION_TABLE[$242]($230);
 var $244=($243&1);
 HEAP8[(18452)]=$244;
 HEAP32[((19016)>>2)]=7988;
 HEAP32[((19020)>>2)]=8008;
 HEAP32[((19044)>>2)]=18408;
 HEAP32[((19036)>>2)]=0;
 HEAP32[((19040)>>2)]=0;
 HEAP32[((19024)>>2)]=4098;
 HEAP32[((19032)>>2)]=0;
 HEAP32[((19028)>>2)]=6;
 _memset(19052, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19048);
 HEAP32[((19092)>>2)]=0;
 HEAP32[((19096)>>2)]=-1;
 HEAP32[((18456)>>2)]=7840;
 __ZNSt3__16localeC2Ev(18460);
 HEAP32[((18464)>>2)]=0; HEAP32[((18468)>>2)]=0; HEAP32[((18472)>>2)]=0; HEAP32[((18476)>>2)]=0; HEAP32[((18480)>>2)]=0; HEAP32[((18484)>>2)]=0;
 HEAP32[((18456)>>2)]=8208;
 HEAP32[((18488)>>2)]=$90;
 var $245=HEAP32[((18460)>>2)];
 var $246=(($245+4)|0);
 var $247=(tempValue=HEAP32[(($246)>>2)],HEAP32[(($246)>>2)]=tempValue+1,tempValue);
 var $248=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($245,18976) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=46;break; }
 case 46: 
 var $250$0 = ___cxa_find_matching_catch(-1, -1); var $250$1 = tempRet0;
 var $251=(tempValue=HEAP32[(($246)>>2)],HEAP32[(($246)>>2)]=tempValue+-1,tempValue);
 var $252=($251|0)==0;
 if($252){label=47;break;}else{label=48;break;}
 case 47: 
 var $254=(($245)|0);
 var $255=$245;
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+8)|0);
 var $258=HEAP32[(($257)>>2)];
 FUNCTION_TABLE[$258]($254);
 label=48;break;
 case 48: 
 HEAP32[((18456)>>2)]=7840;
 var $259=HEAP32[((18460)>>2)];
 var $260=(($259+4)|0);
 var $261=(tempValue=HEAP32[(($260)>>2)],HEAP32[(($260)>>2)]=tempValue+-1,tempValue);
 var $262=($261|0)==0;
 if($262){label=49;break;}else{label=50;break;}
 case 49: 
 var $264=(($259)|0);
 var $265=$259;
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+8)|0);
 var $268=HEAP32[(($267)>>2)];
 FUNCTION_TABLE[$268]($264);
 label=50;break;
 case 50: 
 ___resumeException($250$0)
 case 51: 
 var $269=$248;
 var $270=(tempValue=HEAP32[(($246)>>2)],HEAP32[(($246)>>2)]=tempValue+-1,tempValue);
 var $271=($270|0)==0;
 if($271){label=52;break;}else{label=53;break;}
 case 52: 
 var $273=(($245)|0);
 var $274=$245;
 var $275=HEAP32[(($274)>>2)];
 var $276=(($275+8)|0);
 var $277=HEAP32[(($276)>>2)];
 FUNCTION_TABLE[$277]($273);
 label=53;break;
 case 53: 
 HEAP32[((18492)>>2)]=$269;
 HEAP32[((18496)>>2)]=18824;
 var $278=$248;
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+28)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=FUNCTION_TABLE[$281]($269);
 var $283=($282&1);
 HEAP8[(18500)]=$283;
 HEAP32[((19192)>>2)]=7988;
 HEAP32[((19196)>>2)]=8008;
 HEAP32[((19220)>>2)]=18456;
 HEAP32[((19212)>>2)]=0;
 HEAP32[((19216)>>2)]=0;
 HEAP32[((19200)>>2)]=4098;
 HEAP32[((19208)>>2)]=0;
 HEAP32[((19204)>>2)]=6;
 _memset(19228, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19224);
 HEAP32[((19268)>>2)]=0;
 HEAP32[((19272)>>2)]=-1;
 var $284=HEAP32[((19192)>>2)];
 var $285=((($284)-(12))|0);
 var $286=$285;
 var $287=HEAP32[(($286)>>2)];
 var $_sum108_i=((($287)+(24))|0);
 var $288=((19192+$_sum108_i)|0);
 var $289=$288;
 var $290=HEAP32[(($289)>>2)];
 HEAP32[((19104)>>2)]=7988;
 HEAP32[((19108)>>2)]=8008;
 HEAP32[((19132)>>2)]=$290;
 var $not__i21_i=($290|0)==0;
 var $291=($not__i21_i&1);
 HEAP32[((19124)>>2)]=$291;
 HEAP32[((19128)>>2)]=0;
 HEAP32[((19112)>>2)]=4098;
 HEAP32[((19120)>>2)]=0;
 HEAP32[((19116)>>2)]=6;
 _memset(19140, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19136);
 HEAP32[((19180)>>2)]=0;
 HEAP32[((19184)>>2)]=-1;
 var $292=HEAP32[((19296)>>2)];
 var $293=((($292)-(12))|0);
 var $294=$293;
 var $295=HEAP32[(($294)>>2)];
 var $_sum111_i=((($295)+(72))|0);
 var $296=((19296+$_sum111_i)|0);
 var $297=$296;
 HEAP32[(($297)>>2)]=19016;
 var $298=HEAP32[((19192)>>2)];
 var $299=((($298)-(12))|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $_sum112_i=((($301)+(4))|0);
 var $302=((19192+$_sum112_i)|0);
 var $303=$302;
 var $304=HEAP32[(($303)>>2)];
 var $305=$304|8192;
 HEAP32[(($303)>>2)]=$305;
 var $306=HEAP32[((19192)>>2)];
 var $307=((($306)-(12))|0);
 var $308=$307;
 var $309=HEAP32[(($308)>>2)];
 var $_sum113_i=((($309)+(72))|0);
 var $310=((19192+$_sum113_i)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=19016;
 var $312=_atexit((420),19736,___dso_handle);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6072;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11logic_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6072;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt11logic_error4whatEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt13runtime_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt13runtime_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt13runtime_error4whatEv($this){
 var label=0;
 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}
function __ZNSt12length_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6072;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt12out_of_rangeD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6072;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt11range_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt14overflow_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=5;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;
 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112system_errorD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(18736,18712);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=17;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(18712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $_idx_i=$arg;
 var $_idx_val_i=HEAP32[(($_idx_i)>>2)];
 var $_idx9_i=(($arg+4)|0);
 var $12=$_idx9_i;
 var $ld$0$0=(($12)|0);
 var $_idx9_val_i$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($12+4)|0);
 var $_idx9_val_i$1=HEAP32[(($ld$1$1)>>2)];
 var $13=$_idx9_val_i$1;
 var $14=$_idx_val_i;
 var $15=(($14+$13)|0);
 var $16=$15;
 var $17=$_idx9_val_i$0;
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=$15;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($17)-(1))|0);
 var $24=(($22+$23)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=8;break;
 case 7: 
 var $28=$17;
 var $29=$28;label=8;break;
 case 8: 
 var $29;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $30=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(18712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=-1;
 var $32=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(18712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=12;break; }
 case 11: 
 var $34=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(18736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=12;break; }
 case 12: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=___cxa_begin_catch($37);
 var $39=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(18712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=16;break; }
 case 13: 
 HEAP32[(($flag)>>2)]=0;
 var $41=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(18712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=16;break; }
 case 14: 
 var $43=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(18736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 16: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=20;break; }
 case 17: 
 var $48;
 label=18;break;
 case 18: 
 return;
 case 19: 
 ___resumeException($46$0)
 case 20: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 21: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 HEAP32[(($2)>>2)]=6072;
 var $3=(($1+4)|0);
 var $4=$3;
 var $5=($3|0)==0;
 if($5){label=19;break;}else{label=2;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return _strlen(352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $7=((($6)+(1))|0);
 var $8=((($6)+(13))|0);
 var $9=($8|0)==0;
 var $_size_i=($9?1:$8);
 label=4;break;
 case 4: 
 var $11=_malloc($_size_i);
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=18;break;}
 case 5: 
 var $14=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $15=($14|0)==0;
 if($15){label=12;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 7: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=9;break;
 case 9: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $19=$lpad_phi_i$1;
 var $20=($19|0)<0;
 if($20){label=10;break;}else{var $eh_lpad_body4$1=$lpad_phi_i$1;var $eh_lpad_body4$0=$lpad_phi_i$0;label=15;break;}
 case 10: 
 var $22=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body4$1=$28$1;var $eh_lpad_body4$0=$28$0;label=15;break;
 case 15: 
 var $eh_lpad_body4$0;
 var $eh_lpad_body4$1;
 var $29=$eh_lpad_body4$1;
 var $30=($29|0)<0;
 if($30){label=16;break;}else{var $eh_lpad_body$1=$eh_lpad_body4$1;var $eh_lpad_body$0=$eh_lpad_body4$0;label=21;break;}
 case 16: 
 var $32=$eh_lpad_body4$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $33=$11;
 var $34=(($11+4)|0);
 var $35=$34;
 HEAP32[(($35)>>2)]=$6;
 HEAP32[(($33)>>2)]=$6;
 var $36=(($11+12)|0);
 HEAP32[(($4)>>2)]=$36;
 var $37=(($11+8)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($36, 352, $7)|0);
 label=19;break;
 case 19: 
 var $39=$1;
 HEAP32[(($39)>>2)]=6008;
 ___cxa_throw($1,13584,(288));
 throw "Reached an unreachable!";
 case 20: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 var $eh_lpad_body$1=$41$1;var $eh_lpad_body$0=$41$0;label=21;break;
 case 21: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___cxa_free_exception($1);
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 HEAP32[(($2)>>2)]=6072;
 var $3=(($1+4)|0);
 var $4=$3;
 var $5=($3|0)==0;
 if($5){label=19;break;}else{label=2;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return _strlen(352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $7=((($6)+(1))|0);
 var $8=((($6)+(13))|0);
 var $9=($8|0)==0;
 var $_size_i=($9?1:$8);
 label=4;break;
 case 4: 
 var $11=_malloc($_size_i);
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=18;break;}
 case 5: 
 var $14=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $15=($14|0)==0;
 if($15){label=12;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 7: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=9;break;
 case 9: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $19=$lpad_phi_i$1;
 var $20=($19|0)<0;
 if($20){label=10;break;}else{var $eh_lpad_body4$1=$lpad_phi_i$1;var $eh_lpad_body4$0=$lpad_phi_i$0;label=15;break;}
 case 10: 
 var $22=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body4$1=$28$1;var $eh_lpad_body4$0=$28$0;label=15;break;
 case 15: 
 var $eh_lpad_body4$0;
 var $eh_lpad_body4$1;
 var $29=$eh_lpad_body4$1;
 var $30=($29|0)<0;
 if($30){label=16;break;}else{var $eh_lpad_body$1=$eh_lpad_body4$1;var $eh_lpad_body$0=$eh_lpad_body4$0;label=21;break;}
 case 16: 
 var $32=$eh_lpad_body4$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $33=$11;
 var $34=(($11+4)|0);
 var $35=$34;
 HEAP32[(($35)>>2)]=$6;
 HEAP32[(($33)>>2)]=$6;
 var $36=(($11+12)|0);
 HEAP32[(($4)>>2)]=$36;
 var $37=(($11+8)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($36, 352, $7)|0);
 label=19;break;
 case 19: 
 var $39=$1;
 HEAP32[(($39)>>2)]=5976;
 ___cxa_throw($1,13568,(288));
 throw "Reached an unreachable!";
 case 20: 
 var $41$0 = ___cxa_find_matching_catch(-1, -1); var $41$1 = tempRet0;
 var $eh_lpad_body$1=$41$1;var $eh_lpad_body$0=$41$0;label=21;break;
 case 21: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___cxa_free_exception($1);
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 _free($7);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){var $13=10;var $12=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9&-2;
 var $phitmp_i=((($10)-(1))|0);
 var $11=(($9)&255);
 var $13=$phitmp_i;var $12=$11;label=3;break;
 case 3: 
 var $12;
 var $13;
 var $14=($13>>>0)<($1>>>0);
 if($14){label=10;break;}else{label=4;break;}
 case 4: 
 var $16=$12&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=(($2+1)|0);
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 _memmove($23,$__s,$1,1,0);
 var $24=(($23+$1)|0);
 HEAP8[($24)]=0;
 var $25=HEAP8[($3)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($3)]=$32;
 label=14;break;
 case 10: 
 var $34=($12&255);
 var $35=$34&1;
 var $36=($35|0)==0;
 if($36){label=12;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $42=$39;label=13;break;
 case 12: 
 var $41=$34>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=((($1)-($13))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$43,$42,0,$42,$1,$__s);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__n|0)==0;
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=$this;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){var $14=10;var $13=$5;label=4;break;}else{label=3;break;}
 case 3: 
 var $9=(($this)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&-2;
 var $phitmp=((($11)-(1))|0);
 var $12=(($10)&255);
 var $14=$phitmp;var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14;
 var $15=($13&255);
 var $16=$15&1;
 var $17=($16|0)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($this+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $23=$20;label=7;break;
 case 6: 
 var $22=$15>>>1;
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 var $24=((($14)-($23))|0);
 var $25=($24>>>0)<($__n>>>0);
 if($25){label=8;break;}else{var $30=$13;label=9;break;}
 case 8: 
 var $27=((($__n)-($14))|0);
 var $28=((($27)+($23))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$14,$28,$23,$23,0,0);
 var $_pre=HEAP8[($4)];
 var $30=$_pre;label=9;break;
 case 9: 
 var $30;
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=11;break;}else{label=10;break;}
 case 10: 
 var $34=(($this+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=12;break;
 case 11: 
 var $37=(($3+1)|0);
 var $38=$37;label=12;break;
 case 12: 
 var $38;
 var $39=(($38+$23)|0);
 _memset($39, $__c, $__n)|0;
 var $40=((($23)+($__n))|0);
 var $41=HEAP8[($4)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($43){label=14;break;}else{label=13;break;}
 case 13: 
 var $45=(($this+4)|0);
 HEAP32[(($45)>>2)]=$40;
 label=15;break;
 case 14: 
 var $47=$40<<1;
 var $48=(($47)&255);
 HEAP8[($4)]=$48;
 label=15;break;
 case 15: 
 var $49=(($38+$40)|0);
 HEAP8[($49)]=0;
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($11&255);
 var $14=$13&1;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=6;break;
 case 5: 
 var $20=$13>>>1;
 var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=8;break;}else{label=7;break;}
 case 7: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(1))|0);
 var $28=($27|0)==($12|0);
 if($28){label=46;break;}else{label=9;break;}
 case 9: 
 var $30=($27|0)==10;
 if($30){label=10;break;}else{label=11;break;}
 case 10: 
 var $32=(($1+1)|0);
 var $33=(($this+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $__new_data_1=$32;var $__p_0=$34;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=38;break;
 case 11: 
 var $36=($27>>>0)>($12>>>0);
 var $37=($26|0)==0;
 var $_size_i=($37?1:$26);
 if($36){label=12;break;}else{label=22;break;}
 case 12: 
 var $39=_malloc($_size_i);
 var $40=($39|0)==0;
 if($40){label=13;break;}else{var $__new_data_0=$39;label=34;break;}
 case 13: 
 var $42=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $43=($42|0)==0;
 if($43){label=19;break;}else{label=14;break;}
 case 14: 
 var $45=$42;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 15: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=17;break;
 case 17: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $47=$lpad_phi_i$1;
 var $48=($47|0)<0;
 if($48){label=18;break;}else{label=20;break;}
 case 18: 
 var $50=$lpad_phi_i$0;
 ___cxa_call_unexpected($50);
 throw "Reached an unreachable!";
 case 19: 
 var $52=___cxa_allocate_exception(4);
 var $53=$52;
 HEAP32[(($53)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($52,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 20: 
 ___resumeException($lpad_phi_i$0)
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $57=_malloc($_size_i);
 var $58=($57|0)==0;
 if($58){label=23;break;}else{var $__new_data_0=$57;label=34;break;}
 case 23: 
 var $60=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $61=($60|0)==0;
 if($61){label=30;break;}else{label=24;break;}
 case 24: 
 var $63=$60;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=25;break; }
 case 25: 
 var $lpad_loopexit_i2$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit_i2$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_loopexit_i2$1;var $lpad_phi_i6$0=$lpad_loopexit_i2$0;label=27;break;
 case 26: 
 var $lpad_nonloopexit_i4$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit_i4$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_nonloopexit_i4$1;var $lpad_phi_i6$0=$lpad_nonloopexit_i4$0;label=27;break;
 case 27: 
 var $lpad_phi_i6$0;
 var $lpad_phi_i6$1;
 var $65=$lpad_phi_i6$1;
 var $66=($65|0)<0;
 if($66){label=28;break;}else{var $eh_lpad_body$1=$lpad_phi_i6$1;var $eh_lpad_body$0=$lpad_phi_i6$0;label=33;break;}
 case 28: 
 var $68=$lpad_phi_i6$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 throw "Reached an unreachable!";
 case 30: 
 var $70=___cxa_allocate_exception(4);
 var $71=$70;
 HEAP32[(($71)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($70,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=26;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 var $eh_lpad_body$1=$74$1;var $eh_lpad_body$0=$74$0;label=33;break;
 case 33: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $75=$eh_lpad_body$0;
 var $76=___cxa_begin_catch($75);
 ___cxa_end_catch();
 label=46;break;
 case 34: 
 var $__new_data_0;
 var $77=$11&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=36;break;}else{label=35;break;}
 case 35: 
 var $80=(($this+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $84=$81;label=37;break;
 case 36: 
 var $83=(($1+1)|0);
 var $84=$83;label=37;break;
 case 37: 
 var $84;
 var $extract_t=(($77<<24)>>24)!=0;
 var $__new_data_1=$__new_data_0;var $__p_0=$84;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=38;break;
 case 38: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1;
 if($15){label=40;break;}else{label=39;break;}
 case 39: 
 var $87=(($this+4)|0);
 var $88=HEAP32[(($87)>>2)];
 var $91=$88;label=41;break;
 case 40: 
 var $90=$13>>>1;
 var $91=$90;label=41;break;
 case 41: 
 var $91;
 var $92=((($91)+(1))|0);
 assert($92 % 1 === 0);(_memcpy($__new_data_1, $__p_0, $92)|0);
 var $__was_long_0_off0_not=$__was_long_0_off0^1;
 var $93=($__p_0|0)==0;
 var $or_cond=$__was_long_0_off0_not|$93;
 if($or_cond){label=43;break;}else{label=42;break;}
 case 42: 
 _free($__p_0);
 label=43;break;
 case 43: 
 if($__now_long_0_off0){label=44;break;}else{label=45;break;}
 case 44: 
 var $96=$26|1;
 var $97=(($this)|0);
 HEAP32[(($97)>>2)]=$96;
 var $98=(($this+4)|0);
 HEAP32[(($98)>>2)]=$21;
 var $99=(($this+8)|0);
 HEAP32[(($99)>>2)]=$__new_data_1;
 label=46;break;
 case 45: 
 var $101=$21<<1;
 var $102=(($101)&255);
 HEAP8[($2)]=$102;
 label=46;break;
 case 46: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($11&255);
 var $14=$13&1;
 var $15=($14|0)==0;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $17=(($this+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $21=$18;label=6;break;
 case 5: 
 var $20=$13>>>1;
 var $21=$20;label=6;break;
 case 6: 
 var $21;
 var $22=((($12)-($21))|0);
 var $23=($22>>>0)<($__n>>>0);
 if($23){label=15;break;}else{label=7;break;}
 case 7: 
 var $25=($__n|0)==0;
 if($25){label=16;break;}else{label=8;break;}
 case 8: 
 var $27=$11&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($this+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $34=$31;label=11;break;
 case 10: 
 var $33=(($1+1)|0);
 var $34=$33;label=11;break;
 case 11: 
 var $34;
 var $35=(($34+$21)|0);
 assert($__n % 1 === 0);(_memcpy($35, $__s, $__n)|0);
 var $36=((($21)+($__n))|0);
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=(($this+4)|0);
 HEAP32[(($41)>>2)]=$36;
 label=14;break;
 case 13: 
 var $43=$36<<1;
 var $44=(($43)&255);
 HEAP8[($2)]=$44;
 label=14;break;
 case 14: 
 var $45=(($34+$36)|0);
 HEAP8[($45)]=0;
 label=16;break;
 case 15: 
 var $47=((($__n)-($12))|0);
 var $48=((($47)+($21))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$48,$21,$21,0,$__n,$__s);
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $_sink=-17;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $_sroa_speculated=($19?$18:$17);
 var $20=($_sroa_speculated>>>0)<11;
 if($20){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($_sroa_speculated)+(16))|0);
 var $23=$22&-16;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=($_sink|0)==0;
 var $_size_i=($24?1:$_sink);
 label=10;break;
 case 10: 
 var $26=_malloc($_size_i);
 var $27=($26|0)==0;
 if($27){label=11;break;}else{label=20;break;}
 case 11: 
 var $29=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $30=($29|0)==0;
 if($30){label=17;break;}else{label=12;break;}
 case 12: 
 var $32=$29;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $34=$lpad_phi_i$1;
 var $35=($34|0)<0;
 if($35){label=16;break;}else{label=18;break;}
 case 16: 
 var $37=$lpad_phi_i$0;
 ___cxa_call_unexpected($37);
 throw "Reached an unreachable!";
 case 17: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($39,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $43=($__n_copy|0)==0;
 if($43){label=22;break;}else{label=21;break;}
 case 21: 
 assert($__n_copy % 1 === 0);(_memcpy($26, $15, $__n_copy)|0);
 label=22;break;
 case 22: 
 var $46=($__n_add|0)==0;
 if($46){label=24;break;}else{label=23;break;}
 case 23: 
 var $48=(($26+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($48, $__p_new_stuff, $__n_add)|0);
 label=24;break;
 case 24: 
 var $50=((($__old_sz)-($__n_del))|0);
 var $51=($50|0)==($__n_copy|0);
 if($51){label=26;break;}else{label=25;break;}
 case 25: 
 var $53=((($50)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $54=(($26+$_sum)|0);
 var $_sum118=((($__n_del)+($__n_copy))|0);
 var $55=(($15+$_sum118)|0);
 assert($53 % 1 === 0);(_memcpy($54, $55, $53)|0);
 label=26;break;
 case 26: 
 var $57=($__old_cap|0)==10;
 var $58=($15|0)==0;
 var $or_cond=$57|$58;
 if($or_cond){label=28;break;}else{label=27;break;}
 case 27: 
 _free($15);
 label=28;break;
 case 28: 
 var $60=(($this+8)|0);
 HEAP32[(($60)>>2)]=$26;
 var $61=$_sink|1;
 var $62=(($this)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=((($50)+($__n_add))|0);
 var $64=(($this+4)|0);
 HEAP32[(($64)>>2)]=$63;
 var $65=(($26+$63)|0);
 HEAP8[($65)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $_sink=-17;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $_sroa_speculated=($19?$18:$17);
 var $20=($_sroa_speculated>>>0)<11;
 if($20){var $_sink=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $22=((($_sroa_speculated)+(16))|0);
 var $23=$22&-16;
 var $_sink=$23;label=9;break;
 case 9: 
 var $_sink;
 var $24=($_sink|0)==0;
 var $_size_i=($24?1:$_sink);
 label=10;break;
 case 10: 
 var $26=_malloc($_size_i);
 var $27=($26|0)==0;
 if($27){label=11;break;}else{label=20;break;}
 case 11: 
 var $29=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $30=($29|0)==0;
 if($30){label=17;break;}else{label=12;break;}
 case 12: 
 var $32=$29;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $34=$lpad_phi_i$1;
 var $35=($34|0)<0;
 if($35){label=16;break;}else{label=18;break;}
 case 16: 
 var $37=$lpad_phi_i$0;
 ___cxa_call_unexpected($37);
 throw "Reached an unreachable!";
 case 17: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($39,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $43=($__n_copy|0)==0;
 if($43){label=22;break;}else{label=21;break;}
 case 21: 
 assert($__n_copy % 1 === 0);(_memcpy($26, $15, $__n_copy)|0);
 label=22;break;
 case 22: 
 var $46=((($__old_sz)-($__n_del))|0);
 var $47=($46|0)==($__n_copy|0);
 if($47){label=24;break;}else{label=23;break;}
 case 23: 
 var $49=((($46)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $50=(($26+$_sum)|0);
 var $_sum96=((($__n_del)+($__n_copy))|0);
 var $51=(($15+$_sum96)|0);
 assert($49 % 1 === 0);(_memcpy($50, $51, $49)|0);
 label=24;break;
 case 24: 
 var $53=($__old_cap|0)==10;
 var $54=($15|0)==0;
 var $or_cond=$53|$54;
 if($or_cond){label=26;break;}else{label=25;break;}
 case 25: 
 _free($15);
 label=26;break;
 case 26: 
 var $56=(($this+8)|0);
 HEAP32[(($56)>>2)]=$26;
 var $57=$_sink|1;
 var $58=(($this)|0);
 HEAP32[(($58)>>2)]=$57;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEjc($this,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($12>>>0)<($__n>>>0);
 if($13){label=4;break;}else{var $80=$11;label=37;break;}
 case 4: 
 var $14=((($__n)-($12))|0);
 var $15=(((-17)-($12))|0);
 var $16=($15>>>0)<($14>>>0);
 if($16){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 6: 
 var $19=$11&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($this+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $26=$23;label=9;break;
 case 8: 
 var $25=(($1+1)|0);
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=($12>>>0)<2147483623;
 if($27){label=20;break;}else{label=10;break;}
 case 10: 
 var $28=_malloc(-17);
 var $29=($28|0)==0;
 if($29){label=11;break;}else{var $_sink_i62=-17;var $71=$28;label=34;break;}
 case 11: 
 var $31=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $32=($31|0)==0;
 if($32){label=17;break;}else{label=12;break;}
 case 12: 
 var $34=$31;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $36=$lpad_phi_i$1;
 var $37=($36|0)<0;
 if($37){label=16;break;}else{label=18;break;}
 case 16: 
 var $39=$lpad_phi_i$0;
 ___cxa_call_unexpected($39);
 throw "Reached an unreachable!";
 case 17: 
 var $41=___cxa_allocate_exception(4);
 var $42=$41;
 HEAP32[(($42)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($41,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $45=$12<<1;
 var $46=($45>>>0)>($__n>>>0);
 var $_sroa_speculated_i=($46?$45:$__n);
 var $47=($_sroa_speculated_i>>>0)<11;
 if($47){var $_sink_i=11;label=22;break;}else{label=21;break;}
 case 21: 
 var $49=((($_sroa_speculated_i)+(16))|0);
 var $50=$49&-16;
 var $_sink_i=$50;label=22;break;
 case 22: 
 var $_sink_i;
 var $51=($_sink_i|0)==0;
 var $_size_i=($51?1:$_sink_i);
 label=23;break;
 case 23: 
 var $53=_malloc($_size_i);
 var $54=($53|0)==0;
 if($54){label=24;break;}else{label=33;break;}
 case 24: 
 var $56=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $57=($56|0)==0;
 if($57){label=30;break;}else{label=25;break;}
 case 25: 
 var $59=$56;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=26;break; }
 case 26: 
 var $lpad_loopexit_i1$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i1$1 = tempRet0;
 var $lpad_phi_i5$1=$lpad_loopexit_i1$1;var $lpad_phi_i5$0=$lpad_loopexit_i1$0;label=28;break;
 case 27: 
 var $lpad_nonloopexit_i3$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i3$1 = tempRet0;
 var $lpad_phi_i5$1=$lpad_nonloopexit_i3$1;var $lpad_phi_i5$0=$lpad_nonloopexit_i3$0;label=28;break;
 case 28: 
 var $lpad_phi_i5$0;
 var $lpad_phi_i5$1;
 var $61=$lpad_phi_i5$1;
 var $62=($61|0)<0;
 if($62){label=29;break;}else{label=31;break;}
 case 29: 
 var $64=$lpad_phi_i5$0;
 ___cxa_call_unexpected($64);
 throw "Reached an unreachable!";
 case 30: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 HEAP32[(($67)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($66,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=27;break; }
 case 31: 
 ___resumeException($lpad_phi_i5$0)
 case 32: 
 throw "Reached an unreachable!";
 case 33: 
 var $70=($12|0)==10;
 if($70){var $_sink_i63=$_sink_i;var $74=$53;label=36;break;}else{var $_sink_i62=$_sink_i;var $71=$53;label=34;break;}
 case 34: 
 var $71;
 var $_sink_i62;
 var $72=($26|0)==0;
 if($72){var $_sink_i63=$_sink_i62;var $74=$71;label=36;break;}else{label=35;break;}
 case 35: 
 _free($26);
 var $_sink_i63=$_sink_i62;var $74=$71;label=36;break;
 case 36: 
 var $74;
 var $_sink_i63;
 var $75=(($this+8)|0);
 HEAP32[(($75)>>2)]=$74;
 var $76=$_sink_i63|1;
 var $77=(($this)|0);
 HEAP32[(($77)>>2)]=$76;
 var $78=(($76)&255);
 var $80=$78;label=37;break;
 case 37: 
 var $80;
 var $81=$80&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=39;break;}else{label=38;break;}
 case 38: 
 var $84=(($this+8)|0);
 var $85=HEAP32[(($84)>>2)];
 var $88=$85;label=40;break;
 case 39: 
 var $87=(($1+1)|0);
 var $88=$87;label=40;break;
 case 40: 
 var $88;
 _memset($88, 48, $__n)|0;
 var $89=(($88+$__n)|0);
 HEAP8[($89)]=0;
 var $90=HEAP8[($2)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=42;break;}else{label=41;break;}
 case 41: 
 var $94=(($this+4)|0);
 HEAP32[(($94)>>2)]=$__n;
 label=43;break;
 case 42: 
 var $96=$__n<<1;
 var $97=(($96)&255);
 HEAP8[($2)]=$97;
 label=43;break;
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($this,$__pos,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=$this;
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($this+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $13=$10;label=4;break;
 case 3: 
 var $12=$5>>>1;
 var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14=($13>>>0)<($__pos>>>0);
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
 throw "Reached an unreachable!";
 case 6: 
 var $17=$4&1;
 var $18=(($17<<24)>>24)==0;
 if($18){var $25=10;var $24=$4;label=8;break;}else{label=7;break;}
 case 7: 
 var $20=(($this)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&-2;
 var $phitmp_i=((($22)-(1))|0);
 var $23=(($21)&255);
 var $25=$phitmp_i;var $24=$23;label=8;break;
 case 8: 
 var $24;
 var $25;
 var $26=((($25)-($13))|0);
 var $27=($26>>>0)<($1>>>0);
 if($27){label=22;break;}else{label=9;break;}
 case 9: 
 var $29=($1|0)==0;
 if($29){label=23;break;}else{label=10;break;}
 case 10: 
 var $31=$24&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=12;break;}else{label=11;break;}
 case 11: 
 var $34=(($this+8)|0);
 var $35=HEAP32[(($34)>>2)];
 var $38=$35;label=13;break;
 case 12: 
 var $37=(($2+1)|0);
 var $38=$37;label=13;break;
 case 13: 
 var $38;
 var $39=((($13)-($__pos))|0);
 var $40=($13|0)==($__pos|0);
 var $_pre_i=(($38+$__pos)|0);
 if($40){var $_1_i=$__s;label=18;break;}else{label=14;break;}
 case 14: 
 var $42=($_pre_i>>>0)>($__s>>>0);
 if($42){var $_0_i=$__s;label=17;break;}else{label=15;break;}
 case 15: 
 var $44=(($38+$13)|0);
 var $45=($44>>>0)>($__s>>>0);
 if($45){label=16;break;}else{var $_0_i=$__s;label=17;break;}
 case 16: 
 var $47=(($__s+$1)|0);
 var $_0_i=$47;label=17;break;
 case 17: 
 var $_0_i;
 var $_sum_i=((($1)+($__pos))|0);
 var $49=(($38+$_sum_i)|0);
 _memmove($49,$_pre_i,$39,1,0);
 var $_1_i=$_0_i;label=18;break;
 case 18: 
 var $_1_i;
 _memmove($_pre_i,$_1_i,$1,1,0);
 var $50=((($13)+($1))|0);
 var $51=HEAP8[($3)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=20;break;}else{label=19;break;}
 case 19: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=21;break;
 case 20: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[($3)]=$58;
 label=21;break;
 case 21: 
 var $59=(($38+$50)|0);
 HEAP8[($59)]=0;
 label=23;break;
 case 22: 
 var $61=((($13)+($1))|0);
 var $62=((($61)-($25))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$25,$62,$13,$__pos,0,$1,$__s);
 label=23;break;
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjjc($this,$__n,$__c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($__n|0)==0;
 if($13){label=18;break;}else{label=5;break;}
 case 5: 
 var $15=$3&1;
 var $16=(($15<<24)>>24)==0;
 if($16){var $23=10;var $22=$3;label=7;break;}else{label=6;break;}
 case 6: 
 var $18=(($this)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2;
 var $phitmp=((($20)-(1))|0);
 var $21=(($19)&255);
 var $23=$phitmp;var $22=$21;label=7;break;
 case 7: 
 var $22;
 var $23;
 var $24=((($23)-($12))|0);
 var $25=($24>>>0)<($__n>>>0);
 if($25){label=13;break;}else{label=8;break;}
 case 8: 
 var $27=$22&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=(($this+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $34=$31;label=11;break;
 case 10: 
 var $33=(($1+1)|0);
 var $34=$33;label=11;break;
 case 11: 
 var $34;
 var $35=($12|0)==0;
 if($35){var $__p_0=$34;label=14;break;}else{label=12;break;}
 case 12: 
 var $37=(($34+$__n)|0);
 _memmove($37,$34,$12,1,0);
 var $__p_0=$34;label=14;break;
 case 13: 
 var $39=((($12)+($__n))|0);
 var $40=((($39)-($23))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$23,$40,$12,0,0,$__n);
 var $41=(($this+8)|0);
 var $42=HEAP32[(($41)>>2)];
 var $__p_0=$42;label=14;break;
 case 14: 
 var $__p_0;
 _memset($__p_0, $__c, $__n)|0;
 var $44=((($12)+($__n))|0);
 var $45=HEAP8[($2)];
 var $46=$45&1;
 var $47=(($46<<24)>>24)==0;
 if($47){label=16;break;}else{label=15;break;}
 case 15: 
 var $49=(($this+4)|0);
 HEAP32[(($49)>>2)]=$44;
 label=17;break;
 case 16: 
 var $51=$44<<1;
 var $52=(($51)&255);
 HEAP8[($2)]=$52;
 label=17;break;
 case 17: 
 var $53=(($__p_0+$44)|0);
 HEAP8[($53)]=0;
 label=18;break;
 case 18: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$7;
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=$__s;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=$__s;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=$this;
 var $10=HEAP8[($9)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){var $19=1;var $18=$10;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($this)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&-2;
 var $phitmp_i=((($16)-(1))|0);
 var $17=(($15)&255);
 var $19=$phitmp_i;var $18=$17;label=5;break;
 case 5: 
 var $18;
 var $19;
 var $20=($19>>>0)<($8>>>0);
 if($20){label=17;break;}else{label=6;break;}
 case 6: 
 var $22=$18&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($this+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=9;break;
 case 8: 
 var $28=(($this+4)|0);
 var $29=$28;label=9;break;
 case 9: 
 var $29;
 var $30=$29;
 var $31=((($30)-($6))|0);
 var $32=$31>>2;
 var $33=($32>>>0)<($8>>>0);
 var $34=($8|0)==0;
 if($33){label=11;break;}else{label=10;break;}
 case 10: 
 if($34){label=14;break;}else{var $_01316_i_i=$__s;var $_117_i_i=$8;var $_018_i_i=$29;label=13;break;}
 case 11: 
 if($34){label=14;break;}else{var $_in_i_i=$8;label=12;break;}
 case 12: 
 var $_in_i_i;
 var $35=((($_in_i_i)-(1))|0);
 var $36=(($__s+($35<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+($35<<2))|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=($35|0)==0;
 if($39){label=14;break;}else{var $_in_i_i=$35;label=12;break;}
 case 13: 
 var $_018_i_i;
 var $_117_i_i;
 var $_01316_i_i;
 var $40=((($_117_i_i)-(1))|0);
 var $41=(($_01316_i_i+4)|0);
 var $42=HEAP32[(($_01316_i_i)>>2)];
 var $43=(($_018_i_i+4)|0);
 HEAP32[(($_018_i_i)>>2)]=$42;
 var $44=($40|0)==0;
 if($44){label=14;break;}else{var $_01316_i_i=$41;var $_117_i_i=$40;var $_018_i_i=$43;label=13;break;}
 case 14: 
 var $45=(($29+($8<<2))|0);
 HEAP32[(($45)>>2)]=0;
 var $46=HEAP8[($9)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=16;break;}else{label=15;break;}
 case 15: 
 var $50=(($this+4)|0);
 HEAP32[(($50)>>2)]=$8;
 label=41;break;
 case 16: 
 var $52=$7>>>1;
 var $53=(($52)&255);
 HEAP8[($9)]=$53;
 label=41;break;
 case 17: 
 var $54=((($8)-($19))|0);
 var $55=(((1073741806)-($19))|0);
 var $56=($55>>>0)<($54>>>0);
 if($56){label=18;break;}else{label=19;break;}
 case 18: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 19: 
 var $59=$18&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=21;break;}else{label=20;break;}
 case 20: 
 var $62=(($this+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $66=$63;label=22;break;
 case 21: 
 var $65=(($this+4)|0);
 var $66=$65;label=22;break;
 case 22: 
 var $66;
 var $67=($19>>>0)<536870887;
 if($67){label=23;break;}else{var $_sink_i_i=1073741807;label=25;break;}
 case 23: 
 var $68=$19<<1;
 var $69=($8>>>0)<($68>>>0);
 var $_sroa_speculated_i_i=($69?$68:$8);
 var $70=($_sroa_speculated_i_i>>>0)<2;
 if($70){var $_sink_i_i=2;label=25;break;}else{label=24;break;}
 case 24: 
 var $72=((($_sroa_speculated_i_i)+(4))|0);
 var $73=$72&-4;
 var $_sink_i_i=$73;label=25;break;
 case 25: 
 var $_sink_i_i;
 var $74=$_sink_i_i<<2;
 var $75=($74|0)==0;
 var $_size_i_i_i=($75?1:$74);
 label=26;break;
 case 26: 
 var $77=_malloc($_size_i_i_i);
 var $78=($77|0)==0;
 if($78){label=27;break;}else{label=36;break;}
 case 27: 
 var $80=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $81=($80|0)==0;
 if($81){label=33;break;}else{label=28;break;}
 case 28: 
 var $83=$80;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=29;break; }
 case 29: 
 var $lpad_loopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_loopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_loopexit_i_i_i$0;label=31;break;
 case 30: 
 var $lpad_nonloopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_nonloopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_nonloopexit_i_i_i$0;label=31;break;
 case 31: 
 var $lpad_phi_i_i_i$0;
 var $lpad_phi_i_i_i$1;
 var $85=$lpad_phi_i_i_i$1;
 var $86=($85|0)<0;
 if($86){label=32;break;}else{label=34;break;}
 case 32: 
 var $88=$lpad_phi_i_i_i$0;
 ___cxa_call_unexpected($88);
 throw "Reached an unreachable!";
 case 33: 
 var $90=___cxa_allocate_exception(4);
 var $91=$90;
 HEAP32[(($91)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($90,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 34: 
 ___resumeException($lpad_phi_i_i_i$0)
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $94=$77;
 var $95=($8|0)==0;
 if($95){label=38;break;}else{var $_056_i_i_i=$__s;var $_047_i_i_i=$8;var $_08_i_i_i=$94;label=37;break;}
 case 37: 
 var $_08_i_i_i;
 var $_047_i_i_i;
 var $_056_i_i_i;
 var $96=((($_047_i_i_i)-(1))|0);
 var $97=(($_056_i_i_i+4)|0);
 var $98=HEAP32[(($_056_i_i_i)>>2)];
 var $99=(($_08_i_i_i+4)|0);
 HEAP32[(($_08_i_i_i)>>2)]=$98;
 var $100=($96|0)==0;
 if($100){label=38;break;}else{var $_056_i_i_i=$97;var $_047_i_i_i=$96;var $_08_i_i_i=$99;label=37;break;}
 case 38: 
 var $101=($19|0)==1;
 var $102=($66|0)==0;
 var $or_cond=$101|$102;
 if($or_cond){label=40;break;}else{label=39;break;}
 case 39: 
 var $104=$66;
 _free($104);
 label=40;break;
 case 40: 
 var $105=(($this+8)|0);
 HEAP32[(($105)>>2)]=$94;
 var $106=$_sink_i_i|1;
 var $107=(($this)|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=(($this+4)|0);
 HEAP32[(($108)>>2)]=$8;
 var $109=(($94+($8<<2))|0);
 HEAP32[(($109)>>2)]=0;
 label=41;break;
 case 41: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=($10&255);
 var $13=$12&1;
 var $14=($13|0)==0;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=(($this+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $20=$17;label=6;break;
 case 5: 
 var $19=$12>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=($20>>>0)<2;
 if($21){var $25=2;label=8;break;}else{label=7;break;}
 case 7: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=((($25)-(1))|0);
 var $27=($26|0)==($11|0);
 if($27){label=48;break;}else{label=9;break;}
 case 9: 
 var $29=($26|0)==1;
 if($29){label=10;break;}else{label=11;break;}
 case 10: 
 var $31=(($this+4)|0);
 var $32=$31;
 var $33=(($this+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $__new_data_1_in=$32;var $__p_0=$34;var $__was_long_0_off0=1;var $__now_long_0_off0=0;label=38;break;
 case 11: 
 var $36=($26>>>0)>($11>>>0);
 var $37=$25<<2;
 var $38=($37|0)==0;
 var $_size_i=($38?1:$37);
 if($36){label=12;break;}else{label=22;break;}
 case 12: 
 var $40=_malloc($_size_i);
 var $41=($40|0)==0;
 if($41){label=13;break;}else{var $__new_data_0_in=$40;label=34;break;}
 case 13: 
 var $43=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $44=($43|0)==0;
 if($44){label=19;break;}else{label=14;break;}
 case 14: 
 var $46=$43;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 15: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=17;break;
 case 17: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $48=$lpad_phi_i$1;
 var $49=($48|0)<0;
 if($49){label=18;break;}else{label=20;break;}
 case 18: 
 var $51=$lpad_phi_i$0;
 ___cxa_call_unexpected($51);
 throw "Reached an unreachable!";
 case 19: 
 var $53=___cxa_allocate_exception(4);
 var $54=$53;
 HEAP32[(($54)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($53,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 20: 
 ___resumeException($lpad_phi_i$0)
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $58=_malloc($_size_i);
 var $59=($58|0)==0;
 if($59){label=23;break;}else{var $__new_data_0_in=$58;label=34;break;}
 case 23: 
 var $61=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $62=($61|0)==0;
 if($62){label=30;break;}else{label=24;break;}
 case 24: 
 var $64=$61;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=25;break; }
 case 25: 
 var $lpad_loopexit_i2$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit_i2$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_loopexit_i2$1;var $lpad_phi_i6$0=$lpad_loopexit_i2$0;label=27;break;
 case 26: 
 var $lpad_nonloopexit_i4$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit_i4$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_nonloopexit_i4$1;var $lpad_phi_i6$0=$lpad_nonloopexit_i4$0;label=27;break;
 case 27: 
 var $lpad_phi_i6$0;
 var $lpad_phi_i6$1;
 var $66=$lpad_phi_i6$1;
 var $67=($66|0)<0;
 if($67){label=28;break;}else{var $eh_lpad_body$1=$lpad_phi_i6$1;var $eh_lpad_body$0=$lpad_phi_i6$0;label=33;break;}
 case 28: 
 var $69=$lpad_phi_i6$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($69) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 throw "Reached an unreachable!";
 case 30: 
 var $71=___cxa_allocate_exception(4);
 var $72=$71;
 HEAP32[(($72)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($71,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=26;break; }
 case 31: 
 throw "Reached an unreachable!";
 case 32: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1,0); var $75$1 = tempRet0;
 var $eh_lpad_body$1=$75$1;var $eh_lpad_body$0=$75$0;label=33;break;
 case 33: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $76=$eh_lpad_body$0;
 var $77=___cxa_begin_catch($76);
 ___cxa_end_catch();
 label=48;break;
 case 34: 
 var $__new_data_0_in;
 var $78=$10&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=36;break;}else{label=35;break;}
 case 35: 
 var $81=(($this+8)|0);
 var $82=HEAP32[(($81)>>2)];
 var $85=$82;label=37;break;
 case 36: 
 var $84=(($this+4)|0);
 var $85=$84;label=37;break;
 case 37: 
 var $85;
 var $extract_t=(($78<<24)>>24)!=0;
 var $__new_data_1_in=$__new_data_0_in;var $__p_0=$85;var $__was_long_0_off0=$extract_t;var $__now_long_0_off0=1;label=38;break;
 case 38: 
 var $__now_long_0_off0;
 var $__was_long_0_off0;
 var $__p_0;
 var $__new_data_1_in;
 var $__new_data_1=$__new_data_1_in;
 if($14){label=40;break;}else{label=39;break;}
 case 39: 
 var $88=(($this+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $92=$89;label=41;break;
 case 40: 
 var $91=$12>>>1;
 var $92=$91;label=41;break;
 case 41: 
 var $92;
 var $93=((($92)+(1))|0);
 var $94=($93|0)==0;
 if($94){label=43;break;}else{var $_056_i=$__p_0;var $_047_i=$93;var $_08_i=$__new_data_1;label=42;break;}
 case 42: 
 var $_08_i;
 var $_047_i;
 var $_056_i;
 var $95=((($_047_i)-(1))|0);
 var $96=(($_056_i+4)|0);
 var $97=HEAP32[(($_056_i)>>2)];
 var $98=(($_08_i+4)|0);
 HEAP32[(($_08_i)>>2)]=$97;
 var $99=($95|0)==0;
 if($99){label=43;break;}else{var $_056_i=$96;var $_047_i=$95;var $_08_i=$98;label=42;break;}
 case 43: 
 var $__was_long_0_off0_not=$__was_long_0_off0^1;
 var $100=($__p_0|0)==0;
 var $or_cond=$__was_long_0_off0_not|$100;
 if($or_cond){label=45;break;}else{label=44;break;}
 case 44: 
 var $102=$__p_0;
 _free($102);
 label=45;break;
 case 45: 
 if($__now_long_0_off0){label=46;break;}else{label=47;break;}
 case 46: 
 var $104=$25|1;
 var $105=(($this)|0);
 HEAP32[(($105)>>2)]=$104;
 var $106=(($this+4)|0);
 HEAP32[(($106)>>2)]=$20;
 var $107=(($this+8)|0);
 HEAP32[(($107)>>2)]=$__new_data_1;
 label=48;break;
 case 47: 
 var $109=$20<<1;
 var $110=(($109)&255);
 HEAP8[($1)]=$110;
 label=48;break;
 case 48: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $_sink=1073741807;label=9;break;}
 case 7: 
 var $16=((($__delta_cap)+($__old_cap))|0);
 var $17=$__old_cap<<1;
 var $18=($16>>>0)<($17>>>0);
 var $_sroa_speculated=($18?$17:$16);
 var $19=($_sroa_speculated>>>0)<2;
 if($19){var $_sink=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $21=((($_sroa_speculated)+(4))|0);
 var $22=$21&-4;
 var $_sink=$22;label=9;break;
 case 9: 
 var $_sink;
 var $23=$_sink<<2;
 var $24=($23|0)==0;
 var $_size_i=($24?1:$23);
 label=10;break;
 case 10: 
 var $26=_malloc($_size_i);
 var $27=($26|0)==0;
 if($27){label=11;break;}else{label=20;break;}
 case 11: 
 var $29=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $30=($29|0)==0;
 if($30){label=17;break;}else{label=12;break;}
 case 12: 
 var $32=$29;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $34=$lpad_phi_i$1;
 var $35=($34|0)<0;
 if($35){label=16;break;}else{label=18;break;}
 case 16: 
 var $37=$lpad_phi_i$0;
 ___cxa_call_unexpected($37);
 throw "Reached an unreachable!";
 case 17: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($39,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $43=$26;
 var $44=($__n_copy|0)==0;
 if($44){label=22;break;}else{var $_056_i=$14;var $_047_i=$__n_copy;var $_08_i=$43;label=21;break;}
 case 21: 
 var $_08_i;
 var $_047_i;
 var $_056_i;
 var $45=((($_047_i)-(1))|0);
 var $46=(($_056_i+4)|0);
 var $47=HEAP32[(($_056_i)>>2)];
 var $48=(($_08_i+4)|0);
 HEAP32[(($_08_i)>>2)]=$47;
 var $49=($45|0)==0;
 if($49){label=22;break;}else{var $_056_i=$46;var $_047_i=$45;var $_08_i=$48;label=21;break;}
 case 22: 
 var $50=((($__old_sz)-($__n_del))|0);
 var $51=($50|0)==($__n_copy|0);
 if($51){label=25;break;}else{label=23;break;}
 case 23: 
 var $_sum96=((($__n_del)+($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $52=(($14+($_sum96<<2))|0);
 var $53=(($43+($_sum<<2))|0);
 var $54=((($50)-($__n_copy))|0);
 var $_056_i3=$52;var $_047_i2=$54;var $_08_i1=$53;label=24;break;
 case 24: 
 var $_08_i1;
 var $_047_i2;
 var $_056_i3;
 var $55=((($_047_i2)-(1))|0);
 var $56=(($_056_i3+4)|0);
 var $57=HEAP32[(($_056_i3)>>2)];
 var $58=(($_08_i1+4)|0);
 HEAP32[(($_08_i1)>>2)]=$57;
 var $59=($55|0)==0;
 if($59){label=25;break;}else{var $_056_i3=$56;var $_047_i2=$55;var $_08_i1=$58;label=24;break;}
 case 25: 
 var $60=($__old_cap|0)==1;
 var $61=($14|0)==0;
 var $or_cond=$60|$61;
 if($or_cond){label=27;break;}else{label=26;break;}
 case 26: 
 var $63=$14;
 _free($63);
 label=27;break;
 case 27: 
 var $64=(($this+8)|0);
 HEAP32[(($64)>>2)]=$43;
 var $65=$_sink|1;
 var $66=(($this)|0);
 HEAP32[(($66)>>2)]=$65;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(($this+24)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+16)|0);
 HEAP32[(($8)>>2)]=$state;
 label=4;break;
 case 3: 
 var $10=$state|1;
 var $11=(($this+16)|0);
 HEAP32[(($11)>>2)]=$10;
 label=4;break;
 case 4: 
 var $13=($6&1);
 var $14=$13|$state;
 var $15=(($this+20)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14&$16;
 var $18=($17|0)==0;
 if($18){label=85;break;}else{label=5;break;}
 case 5: 
 var $20=___cxa_allocate_exception(16);
 var $21=HEAP8[(19872)];
 var $22=(($21<<24)>>24)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 var $24=___cxa_guard_acquire(19872);
 var $25=($24|0)==0;
 if($25){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((17864)>>2)]=7536;
 label=8;break;
 case 8: 
 var $27=$2;
 var $28=$3;
 var $29=(function() { try { __THREW__ = 0; return _strlen(2456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=83;break; }
 case 9: 
 var $30=($29>>>0)>4294967279;
 if($30){label=10;break;}else{label=12;break;}
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=83;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $33=($29>>>0)<11;
 if($33){label=13;break;}else{label=14;break;}
 case 13: 
 var $35=$29<<1;
 var $36=(($35)&255);
 var $37=$3;
 HEAP8[($28)]=$36;
 var $38=(($37+1)|0);
 var $__p_0_i_i=$38;label=26;break;
 case 14: 
 var $39=((($29)+(16))|0);
 var $40=$39&-16;
 var $41=($40|0)==0;
 var $_size_i_i=($41?1:$40);
 label=15;break;
 case 15: 
 var $43=_malloc($_size_i_i);
 var $44=($43|0)==0;
 if($44){label=16;break;}else{label=25;break;}
 case 16: 
 var $46=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $47=($46|0)==0;
 if($47){label=23;break;}else{label=17;break;}
 case 17: 
 var $49=$46;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 18: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=20;break;
 case 19: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=20;break;
 case 20: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $51=$lpad_phi_i_i$1;
 var $52=($51|0)<0;
 if($52){label=21;break;}else{var $eh_lpad_body$1=$lpad_phi_i_i$1;var $eh_lpad_body$0=$lpad_phi_i_i$0;label=84;break;}
 case 21: 
 var $54=$lpad_phi_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=83;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 var $56=___cxa_allocate_exception(4);
 var $57=$56;
 HEAP32[(($57)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($56,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $59=(($3+8)|0);
 HEAP32[(($59)>>2)]=$43;
 var $60=$40|1;
 var $61=(($3)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=(($3+4)|0);
 HEAP32[(($62)>>2)]=$29;
 var $__p_0_i_i=$43;label=26;break;
 case 26: 
 var $__p_0_i_i;
 assert($29 % 1 === 0);(_memcpy($__p_0_i_i, 2456, $29)|0);
 var $64=(($__p_0_i_i+$29)|0);
 HEAP8[($64)]=0;
 var $65=$1;
 var $66=HEAP8[($28)];
 var $67=($66&255);
 var $68=$67&1;
 var $69=($68|0)==0;
 if($69){label=28;break;}else{label=27;break;}
 case 27: 
 var $71=(($3+4)|0);
 var $72=HEAP32[(($71)>>2)];
 var $75=$72;label=29;break;
 case 28: 
 var $74=$67>>>1;
 var $75=$74;label=29;break;
 case 29: 
 var $75;
 var $76=($75|0)==0;
 if($76){label=31;break;}else{label=30;break;}
 case 30: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3,2352,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=72;break; }
 case 31: 
 var $78=HEAP32[((17864)>>2)];
 var $79=(($78+24)|0);
 var $80=HEAP32[(($79)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($1,17864,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=72;break; }
 case 32: 
 var $81=HEAP8[($65)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=34;break;}else{label=33;break;}
 case 33: 
 var $85=(($1+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $90=$86;label=35;break;
 case 34: 
 var $88=$1;
 var $89=(($88+1)|0);
 var $90=$89;label=35;break;
 case 35: 
 var $90;
 var $91=($81&255);
 var $92=$91&1;
 var $93=($92|0)==0;
 if($93){label=37;break;}else{label=36;break;}
 case 36: 
 var $95=(($1+4)|0);
 var $96=HEAP32[(($95)>>2)];
 var $99=$96;label=38;break;
 case 37: 
 var $98=$91>>>1;
 var $99=$98;label=38;break;
 case 38: 
 var $99;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3,$90,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=42;break; }
 case 39: 
 var $100=HEAP8[($65)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=45;break;}else{label=40;break;}
 case 40: 
 var $104=(($1+8)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=($105|0)==0;
 if($106){label=45;break;}else{label=41;break;}
 case 41: 
 _free($105);
 label=45;break;
 case 42: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 var $110=HEAP8[($65)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){var $eh_lpad_body_i$1=$109$1;var $eh_lpad_body_i$0=$109$0;label=73;break;}else{label=43;break;}
 case 43: 
 var $114=(($1+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)==0;
 if($116){var $eh_lpad_body_i$1=$109$1;var $eh_lpad_body_i$0=$109$0;label=73;break;}else{label=44;break;}
 case 44: 
 _free($115);
 var $eh_lpad_body_i$1=$109$1;var $eh_lpad_body_i$0=$109$0;label=73;break;
 case 45: 
 assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
 HEAP32[(($28)>>2)]=0; HEAP32[((($28)+(4))>>2)]=0; HEAP32[((($28)+(8))>>2)]=0;
 var $118=$20;
 HEAP32[(($118)>>2)]=5944;
 var $119=(($20+4)|0);
 var $120=$119;
 var $121=($119|0)==0;
 if($121){label=66;break;}else{label=46;break;}
 case 46: 
 var $123=HEAP8[($27)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=48;break;}else{label=47;break;}
 case 47: 
 var $127=(($2+8)|0);
 var $128=HEAP32[(($127)>>2)];
 var $132=$128;label=49;break;
 case 48: 
 var $130=$2;
 var $131=(($130+1)|0);
 var $132=$131;label=49;break;
 case 49: 
 var $132;
 var $133=(function() { try { __THREW__ = 0; return _strlen($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=74;break; }
 case 50: 
 var $134=((($133)+(1))|0);
 var $135=((($133)+(13))|0);
 var $136=($135|0)==0;
 var $_size_i_i_i=($136?1:$135);
 label=51;break;
 case 51: 
 var $138=_malloc($_size_i_i_i);
 var $139=($138|0)==0;
 if($139){label=52;break;}else{label=61;break;}
 case 52: 
 var $141=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $142=($141|0)==0;
 if($142){label=59;break;}else{label=53;break;}
 case 53: 
 var $144=$141;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$144]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=54;break; }
 case 54: 
 var $lpad_loopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_loopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_loopexit_i_i_i$0;label=56;break;
 case 55: 
 var $lpad_nonloopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_nonloopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_nonloopexit_i_i_i$0;label=56;break;
 case 56: 
 var $lpad_phi_i_i_i$0;
 var $lpad_phi_i_i_i$1;
 var $146=$lpad_phi_i_i_i$1;
 var $147=($146|0)<0;
 if($147){label=57;break;}else{var $eh_lpad_body_i_i$1=$lpad_phi_i_i_i$1;var $eh_lpad_body_i_i$0=$lpad_phi_i_i_i$0;label=63;break;}
 case 57: 
 var $149=$lpad_phi_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=62;break; }
 case 58: 
 throw "Reached an unreachable!";
 case 59: 
 var $151=___cxa_allocate_exception(4);
 var $152=$151;
 HEAP32[(($152)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($151,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=55;break; }
 case 60: 
 throw "Reached an unreachable!";
 case 61: 
 var $154=$138;
 var $155=(($138+4)|0);
 var $156=$155;
 HEAP32[(($156)>>2)]=$133;
 HEAP32[(($154)>>2)]=$133;
 var $157=(($138+12)|0);
 HEAP32[(($120)>>2)]=$157;
 var $158=(($138+8)|0);
 var $159=$158;
 HEAP32[(($159)>>2)]=0;
 assert($134 % 1 === 0);(_memcpy($157, $132, $134)|0);
 label=66;break;
 case 62: 
 var $161$0 = ___cxa_find_matching_catch(-1, -1); var $161$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$161$1;var $eh_lpad_body_i_i$0=$161$0;label=63;break;
 case 63: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $162=$eh_lpad_body_i_i$1;
 var $163=($162|0)<0;
 if($163){label=64;break;}else{var $eh_lpad_body5_i$1=$eh_lpad_body_i_i$1;var $eh_lpad_body5_i$0=$eh_lpad_body_i_i$0;label=75;break;}
 case 64: 
 var $165=$eh_lpad_body_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=74;break; }
 case 65: 
 throw "Reached an unreachable!";
 case 66: 
 var $166=HEAP8[($27)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=69;break;}else{label=67;break;}
 case 67: 
 var $170=(($2+8)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($171|0)==0;
 if($172){label=69;break;}else{label=68;break;}
 case 68: 
 _free($171);
 label=69;break;
 case 69: 
 var $174=HEAP8[($28)];
 var $175=$174&1;
 var $176=(($175<<24)>>24)==0;
 if($176){label=82;break;}else{label=70;break;}
 case 70: 
 var $178=(($3+8)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=82;break;}else{label=71;break;}
 case 71: 
 _free($179);
 label=82;break;
 case 72: 
 var $183$0 = ___cxa_find_matching_catch(-1, -1); var $183$1 = tempRet0;
 var $eh_lpad_body_i$1=$183$1;var $eh_lpad_body_i$0=$183$0;label=73;break;
 case 73: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $184=$eh_lpad_body_i$0;
 var $185=$eh_lpad_body_i$1;
 var $_0_i=$185;var $_014_i=$184;label=78;break;
 case 74: 
 var $187$0 = ___cxa_find_matching_catch(-1, -1); var $187$1 = tempRet0;
 var $eh_lpad_body5_i$1=$187$1;var $eh_lpad_body5_i$0=$187$0;label=75;break;
 case 75: 
 var $eh_lpad_body5_i$0;
 var $eh_lpad_body5_i$1;
 var $188=$eh_lpad_body5_i$0;
 var $189=$eh_lpad_body5_i$1;
 var $190=HEAP8[($27)];
 var $191=$190&1;
 var $192=(($191<<24)>>24)==0;
 if($192){var $_0_i=$189;var $_014_i=$188;label=78;break;}else{label=76;break;}
 case 76: 
 var $194=(($2+8)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==0;
 if($196){var $_0_i=$189;var $_014_i=$188;label=78;break;}else{label=77;break;}
 case 77: 
 _free($195);
 var $_0_i=$189;var $_014_i=$188;label=78;break;
 case 78: 
 var $_014_i;
 var $_0_i;
 var $198=HEAP8[($28)];
 var $199=$198&1;
 var $200=(($199<<24)>>24)==0;
 if($200){label=81;break;}else{label=79;break;}
 case 79: 
 var $202=(($3+8)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==0;
 if($204){label=81;break;}else{label=80;break;}
 case 80: 
 _free($203);
 label=81;break;
 case 81: 
 var $206$0=$_014_i;
 var $206$1=0;
 var $207$0=$206$0;
 var $207$1=$_0_i;
 var $eh_lpad_body$1=$207$1;var $eh_lpad_body$0=$207$0;label=84;break;
 case 82: 
 HEAP32[(($118)>>2)]=8176;
 var $209=(($20+8)|0);
 var $210=$209;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $$etemp$4$0=0;
 var $$etemp$4$1=-1;
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;
 var $$etemp$7=17864;
 var $$etemp$5$0=$$etemp$7;
 var $$etemp$5$1=0;
 var $$etemp$3$0=_bitshift64Shl($$etemp$5$0,$$etemp$5$1,$$etemp$6$0);var $$etemp$3$1=tempRet0;
 var $$etemp$1$0=$$etemp$3$0&$$etemp$4$0;
 var $$etemp$1$1=$$etemp$3$1&$$etemp$4$1;
 var $$etemp$0$0=$$etemp$1$0|$$etemp$2$0;
 var $$etemp$0$1=$$etemp$1$1|$$etemp$2$1;
 var $st$8$0=(($210)|0);
 HEAP32[(($st$8$0)>>2)]=$$etemp$0$0;
 var $st$9$1=(($210+4)|0);
 HEAP32[(($st$9$1)>>2)]=$$etemp$0$1;
 HEAP32[(($118)>>2)]=6720;
 ___cxa_throw($20,14144,(72));
 throw "Reached an unreachable!";
 case 83: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1); var $212$1 = tempRet0;
 var $eh_lpad_body$1=$212$1;var $eh_lpad_body$0=$212$0;label=84;break;
 case 84: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___cxa_free_exception($20);
 ___resumeException($eh_lpad_body$0)
 case 85: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6696;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_05_i=$3;label=2;break;}
 case 2: 
 var $i_05_i;
 var $5=((($i_05_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_05_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+4)|0);
 var $16=$15;
 var $17=(tempValue=HEAP32[(($16)>>2)],HEAP32[(($16)>>2)]=tempValue+-1,tempValue);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$14;
 var $21=$14;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 FUNCTION_TABLE[$24]($20);
 label=6;break;
 case 6: 
 var $25=HEAP32[(($_pre)>>2)];
 var $26=$25;
 _free($26);
 var $27=HEAP32[(($_pre1)>>2)];
 var $28=$27;
 _free($28);
 var $29=(($this+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$30;
 _free($31);
 var $32=(($this+60)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 _free($34);
 return;
 case 7: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7912;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7912;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_08=$__s;var $__i_09=0;label=3;break;
 case 3: 
 var $__i_09;
 var $_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_09;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_08)]=$storemerge;
 var $21=((($__i_09)+(1))|0);
 var $22=(($_08+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_08=$22;var $__i_09=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_08=0;var $_09=$__s;label=3;break;
 case 3: 
 var $_09;
 var $__i_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_09)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_09)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_08;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_09+1)|0);
 var $22=((($__i_08)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_08=$22;var $_09=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7840;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7840;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;
 return $this;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;
 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];
 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_08=$__s;var $__i_09=0;label=3;break;
 case 3: 
 var $__i_09;
 var $_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_09;label=7;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_08)>>2)]=$storemerge;
 var $19=((($__i_09)+(1))|0);
 var $20=(($_08+4)|0);
 var $21=($19|0)<($__n|0);
 if($21){var $_08=$20;var $__i_09=$19;label=3;break;}else{var $__i_0_lcssa=$19;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_08=0;var $_09=$__s;label=3;break;
 case 3: 
 var $_09;
 var $__i_08;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_09)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_09)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_08;label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($_09+4)|0);
 var $21=((($__i_08)+(1))|0);
 var $22=($21|0)<($__n|0);
 if($22){var $__i_08=$21;var $_09=$20;label=3;break;}else{var $__i_0_lcssa=$21;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum9_i=((($5)+(72))|0);
 var $19=(($6+$_sum9_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $25=$5;label=6;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert1=$_phi_trans_insert;
 var $_pre2=HEAP32[(($_phi_trans_insert1)>>2)];
 var $25=$_pre2;label=6;break;
 case 6: 
 var $25;
 HEAP8[($12)]=1;
 var $_sum14=((($25)+(24))|0);
 var $26=(($6+$_sum14)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $35=($34|0)==-1;
 if($35){label=8;break;}else{label=16;break;}
 case 8: 
 var $37=HEAP32[(($1)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($6+$40)|0);
 var $42=$41;
 var $_sum15=((($40)+(16))|0);
 var $43=(($6+$_sum15)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=$45|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($42,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $_0=$49;label=11;break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$52;label=11;break;
 case 11: 
 var $_0;
 var $54=___cxa_begin_catch($_0);
 var $55=HEAP32[(($1)>>2)];
 var $56=((($55)-(12))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $_sum18=((($58)+(16))|0);
 var $59=(($6+$_sum18)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61|1;
 HEAP32[(($60)>>2)]=$62;
 var $_sum19=((($58)+(20))|0);
 var $63=(($6+$_sum19)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 case 16: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($71$0)
 case 19: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum_i=((($5)+(16))|0);
 var $14=(($6+$_sum_i)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum9_i=((($5)+(72))|0);
 var $19=(($6+$_sum9_i)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $25=$5;label=6;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert=((($_pre)-(12))|0);
 var $_phi_trans_insert1=$_phi_trans_insert;
 var $_pre2=HEAP32[(($_phi_trans_insert1)>>2)];
 var $25=$_pre2;label=6;break;
 case 6: 
 var $25;
 HEAP8[($12)]=1;
 var $_sum14=((($25)+(24))|0);
 var $26=(($6+$_sum14)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31+24)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $35=($34|0)==-1;
 if($35){label=8;break;}else{label=16;break;}
 case 8: 
 var $37=HEAP32[(($1)>>2)];
 var $38=((($37)-(12))|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($6+$40)|0);
 var $42=$41;
 var $_sum15=((($40)+(16))|0);
 var $43=(($6+$_sum15)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=$45|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($42,$46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $48$0 = ___cxa_find_matching_catch(-1, -1,0); var $48$1 = tempRet0;
 var $49=$48$0;
 var $_0=$49;label=11;break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1,0); var $51$1 = tempRet0;
 var $52=$51$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$52;label=11;break;
 case 11: 
 var $_0;
 var $54=___cxa_begin_catch($_0);
 var $55=HEAP32[(($1)>>2)];
 var $56=((($55)-(12))|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $_sum18=((($58)+(16))|0);
 var $59=(($6+$_sum18)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=$61|1;
 HEAP32[(($60)>>2)]=$62;
 var $_sum19=((($58)+(20))|0);
 var $63=(($6+$_sum19)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 case 16: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1); var $71$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($71$0)
 case 19: 
 var $74$0 = ___cxa_find_matching_catch(-1, -1,0); var $74$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum14=((($7)+(16))|0);
 var $14=(($8+$_sum14)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum15=((($7)+(4))|0);
 var $19=(($8+$_sum15)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum16=((($32)+(24))|0);
 var $34=(($33+$_sum16)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum17=((($50)+(16))|0);
 var $54=(($51+$_sum17)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum14=((($7)+(16))|0);
 var $14=(($8+$_sum14)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum15=((($7)+(4))|0);
 var $19=(($8+$_sum15)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum16=((($32)+(24))|0);
 var $34=(($33+$_sum16)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum17=((($50)+(16))|0);
 var $54=(($51+$_sum17)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;
 return 2792;
}
function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=19;break;}else{label=2;break;}
 case 2: 
 var $3=_strerror($ev);
 var $4=_strlen($3);
 var $5=($4>>>0)>4294967279;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $8=($4>>>0)<11;
 if($8){label=5;break;}else{label=6;break;}
 case 5: 
 var $10=$4<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 var $13=$agg_result;
 HEAP8[($13)]=$11;
 var $14=(($12+1)|0);
 var $__p_0_i_i=$14;label=18;break;
 case 6: 
 var $15=((($4)+(16))|0);
 var $16=$15&-16;
 var $17=($16|0)==0;
 var $_size_i_i=($17?1:$16);
 label=7;break;
 case 7: 
 var $19=_malloc($_size_i_i);
 var $20=($19|0)==0;
 if($20){label=8;break;}else{label=17;break;}
 case 8: 
 var $22=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 10: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=12;break;
 case 12: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $27=$lpad_phi_i_i$1;
 var $28=($27|0)<0;
 if($28){label=13;break;}else{label=15;break;}
 case 13: 
 var $30=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($30);
 throw "Reached an unreachable!";
 case 14: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=11;break; }
 case 15: 
 ___resumeException($lpad_phi_i_i$0)
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $36=(($agg_result+8)|0);
 HEAP32[(($36)>>2)]=$19;
 var $37=$16|1;
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($agg_result+4)|0);
 HEAP32[(($39)>>2)]=$4;
 var $__p_0_i_i=$19;label=18;break;
 case 18: 
 var $__p_0_i_i;
 assert($4 % 1 === 0);(_memcpy($__p_0_i_i, $3, $4)|0);
 var $40=(($__p_0_i_i+$4)|0);
 HEAP8[($40)]=0;
 label=30;break;
 case 19: 
 var $41=_malloc(48);
 var $42=($41|0)==0;
 if($42){label=20;break;}else{label=29;break;}
 case 20: 
 var $44=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $45=($44|0)==0;
 if($45){label=26;break;}else{label=21;break;}
 case 21: 
 var $47=$44;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$47]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 22: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=24;break;
 case 23: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=24;break;
 case 24: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $49=$lpad_phi_i$1;
 var $50=($49|0)<0;
 if($50){label=25;break;}else{label=27;break;}
 case 25: 
 var $52=$lpad_phi_i$0;
 ___cxa_call_unexpected($52);
 throw "Reached an unreachable!";
 case 26: 
 var $54=___cxa_allocate_exception(4);
 var $55=$54;
 HEAP32[(($55)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($54,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=23;break; }
 case 27: 
 ___resumeException($lpad_phi_i$0)
 case 28: 
 throw "Reached an unreachable!";
 case 29: 
 var $58=(($agg_result+8)|0);
 HEAP32[(($58)>>2)]=$41;
 var $59=(($agg_result)|0);
 HEAP32[(($59)>>2)]=49;
 var $60=(($agg_result+4)|0);
 HEAP32[(($60)>>2)]=35;
 assert(35 % 1 === 0);(_memcpy($41, 3136, 35)|0);
 var $61=(($41+35)|0);
 HEAP8[($61)]=0;
 label=30;break;
 case 30: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=4;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 __ZNSt3__18ios_baseD2Ev($this);
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIcED1Ev($this){
 var label=0;
 return;
}
function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_013_lcssa=$__lo1;label=6;break;}else{var $_01315=$__lo1;var $_01216=$__lo2;label=2;break;}
 case 2: 
 var $_01216;
 var $_01315;
 var $2=($_01315|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_01315)];
 var $5=HEAP8[($_01216)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_01315+1)|0);
 var $11=(($_01216+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_013_lcssa=$10;label=6;break;}else{var $_01315=$10;var $_01216=$11;label=2;break;}
 case 6: 
 var $_013_lcssa;
 var $13=($_013_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$agg_result;
 var $12=$agg_result;
 HEAP8[($12)]=$10;
 var $13=(($11+1)|0);
 var $__p_0_ph_i=$13;label=17;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=($15|0)==0;
 var $_size_i=($16?1:$15);
 label=6;break;
 case 6: 
 var $18=_malloc($_size_i);
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=16;break;}
 case 7: 
 var $21=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=13;break;}else{label=8;break;}
 case 8: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $26=$lpad_phi_i$1;
 var $27=($26|0)<0;
 if($27){label=12;break;}else{label=14;break;}
 case 12: 
 var $29=$lpad_phi_i$0;
 ___cxa_call_unexpected($29);
 throw "Reached an unreachable!";
 case 13: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $35=(($agg_result+8)|0);
 HEAP32[(($35)>>2)]=$18;
 var $36=$15|1;
 var $37=(($agg_result)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($agg_result+4)|0);
 HEAP32[(($38)>>2)]=$3;
 var $__p_0_ph_i=$18;label=17;break;
 case 17: 
 var $__p_0_ph_i;
 var $39=($__lo|0)==($__hi|0);
 if($39){var $__p_0_lcssa_i=$__p_0_ph_i;label=21;break;}else{label=18;break;}
 case 18: 
 var $40=(((-$1))|0);
 var $scevgep_i=(($__hi+$40)|0);
 var $__p_062_i=$__p_0_ph_i;var $_063_i=$__lo;label=19;break;
 case 19: 
 var $_063_i;
 var $__p_062_i;
 var $42=HEAP8[($_063_i)];
 HEAP8[($__p_062_i)]=$42;
 var $43=(($_063_i+1)|0);
 var $44=(($__p_062_i+1)|0);
 var $45=($43|0)==($__hi|0);
 if($45){label=20;break;}else{var $__p_062_i=$44;var $_063_i=$43;label=19;break;}
 case 20: 
 var $scevgep64_i=$scevgep_i;
 var $scevgep65_i=(($__p_0_ph_i+$scevgep64_i)|0);
 var $__p_0_lcssa_i=$scevgep65_i;label=21;break;
 case 21: 
 var $__p_0_lcssa_i;
 HEAP8[($__p_0_lcssa_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_08=$__lo;var $__h_09=0;label=2;break;}
 case 2: 
 var $__h_09;
 var $__p_08;
 var $2=$__h_09<<4;
 var $3=HEAP8[($__p_08)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_08+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_08=$10;var $__h_09=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17collateIwED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_013_lcssa=$__lo1;label=6;break;}else{var $_01315=$__lo1;var $_01216=$__lo2;label=2;break;}
 case 2: 
 var $_01216;
 var $_01315;
 var $2=($_01315|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_01315)>>2)];
 var $5=HEAP32[(($_01216)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_01315+4)|0);
 var $11=(($_01216+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_013_lcssa=$10;label=6;break;}else{var $_01315=$10;var $_01216=$11;label=2;break;}
 case 6: 
 var $_013_lcssa;
 var $13=($_013_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $8=($4>>>0)<2;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3>>>1;
 var $11=(($10)&255);
 var $12=$agg_result;
 HEAP8[($12)]=$11;
 var $13=(($agg_result+4)|0);
 var $__p_0_ph_i=$13;label=17;break;
 case 5: 
 var $14=((($4)+(4))|0);
 var $15=$14&-4;
 var $16=$15<<2;
 var $17=($16|0)==0;
 var $_size_i=($17?1:$16);
 label=6;break;
 case 6: 
 var $19=_malloc($_size_i);
 var $20=($19|0)==0;
 if($20){label=7;break;}else{label=16;break;}
 case 7: 
 var $22=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $23=($22|0)==0;
 if($23){label=13;break;}else{label=8;break;}
 case 8: 
 var $25=$22;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $27=$lpad_phi_i$1;
 var $28=($27|0)<0;
 if($28){label=12;break;}else{label=14;break;}
 case 12: 
 var $30=$lpad_phi_i$0;
 ___cxa_call_unexpected($30);
 throw "Reached an unreachable!";
 case 13: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $36=$19;
 var $37=(($agg_result+8)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=$15|1;
 var $39=(($agg_result)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($agg_result+4)|0);
 HEAP32[(($40)>>2)]=$4;
 var $__p_0_ph_i=$36;label=17;break;
 case 17: 
 var $__p_0_ph_i;
 var $41=($__lo|0)==($__hi|0);
 if($41){var $__p_0_lcssa_i=$__p_0_ph_i;label=21;break;}else{label=18;break;}
 case 18: 
 var $scevgep_i=((($__hi)-(4))|0);
 var $scevgep64_i=$scevgep_i;
 var $42=(((-$1))|0);
 var $uglygep_i=(($scevgep64_i+$42)|0);
 var $uglygep65_i=$uglygep_i;
 var $43=$uglygep65_i>>>2;
 var $__p_062_i=$__p_0_ph_i;var $_063_i=$__lo;label=19;break;
 case 19: 
 var $_063_i;
 var $__p_062_i;
 var $45=HEAP32[(($_063_i)>>2)];
 HEAP32[(($__p_062_i)>>2)]=$45;
 var $46=(($_063_i+4)|0);
 var $47=(($__p_062_i+4)|0);
 var $48=($46|0)==($__hi|0);
 if($48){label=20;break;}else{var $__p_062_i=$47;var $_063_i=$46;label=19;break;}
 case 20: 
 var $49=((($43)+(1))|0);
 var $scevgep66_i=(($__p_0_ph_i+($49<<2))|0);
 var $__p_0_lcssa_i=$scevgep66_i;label=21;break;
 case 21: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_08=$__lo;var $__h_09=0;label=2;break;}
 case 2: 
 var $__h_09;
 var $__p_08;
 var $2=$__h_09<<4;
 var $3=HEAP32[(($__p_08)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_08+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_08=$9;var $__h_09=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i24=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $__names=(sp)+(64);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=48;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=$__p_i_i_i;
 var $34=HEAP32[((19288)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $37=HEAP32[((19292)>>2)];
 var $38=((($37)-(1))|0);
 var $39=(($29+12)|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($29+8)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=$41;
 var $46=$44;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($48>>>0)>($38>>>0);
 if($49){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=(($44+($38<<2))|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=11;break;}else{label=13;break;}
 case 11: 
 var $53=___cxa_allocate_exception(4);
 var $54=$53;
 HEAP32[(($54)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($53,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $55=$51;
 var $56=(($29+4)|0);
 var $57=$56;
 var $58=(tempValue=HEAP32[(($57)>>2)],HEAP32[(($57)>>2)]=tempValue+-1,tempValue);
 var $59=($58|0)==0;
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 var $61=$29;
 var $62=$29;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($61);
 label=15;break;
 case 15: 
 var $66=HEAP32[(($28)>>2)];
 var $67=(($66+4)|0);
 var $68=$67;
 var $69=(tempValue=HEAP32[(($68)>>2)],HEAP32[(($68)>>2)]=tempValue+1,tempValue);
 var $70=$__p_i_i_i24;
 var $71=HEAP32[((18904)>>2)];
 var $72=($71|0)==-1;
 if($72){label=17;break;}else{label=16;break;}
 case 16: 
 var $_sroa_016_0__idx_i_i25=(($__p_i_i_i24)|0);
 HEAP32[(($_sroa_016_0__idx_i_i25)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i26=(($__p_i_i_i24+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i26)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i27=(($__p_i_i_i24+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=34;break; }
 case 17: 
 var $74=HEAP32[((18908)>>2)];
 var $75=((($74)-(1))|0);
 var $76=(($66+12)|0);
 var $77=$76;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($66+8)|0);
 var $80=$79;
 var $81=HEAP32[(($80)>>2)];
 var $82=$78;
 var $83=$81;
 var $84=((($82)-($83))|0);
 var $85=$84>>2;
 var $86=($85>>>0)>($75>>>0);
 if($86){label=18;break;}else{label=19;break;}
 case 18: 
 var $87=(($81+($75<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==0;
 if($89){label=19;break;}else{label=21;break;}
 case 19: 
 var $90=___cxa_allocate_exception(4);
 var $91=$90;
 HEAP32[(($91)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($90,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=34;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $92=$88;
 var $93=(($66+4)|0);
 var $94=$93;
 var $95=(tempValue=HEAP32[(($94)>>2)],HEAP32[(($94)>>2)]=tempValue+-1,tempValue);
 var $96=($95|0)==0;
 if($96){label=22;break;}else{label=23;break;}
 case 22: 
 var $98=$66;
 var $99=$66;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+8)|0);
 var $102=HEAP32[(($101)>>2)];
 FUNCTION_TABLE[$102]($98);
 label=23;break;
 case 23: 
 var $103=(($__names)|0);
 var $104=$88;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+24)|0);
 var $107=HEAP32[(($106)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($103,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $_022=$103;label=36;break; }
 case 24: 
 var $108=(($__names+12)|0);
 var $109=HEAP32[(($104)>>2)];
 var $110=(($109+28)|0);
 var $111=HEAP32[(($110)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$111]($108,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { var $_022=$108;label=36;break; }
 case 25: 
 var $112=(($__e)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($__names+24)|0);
 var $115=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$113,$103,$114,$55,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=41;break; }
 case 26: 
 var $116=($115|0)==($103|0);
 var $117=($116&1);
 HEAP8[($__v)]=$117;
 var $118=(($__b)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($agg_result)|0);
 HEAP32[(($120)>>2)]=$119;
 var $121=$108;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=29;break;}else{label=27;break;}
 case 27: 
 var $126=(($__names+20)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==0;
 if($128){label=29;break;}else{label=28;break;}
 case 28: 
 _free($127);
 label=29;break;
 case 29: 
 var $130=$__names;
 var $131=HEAP8[($130)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=48;break;}else{label=30;break;}
 case 30: 
 var $135=(($__names+8)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($136|0)==0;
 if($137){label=48;break;}else{label=31;break;}
 case 31: 
 _free($136);
 label=48;break;
 case 32: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $143=(($29+4)|0);
 var $144=$143;
 var $145=(tempValue=HEAP32[(($144)>>2)],HEAP32[(($144)>>2)]=tempValue+-1,tempValue);
 var $146=($145|0)==0;
 if($146){label=33;break;}else{var $_0=$141;var $_021=$142;label=49;break;}
 case 33: 
 var $148=$29;
 var $149=$29;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+8)|0);
 var $152=HEAP32[(($151)>>2)];
 FUNCTION_TABLE[$152]($148);
 var $_0=$141;var $_021=$142;label=49;break;
 case 34: 
 var $154$0 = ___cxa_find_matching_catch(-1, -1); var $154$1 = tempRet0;
 var $155=$154$0;
 var $156=$154$1;
 var $157=(($66+4)|0);
 var $158=$157;
 var $159=(tempValue=HEAP32[(($158)>>2)],HEAP32[(($158)>>2)]=tempValue+-1,tempValue);
 var $160=($159|0)==0;
 if($160){label=35;break;}else{var $_0=$155;var $_021=$156;label=49;break;}
 case 35: 
 var $162=$66;
 var $163=$66;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+8)|0);
 var $166=HEAP32[(($165)>>2)];
 FUNCTION_TABLE[$166]($162);
 var $_0=$155;var $_021=$156;label=49;break;
 case 36: 
 var $_022;
 var $168$0 = ___cxa_find_matching_catch(-1, -1); var $168$1 = tempRet0;
 var $169=$168$0;
 var $170=$168$1;
 var $171=($103|0)==($_022|0);
 if($171){var $_0=$169;var $_021=$170;label=49;break;}else{var $172=$_022;label=37;break;}
 case 37: 
 var $172;
 var $173=((($172)-(12))|0);
 var $174=$173;
 var $175=HEAP8[($174)];
 var $176=$175&1;
 var $177=(($176<<24)>>24)==0;
 if($177){label=40;break;}else{label=38;break;}
 case 38: 
 var $179=((($172)-(12)+8)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)==0;
 if($181){label=40;break;}else{label=39;break;}
 case 39: 
 _free($180);
 label=40;break;
 case 40: 
 var $183=($173|0)==($103|0);
 if($183){var $_0=$169;var $_021=$170;label=49;break;}else{var $172=$173;label=37;break;}
 case 41: 
 var $184$0 = ___cxa_find_matching_catch(-1, -1); var $184$1 = tempRet0;
 var $185=$184$0;
 var $186=$108;
 var $187=HEAP8[($186)];
 var $188=$187&1;
 var $189=(($188<<24)>>24)==0;
 if($189){label=44;break;}else{label=42;break;}
 case 42: 
 var $191=(($__names+20)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)==0;
 if($193){label=44;break;}else{label=43;break;}
 case 43: 
 _free($192);
 label=44;break;
 case 44: 
 var $195=$__names;
 var $196=HEAP8[($195)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=47;break;}else{label=45;break;}
 case 45: 
 var $200=(($__names+8)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($201|0)==0;
 if($202){label=47;break;}else{label=46;break;}
 case 46: 
 _free($201);
 label=47;break;
 case 47: 
 var $204=$184$1;
 var $_0=$185;var $_021=$204;label=49;break;
 case 48: 
 STACKTOP=sp;return;
 case 49: 
 var $_021;
 var $_0;
 var $205$0=$_0;
 var $205$1=0;
 var $206$0=$205$0;
 var $206$1=$_021;
 ___resumeException($206$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=11;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=11;break;}
 case 3: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($11,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $255$1=$13$1;var $255$0=$13$0;label=101;break;
 case 6: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=9;break;
 case 7: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit253$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit253$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit253$1;var $lpad_phi$0=$lpad_nonloopexit253$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $14=($__stat_hold_sroa_0_1|0)==0;
 if($14){var $255$1=$lpad_phi$1;var $255$0=$lpad_phi$0;label=101;break;}else{label=10;break;}
 case 10: 
 _free($__stat_hold_sroa_0_1);
 var $255$1=$lpad_phi$1;var $255$0=$lpad_phi$0;label=101;break;
 case 11: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $16=($__kb|0)==($__ke|0);
 if($16){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=12;break;}else{var $__n_might_match_0263=$4;var $__n_does_match_0264=0;var $__st_0265=$__status_0;var $__ky_0266=$__kb;label=13;break;}
 case 12: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $17=(($__b)|0);
 var $18=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;var $__e_sroa_0_0=$__e_0;label=20;break;
 case 13: 
 var $__ky_0266;
 var $__st_0265;
 var $__n_does_match_0264;
 var $__n_might_match_0263;
 var $19=$__ky_0266;
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=$21&1;
 var $23=($22|0)==0;
 if($23){label=15;break;}else{label=14;break;}
 case 14: 
 var $25=(($__ky_0266+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=16;break;
 case 15: 
 var $28=$21>>>1;
 var $29=$28;label=16;break;
 case 16: 
 var $29;
 var $30=($29|0)==0;
 if($30){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($__st_0265)]=1;
 var $__n_does_match_1=$__n_does_match_0264;var $__n_might_match_1=$__n_might_match_0263;label=19;break;
 case 18: 
 HEAP8[($__st_0265)]=2;
 var $33=((($__n_might_match_0263)-(1))|0);
 var $34=((($__n_does_match_0264)+(1))|0);
 var $__n_does_match_1=$34;var $__n_might_match_1=$33;label=19;break;
 case 19: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $36=(($__ky_0266+12)|0);
 var $37=(($__st_0265+1)|0);
 var $38=($36|0)==($__ke|0);
 if($38){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=12;break;}else{var $__n_might_match_0263=$__n_might_match_1;var $__n_does_match_0264=$__n_does_match_1;var $__st_0265=$37;var $__ky_0266=$36;label=13;break;}
 case 20: 
 var $__e_sroa_0_0;
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($17)>>2)];
 var $40=($39|0)==0;
 if($40){var $55=0;label=26;break;}else{label=21;break;}
 case 21: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=22;break;}else{var $55=$39;label=26;break;}
 case 22: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=7;break; }
 case 23: 
 var $53=($52|0)==-1;
 if($53){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre=HEAP32[(($17)>>2)];
 var $55=$_pre;label=26;break;
 case 25: 
 HEAP32[(($17)>>2)]=0;
 var $55=0;label=26;break;
 case 26: 
 var $55;
 var $56=($55|0)==0;
 var $57=($__e_sroa_0_0|0)==0;
 if($57){var $71=$55;var $__e_sroa_0_2=0;label=31;break;}else{label=27;break;}
 case 27: 
 var $59=(($__e_sroa_0_0+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($__e_sroa_0_0+16)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($60|0)==($62|0);
 if($63){label=28;break;}else{var $__e_sroa_0_1=$__e_sroa_0_0;label=30;break;}
 case 28: 
 var $65=$__e_sroa_0_0;
 var $66=HEAP32[(($65)>>2)];
 var $67=(($66+36)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=7;break; }
 case 29: 
 var $70=($69|0)==-1;
 var $___e_sroa_0_0=($70?0:$__e_sroa_0_0);
 var $__e_sroa_0_1=$___e_sroa_0_0;label=30;break;
 case 30: 
 var $__e_sroa_0_1;
 var $_pr=HEAP32[(($17)>>2)];
 var $71=$_pr;var $__e_sroa_0_2=$__e_sroa_0_1;label=31;break;
 case 31: 
 var $__e_sroa_0_2;
 var $71;
 var $72=($__e_sroa_0_2|0)==0;
 var $73=$56^$72;
 var $74=($__n_might_match_2|0)!=0;
 var $_=$73&$74;
 if($_){label=32;break;}else{label=79;break;}
 case 32: 
 var $76=(($71+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($71+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=33;break;}else{label=35;break;}
 case 33: 
 var $82=$71;
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83+36)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$85]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=7;break; }
 case 34: 
 var $extract_t=(($86)&255);
 var $_0206_off0=$extract_t;label=36;break;
 case 35: 
 var $88=HEAP8[($77)];
 var $_0206_off0=$88;label=36;break;
 case 36: 
 var $_0206_off0;
 if($__case_sensitive){var $__c_0=$_0206_off0;label=38;break;}else{label=37;break;}
 case 37: 
 var $90=HEAP32[(($18)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($__ct,$_0206_off0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$93;label=38;break; } else { label=7;break; }
 case 38: 
 var $__c_0;
 var $_pre2=((($__indx_0)+(1))|0);
 if($16){var $__indx_0=$_pre2;var $__n_does_match_2=$__n_does_match_2;var $__n_might_match_2=$__n_might_match_2;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}else{label=39;break;}
 case 39: 
 if($__case_sensitive){var $__n_might_match_3233_us=$__n_might_match_2;var $__n_does_match_3234_us=$__n_does_match_2;var $__st_1235_us=$__status_0;var $__consume_0_off0237_us=0;var $__ky1_0238_us=$__kb;label=40;break;}else{var $__n_might_match_3233=$__n_might_match_2;var $__n_does_match_3234=$__n_does_match_2;var $__st_1235=$__status_0;var $__consume_0_off0237=0;var $__ky1_0238=$__kb;label=53;break;}
 case 40: 
 var $__ky1_0238_us;
 var $__consume_0_off0237_us;
 var $__st_1235_us;
 var $__n_does_match_3234_us;
 var $__n_might_match_3233_us;
 var $94=HEAP8[($__st_1235_us)];
 var $95=(($94<<24)>>24)==1;
 if($95){label=41;break;}else{var $__consume_1_off0_us=$__consume_0_off0237_us;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$__n_might_match_3233_us;label=51;break;}
 case 41: 
 var $97=$__ky1_0238_us;
 var $98=HEAP8[($97)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=43;break;}else{label=42;break;}
 case 42: 
 var $102=(($__ky1_0238_us+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $107=$103;label=44;break;
 case 43: 
 var $105=$__ky1_0238_us;
 var $106=(($105+1)|0);
 var $107=$106;label=44;break;
 case 44: 
 var $107;
 var $108=(($107+$__indx_0)|0);
 var $109=HEAP8[($108)];
 var $110=(($__c_0<<24)>>24)==(($109<<24)>>24);
 if($110){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP8[($__st_1235_us)]=0;
 var $112=((($__n_might_match_3233_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off0237_us;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$112;label=51;break;
 case 46: 
 var $114=($98&255);
 var $115=$114&1;
 var $116=($115|0)==0;
 if($116){label=48;break;}else{label=47;break;}
 case 47: 
 var $118=(($__ky1_0238_us+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $122=$119;label=49;break;
 case 48: 
 var $121=$114>>>1;
 var $122=$121;label=49;break;
 case 49: 
 var $122;
 var $123=($122|0)==($_pre2|0);
 if($123){label=50;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_3234_us;var $__n_might_match_4_us=$__n_might_match_3233_us;label=51;break;}
 case 50: 
 HEAP8[($__st_1235_us)]=2;
 var $125=((($__n_might_match_3233_us)-(1))|0);
 var $126=((($__n_does_match_3234_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$126;var $__n_might_match_4_us=$125;label=51;break;
 case 51: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $128=(($__ky1_0238_us+12)|0);
 var $129=($128|0)==($__ke|0);
 if($129){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{label=52;break;}
 case 52: 
 var $130=(($__st_1235_us+1)|0);
 var $__n_might_match_3233_us=$__n_might_match_4_us;var $__n_does_match_3234_us=$__n_does_match_4_us;var $__st_1235_us=$130;var $__consume_0_off0237_us=$__consume_1_off0_us;var $__ky1_0238_us=$128;label=40;break;
 case 53: 
 var $__ky1_0238;
 var $__consume_0_off0237;
 var $__st_1235;
 var $__n_does_match_3234;
 var $__n_might_match_3233;
 var $131=HEAP8[($__st_1235)];
 var $132=(($131<<24)>>24)==1;
 if($132){label=54;break;}else{var $__consume_1_off0=$__consume_0_off0237;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$__n_might_match_3233;label=65;break;}
 case 54: 
 var $134=$__ky1_0238;
 var $135=HEAP8[($134)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=56;break;}else{label=55;break;}
 case 55: 
 var $139=(($__ky1_0238+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $145=$140;label=57;break;
 case 56: 
 var $142=$__ky1_0238;
 var $143=(($142+1)|0);
 var $145=$143;label=57;break;
 case 57: 
 var $145;
 var $146=(($145+$__indx_0)|0);
 var $147=HEAP8[($146)];
 var $148=HEAP32[(($18)>>2)];
 var $149=(($148+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($__ct,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=6;break; }
 case 58: 
 var $152=(($__c_0<<24)>>24)==(($151<<24)>>24);
 if($152){label=59;break;}else{label=64;break;}
 case 59: 
 var $154=HEAP8[($134)];
 var $155=($154&255);
 var $156=$155&1;
 var $157=($156|0)==0;
 if($157){label=61;break;}else{label=60;break;}
 case 60: 
 var $159=(($__ky1_0238+4)|0);
 var $160=HEAP32[(($159)>>2)];
 var $163=$160;label=62;break;
 case 61: 
 var $162=$155>>>1;
 var $163=$162;label=62;break;
 case 62: 
 var $163;
 var $164=($163|0)==($_pre2|0);
 if($164){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$__n_might_match_3233;label=65;break;}
 case 63: 
 HEAP8[($__st_1235)]=2;
 var $166=((($__n_might_match_3233)-(1))|0);
 var $167=((($__n_does_match_3234)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$167;var $__n_might_match_4=$166;label=65;break;
 case 64: 
 HEAP8[($__st_1235)]=0;
 var $169=((($__n_might_match_3233)-(1))|0);
 var $__consume_1_off0=$__consume_0_off0237;var $__n_does_match_4=$__n_does_match_3234;var $__n_might_match_4=$169;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $171=(($__ky1_0238+12)|0);
 var $172=($171|0)==($__ke|0);
 if($172){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{label=66;break;}
 case 66: 
 var $173=(($__st_1235+1)|0);
 var $__n_might_match_3233=$__n_might_match_4;var $__n_does_match_3234=$__n_does_match_4;var $__st_1235=$173;var $__consume_0_off0237=$__consume_1_off0;var $__ky1_0238=$171;label=53;break;
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__indx_0=$_pre2;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}
 case 68: 
 var $175=HEAP32[(($17)>>2)];
 var $176=(($175+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($175+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=69;break;}else{label=70;break;}
 case 69: 
 var $182=$175;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+40)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=7;break; }
 case 70: 
 var $188=(($177+1)|0);
 HEAP32[(($176)>>2)]=$188;
 label=71;break;
 case 71: 
 var $189=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($189>>>0)<2;
 if($_not){var $__indx_0=$_pre2;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}else{var $__n_does_match_5247=$__n_does_match_3_lcssa;var $__st_2248=$__status_0;var $__ky2_0249=$__kb;label=72;break;}
 case 72: 
 var $__ky2_0249;
 var $__st_2248;
 var $__n_does_match_5247;
 var $190=HEAP8[($__st_2248)];
 var $191=(($190<<24)>>24)==2;
 if($191){label=73;break;}else{var $__n_does_match_6=$__n_does_match_5247;label=78;break;}
 case 73: 
 var $193=$__ky2_0249;
 var $194=HEAP8[($193)];
 var $195=($194&255);
 var $196=$195&1;
 var $197=($196|0)==0;
 if($197){label=75;break;}else{label=74;break;}
 case 74: 
 var $199=(($__ky2_0249+4)|0);
 var $200=HEAP32[(($199)>>2)];
 var $203=$200;label=76;break;
 case 75: 
 var $202=$195>>>1;
 var $203=$202;label=76;break;
 case 76: 
 var $203;
 var $204=($203|0)==($_pre2|0);
 if($204){var $__n_does_match_6=$__n_does_match_5247;label=78;break;}else{label=77;break;}
 case 77: 
 HEAP8[($__st_2248)]=0;
 var $206=((($__n_does_match_5247)-(1))|0);
 var $__n_does_match_6=$206;label=78;break;
 case 78: 
 var $__n_does_match_6;
 var $208=(($__ky2_0249+12)|0);
 var $209=(($__st_2248+1)|0);
 var $210=($208|0)==($__ke|0);
 if($210){var $__indx_0=$_pre2;var $__n_does_match_2=$__n_does_match_6;var $__n_might_match_2=$__n_might_match_3_lcssa;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}else{var $__n_does_match_5247=$__n_does_match_6;var $__st_2248=$209;var $__ky2_0249=$208;label=72;break;}
 case 79: 
 var $212=($71|0)==0;
 if($212){var $227=0;label=85;break;}else{label=80;break;}
 case 80: 
 var $214=(($71+12)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($71+16)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=($215|0)==($217|0);
 if($218){label=81;break;}else{var $227=$71;label=85;break;}
 case 81: 
 var $220=$71;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+36)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=8;break; }
 case 82: 
 var $225=($224|0)==-1;
 if($225){label=84;break;}else{label=83;break;}
 case 83: 
 var $_pre278=HEAP32[(($17)>>2)];
 var $227=$_pre278;label=85;break;
 case 84: 
 HEAP32[(($17)>>2)]=0;
 var $227=0;label=85;break;
 case 85: 
 var $227;
 var $228=($227|0)==0;
 if($72){label=90;break;}else{label=86;break;}
 case 86: 
 var $230=(($__e_sroa_0_2+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=(($__e_sroa_0_2+16)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=($231|0)==($233|0);
 if($234){label=88;break;}else{label=87;break;}
 case 87: 
 if($228){label=93;break;}else{label=92;break;}
 case 88: 
 var $236=$__e_sroa_0_2;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+36)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($__e_sroa_0_2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=8;break; }
 case 89: 
 var $241=($240|0)==-1;
 if($241){label=90;break;}else{label=91;break;}
 case 90: 
 if($228){label=92;break;}else{label=93;break;}
 case 91: 
 if($228){label=93;break;}else{label=92;break;}
 case 92: 
 var $243=HEAP32[(($__err)>>2)];
 var $244=$243|2;
 HEAP32[(($__err)>>2)]=$244;
 label=93;break;
 case 93: 
 if($16){label=97;break;}else{var $_0209227=$__kb;var $__st_3228=$__status_0;label=94;break;}
 case 94: 
 var $__st_3228;
 var $_0209227;
 var $245=HEAP8[($__st_3228)];
 var $246=(($245<<24)>>24)==2;
 if($246){var $_0209226=$_0209227;label=98;break;}else{label=95;break;}
 case 95: 
 var $248=(($_0209227+12)|0);
 var $249=($248|0)==($__ke|0);
 if($249){label=97;break;}else{label=96;break;}
 case 96: 
 var $250=(($__st_3228+1)|0);
 var $_0209227=$248;var $__st_3228=$250;label=94;break;
 case 97: 
 var $251=HEAP32[(($__err)>>2)];
 var $252=$251|4;
 HEAP32[(($__err)>>2)]=$252;
 var $_0209226=$__ke;label=98;break;
 case 98: 
 var $_0209226;
 var $253=($__stat_hold_sroa_0_1|0)==0;
 if($253){label=100;break;}else{label=99;break;}
 case 99: 
 _free($__stat_hold_sroa_0_1);
 label=100;break;
 case 100: 
 STACKTOP=sp;return $_0209226;
 case 101: 
 var $255$0;
 var $255$1;
 ___resumeException($255$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 var $12=(($__iob+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&74;
 if(($14|0)==8){ label=2;break;}else if(($14|0)==0){ label=3;break;}else if(($14|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $19=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=41;break; }
 case 6: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre163_i=(($19+1)|0);
 var $25=$22;var $_pre_phi_i=$_pre163_i;var $_pre_phi165_i=$21;label=9;break;
 case 8: 
 var $24=(($19+1)|0);
 var $_pre164_i=(($__buf_i+8)|0);
 var $25=$24;var $_pre_phi_i=$24;var $_pre_phi165_i=$_pre164_i;label=9;break;
 case 9: 
 var $_pre_phi165_i;
 var $_pre_phi_i;
 var $25;
 HEAP32[(($__a_end_i)>>2)]=$25;
 var $26=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$26;
 HEAP32[(($__dc_i)>>2)]=0;
 var $27=(($__buf_i)|0);
 var $28=(($__buf_i+4)|0);
 var $29=HEAP8[($__thousands_sep_i)];
 var $30=(($__buf_i+8)|0);
 var $__a_0_i=$25;var $31=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $31;
 var $__a_0_i;
 var $32=($31|0)==0;
 if($32){var $46=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($31+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $46=$31;label=14;break;}
 case 12: 
 var $40=$31;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $45=($44|0)==-1;
 var $_=($45?0:$31);
 var $46=$_;label=14;break;
 case 14: 
 var $46;
 var $47=($46|0)==0;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=19;break;}else{label=15;break;}
 case 15: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 17: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $61=($60|0)==-1;
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 if($47){var $__a_2_i=$__a_0_i;var $179=0;var $178=1;label=57;break;}else{var $62=1;var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 21: 
 var $_sroa_06_2;
 var $62;
 var $63=HEAP32[(($__a_end_i)>>2)];
 var $64=$63;
 var $65=$__a_0_i;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($7)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($28)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=22;break;}else{var $__a_1_i=$__a_0_i;label=49;break;}
 case 22: 
 if($70){label=24;break;}else{var $77=$71;label=23;break;}
 case 23: 
 var $77;
 var $78=$77<<1;
 var $83=$71;var $82=$77;var $81=$78;label=25;break;
 case 24: 
 var $80=$72<<1;
 var $83=$72;var $82=$72;var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=($83>>>0)<($81>>>0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=((($81)-($83))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$86,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=40;break; }
 case 27: 
 var $88=$67&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=HEAP32[(($30)>>2)];
 var $92=(($91+$81)|0);
 HEAP8[($92)]=0;
 HEAP32[(($28)>>2)]=$81;
 label=30;break;
 case 29: 
 var $94=(($19+1+$81)|0);
 HEAP8[($94)]=0;
 var $95=$82<<2;
 var $96=(($95)&255);
 HEAP8[($7)]=$96;
 label=30;break;
 case 30: 
 var $97=HEAP8[($7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $105=10;var $104=$97;label=32;break;}else{label=31;break;}
 case 31: 
 var $101=HEAP32[(($27)>>2)];
 var $102=$101&-2;
 var $phitmp160_i=((($102)-(1))|0);
 var $103=(($101)&255);
 var $105=$phitmp160_i;var $104=$103;label=32;break;
 case 32: 
 var $104;
 var $105;
 var $106=($104&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 var $109=HEAP32[(($28)>>2)];
 var $110=$106>>>1;
 var $111=($108?$110:$109);
 var $112=($111>>>0)<($105>>>0);
 if($112){label=33;break;}else{label=34;break;}
 case 33: 
 var $114=((($105)-($111))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 34: 
 var $116=$104&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=HEAP32[(($30)>>2)];
 var $120=(($119+$105)|0);
 HEAP8[($120)]=0;
 HEAP32[(($28)>>2)]=$105;
 label=37;break;
 case 36: 
 var $122=(($19+1+$105)|0);
 HEAP8[($122)]=0;
 var $123=$105<<1;
 var $124=(($123)&255);
 HEAP8[($7)]=$124;
 label=37;break;
 case 37: 
 var $125=HEAP8[($7)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){var $130=$_pre_phi_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $129=HEAP32[(($_pre_phi165_i)>>2)];
 var $130=$129;label=39;break;
 case 39: 
 var $130;
 var $131=(($130+$82)|0);
 HEAP32[(($__a_end_i)>>2)]=$131;
 var $__a_1_i=$130;label=49;break;
 case 40: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=42;break;
 case 42: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $133=HEAP8[($7)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=45;break;}else{label=43;break;}
 case 43: 
 var $137=(($__buf_i+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){label=45;break;}else{label=44;break;}
 case 44: 
 _free($138);
 label=45;break;
 case 45: 
 var $141=HEAP8[($6)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=(($__grouping_i+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($146);
 label=48;break;
 case 48: 
 ___resumeException($lpad_phi_i$0)
 case 49: 
 var $__a_1_i;
 var $149=(($46+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($46+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{label=52;break;}
 case 50: 
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=40;break; }
 case 51: 
 var $extract_t_i=(($159)&255);
 var $_0_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $161=HEAP8[($150)];
 var $_0_off0_i=$161;label=53;break;
 case 53: 
 var $_0_off0_i;
 var $163=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$29,$__grouping_i,$26,$__g_end_i,$5);
 var $164=($163|0)==0;
 if($164){label=54;break;}else{var $__a_2_i=$__a_1_i;var $179=$_sroa_06_2;var $178=$62;label=57;break;}
 case 54: 
 var $166=HEAP32[(($149)>>2)];
 var $167=HEAP32[(($151)>>2)];
 var $168=($166|0)==($167|0);
 if($168){label=55;break;}else{label=56;break;}
 case 55: 
 var $170=$46;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+40)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=40;break; }
 case 56: 
 var $176=(($166+1)|0);
 HEAP32[(($149)>>2)]=$176;
 var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $178;
 var $179;
 var $__a_2_i;
 var $180=HEAP8[($6)];
 var $181=($180&255);
 var $182=$181&1;
 var $183=($182|0)==0;
 if($183){label=59;break;}else{label=58;break;}
 case 58: 
 var $185=(($__grouping_i+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $189=$186;label=60;break;
 case 59: 
 var $188=$181>>>1;
 var $189=$188;label=60;break;
 case 60: 
 var $189;
 var $190=($189|0)==0;
 if($190){label=63;break;}else{label=61;break;}
 case 61: 
 var $192=HEAP32[(($__g_end_i)>>2)];
 var $193=$192;
 var $194=$__g_i;
 var $195=((($193)-($194))|0);
 var $196=($195|0)<160;
 if($196){label=62;break;}else{label=63;break;}
 case 62: 
 var $198=HEAP32[(($__dc_i)>>2)];
 var $199=(($192+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$199;
 HEAP32[(($192)>>2)]=$198;
 label=63;break;
 case 63: 
 var $200=HEAP32[(($__a_end_i)>>2)];
 var $201=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$200,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=41;break; }
 case 64: 
 HEAP32[(($__v)>>2)]=$201;
 var $203=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$26,$203,$__err);
 if($47){var $217=0;label=68;break;}else{label=65;break;}
 case 65: 
 var $205=(($46+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($46+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=66;break;}else{var $217=$46;label=68;break;}
 case 66: 
 var $211=$46;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=41;break; }
 case 67: 
 var $216=($215|0)==-1;
 var $_8=($216?0:$46);
 var $217=$_8;label=68;break;
 case 68: 
 var $217;
 var $218=($217|0)==0;
 if($178){label=72;break;}else{label=69;break;}
 case 69: 
 var $220=(($179+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($179+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($221|0)==($223|0);
 if($224){label=70;break;}else{label=73;break;}
 case 70: 
 var $226=$179;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $231=($230|0)==-1;
 if($231){label=72;break;}else{label=73;break;}
 case 72: 
 if($218){label=74;break;}else{label=75;break;}
 case 73: 
 var $232=($179|0)==0;
 var $tmp158_i=$218^$232;
 if($tmp158_i){label=75;break;}else{label=74;break;}
 case 74: 
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234|2;
 HEAP32[(($__err)>>2)]=$235;
 label=75;break;
 case 75: 
 var $237=(($agg_result)|0);
 HEAP32[(($237)>>2)]=$217;
 var $238=HEAP8[($7)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=78;break;}else{label=76;break;}
 case 76: 
 var $242=HEAP32[(($30)>>2)];
 var $243=($242|0)==0;
 if($243){label=78;break;}else{label=77;break;}
 case 77: 
 _free($242);
 label=78;break;
 case 78: 
 var $245=HEAP8[($6)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=81;break;}else{label=79;break;}
 case 79: 
 var $249=(($__grouping_i+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($250|0)==0;
 if($251){label=81;break;}else{label=80;break;}
 case 80: 
 _free($250);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 var $12=(($__iob+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&74;
 if(($14|0)==8){ label=2;break;}else if(($14|0)==0){ label=3;break;}else if(($14|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $19=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=41;break; }
 case 6: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre163_i=(($19+1)|0);
 var $25=$22;var $_pre_phi_i=$_pre163_i;var $_pre_phi165_i=$21;label=9;break;
 case 8: 
 var $24=(($19+1)|0);
 var $_pre164_i=(($__buf_i+8)|0);
 var $25=$24;var $_pre_phi_i=$24;var $_pre_phi165_i=$_pre164_i;label=9;break;
 case 9: 
 var $_pre_phi165_i;
 var $_pre_phi_i;
 var $25;
 HEAP32[(($__a_end_i)>>2)]=$25;
 var $26=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$26;
 HEAP32[(($__dc_i)>>2)]=0;
 var $27=(($__buf_i)|0);
 var $28=(($__buf_i+4)|0);
 var $29=HEAP8[($__thousands_sep_i)];
 var $30=(($__buf_i+8)|0);
 var $__a_0_i=$25;var $31=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $31;
 var $__a_0_i;
 var $32=($31|0)==0;
 if($32){var $46=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($31+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $46=$31;label=14;break;}
 case 12: 
 var $40=$31;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $45=($44|0)==-1;
 var $_=($45?0:$31);
 var $46=$_;label=14;break;
 case 14: 
 var $46;
 var $47=($46|0)==0;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=19;break;}else{label=15;break;}
 case 15: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 17: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $61=($60|0)==-1;
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 if($47){var $__a_2_i=$__a_0_i;var $179=0;var $178=1;label=57;break;}else{var $62=1;var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 21: 
 var $_sroa_06_2;
 var $62;
 var $63=HEAP32[(($__a_end_i)>>2)];
 var $64=$63;
 var $65=$__a_0_i;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($7)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($28)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=22;break;}else{var $__a_1_i=$__a_0_i;label=49;break;}
 case 22: 
 if($70){label=24;break;}else{var $77=$71;label=23;break;}
 case 23: 
 var $77;
 var $78=$77<<1;
 var $83=$71;var $82=$77;var $81=$78;label=25;break;
 case 24: 
 var $80=$72<<1;
 var $83=$72;var $82=$72;var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=($83>>>0)<($81>>>0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=((($81)-($83))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$86,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=40;break; }
 case 27: 
 var $88=$67&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=HEAP32[(($30)>>2)];
 var $92=(($91+$81)|0);
 HEAP8[($92)]=0;
 HEAP32[(($28)>>2)]=$81;
 label=30;break;
 case 29: 
 var $94=(($19+1+$81)|0);
 HEAP8[($94)]=0;
 var $95=$82<<2;
 var $96=(($95)&255);
 HEAP8[($7)]=$96;
 label=30;break;
 case 30: 
 var $97=HEAP8[($7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $105=10;var $104=$97;label=32;break;}else{label=31;break;}
 case 31: 
 var $101=HEAP32[(($27)>>2)];
 var $102=$101&-2;
 var $phitmp160_i=((($102)-(1))|0);
 var $103=(($101)&255);
 var $105=$phitmp160_i;var $104=$103;label=32;break;
 case 32: 
 var $104;
 var $105;
 var $106=($104&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 var $109=HEAP32[(($28)>>2)];
 var $110=$106>>>1;
 var $111=($108?$110:$109);
 var $112=($111>>>0)<($105>>>0);
 if($112){label=33;break;}else{label=34;break;}
 case 33: 
 var $114=((($105)-($111))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 34: 
 var $116=$104&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=HEAP32[(($30)>>2)];
 var $120=(($119+$105)|0);
 HEAP8[($120)]=0;
 HEAP32[(($28)>>2)]=$105;
 label=37;break;
 case 36: 
 var $122=(($19+1+$105)|0);
 HEAP8[($122)]=0;
 var $123=$105<<1;
 var $124=(($123)&255);
 HEAP8[($7)]=$124;
 label=37;break;
 case 37: 
 var $125=HEAP8[($7)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){var $130=$_pre_phi_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $129=HEAP32[(($_pre_phi165_i)>>2)];
 var $130=$129;label=39;break;
 case 39: 
 var $130;
 var $131=(($130+$82)|0);
 HEAP32[(($__a_end_i)>>2)]=$131;
 var $__a_1_i=$130;label=49;break;
 case 40: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=42;break;
 case 42: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $133=HEAP8[($7)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=45;break;}else{label=43;break;}
 case 43: 
 var $137=(($__buf_i+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){label=45;break;}else{label=44;break;}
 case 44: 
 _free($138);
 label=45;break;
 case 45: 
 var $141=HEAP8[($6)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=(($__grouping_i+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($146);
 label=48;break;
 case 48: 
 ___resumeException($lpad_phi_i$0)
 case 49: 
 var $__a_1_i;
 var $149=(($46+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($46+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{label=52;break;}
 case 50: 
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=40;break; }
 case 51: 
 var $extract_t_i=(($159)&255);
 var $_0_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $161=HEAP8[($150)];
 var $_0_off0_i=$161;label=53;break;
 case 53: 
 var $_0_off0_i;
 var $163=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$29,$__grouping_i,$26,$__g_end_i,$5);
 var $164=($163|0)==0;
 if($164){label=54;break;}else{var $__a_2_i=$__a_1_i;var $179=$_sroa_06_2;var $178=$62;label=57;break;}
 case 54: 
 var $166=HEAP32[(($149)>>2)];
 var $167=HEAP32[(($151)>>2)];
 var $168=($166|0)==($167|0);
 if($168){label=55;break;}else{label=56;break;}
 case 55: 
 var $170=$46;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+40)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=40;break; }
 case 56: 
 var $176=(($166+1)|0);
 HEAP32[(($149)>>2)]=$176;
 var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $178;
 var $179;
 var $__a_2_i;
 var $180=HEAP8[($6)];
 var $181=($180&255);
 var $182=$181&1;
 var $183=($182|0)==0;
 if($183){label=59;break;}else{label=58;break;}
 case 58: 
 var $185=(($__grouping_i+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $189=$186;label=60;break;
 case 59: 
 var $188=$181>>>1;
 var $189=$188;label=60;break;
 case 60: 
 var $189;
 var $190=($189|0)==0;
 if($190){label=63;break;}else{label=61;break;}
 case 61: 
 var $192=HEAP32[(($__g_end_i)>>2)];
 var $193=$192;
 var $194=$__g_i;
 var $195=((($193)-($194))|0);
 var $196=($195|0)<160;
 if($196){label=62;break;}else{label=63;break;}
 case 62: 
 var $198=HEAP32[(($__dc_i)>>2)];
 var $199=(($192+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$199;
 HEAP32[(($192)>>2)]=$198;
 label=63;break;
 case 63: 
 var $200=HEAP32[(($__a_end_i)>>2)];
 var $201$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$200,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $201$0=$201$r;var $201$1=tempRet0;if (!__THREW__) { label=64;break; } else { label=41;break; }
 case 64: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$201$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$201$1;
 var $203=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$26,$203,$__err);
 if($47){var $217=0;label=68;break;}else{label=65;break;}
 case 65: 
 var $205=(($46+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($46+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=66;break;}else{var $217=$46;label=68;break;}
 case 66: 
 var $211=$46;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=41;break; }
 case 67: 
 var $216=($215|0)==-1;
 var $_8=($216?0:$46);
 var $217=$_8;label=68;break;
 case 68: 
 var $217;
 var $218=($217|0)==0;
 if($178){label=72;break;}else{label=69;break;}
 case 69: 
 var $220=(($179+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($179+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($221|0)==($223|0);
 if($224){label=70;break;}else{label=73;break;}
 case 70: 
 var $226=$179;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $231=($230|0)==-1;
 if($231){label=72;break;}else{label=73;break;}
 case 72: 
 if($218){label=74;break;}else{label=75;break;}
 case 73: 
 var $232=($179|0)==0;
 var $tmp158_i=$218^$232;
 if($tmp158_i){label=75;break;}else{label=74;break;}
 case 74: 
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234|2;
 HEAP32[(($__err)>>2)]=$235;
 label=75;break;
 case 75: 
 var $237=(($agg_result)|0);
 HEAP32[(($237)>>2)]=$217;
 var $238=HEAP8[($7)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=78;break;}else{label=76;break;}
 case 76: 
 var $242=HEAP32[(($30)>>2)];
 var $243=($242|0)==0;
 if($243){label=78;break;}else{label=77;break;}
 case 77: 
 _free($242);
 label=78;break;
 case 78: 
 var $245=HEAP8[($6)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=81;break;}else{label=79;break;}
 case 79: 
 var $249=(($__grouping_i+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($250|0)==0;
 if($251){label=81;break;}else{label=80;break;}
 case 80: 
 _free($250);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 var $12=(($__iob+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&74;
 if(($14|0)==8){ label=2;break;}else if(($14|0)==0){ label=3;break;}else if(($14|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $19=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=41;break; }
 case 6: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre163_i=(($19+1)|0);
 var $25=$22;var $_pre_phi_i=$_pre163_i;var $_pre_phi165_i=$21;label=9;break;
 case 8: 
 var $24=(($19+1)|0);
 var $_pre164_i=(($__buf_i+8)|0);
 var $25=$24;var $_pre_phi_i=$24;var $_pre_phi165_i=$_pre164_i;label=9;break;
 case 9: 
 var $_pre_phi165_i;
 var $_pre_phi_i;
 var $25;
 HEAP32[(($__a_end_i)>>2)]=$25;
 var $26=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$26;
 HEAP32[(($__dc_i)>>2)]=0;
 var $27=(($__buf_i)|0);
 var $28=(($__buf_i+4)|0);
 var $29=HEAP8[($__thousands_sep_i)];
 var $30=(($__buf_i+8)|0);
 var $__a_0_i=$25;var $31=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $31;
 var $__a_0_i;
 var $32=($31|0)==0;
 if($32){var $46=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($31+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $46=$31;label=14;break;}
 case 12: 
 var $40=$31;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $45=($44|0)==-1;
 var $_=($45?0:$31);
 var $46=$_;label=14;break;
 case 14: 
 var $46;
 var $47=($46|0)==0;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=19;break;}else{label=15;break;}
 case 15: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 17: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $61=($60|0)==-1;
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 if($47){var $__a_2_i=$__a_0_i;var $179=0;var $178=1;label=57;break;}else{var $62=1;var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 21: 
 var $_sroa_06_2;
 var $62;
 var $63=HEAP32[(($__a_end_i)>>2)];
 var $64=$63;
 var $65=$__a_0_i;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($7)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($28)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=22;break;}else{var $__a_1_i=$__a_0_i;label=49;break;}
 case 22: 
 if($70){label=24;break;}else{var $77=$71;label=23;break;}
 case 23: 
 var $77;
 var $78=$77<<1;
 var $83=$71;var $82=$77;var $81=$78;label=25;break;
 case 24: 
 var $80=$72<<1;
 var $83=$72;var $82=$72;var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=($83>>>0)<($81>>>0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=((($81)-($83))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$86,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=40;break; }
 case 27: 
 var $88=$67&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=HEAP32[(($30)>>2)];
 var $92=(($91+$81)|0);
 HEAP8[($92)]=0;
 HEAP32[(($28)>>2)]=$81;
 label=30;break;
 case 29: 
 var $94=(($19+1+$81)|0);
 HEAP8[($94)]=0;
 var $95=$82<<2;
 var $96=(($95)&255);
 HEAP8[($7)]=$96;
 label=30;break;
 case 30: 
 var $97=HEAP8[($7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $105=10;var $104=$97;label=32;break;}else{label=31;break;}
 case 31: 
 var $101=HEAP32[(($27)>>2)];
 var $102=$101&-2;
 var $phitmp160_i=((($102)-(1))|0);
 var $103=(($101)&255);
 var $105=$phitmp160_i;var $104=$103;label=32;break;
 case 32: 
 var $104;
 var $105;
 var $106=($104&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 var $109=HEAP32[(($28)>>2)];
 var $110=$106>>>1;
 var $111=($108?$110:$109);
 var $112=($111>>>0)<($105>>>0);
 if($112){label=33;break;}else{label=34;break;}
 case 33: 
 var $114=((($105)-($111))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 34: 
 var $116=$104&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=HEAP32[(($30)>>2)];
 var $120=(($119+$105)|0);
 HEAP8[($120)]=0;
 HEAP32[(($28)>>2)]=$105;
 label=37;break;
 case 36: 
 var $122=(($19+1+$105)|0);
 HEAP8[($122)]=0;
 var $123=$105<<1;
 var $124=(($123)&255);
 HEAP8[($7)]=$124;
 label=37;break;
 case 37: 
 var $125=HEAP8[($7)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){var $130=$_pre_phi_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $129=HEAP32[(($_pre_phi165_i)>>2)];
 var $130=$129;label=39;break;
 case 39: 
 var $130;
 var $131=(($130+$82)|0);
 HEAP32[(($__a_end_i)>>2)]=$131;
 var $__a_1_i=$130;label=49;break;
 case 40: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=42;break;
 case 42: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $133=HEAP8[($7)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=45;break;}else{label=43;break;}
 case 43: 
 var $137=(($__buf_i+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){label=45;break;}else{label=44;break;}
 case 44: 
 _free($138);
 label=45;break;
 case 45: 
 var $141=HEAP8[($6)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=(($__grouping_i+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($146);
 label=48;break;
 case 48: 
 ___resumeException($lpad_phi_i$0)
 case 49: 
 var $__a_1_i;
 var $149=(($46+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($46+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{label=52;break;}
 case 50: 
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=40;break; }
 case 51: 
 var $extract_t_i=(($159)&255);
 var $_0_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $161=HEAP8[($150)];
 var $_0_off0_i=$161;label=53;break;
 case 53: 
 var $_0_off0_i;
 var $163=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$29,$__grouping_i,$26,$__g_end_i,$5);
 var $164=($163|0)==0;
 if($164){label=54;break;}else{var $__a_2_i=$__a_1_i;var $179=$_sroa_06_2;var $178=$62;label=57;break;}
 case 54: 
 var $166=HEAP32[(($149)>>2)];
 var $167=HEAP32[(($151)>>2)];
 var $168=($166|0)==($167|0);
 if($168){label=55;break;}else{label=56;break;}
 case 55: 
 var $170=$46;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+40)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=40;break; }
 case 56: 
 var $176=(($166+1)|0);
 HEAP32[(($149)>>2)]=$176;
 var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $178;
 var $179;
 var $__a_2_i;
 var $180=HEAP8[($6)];
 var $181=($180&255);
 var $182=$181&1;
 var $183=($182|0)==0;
 if($183){label=59;break;}else{label=58;break;}
 case 58: 
 var $185=(($__grouping_i+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $189=$186;label=60;break;
 case 59: 
 var $188=$181>>>1;
 var $189=$188;label=60;break;
 case 60: 
 var $189;
 var $190=($189|0)==0;
 if($190){label=63;break;}else{label=61;break;}
 case 61: 
 var $192=HEAP32[(($__g_end_i)>>2)];
 var $193=$192;
 var $194=$__g_i;
 var $195=((($193)-($194))|0);
 var $196=($195|0)<160;
 if($196){label=62;break;}else{label=63;break;}
 case 62: 
 var $198=HEAP32[(($__dc_i)>>2)];
 var $199=(($192+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$199;
 HEAP32[(($192)>>2)]=$198;
 label=63;break;
 case 63: 
 var $200=HEAP32[(($__a_end_i)>>2)];
 var $201=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$200,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=41;break; }
 case 64: 
 HEAP16[(($__v)>>1)]=$201;
 var $203=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$26,$203,$__err);
 if($47){var $217=0;label=68;break;}else{label=65;break;}
 case 65: 
 var $205=(($46+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($46+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=66;break;}else{var $217=$46;label=68;break;}
 case 66: 
 var $211=$46;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=41;break; }
 case 67: 
 var $216=($215|0)==-1;
 var $_8=($216?0:$46);
 var $217=$_8;label=68;break;
 case 68: 
 var $217;
 var $218=($217|0)==0;
 if($178){label=72;break;}else{label=69;break;}
 case 69: 
 var $220=(($179+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($179+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($221|0)==($223|0);
 if($224){label=70;break;}else{label=73;break;}
 case 70: 
 var $226=$179;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $231=($230|0)==-1;
 if($231){label=72;break;}else{label=73;break;}
 case 72: 
 if($218){label=74;break;}else{label=75;break;}
 case 73: 
 var $232=($179|0)==0;
 var $tmp158_i=$218^$232;
 if($tmp158_i){label=75;break;}else{label=74;break;}
 case 74: 
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234|2;
 HEAP32[(($__err)>>2)]=$235;
 label=75;break;
 case 75: 
 var $237=(($agg_result)|0);
 HEAP32[(($237)>>2)]=$217;
 var $238=HEAP8[($7)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=78;break;}else{label=76;break;}
 case 76: 
 var $242=HEAP32[(($30)>>2)];
 var $243=($242|0)==0;
 if($243){label=78;break;}else{label=77;break;}
 case 77: 
 _free($242);
 label=78;break;
 case 78: 
 var $245=HEAP8[($6)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=81;break;}else{label=79;break;}
 case 79: 
 var $249=(($__grouping_i+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($250|0)==0;
 if($251){label=81;break;}else{label=80;break;}
 case 80: 
 _free($250);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 var $12=(($__iob+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&74;
 if(($14|0)==8){ label=2;break;}else if(($14|0)==0){ label=3;break;}else if(($14|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $19=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=41;break; }
 case 6: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre163_i=(($19+1)|0);
 var $25=$22;var $_pre_phi_i=$_pre163_i;var $_pre_phi165_i=$21;label=9;break;
 case 8: 
 var $24=(($19+1)|0);
 var $_pre164_i=(($__buf_i+8)|0);
 var $25=$24;var $_pre_phi_i=$24;var $_pre_phi165_i=$_pre164_i;label=9;break;
 case 9: 
 var $_pre_phi165_i;
 var $_pre_phi_i;
 var $25;
 HEAP32[(($__a_end_i)>>2)]=$25;
 var $26=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$26;
 HEAP32[(($__dc_i)>>2)]=0;
 var $27=(($__buf_i)|0);
 var $28=(($__buf_i+4)|0);
 var $29=HEAP8[($__thousands_sep_i)];
 var $30=(($__buf_i+8)|0);
 var $__a_0_i=$25;var $31=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $31;
 var $__a_0_i;
 var $32=($31|0)==0;
 if($32){var $46=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($31+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $46=$31;label=14;break;}
 case 12: 
 var $40=$31;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $45=($44|0)==-1;
 var $_=($45?0:$31);
 var $46=$_;label=14;break;
 case 14: 
 var $46;
 var $47=($46|0)==0;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=19;break;}else{label=15;break;}
 case 15: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 17: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $61=($60|0)==-1;
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 if($47){var $__a_2_i=$__a_0_i;var $179=0;var $178=1;label=57;break;}else{var $62=1;var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 21: 
 var $_sroa_06_2;
 var $62;
 var $63=HEAP32[(($__a_end_i)>>2)];
 var $64=$63;
 var $65=$__a_0_i;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($7)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($28)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=22;break;}else{var $__a_1_i=$__a_0_i;label=49;break;}
 case 22: 
 if($70){label=24;break;}else{var $77=$71;label=23;break;}
 case 23: 
 var $77;
 var $78=$77<<1;
 var $83=$71;var $82=$77;var $81=$78;label=25;break;
 case 24: 
 var $80=$72<<1;
 var $83=$72;var $82=$72;var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=($83>>>0)<($81>>>0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=((($81)-($83))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$86,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=40;break; }
 case 27: 
 var $88=$67&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=HEAP32[(($30)>>2)];
 var $92=(($91+$81)|0);
 HEAP8[($92)]=0;
 HEAP32[(($28)>>2)]=$81;
 label=30;break;
 case 29: 
 var $94=(($19+1+$81)|0);
 HEAP8[($94)]=0;
 var $95=$82<<2;
 var $96=(($95)&255);
 HEAP8[($7)]=$96;
 label=30;break;
 case 30: 
 var $97=HEAP8[($7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $105=10;var $104=$97;label=32;break;}else{label=31;break;}
 case 31: 
 var $101=HEAP32[(($27)>>2)];
 var $102=$101&-2;
 var $phitmp160_i=((($102)-(1))|0);
 var $103=(($101)&255);
 var $105=$phitmp160_i;var $104=$103;label=32;break;
 case 32: 
 var $104;
 var $105;
 var $106=($104&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 var $109=HEAP32[(($28)>>2)];
 var $110=$106>>>1;
 var $111=($108?$110:$109);
 var $112=($111>>>0)<($105>>>0);
 if($112){label=33;break;}else{label=34;break;}
 case 33: 
 var $114=((($105)-($111))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 34: 
 var $116=$104&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=HEAP32[(($30)>>2)];
 var $120=(($119+$105)|0);
 HEAP8[($120)]=0;
 HEAP32[(($28)>>2)]=$105;
 label=37;break;
 case 36: 
 var $122=(($19+1+$105)|0);
 HEAP8[($122)]=0;
 var $123=$105<<1;
 var $124=(($123)&255);
 HEAP8[($7)]=$124;
 label=37;break;
 case 37: 
 var $125=HEAP8[($7)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){var $130=$_pre_phi_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $129=HEAP32[(($_pre_phi165_i)>>2)];
 var $130=$129;label=39;break;
 case 39: 
 var $130;
 var $131=(($130+$82)|0);
 HEAP32[(($__a_end_i)>>2)]=$131;
 var $__a_1_i=$130;label=49;break;
 case 40: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=42;break;
 case 42: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $133=HEAP8[($7)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=45;break;}else{label=43;break;}
 case 43: 
 var $137=(($__buf_i+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){label=45;break;}else{label=44;break;}
 case 44: 
 _free($138);
 label=45;break;
 case 45: 
 var $141=HEAP8[($6)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=(($__grouping_i+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($146);
 label=48;break;
 case 48: 
 ___resumeException($lpad_phi_i$0)
 case 49: 
 var $__a_1_i;
 var $149=(($46+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($46+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{label=52;break;}
 case 50: 
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=40;break; }
 case 51: 
 var $extract_t_i=(($159)&255);
 var $_0_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $161=HEAP8[($150)];
 var $_0_off0_i=$161;label=53;break;
 case 53: 
 var $_0_off0_i;
 var $163=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$29,$__grouping_i,$26,$__g_end_i,$5);
 var $164=($163|0)==0;
 if($164){label=54;break;}else{var $__a_2_i=$__a_1_i;var $179=$_sroa_06_2;var $178=$62;label=57;break;}
 case 54: 
 var $166=HEAP32[(($149)>>2)];
 var $167=HEAP32[(($151)>>2)];
 var $168=($166|0)==($167|0);
 if($168){label=55;break;}else{label=56;break;}
 case 55: 
 var $170=$46;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+40)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=40;break; }
 case 56: 
 var $176=(($166+1)|0);
 HEAP32[(($149)>>2)]=$176;
 var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $178;
 var $179;
 var $__a_2_i;
 var $180=HEAP8[($6)];
 var $181=($180&255);
 var $182=$181&1;
 var $183=($182|0)==0;
 if($183){label=59;break;}else{label=58;break;}
 case 58: 
 var $185=(($__grouping_i+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $189=$186;label=60;break;
 case 59: 
 var $188=$181>>>1;
 var $189=$188;label=60;break;
 case 60: 
 var $189;
 var $190=($189|0)==0;
 if($190){label=63;break;}else{label=61;break;}
 case 61: 
 var $192=HEAP32[(($__g_end_i)>>2)];
 var $193=$192;
 var $194=$__g_i;
 var $195=((($193)-($194))|0);
 var $196=($195|0)<160;
 if($196){label=62;break;}else{label=63;break;}
 case 62: 
 var $198=HEAP32[(($__dc_i)>>2)];
 var $199=(($192+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$199;
 HEAP32[(($192)>>2)]=$198;
 label=63;break;
 case 63: 
 var $200=HEAP32[(($__a_end_i)>>2)];
 var $201=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$200,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=41;break; }
 case 64: 
 HEAP32[(($__v)>>2)]=$201;
 var $203=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$26,$203,$__err);
 if($47){var $217=0;label=68;break;}else{label=65;break;}
 case 65: 
 var $205=(($46+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($46+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=66;break;}else{var $217=$46;label=68;break;}
 case 66: 
 var $211=$46;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=41;break; }
 case 67: 
 var $216=($215|0)==-1;
 var $_8=($216?0:$46);
 var $217=$_8;label=68;break;
 case 68: 
 var $217;
 var $218=($217|0)==0;
 if($178){label=72;break;}else{label=69;break;}
 case 69: 
 var $220=(($179+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($179+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($221|0)==($223|0);
 if($224){label=70;break;}else{label=73;break;}
 case 70: 
 var $226=$179;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $231=($230|0)==-1;
 if($231){label=72;break;}else{label=73;break;}
 case 72: 
 if($218){label=74;break;}else{label=75;break;}
 case 73: 
 var $232=($179|0)==0;
 var $tmp158_i=$218^$232;
 if($tmp158_i){label=75;break;}else{label=74;break;}
 case 74: 
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234|2;
 HEAP32[(($__err)>>2)]=$235;
 label=75;break;
 case 75: 
 var $237=(($agg_result)|0);
 HEAP32[(($237)>>2)]=$217;
 var $238=HEAP8[($7)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=78;break;}else{label=76;break;}
 case 76: 
 var $242=HEAP32[(($30)>>2)];
 var $243=($242|0)==0;
 if($243){label=78;break;}else{label=77;break;}
 case 77: 
 _free($242);
 label=78;break;
 case 78: 
 var $245=HEAP8[($6)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=81;break;}else{label=79;break;}
 case 79: 
 var $249=(($__grouping_i+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($250|0)==0;
 if($251){label=81;break;}else{label=80;break;}
 case 80: 
 _free($250);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 var $12=(($__iob+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&74;
 if(($14|0)==8){ label=2;break;}else if(($14|0)==0){ label=3;break;}else if(($14|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $19=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=41;break; }
 case 6: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre163_i=(($19+1)|0);
 var $25=$22;var $_pre_phi_i=$_pre163_i;var $_pre_phi165_i=$21;label=9;break;
 case 8: 
 var $24=(($19+1)|0);
 var $_pre164_i=(($__buf_i+8)|0);
 var $25=$24;var $_pre_phi_i=$24;var $_pre_phi165_i=$_pre164_i;label=9;break;
 case 9: 
 var $_pre_phi165_i;
 var $_pre_phi_i;
 var $25;
 HEAP32[(($__a_end_i)>>2)]=$25;
 var $26=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$26;
 HEAP32[(($__dc_i)>>2)]=0;
 var $27=(($__buf_i)|0);
 var $28=(($__buf_i+4)|0);
 var $29=HEAP8[($__thousands_sep_i)];
 var $30=(($__buf_i+8)|0);
 var $__a_0_i=$25;var $31=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $31;
 var $__a_0_i;
 var $32=($31|0)==0;
 if($32){var $46=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($31+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $46=$31;label=14;break;}
 case 12: 
 var $40=$31;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $45=($44|0)==-1;
 var $_=($45?0:$31);
 var $46=$_;label=14;break;
 case 14: 
 var $46;
 var $47=($46|0)==0;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=19;break;}else{label=15;break;}
 case 15: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 17: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $61=($60|0)==-1;
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 if($47){var $__a_2_i=$__a_0_i;var $179=0;var $178=1;label=57;break;}else{var $62=1;var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 21: 
 var $_sroa_06_2;
 var $62;
 var $63=HEAP32[(($__a_end_i)>>2)];
 var $64=$63;
 var $65=$__a_0_i;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($7)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($28)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=22;break;}else{var $__a_1_i=$__a_0_i;label=49;break;}
 case 22: 
 if($70){label=24;break;}else{var $77=$71;label=23;break;}
 case 23: 
 var $77;
 var $78=$77<<1;
 var $83=$71;var $82=$77;var $81=$78;label=25;break;
 case 24: 
 var $80=$72<<1;
 var $83=$72;var $82=$72;var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=($83>>>0)<($81>>>0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=((($81)-($83))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$86,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=40;break; }
 case 27: 
 var $88=$67&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=HEAP32[(($30)>>2)];
 var $92=(($91+$81)|0);
 HEAP8[($92)]=0;
 HEAP32[(($28)>>2)]=$81;
 label=30;break;
 case 29: 
 var $94=(($19+1+$81)|0);
 HEAP8[($94)]=0;
 var $95=$82<<2;
 var $96=(($95)&255);
 HEAP8[($7)]=$96;
 label=30;break;
 case 30: 
 var $97=HEAP8[($7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $105=10;var $104=$97;label=32;break;}else{label=31;break;}
 case 31: 
 var $101=HEAP32[(($27)>>2)];
 var $102=$101&-2;
 var $phitmp160_i=((($102)-(1))|0);
 var $103=(($101)&255);
 var $105=$phitmp160_i;var $104=$103;label=32;break;
 case 32: 
 var $104;
 var $105;
 var $106=($104&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 var $109=HEAP32[(($28)>>2)];
 var $110=$106>>>1;
 var $111=($108?$110:$109);
 var $112=($111>>>0)<($105>>>0);
 if($112){label=33;break;}else{label=34;break;}
 case 33: 
 var $114=((($105)-($111))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 34: 
 var $116=$104&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=HEAP32[(($30)>>2)];
 var $120=(($119+$105)|0);
 HEAP8[($120)]=0;
 HEAP32[(($28)>>2)]=$105;
 label=37;break;
 case 36: 
 var $122=(($19+1+$105)|0);
 HEAP8[($122)]=0;
 var $123=$105<<1;
 var $124=(($123)&255);
 HEAP8[($7)]=$124;
 label=37;break;
 case 37: 
 var $125=HEAP8[($7)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){var $130=$_pre_phi_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $129=HEAP32[(($_pre_phi165_i)>>2)];
 var $130=$129;label=39;break;
 case 39: 
 var $130;
 var $131=(($130+$82)|0);
 HEAP32[(($__a_end_i)>>2)]=$131;
 var $__a_1_i=$130;label=49;break;
 case 40: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=42;break;
 case 42: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $133=HEAP8[($7)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=45;break;}else{label=43;break;}
 case 43: 
 var $137=(($__buf_i+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){label=45;break;}else{label=44;break;}
 case 44: 
 _free($138);
 label=45;break;
 case 45: 
 var $141=HEAP8[($6)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=(($__grouping_i+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($146);
 label=48;break;
 case 48: 
 ___resumeException($lpad_phi_i$0)
 case 49: 
 var $__a_1_i;
 var $149=(($46+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($46+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{label=52;break;}
 case 50: 
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=40;break; }
 case 51: 
 var $extract_t_i=(($159)&255);
 var $_0_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $161=HEAP8[($150)];
 var $_0_off0_i=$161;label=53;break;
 case 53: 
 var $_0_off0_i;
 var $163=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$29,$__grouping_i,$26,$__g_end_i,$5);
 var $164=($163|0)==0;
 if($164){label=54;break;}else{var $__a_2_i=$__a_1_i;var $179=$_sroa_06_2;var $178=$62;label=57;break;}
 case 54: 
 var $166=HEAP32[(($149)>>2)];
 var $167=HEAP32[(($151)>>2)];
 var $168=($166|0)==($167|0);
 if($168){label=55;break;}else{label=56;break;}
 case 55: 
 var $170=$46;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+40)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=40;break; }
 case 56: 
 var $176=(($166+1)|0);
 HEAP32[(($149)>>2)]=$176;
 var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $178;
 var $179;
 var $__a_2_i;
 var $180=HEAP8[($6)];
 var $181=($180&255);
 var $182=$181&1;
 var $183=($182|0)==0;
 if($183){label=59;break;}else{label=58;break;}
 case 58: 
 var $185=(($__grouping_i+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $189=$186;label=60;break;
 case 59: 
 var $188=$181>>>1;
 var $189=$188;label=60;break;
 case 60: 
 var $189;
 var $190=($189|0)==0;
 if($190){label=63;break;}else{label=61;break;}
 case 61: 
 var $192=HEAP32[(($__g_end_i)>>2)];
 var $193=$192;
 var $194=$__g_i;
 var $195=((($193)-($194))|0);
 var $196=($195|0)<160;
 if($196){label=62;break;}else{label=63;break;}
 case 62: 
 var $198=HEAP32[(($__dc_i)>>2)];
 var $199=(($192+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$199;
 HEAP32[(($192)>>2)]=$198;
 label=63;break;
 case 63: 
 var $200=HEAP32[(($__a_end_i)>>2)];
 var $201=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$200,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=41;break; }
 case 64: 
 HEAP32[(($__v)>>2)]=$201;
 var $203=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$26,$203,$__err);
 if($47){var $217=0;label=68;break;}else{label=65;break;}
 case 65: 
 var $205=(($46+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($46+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=66;break;}else{var $217=$46;label=68;break;}
 case 66: 
 var $211=$46;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=41;break; }
 case 67: 
 var $216=($215|0)==-1;
 var $_8=($216?0:$46);
 var $217=$_8;label=68;break;
 case 68: 
 var $217;
 var $218=($217|0)==0;
 if($178){label=72;break;}else{label=69;break;}
 case 69: 
 var $220=(($179+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($179+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($221|0)==($223|0);
 if($224){label=70;break;}else{label=73;break;}
 case 70: 
 var $226=$179;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $231=($230|0)==-1;
 if($231){label=72;break;}else{label=73;break;}
 case 72: 
 if($218){label=74;break;}else{label=75;break;}
 case 73: 
 var $232=($179|0)==0;
 var $tmp158_i=$218^$232;
 if($tmp158_i){label=75;break;}else{label=74;break;}
 case 74: 
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234|2;
 HEAP32[(($__err)>>2)]=$235;
 label=75;break;
 case 75: 
 var $237=(($agg_result)|0);
 HEAP32[(($237)>>2)]=$217;
 var $238=HEAP8[($7)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=78;break;}else{label=76;break;}
 case 76: 
 var $242=HEAP32[(($30)>>2)];
 var $243=($242|0)==0;
 if($243){label=78;break;}else{label=77;break;}
 case 77: 
 _free($242);
 label=78;break;
 case 78: 
 var $245=HEAP8[($6)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=81;break;}else{label=79;break;}
 case 79: 
 var $249=(($__grouping_i+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($250|0)==0;
 if($251){label=81;break;}else{label=80;break;}
 case 80: 
 _free($250);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 var $12=(($__iob+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13&74;
 if(($14|0)==8){ label=2;break;}else if(($14|0)==0){ label=3;break;}else if(($14|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $19=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=41;break; }
 case 6: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre163_i=(($19+1)|0);
 var $25=$22;var $_pre_phi_i=$_pre163_i;var $_pre_phi165_i=$21;label=9;break;
 case 8: 
 var $24=(($19+1)|0);
 var $_pre164_i=(($__buf_i+8)|0);
 var $25=$24;var $_pre_phi_i=$24;var $_pre_phi165_i=$_pre164_i;label=9;break;
 case 9: 
 var $_pre_phi165_i;
 var $_pre_phi_i;
 var $25;
 HEAP32[(($__a_end_i)>>2)]=$25;
 var $26=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$26;
 HEAP32[(($__dc_i)>>2)]=0;
 var $27=(($__buf_i)|0);
 var $28=(($__buf_i+4)|0);
 var $29=HEAP8[($__thousands_sep_i)];
 var $30=(($__buf_i+8)|0);
 var $__a_0_i=$25;var $31=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $31;
 var $__a_0_i;
 var $32=($31|0)==0;
 if($32){var $46=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($31+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($31+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $46=$31;label=14;break;}
 case 12: 
 var $40=$31;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($41+36)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$43]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=40;break; }
 case 13: 
 var $45=($44|0)==-1;
 var $_=($45?0:$31);
 var $46=$_;label=14;break;
 case 14: 
 var $46;
 var $47=($46|0)==0;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=19;break;}else{label=15;break;}
 case 15: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=17;break;}else{label=16;break;}
 case 16: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 17: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=40;break; }
 case 18: 
 var $61=($60|0)==-1;
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 if($47){var $__a_2_i=$__a_0_i;var $179=0;var $178=1;label=57;break;}else{var $62=1;var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($47){var $62=0;var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $179=$_sroa_06_0;var $178=0;label=57;break;}
 case 21: 
 var $_sroa_06_2;
 var $62;
 var $63=HEAP32[(($__a_end_i)>>2)];
 var $64=$63;
 var $65=$__a_0_i;
 var $66=((($64)-($65))|0);
 var $67=HEAP8[($7)];
 var $68=($67&255);
 var $69=$68&1;
 var $70=($69|0)==0;
 var $71=HEAP32[(($28)>>2)];
 var $72=$68>>>1;
 var $73=($70?$72:$71);
 var $74=($66|0)==($73|0);
 if($74){label=22;break;}else{var $__a_1_i=$__a_0_i;label=49;break;}
 case 22: 
 if($70){label=24;break;}else{var $77=$71;label=23;break;}
 case 23: 
 var $77;
 var $78=$77<<1;
 var $83=$71;var $82=$77;var $81=$78;label=25;break;
 case 24: 
 var $80=$72<<1;
 var $83=$72;var $82=$72;var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82;
 var $83;
 var $84=($83>>>0)<($81>>>0);
 if($84){label=26;break;}else{label=27;break;}
 case 26: 
 var $86=((($81)-($83))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$86,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=40;break; }
 case 27: 
 var $88=$67&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=HEAP32[(($30)>>2)];
 var $92=(($91+$81)|0);
 HEAP8[($92)]=0;
 HEAP32[(($28)>>2)]=$81;
 label=30;break;
 case 29: 
 var $94=(($19+1+$81)|0);
 HEAP8[($94)]=0;
 var $95=$82<<2;
 var $96=(($95)&255);
 HEAP8[($7)]=$96;
 label=30;break;
 case 30: 
 var $97=HEAP8[($7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){var $105=10;var $104=$97;label=32;break;}else{label=31;break;}
 case 31: 
 var $101=HEAP32[(($27)>>2)];
 var $102=$101&-2;
 var $phitmp160_i=((($102)-(1))|0);
 var $103=(($101)&255);
 var $105=$phitmp160_i;var $104=$103;label=32;break;
 case 32: 
 var $104;
 var $105;
 var $106=($104&255);
 var $107=$106&1;
 var $108=($107|0)==0;
 var $109=HEAP32[(($28)>>2)];
 var $110=$106>>>1;
 var $111=($108?$110:$109);
 var $112=($111>>>0)<($105>>>0);
 if($112){label=33;break;}else{label=34;break;}
 case 33: 
 var $114=((($105)-($111))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$114,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 34: 
 var $116=$104&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=36;break;}else{label=35;break;}
 case 35: 
 var $119=HEAP32[(($30)>>2)];
 var $120=(($119+$105)|0);
 HEAP8[($120)]=0;
 HEAP32[(($28)>>2)]=$105;
 label=37;break;
 case 36: 
 var $122=(($19+1+$105)|0);
 HEAP8[($122)]=0;
 var $123=$105<<1;
 var $124=(($123)&255);
 HEAP8[($7)]=$124;
 label=37;break;
 case 37: 
 var $125=HEAP8[($7)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){var $130=$_pre_phi_i;label=39;break;}else{label=38;break;}
 case 38: 
 var $129=HEAP32[(($_pre_phi165_i)>>2)];
 var $130=$129;label=39;break;
 case 39: 
 var $130;
 var $131=(($130+$82)|0);
 HEAP32[(($__a_end_i)>>2)]=$131;
 var $__a_1_i=$130;label=49;break;
 case 40: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=42;break;
 case 41: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=42;break;
 case 42: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $133=HEAP8[($7)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=45;break;}else{label=43;break;}
 case 43: 
 var $137=(($__buf_i+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==0;
 if($139){label=45;break;}else{label=44;break;}
 case 44: 
 _free($138);
 label=45;break;
 case 45: 
 var $141=HEAP8[($6)];
 var $142=$141&1;
 var $143=(($142<<24)>>24)==0;
 if($143){label=48;break;}else{label=46;break;}
 case 46: 
 var $145=(($__grouping_i+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($146);
 label=48;break;
 case 48: 
 ___resumeException($lpad_phi_i$0)
 case 49: 
 var $__a_1_i;
 var $149=(($46+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($46+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{label=52;break;}
 case 50: 
 var $155=$46;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=40;break; }
 case 51: 
 var $extract_t_i=(($159)&255);
 var $_0_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $161=HEAP8[($150)];
 var $_0_off0_i=$161;label=53;break;
 case 53: 
 var $_0_off0_i;
 var $163=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$29,$__grouping_i,$26,$__g_end_i,$5);
 var $164=($163|0)==0;
 if($164){label=54;break;}else{var $__a_2_i=$__a_1_i;var $179=$_sroa_06_2;var $178=$62;label=57;break;}
 case 54: 
 var $166=HEAP32[(($149)>>2)];
 var $167=HEAP32[(($151)>>2)];
 var $168=($166|0)==($167|0);
 if($168){label=55;break;}else{label=56;break;}
 case 55: 
 var $170=$46;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+40)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=40;break; }
 case 56: 
 var $176=(($166+1)|0);
 HEAP32[(($149)>>2)]=$176;
 var $__a_0_i=$__a_1_i;var $31=$46;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $178;
 var $179;
 var $__a_2_i;
 var $180=HEAP8[($6)];
 var $181=($180&255);
 var $182=$181&1;
 var $183=($182|0)==0;
 if($183){label=59;break;}else{label=58;break;}
 case 58: 
 var $185=(($__grouping_i+4)|0);
 var $186=HEAP32[(($185)>>2)];
 var $189=$186;label=60;break;
 case 59: 
 var $188=$181>>>1;
 var $189=$188;label=60;break;
 case 60: 
 var $189;
 var $190=($189|0)==0;
 if($190){label=63;break;}else{label=61;break;}
 case 61: 
 var $192=HEAP32[(($__g_end_i)>>2)];
 var $193=$192;
 var $194=$__g_i;
 var $195=((($193)-($194))|0);
 var $196=($195|0)<160;
 if($196){label=62;break;}else{label=63;break;}
 case 62: 
 var $198=HEAP32[(($__dc_i)>>2)];
 var $199=(($192+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$199;
 HEAP32[(($192)>>2)]=$198;
 label=63;break;
 case 63: 
 var $200=HEAP32[(($__a_end_i)>>2)];
 var $201$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$200,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $201$0=$201$r;var $201$1=tempRet0;if (!__THREW__) { label=64;break; } else { label=41;break; }
 case 64: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$201$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$201$1;
 var $203=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$26,$203,$__err);
 if($47){var $217=0;label=68;break;}else{label=65;break;}
 case 65: 
 var $205=(($46+12)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=(($46+16)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($206|0)==($208|0);
 if($209){label=66;break;}else{var $217=$46;label=68;break;}
 case 66: 
 var $211=$46;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+36)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$214]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=41;break; }
 case 67: 
 var $216=($215|0)==-1;
 var $_8=($216?0:$46);
 var $217=$_8;label=68;break;
 case 68: 
 var $217;
 var $218=($217|0)==0;
 if($178){label=72;break;}else{label=69;break;}
 case 69: 
 var $220=(($179+12)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=(($179+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($221|0)==($223|0);
 if($224){label=70;break;}else{label=73;break;}
 case 70: 
 var $226=$179;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+36)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($179) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=41;break; }
 case 71: 
 var $231=($230|0)==-1;
 if($231){label=72;break;}else{label=73;break;}
 case 72: 
 if($218){label=74;break;}else{label=75;break;}
 case 73: 
 var $232=($179|0)==0;
 var $tmp158_i=$218^$232;
 if($tmp158_i){label=75;break;}else{label=74;break;}
 case 74: 
 var $234=HEAP32[(($__err)>>2)];
 var $235=$234|2;
 HEAP32[(($__err)>>2)]=$235;
 label=75;break;
 case 75: 
 var $237=(($agg_result)|0);
 HEAP32[(($237)>>2)]=$217;
 var $238=HEAP8[($7)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){label=78;break;}else{label=76;break;}
 case 76: 
 var $242=HEAP32[(($30)>>2)];
 var $243=($242|0)==0;
 if($243){label=78;break;}else{label=77;break;}
 case 77: 
 _free($242);
 label=78;break;
 case 78: 
 var $245=HEAP8[($6)];
 var $246=$245&1;
 var $247=(($246<<24)>>24)==0;
 if($247){label=81;break;}else{label=79;break;}
 case 79: 
 var $249=(($__grouping_i+8)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($250|0)==0;
 if($251){label=81;break;}else{label=80;break;}
 case 80: 
 _free($250);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $12=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=37;break; }
 case 2: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp8=(($phitmp<<24)>>24)==0;
 if($phitmp8){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__buf_i+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162_i=(($12+1)|0);
 var $18=$15;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$14;label=5;break;
 case 4: 
 var $17=(($12+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $18=$17;var $_pre_phi_i=$17;var $_pre_phi164_i=$_pre163_i;label=5;break;
 case 5: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $18;
 HEAP32[(($__a_end_i)>>2)]=$18;
 var $19=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$19;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $20=(($__buf_i)|0);
 var $21=(($__buf_i+4)|0);
 var $22=HEAP8[($__decimal_point_i)];
 var $23=HEAP8[($__thousands_sep_i)];
 var $24=(($__buf_i+8)|0);
 var $__a_0_i=$18;var $25=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $25;
 var $__a_0_i;
 var $26=($25|0)==0;
 if($26){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=8;break;}else{var $40=$25;label=10;break;}
 case 8: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=36;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $_=($39?0:$25);
 var $40=$_;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $56=0;var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $173=$_sroa_06_0;var $172=0;label=53;break;}
 case 13: 
 var $50=$_sroa_06_0;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=36;break; }
 case 14: 
 var $55=($54|0)==-1;
 if($55){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $173=0;var $172=1;label=53;break;}else{var $56=1;var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $56=0;var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $173=$_sroa_06_0;var $172=0;label=53;break;}
 case 17: 
 var $_sroa_06_2;
 var $56;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=$57;
 var $59=$__a_0_i;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($7)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($21)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=18;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 18: 
 if($64){label=20;break;}else{var $71=$65;label=19;break;}
 case 19: 
 var $71;
 var $72=$71<<1;
 var $77=$65;var $76=$71;var $75=$72;label=21;break;
 case 20: 
 var $74=$66<<1;
 var $77=$66;var $76=$66;var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76;
 var $77;
 var $78=($77>>>0)<($75>>>0);
 if($78){label=22;break;}else{label=23;break;}
 case 22: 
 var $80=((($75)-($77))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$80,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=36;break; }
 case 23: 
 var $82=$61&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=25;break;}else{label=24;break;}
 case 24: 
 var $85=HEAP32[(($24)>>2)];
 var $86=(($85+$75)|0);
 HEAP8[($86)]=0;
 HEAP32[(($21)>>2)]=$75;
 label=26;break;
 case 25: 
 var $88=(($12+1+$75)|0);
 HEAP8[($88)]=0;
 var $89=$76<<2;
 var $90=(($89)&255);
 HEAP8[($7)]=$90;
 label=26;break;
 case 26: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $99=10;var $98=$91;label=28;break;}else{label=27;break;}
 case 27: 
 var $95=HEAP32[(($20)>>2)];
 var $96=$95&-2;
 var $phitmp158_i=((($96)-(1))|0);
 var $97=(($95)&255);
 var $99=$phitmp158_i;var $98=$97;label=28;break;
 case 28: 
 var $98;
 var $99;
 var $100=($98&255);
 var $101=$100&1;
 var $102=($101|0)==0;
 var $103=HEAP32[(($21)>>2)];
 var $104=$100>>>1;
 var $105=($102?$104:$103);
 var $106=($105>>>0)<($99>>>0);
 if($106){label=29;break;}else{label=30;break;}
 case 29: 
 var $108=((($99)-($105))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$108,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 30: 
 var $110=$98&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=32;break;}else{label=31;break;}
 case 31: 
 var $113=HEAP32[(($24)>>2)];
 var $114=(($113+$99)|0);
 HEAP8[($114)]=0;
 HEAP32[(($21)>>2)]=$99;
 label=33;break;
 case 32: 
 var $116=(($12+1+$99)|0);
 HEAP8[($116)]=0;
 var $117=$99<<1;
 var $118=(($117)&255);
 HEAP8[($7)]=$118;
 label=33;break;
 case 33: 
 var $119=HEAP8[($7)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){var $124=$_pre_phi_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $123=HEAP32[(($_pre_phi164_i)>>2)];
 var $124=$123;label=35;break;
 case 35: 
 var $124;
 var $125=(($124+$76)|0);
 HEAP32[(($__a_end_i)>>2)]=$125;
 var $__a_1_i=$124;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $127=HEAP8[($7)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=41;break;}else{label=39;break;}
 case 39: 
 var $131=(($__buf_i+8)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132|0)==0;
 if($133){label=41;break;}else{label=40;break;}
 case 40: 
 _free($132);
 label=41;break;
 case 41: 
 var $135=HEAP8[($6)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=44;break;}else{label=42;break;}
 case 42: 
 var $139=(($__grouping_i+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==0;
 if($141){label=44;break;}else{label=43;break;}
 case 43: 
 _free($140);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $143=(($40+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($40+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=46;break;}else{label=48;break;}
 case 46: 
 var $149=$40;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+36)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=36;break; }
 case 47: 
 var $extract_t_i=(($153)&255);
 var $_0_off0_i=$extract_t_i;label=49;break;
 case 48: 
 var $155=HEAP8[($144)];
 var $_0_off0_i=$155;label=49;break;
 case 49: 
 var $_0_off0_i;
 var $157=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$22,$23,$__grouping_i,$19,$__g_end_i,$__dc_i,$5);
 var $158=($157|0)==0;
 if($158){label=50;break;}else{var $__a_2_i=$__a_1_i;var $173=$_sroa_06_2;var $172=$56;label=53;break;}
 case 50: 
 var $160=HEAP32[(($143)>>2)];
 var $161=HEAP32[(($145)>>2)];
 var $162=($160|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$40;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+40)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $25=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=36;break; }
 case 52: 
 var $170=(($160+1)|0);
 HEAP32[(($143)>>2)]=$170;
 var $__a_0_i=$__a_1_i;var $25=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 53: 
 var $172;
 var $173;
 var $__a_2_i;
 var $174=HEAP8[($6)];
 var $175=($174&255);
 var $176=$175&1;
 var $177=($176|0)==0;
 if($177){label=55;break;}else{label=54;break;}
 case 54: 
 var $179=(($__grouping_i+4)|0);
 var $180=HEAP32[(($179)>>2)];
 var $183=$180;label=56;break;
 case 55: 
 var $182=$175>>>1;
 var $183=$182;label=56;break;
 case 56: 
 var $183;
 var $184=($183|0)==0;
 if($184){label=60;break;}else{label=57;break;}
 case 57: 
 var $186=HEAP8[($__in_units_i)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=60;break;}else{label=58;break;}
 case 58: 
 var $190=HEAP32[(($__g_end_i)>>2)];
 var $191=$190;
 var $192=$__g_i;
 var $193=((($191)-($192))|0);
 var $194=($193|0)<160;
 if($194){label=59;break;}else{label=60;break;}
 case 59: 
 var $196=HEAP32[(($__dc_i)>>2)];
 var $197=(($190+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$197;
 HEAP32[(($190)>>2)]=$196;
 label=60;break;
 case 60: 
 var $198=HEAP32[(($__a_end_i)>>2)];
 var $199=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$198,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=37;break; }
 case 61: 
 HEAPF32[(($__v)>>2)]=$199;
 var $201=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$19,$201,$__err);
 if($41){var $215=0;label=65;break;}else{label=62;break;}
 case 62: 
 var $203=(($40+12)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($40+16)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($204|0)==($206|0);
 if($207){label=63;break;}else{var $215=$40;label=65;break;}
 case 63: 
 var $209=$40;
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+36)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$212]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=37;break; }
 case 64: 
 var $214=($213|0)==-1;
 var $_9=($214?0:$40);
 var $215=$_9;label=65;break;
 case 65: 
 var $215;
 var $216=($215|0)==0;
 if($172){label=69;break;}else{label=66;break;}
 case 66: 
 var $218=(($173+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($173+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($219|0)==($221|0);
 if($222){label=67;break;}else{label=70;break;}
 case 67: 
 var $224=$173;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$227]($173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=37;break; }
 case 68: 
 var $229=($228|0)==-1;
 if($229){label=69;break;}else{label=70;break;}
 case 69: 
 if($216){label=71;break;}else{label=72;break;}
 case 70: 
 var $230=($173|0)==0;
 var $tmp156_i=$216^$230;
 if($tmp156_i){label=72;break;}else{label=71;break;}
 case 71: 
 var $232=HEAP32[(($__err)>>2)];
 var $233=$232|2;
 HEAP32[(($__err)>>2)]=$233;
 label=72;break;
 case 72: 
 var $235=(($agg_result)|0);
 HEAP32[(($235)>>2)]=$215;
 var $236=HEAP8[($7)];
 var $237=$236&1;
 var $238=(($237<<24)>>24)==0;
 if($238){label=75;break;}else{label=73;break;}
 case 73: 
 var $240=HEAP32[(($24)>>2)];
 var $241=($240|0)==0;
 if($241){label=75;break;}else{label=74;break;}
 case 74: 
 _free($240);
 label=75;break;
 case 75: 
 var $243=HEAP8[($6)];
 var $244=$243&1;
 var $245=(($244<<24)>>24)==0;
 if($245){label=78;break;}else{label=76;break;}
 case 76: 
 var $247=(($__grouping_i+8)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)==0;
 if($249){label=78;break;}else{label=77;break;}
 case 77: 
 _free($248);
 label=78;break;
 case 78: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $12=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=37;break; }
 case 2: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp8=(($phitmp<<24)>>24)==0;
 if($phitmp8){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__buf_i+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162_i=(($12+1)|0);
 var $18=$15;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$14;label=5;break;
 case 4: 
 var $17=(($12+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $18=$17;var $_pre_phi_i=$17;var $_pre_phi164_i=$_pre163_i;label=5;break;
 case 5: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $18;
 HEAP32[(($__a_end_i)>>2)]=$18;
 var $19=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$19;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $20=(($__buf_i)|0);
 var $21=(($__buf_i+4)|0);
 var $22=HEAP8[($__decimal_point_i)];
 var $23=HEAP8[($__thousands_sep_i)];
 var $24=(($__buf_i+8)|0);
 var $__a_0_i=$18;var $25=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $25;
 var $__a_0_i;
 var $26=($25|0)==0;
 if($26){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=8;break;}else{var $40=$25;label=10;break;}
 case 8: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=36;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $_=($39?0:$25);
 var $40=$_;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $56=0;var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $173=$_sroa_06_0;var $172=0;label=53;break;}
 case 13: 
 var $50=$_sroa_06_0;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=36;break; }
 case 14: 
 var $55=($54|0)==-1;
 if($55){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $173=0;var $172=1;label=53;break;}else{var $56=1;var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $56=0;var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $173=$_sroa_06_0;var $172=0;label=53;break;}
 case 17: 
 var $_sroa_06_2;
 var $56;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=$57;
 var $59=$__a_0_i;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($7)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($21)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=18;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 18: 
 if($64){label=20;break;}else{var $71=$65;label=19;break;}
 case 19: 
 var $71;
 var $72=$71<<1;
 var $77=$65;var $76=$71;var $75=$72;label=21;break;
 case 20: 
 var $74=$66<<1;
 var $77=$66;var $76=$66;var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76;
 var $77;
 var $78=($77>>>0)<($75>>>0);
 if($78){label=22;break;}else{label=23;break;}
 case 22: 
 var $80=((($75)-($77))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$80,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=36;break; }
 case 23: 
 var $82=$61&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=25;break;}else{label=24;break;}
 case 24: 
 var $85=HEAP32[(($24)>>2)];
 var $86=(($85+$75)|0);
 HEAP8[($86)]=0;
 HEAP32[(($21)>>2)]=$75;
 label=26;break;
 case 25: 
 var $88=(($12+1+$75)|0);
 HEAP8[($88)]=0;
 var $89=$76<<2;
 var $90=(($89)&255);
 HEAP8[($7)]=$90;
 label=26;break;
 case 26: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $99=10;var $98=$91;label=28;break;}else{label=27;break;}
 case 27: 
 var $95=HEAP32[(($20)>>2)];
 var $96=$95&-2;
 var $phitmp158_i=((($96)-(1))|0);
 var $97=(($95)&255);
 var $99=$phitmp158_i;var $98=$97;label=28;break;
 case 28: 
 var $98;
 var $99;
 var $100=($98&255);
 var $101=$100&1;
 var $102=($101|0)==0;
 var $103=HEAP32[(($21)>>2)];
 var $104=$100>>>1;
 var $105=($102?$104:$103);
 var $106=($105>>>0)<($99>>>0);
 if($106){label=29;break;}else{label=30;break;}
 case 29: 
 var $108=((($99)-($105))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$108,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 30: 
 var $110=$98&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=32;break;}else{label=31;break;}
 case 31: 
 var $113=HEAP32[(($24)>>2)];
 var $114=(($113+$99)|0);
 HEAP8[($114)]=0;
 HEAP32[(($21)>>2)]=$99;
 label=33;break;
 case 32: 
 var $116=(($12+1+$99)|0);
 HEAP8[($116)]=0;
 var $117=$99<<1;
 var $118=(($117)&255);
 HEAP8[($7)]=$118;
 label=33;break;
 case 33: 
 var $119=HEAP8[($7)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){var $124=$_pre_phi_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $123=HEAP32[(($_pre_phi164_i)>>2)];
 var $124=$123;label=35;break;
 case 35: 
 var $124;
 var $125=(($124+$76)|0);
 HEAP32[(($__a_end_i)>>2)]=$125;
 var $__a_1_i=$124;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $127=HEAP8[($7)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=41;break;}else{label=39;break;}
 case 39: 
 var $131=(($__buf_i+8)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132|0)==0;
 if($133){label=41;break;}else{label=40;break;}
 case 40: 
 _free($132);
 label=41;break;
 case 41: 
 var $135=HEAP8[($6)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=44;break;}else{label=42;break;}
 case 42: 
 var $139=(($__grouping_i+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==0;
 if($141){label=44;break;}else{label=43;break;}
 case 43: 
 _free($140);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $143=(($40+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($40+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=46;break;}else{label=48;break;}
 case 46: 
 var $149=$40;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+36)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=36;break; }
 case 47: 
 var $extract_t_i=(($153)&255);
 var $_0_off0_i=$extract_t_i;label=49;break;
 case 48: 
 var $155=HEAP8[($144)];
 var $_0_off0_i=$155;label=49;break;
 case 49: 
 var $_0_off0_i;
 var $157=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$22,$23,$__grouping_i,$19,$__g_end_i,$__dc_i,$5);
 var $158=($157|0)==0;
 if($158){label=50;break;}else{var $__a_2_i=$__a_1_i;var $173=$_sroa_06_2;var $172=$56;label=53;break;}
 case 50: 
 var $160=HEAP32[(($143)>>2)];
 var $161=HEAP32[(($145)>>2)];
 var $162=($160|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$40;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+40)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $25=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=36;break; }
 case 52: 
 var $170=(($160+1)|0);
 HEAP32[(($143)>>2)]=$170;
 var $__a_0_i=$__a_1_i;var $25=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 53: 
 var $172;
 var $173;
 var $__a_2_i;
 var $174=HEAP8[($6)];
 var $175=($174&255);
 var $176=$175&1;
 var $177=($176|0)==0;
 if($177){label=55;break;}else{label=54;break;}
 case 54: 
 var $179=(($__grouping_i+4)|0);
 var $180=HEAP32[(($179)>>2)];
 var $183=$180;label=56;break;
 case 55: 
 var $182=$175>>>1;
 var $183=$182;label=56;break;
 case 56: 
 var $183;
 var $184=($183|0)==0;
 if($184){label=60;break;}else{label=57;break;}
 case 57: 
 var $186=HEAP8[($__in_units_i)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=60;break;}else{label=58;break;}
 case 58: 
 var $190=HEAP32[(($__g_end_i)>>2)];
 var $191=$190;
 var $192=$__g_i;
 var $193=((($191)-($192))|0);
 var $194=($193|0)<160;
 if($194){label=59;break;}else{label=60;break;}
 case 59: 
 var $196=HEAP32[(($__dc_i)>>2)];
 var $197=(($190+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$197;
 HEAP32[(($190)>>2)]=$196;
 label=60;break;
 case 60: 
 var $198=HEAP32[(($__a_end_i)>>2)];
 var $199=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$198,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=37;break; }
 case 61: 
 HEAPF64[(($__v)>>3)]=$199;
 var $201=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$19,$201,$__err);
 if($41){var $215=0;label=65;break;}else{label=62;break;}
 case 62: 
 var $203=(($40+12)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($40+16)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($204|0)==($206|0);
 if($207){label=63;break;}else{var $215=$40;label=65;break;}
 case 63: 
 var $209=$40;
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+36)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$212]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=37;break; }
 case 64: 
 var $214=($213|0)==-1;
 var $_9=($214?0:$40);
 var $215=$_9;label=65;break;
 case 65: 
 var $215;
 var $216=($215|0)==0;
 if($172){label=69;break;}else{label=66;break;}
 case 66: 
 var $218=(($173+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($173+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($219|0)==($221|0);
 if($222){label=67;break;}else{label=70;break;}
 case 67: 
 var $224=$173;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$227]($173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=37;break; }
 case 68: 
 var $229=($228|0)==-1;
 if($229){label=69;break;}else{label=70;break;}
 case 69: 
 if($216){label=71;break;}else{label=72;break;}
 case 70: 
 var $230=($173|0)==0;
 var $tmp156_i=$216^$230;
 if($tmp156_i){label=72;break;}else{label=71;break;}
 case 71: 
 var $232=HEAP32[(($__err)>>2)];
 var $233=$232|2;
 HEAP32[(($__err)>>2)]=$233;
 label=72;break;
 case 72: 
 var $235=(($agg_result)|0);
 HEAP32[(($235)>>2)]=$215;
 var $236=HEAP8[($7)];
 var $237=$236&1;
 var $238=(($237<<24)>>24)==0;
 if($238){label=75;break;}else{label=73;break;}
 case 73: 
 var $240=HEAP32[(($24)>>2)];
 var $241=($240|0)==0;
 if($241){label=75;break;}else{label=74;break;}
 case 74: 
 _free($240);
 label=75;break;
 case 75: 
 var $243=HEAP8[($6)];
 var $244=$243&1;
 var $245=(($244<<24)>>24)==0;
 if($245){label=78;break;}else{label=76;break;}
 case 76: 
 var $247=(($__grouping_i+8)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)==0;
 if($249){label=78;break;}else{label=77;break;}
 case 77: 
 _free($248);
 label=78;break;
 case 78: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $6=$__grouping_i;
 var $7=$__buf_i;
 var $8=$__a_end_i;
 var $9=$__g_i;
 var $10=$__g_end_i;
 var $11=$__dc_i;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 var $12=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=37;break; }
 case 2: 
 var $_pre=HEAP8[($7)];
 var $phitmp=$_pre&1;
 var $phitmp8=(($phitmp<<24)>>24)==0;
 if($phitmp8){label=4;break;}else{label=3;break;}
 case 3: 
 var $14=(($__buf_i+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $_pre162_i=(($12+1)|0);
 var $18=$15;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$14;label=5;break;
 case 4: 
 var $17=(($12+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $18=$17;var $_pre_phi_i=$17;var $_pre_phi164_i=$_pre163_i;label=5;break;
 case 5: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $18;
 HEAP32[(($__a_end_i)>>2)]=$18;
 var $19=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$19;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $20=(($__buf_i)|0);
 var $21=(($__buf_i+4)|0);
 var $22=HEAP8[($__decimal_point_i)];
 var $23=HEAP8[($__thousands_sep_i)];
 var $24=(($__buf_i+8)|0);
 var $__a_0_i=$18;var $25=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $25;
 var $__a_0_i;
 var $26=($25|0)==0;
 if($26){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $28=(($25+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($25+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($29|0)==($31|0);
 if($32){label=8;break;}else{var $40=$25;label=10;break;}
 case 8: 
 var $34=$25;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=36;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $_=($39?0:$25);
 var $40=$_;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $56=0;var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $173=$_sroa_06_0;var $172=0;label=53;break;}
 case 13: 
 var $50=$_sroa_06_0;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=36;break; }
 case 14: 
 var $55=($54|0)==-1;
 if($55){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $173=0;var $172=1;label=53;break;}else{var $56=1;var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $56=0;var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $173=$_sroa_06_0;var $172=0;label=53;break;}
 case 17: 
 var $_sroa_06_2;
 var $56;
 var $57=HEAP32[(($__a_end_i)>>2)];
 var $58=$57;
 var $59=$__a_0_i;
 var $60=((($58)-($59))|0);
 var $61=HEAP8[($7)];
 var $62=($61&255);
 var $63=$62&1;
 var $64=($63|0)==0;
 var $65=HEAP32[(($21)>>2)];
 var $66=$62>>>1;
 var $67=($64?$66:$65);
 var $68=($60|0)==($67|0);
 if($68){label=18;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 18: 
 if($64){label=20;break;}else{var $71=$65;label=19;break;}
 case 19: 
 var $71;
 var $72=$71<<1;
 var $77=$65;var $76=$71;var $75=$72;label=21;break;
 case 20: 
 var $74=$66<<1;
 var $77=$66;var $76=$66;var $75=$74;label=21;break;
 case 21: 
 var $75;
 var $76;
 var $77;
 var $78=($77>>>0)<($75>>>0);
 if($78){label=22;break;}else{label=23;break;}
 case 22: 
 var $80=((($75)-($77))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$80,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=36;break; }
 case 23: 
 var $82=$61&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=25;break;}else{label=24;break;}
 case 24: 
 var $85=HEAP32[(($24)>>2)];
 var $86=(($85+$75)|0);
 HEAP8[($86)]=0;
 HEAP32[(($21)>>2)]=$75;
 label=26;break;
 case 25: 
 var $88=(($12+1+$75)|0);
 HEAP8[($88)]=0;
 var $89=$76<<2;
 var $90=(($89)&255);
 HEAP8[($7)]=$90;
 label=26;break;
 case 26: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $99=10;var $98=$91;label=28;break;}else{label=27;break;}
 case 27: 
 var $95=HEAP32[(($20)>>2)];
 var $96=$95&-2;
 var $phitmp158_i=((($96)-(1))|0);
 var $97=(($95)&255);
 var $99=$phitmp158_i;var $98=$97;label=28;break;
 case 28: 
 var $98;
 var $99;
 var $100=($98&255);
 var $101=$100&1;
 var $102=($101|0)==0;
 var $103=HEAP32[(($21)>>2)];
 var $104=$100>>>1;
 var $105=($102?$104:$103);
 var $106=($105>>>0)<($99>>>0);
 if($106){label=29;break;}else{label=30;break;}
 case 29: 
 var $108=((($99)-($105))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$108,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 30: 
 var $110=$98&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=32;break;}else{label=31;break;}
 case 31: 
 var $113=HEAP32[(($24)>>2)];
 var $114=(($113+$99)|0);
 HEAP8[($114)]=0;
 HEAP32[(($21)>>2)]=$99;
 label=33;break;
 case 32: 
 var $116=(($12+1+$99)|0);
 HEAP8[($116)]=0;
 var $117=$99<<1;
 var $118=(($117)&255);
 HEAP8[($7)]=$118;
 label=33;break;
 case 33: 
 var $119=HEAP8[($7)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){var $124=$_pre_phi_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $123=HEAP32[(($_pre_phi164_i)>>2)];
 var $124=$123;label=35;break;
 case 35: 
 var $124;
 var $125=(($124+$76)|0);
 HEAP32[(($__a_end_i)>>2)]=$125;
 var $__a_1_i=$124;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $127=HEAP8[($7)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=41;break;}else{label=39;break;}
 case 39: 
 var $131=(($__buf_i+8)|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=($132|0)==0;
 if($133){label=41;break;}else{label=40;break;}
 case 40: 
 _free($132);
 label=41;break;
 case 41: 
 var $135=HEAP8[($6)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=44;break;}else{label=42;break;}
 case 42: 
 var $139=(($__grouping_i+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==0;
 if($141){label=44;break;}else{label=43;break;}
 case 43: 
 _free($140);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $143=(($40+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($40+16)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($144|0)==($146|0);
 if($147){label=46;break;}else{label=48;break;}
 case 46: 
 var $149=$40;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+36)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=36;break; }
 case 47: 
 var $extract_t_i=(($153)&255);
 var $_0_off0_i=$extract_t_i;label=49;break;
 case 48: 
 var $155=HEAP8[($144)];
 var $_0_off0_i=$155;label=49;break;
 case 49: 
 var $_0_off0_i;
 var $157=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_off0_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$22,$23,$__grouping_i,$19,$__g_end_i,$__dc_i,$5);
 var $158=($157|0)==0;
 if($158){label=50;break;}else{var $__a_2_i=$__a_1_i;var $173=$_sroa_06_2;var $172=$56;label=53;break;}
 case 50: 
 var $160=HEAP32[(($143)>>2)];
 var $161=HEAP32[(($145)>>2)];
 var $162=($160|0)==($161|0);
 if($162){label=51;break;}else{label=52;break;}
 case 51: 
 var $164=$40;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+40)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$167]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $25=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=36;break; }
 case 52: 
 var $170=(($160+1)|0);
 HEAP32[(($143)>>2)]=$170;
 var $__a_0_i=$__a_1_i;var $25=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 53: 
 var $172;
 var $173;
 var $__a_2_i;
 var $174=HEAP8[($6)];
 var $175=($174&255);
 var $176=$175&1;
 var $177=($176|0)==0;
 if($177){label=55;break;}else{label=54;break;}
 case 54: 
 var $179=(($__grouping_i+4)|0);
 var $180=HEAP32[(($179)>>2)];
 var $183=$180;label=56;break;
 case 55: 
 var $182=$175>>>1;
 var $183=$182;label=56;break;
 case 56: 
 var $183;
 var $184=($183|0)==0;
 if($184){label=60;break;}else{label=57;break;}
 case 57: 
 var $186=HEAP8[($__in_units_i)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=60;break;}else{label=58;break;}
 case 58: 
 var $190=HEAP32[(($__g_end_i)>>2)];
 var $191=$190;
 var $192=$__g_i;
 var $193=((($191)-($192))|0);
 var $194=($193|0)<160;
 if($194){label=59;break;}else{label=60;break;}
 case 59: 
 var $196=HEAP32[(($__dc_i)>>2)];
 var $197=(($190+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$197;
 HEAP32[(($190)>>2)]=$196;
 label=60;break;
 case 60: 
 var $198=HEAP32[(($__a_end_i)>>2)];
 var $199=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$198,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=37;break; }
 case 61: 
 HEAPF64[(($__v)>>3)]=$199;
 var $201=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$19,$201,$__err);
 if($41){var $215=0;label=65;break;}else{label=62;break;}
 case 62: 
 var $203=(($40+12)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($40+16)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($204|0)==($206|0);
 if($207){label=63;break;}else{var $215=$40;label=65;break;}
 case 63: 
 var $209=$40;
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+36)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$212]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=37;break; }
 case 64: 
 var $214=($213|0)==-1;
 var $_9=($214?0:$40);
 var $215=$_9;label=65;break;
 case 65: 
 var $215;
 var $216=($215|0)==0;
 if($172){label=69;break;}else{label=66;break;}
 case 66: 
 var $218=(($173+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($173+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($219|0)==($221|0);
 if($222){label=67;break;}else{label=70;break;}
 case 67: 
 var $224=$173;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$227]($173) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=37;break; }
 case 68: 
 var $229=($228|0)==-1;
 if($229){label=69;break;}else{label=70;break;}
 case 69: 
 if($216){label=71;break;}else{label=72;break;}
 case 70: 
 var $230=($173|0)==0;
 var $tmp156_i=$216^$230;
 if($tmp156_i){label=72;break;}else{label=71;break;}
 case 71: 
 var $232=HEAP32[(($__err)>>2)];
 var $233=$232|2;
 HEAP32[(($__err)>>2)]=$233;
 label=72;break;
 case 72: 
 var $235=(($agg_result)|0);
 HEAP32[(($235)>>2)]=$215;
 var $236=HEAP8[($7)];
 var $237=$236&1;
 var $238=(($237<<24)>>24)==0;
 if($238){label=75;break;}else{label=73;break;}
 case 73: 
 var $240=HEAP32[(($24)>>2)];
 var $241=($240|0)==0;
 if($241){label=75;break;}else{label=74;break;}
 case 74: 
 _free($240);
 label=75;break;
 case 75: 
 var $243=HEAP8[($6)];
 var $244=$243&1;
 var $245=(($244<<24)>>24)==0;
 if($245){label=78;break;}else{label=76;break;}
 case 76: 
 var $247=(($__grouping_i+8)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=($248|0)==0;
 if($249){label=78;break;}else{label=77;break;}
 case 77: 
 _free($248);
 label=78;break;
 case 78: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $__grouping171=$__grouping;
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping171)>>2)]=0; HEAP32[((($__grouping171)+(4))>>2)]=0; HEAP32[((($__grouping171)+(8))>>2)]=0;
 var $1=$__buf;
 var $2=(($__iob+28)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=$__p_i_i_i;
 var $8=HEAP32[((19288)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=47;break; }
 case 3: 
 var $11=HEAP32[((19292)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($3+12)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($3+8)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=$15;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($12>>>0);
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=(($18+($12<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 HEAP32[(($28)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=47;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$25;
 var $30=(($__atoms)|0);
 var $31=$25;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($29,15512,15538,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=47;break; }
 case 8: 
 var $36=(($3+4)|0);
 var $37=$36;
 var $38=(tempValue=HEAP32[(($37)>>2)],HEAP32[(($37)>>2)]=tempValue+-1,tempValue);
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=$3;
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41);
 label=10;break;
 case 10: 
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $47=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=50;break; }
 case 11: 
 var $_pre16=HEAP8[($1)];
 var $phitmp=$_pre16&1;
 var $phitmp17=(($phitmp<<24)>>24)==0;
 if($phitmp17){label=13;break;}else{label=12;break;}
 case 12: 
 var $49=(($__buf+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $_pre172=(($47+1)|0);
 var $53=$50;var $_pre_phi=$_pre172;var $_pre_phi174=$49;label=14;break;
 case 13: 
 var $52=(($47+1)|0);
 var $_pre173=(($__buf+8)|0);
 var $53=$52;var $_pre_phi=$52;var $_pre_phi174=$_pre173;label=14;break;
 case 14: 
 var $_pre_phi174;
 var $_pre_phi;
 var $53;
 HEAP32[(($__a_end)>>2)]=$53;
 var $54=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $55=(($__b)|0);
 var $56=(($__e)|0);
 var $57=(($__buf)|0);
 var $58=(($__buf+4)|0);
 var $_pre=HEAP32[(($55)>>2)];
 var $59=(($__buf+8)|0);
 var $__a_0=$53;var $60=$_pre;label=15;break;
 case 15: 
 var $60;
 var $__a_0;
 var $61=($60|0)==0;
 if($61){var $76=0;label=20;break;}else{label=16;break;}
 case 16: 
 var $63=(($60+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($60+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=17;break;}else{var $76=$60;label=20;break;}
 case 17: 
 var $69=$60;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+36)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=49;break; }
 case 18: 
 var $74=($73|0)==-1;
 if($74){label=19;break;}else{var $76=$60;label=20;break;}
 case 19: 
 HEAP32[(($55)>>2)]=0;
 var $76=0;label=20;break;
 case 20: 
 var $76;
 var $77=($76|0)==0;
 var $78=HEAP32[(($56)>>2)];
 var $79=($78|0)==0;
 if($79){label=26;break;}else{label=21;break;}
 case 21: 
 var $81=(($78+12)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($78+16)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($82|0)==($84|0);
 if($85){label=23;break;}else{label=22;break;}
 case 22: 
 if($77){label=28;break;}else{var $__a_2=$__a_0;label=62;break;}
 case 23: 
 var $87=$78;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+36)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=49;break; }
 case 24: 
 var $92=($91|0)==-1;
 if($92){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($56)>>2)]=0;
 label=26;break;
 case 26: 
 if($77){var $__a_2=$__a_0;label=62;break;}else{label=28;break;}
 case 27: 
 if($77){label=28;break;}else{var $__a_2=$__a_0;label=62;break;}
 case 28: 
 var $94=HEAP32[(($__a_end)>>2)];
 var $95=$94;
 var $96=$__a_0;
 var $97=((($95)-($96))|0);
 var $98=HEAP8[($1)];
 var $99=($98&255);
 var $100=$99&1;
 var $101=($100|0)==0;
 var $102=HEAP32[(($58)>>2)];
 var $103=$99>>>1;
 var $104=($101?$103:$102);
 var $105=($97|0)==($104|0);
 if($105){label=29;break;}else{var $__a_1=$__a_0;label=54;break;}
 case 29: 
 if($101){label=31;break;}else{var $108=$102;label=30;break;}
 case 30: 
 var $108;
 var $109=$108<<1;
 var $114=$102;var $113=$108;var $112=$109;label=32;break;
 case 31: 
 var $111=$103<<1;
 var $114=$103;var $113=$103;var $112=$111;label=32;break;
 case 32: 
 var $112;
 var $113;
 var $114;
 var $115=($114>>>0)<($112>>>0);
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=((($112)-($114))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf,$117,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=49;break; }
 case 34: 
 var $119=$98&1;
 var $120=(($119<<24)>>24)==0;
 if($120){label=36;break;}else{label=35;break;}
 case 35: 
 var $122=HEAP32[(($59)>>2)];
 var $123=(($122+$112)|0);
 HEAP8[($123)]=0;
 HEAP32[(($58)>>2)]=$112;
 label=37;break;
 case 36: 
 var $125=(($47+1+$112)|0);
 HEAP8[($125)]=0;
 var $126=$113<<2;
 var $127=(($126)&255);
 HEAP8[($1)]=$127;
 label=37;break;
 case 37: 
 var $128=HEAP8[($1)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $136=10;var $135=$128;label=39;break;}else{label=38;break;}
 case 38: 
 var $132=HEAP32[(($57)>>2)];
 var $133=$132&-2;
 var $phitmp166=((($133)-(1))|0);
 var $134=(($132)&255);
 var $136=$phitmp166;var $135=$134;label=39;break;
 case 39: 
 var $135;
 var $136;
 var $137=($135&255);
 var $138=$137&1;
 var $139=($138|0)==0;
 var $140=HEAP32[(($58)>>2)];
 var $141=$137>>>1;
 var $142=($139?$141:$140);
 var $143=($142>>>0)<($136>>>0);
 if($143){label=40;break;}else{label=41;break;}
 case 40: 
 var $145=((($136)-($142))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf,$145,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=49;break; }
 case 41: 
 var $147=$135&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=43;break;}else{label=42;break;}
 case 42: 
 var $150=HEAP32[(($59)>>2)];
 var $151=(($150+$136)|0);
 HEAP8[($151)]=0;
 HEAP32[(($58)>>2)]=$136;
 label=44;break;
 case 43: 
 var $153=(($47+1+$136)|0);
 HEAP8[($153)]=0;
 var $154=$136<<1;
 var $155=(($154)&255);
 HEAP8[($1)]=$155;
 label=44;break;
 case 44: 
 var $156=HEAP8[($1)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){var $161=$_pre_phi;label=46;break;}else{label=45;break;}
 case 45: 
 var $160=HEAP32[(($_pre_phi174)>>2)];
 var $161=$160;label=46;break;
 case 46: 
 var $161;
 var $162=(($161+$113)|0);
 HEAP32[(($__a_end)>>2)]=$162;
 var $__a_1=$161;label=54;break;
 case 47: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1); var $164$1 = tempRet0;
 var $165=$164$0;
 var $166=$164$1;
 var $167=(($3+4)|0);
 var $168=$167;
 var $169=(tempValue=HEAP32[(($168)>>2)],HEAP32[(($168)>>2)]=tempValue+-1,tempValue);
 var $170=($169|0)==0;
 if($170){label=48;break;}else{var $_0158=$166;var $_0159=$165;label=91;break;}
 case 48: 
 var $172=$3;
 var $173=$3;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+8)|0);
 var $176=HEAP32[(($175)>>2)];
 FUNCTION_TABLE[$176]($172);
 var $_0158=$166;var $_0159=$165;label=91;break;
 case 49: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=51;break;
 case 50: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=51;break;
 case 51: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $177=$eh_lpad_body$0;
 var $178=$eh_lpad_body$1;
 var $179=HEAP8[($1)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){var $_0158=$178;var $_0159=$177;label=91;break;}else{label=52;break;}
 case 52: 
 var $183=(($__buf+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($184|0)==0;
 if($185){var $_0158=$178;var $_0159=$177;label=91;break;}else{label=53;break;}
 case 53: 
 _free($184);
 var $_0158=$178;var $_0159=$177;label=91;break;
 case 54: 
 var $__a_1;
 var $187=(($76+12)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($76+16)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($188|0)==($190|0);
 if($191){label=55;break;}else{label=57;break;}
 case 55: 
 var $193=$76;
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+36)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$196]($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=49;break; }
 case 56: 
 var $extract_t=(($197)&255);
 var $_0_off0=$extract_t;label=58;break;
 case 57: 
 var $199=HEAP8[($188)];
 var $_0_off0=$199;label=58;break;
 case 58: 
 var $_0_off0;
 var $201=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_off0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$54,$__g_end,$30);
 var $202=($201|0)==0;
 if($202){label=59;break;}else{var $__a_2=$__a_1;label=62;break;}
 case 59: 
 var $204=HEAP32[(($187)>>2)];
 var $205=HEAP32[(($189)>>2)];
 var $206=($204|0)==($205|0);
 if($206){label=60;break;}else{label=61;break;}
 case 60: 
 var $208=$76;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+40)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $60=$76;label=15;break; } else { label=49;break; }
 case 61: 
 var $214=(($204+1)|0);
 HEAP32[(($187)>>2)]=$214;
 var $__a_0=$__a_1;var $60=$76;label=15;break;
 case 62: 
 var $__a_2;
 var $216=(($__a_2+3)|0);
 HEAP8[($216)]=0;
 var $217=HEAP8[(19864)];
 var $218=(($217<<24)>>24)==0;
 if($218){label=63;break;}else{label=67;break;}
 case 63: 
 var $220=___cxa_guard_acquire(19864);
 var $221=($220|0)==0;
 if($221){label=67;break;}else{label=64;break;}
 case 64: 
 var $223=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=66;break; }
 case 65: 
 HEAP32[((17856)>>2)]=$223;
 label=67;break;
 case 66: 
 var $226$0 = ___cxa_find_matching_catch(-1, -1); var $226$1 = tempRet0;
 var $eh_lpad_body$1=$226$1;var $eh_lpad_body$0=$226$0;label=51;break;
 case 67: 
 var $228=HEAP32[((17856)>>2)];
 var $229=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$228,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=68;break; } else { label=50;break; }
 case 68: 
 var $231=($229|0)==1;
 if($231){label=70;break;}else{label=69;break;}
 case 69: 
 HEAP32[(($__err)>>2)]=4;
 label=70;break;
 case 70: 
 var $234=HEAP32[(($55)>>2)];
 var $235=($234|0)==0;
 if($235){var $250=0;label=75;break;}else{label=71;break;}
 case 71: 
 var $237=(($234+12)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($234+16)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=($238|0)==($240|0);
 if($241){label=72;break;}else{var $250=$234;label=75;break;}
 case 72: 
 var $243=$234;
 var $244=HEAP32[(($243)>>2)];
 var $245=(($244+36)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$246]($234) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=50;break; }
 case 73: 
 var $248=($247|0)==-1;
 if($248){label=74;break;}else{var $250=$234;label=75;break;}
 case 74: 
 HEAP32[(($55)>>2)]=0;
 var $250=0;label=75;break;
 case 75: 
 var $250;
 var $251=($250|0)==0;
 var $252=HEAP32[(($56)>>2)];
 var $253=($252|0)==0;
 if($253){label=81;break;}else{label=76;break;}
 case 76: 
 var $255=(($252+12)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=(($252+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($256|0)==($258|0);
 if($259){label=78;break;}else{label=77;break;}
 case 77: 
 if($251){label=84;break;}else{label=83;break;}
 case 78: 
 var $261=$252;
 var $262=HEAP32[(($261)>>2)];
 var $263=(($262+36)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$264]($252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=50;break; }
 case 79: 
 var $266=($265|0)==-1;
 if($266){label=80;break;}else{label=82;break;}
 case 80: 
 HEAP32[(($56)>>2)]=0;
 label=81;break;
 case 81: 
 if($251){label=83;break;}else{label=84;break;}
 case 82: 
 if($251){label=84;break;}else{label=83;break;}
 case 83: 
 var $268=HEAP32[(($__err)>>2)];
 var $269=$268|2;
 HEAP32[(($__err)>>2)]=$269;
 label=84;break;
 case 84: 
 var $271=(($agg_result)|0);
 HEAP32[(($271)>>2)]=$250;
 var $272=HEAP8[($1)];
 var $273=$272&1;
 var $274=(($273<<24)>>24)==0;
 if($274){label=87;break;}else{label=85;break;}
 case 85: 
 var $276=HEAP32[(($59)>>2)];
 var $277=($276|0)==0;
 if($277){label=87;break;}else{label=86;break;}
 case 86: 
 _free($276);
 label=87;break;
 case 87: 
 var $279=HEAP8[($__grouping171)];
 var $280=$279&1;
 var $281=(($280<<24)>>24)==0;
 if($281){label=90;break;}else{label=88;break;}
 case 88: 
 var $283=(($__grouping+8)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=90;break;}else{label=89;break;}
 case 89: 
 _free($284);
 label=90;break;
 case 90: 
 STACKTOP=sp;return;
 case 91: 
 var $_0159;
 var $_0158;
 var $287=HEAP8[($__grouping171)];
 var $288=$287&1;
 var $289=(($288<<24)>>24)==0;
 if($289){label=94;break;}else{label=92;break;}
 case 92: 
 var $291=(($__grouping+8)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=($292|0)==0;
 if($293){label=94;break;}else{label=93;break;}
 case 93: 
 _free($292);
 label=94;break;
 case 94: 
 var $295$0=$_0159;
 var $295$1=0;
 var $296$0=$295$0;
 var $296$1=$_0158;
 ___resumeException($296$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_049=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_0=$__atoms;label=12;break;
 case 12: 
 var $_0;
 var $40=($_0|0)==($38|0);
 if($40){var $_0_lcssa=$38;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP8[($_0)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_0+1)|0);
 if($43){var $_0_lcssa=$_0;label=14;break;}else{var $_0=$44;label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $45=$_0_lcssa;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_049=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_049=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_049=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_049=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_049=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((15512+$47)|0);
 var $66=HEAP8[($65)];
 var $67=HEAP32[(($__a_end)>>2)];
 var $68=(($67+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($67)]=$66;
 var $_049=0;label=23;break;
 case 22: 
 var $70=((15512+$47)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_049=0;label=23;break;
 case 23: 
 var $_049;
 return $_049;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,2184,$1);
 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i24=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $__names=(sp)+(64);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=48;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=$__p_i_i_i;
 var $34=HEAP32[((19280)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $37=HEAP32[((19284)>>2)];
 var $38=((($37)-(1))|0);
 var $39=(($29+12)|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 var $42=(($29+8)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=$41;
 var $46=$44;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($48>>>0)>($38>>>0);
 if($49){label=10;break;}else{label=11;break;}
 case 10: 
 var $50=(($44+($38<<2))|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=11;break;}else{label=13;break;}
 case 11: 
 var $53=___cxa_allocate_exception(4);
 var $54=$53;
 HEAP32[(($54)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($53,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $55=$51;
 var $56=(($29+4)|0);
 var $57=$56;
 var $58=(tempValue=HEAP32[(($57)>>2)],HEAP32[(($57)>>2)]=tempValue+-1,tempValue);
 var $59=($58|0)==0;
 if($59){label=14;break;}else{label=15;break;}
 case 14: 
 var $61=$29;
 var $62=$29;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($61);
 label=15;break;
 case 15: 
 var $66=HEAP32[(($28)>>2)];
 var $67=(($66+4)|0);
 var $68=$67;
 var $69=(tempValue=HEAP32[(($68)>>2)],HEAP32[(($68)>>2)]=tempValue+1,tempValue);
 var $70=$__p_i_i_i24;
 var $71=HEAP32[((18896)>>2)];
 var $72=($71|0)==-1;
 if($72){label=17;break;}else{label=16;break;}
 case 16: 
 var $_sroa_016_0__idx_i_i25=(($__p_i_i_i24)|0);
 HEAP32[(($_sroa_016_0__idx_i_i25)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i26=(($__p_i_i_i24+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i26)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i27=(($__p_i_i_i24+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$70) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=34;break; }
 case 17: 
 var $74=HEAP32[((18900)>>2)];
 var $75=((($74)-(1))|0);
 var $76=(($66+12)|0);
 var $77=$76;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($66+8)|0);
 var $80=$79;
 var $81=HEAP32[(($80)>>2)];
 var $82=$78;
 var $83=$81;
 var $84=((($82)-($83))|0);
 var $85=$84>>2;
 var $86=($85>>>0)>($75>>>0);
 if($86){label=18;break;}else{label=19;break;}
 case 18: 
 var $87=(($81+($75<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88|0)==0;
 if($89){label=19;break;}else{label=21;break;}
 case 19: 
 var $90=___cxa_allocate_exception(4);
 var $91=$90;
 HEAP32[(($91)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($90,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=34;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $92=$88;
 var $93=(($66+4)|0);
 var $94=$93;
 var $95=(tempValue=HEAP32[(($94)>>2)],HEAP32[(($94)>>2)]=tempValue+-1,tempValue);
 var $96=($95|0)==0;
 if($96){label=22;break;}else{label=23;break;}
 case 22: 
 var $98=$66;
 var $99=$66;
 var $100=HEAP32[(($99)>>2)];
 var $101=(($100+8)|0);
 var $102=HEAP32[(($101)>>2)];
 FUNCTION_TABLE[$102]($98);
 label=23;break;
 case 23: 
 var $103=(($__names)|0);
 var $104=$88;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+24)|0);
 var $107=HEAP32[(($106)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($103,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $_022=$103;label=36;break; }
 case 24: 
 var $108=(($__names+12)|0);
 var $109=HEAP32[(($104)>>2)];
 var $110=(($109+28)|0);
 var $111=HEAP32[(($110)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$111]($108,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { var $_022=$108;label=36;break; }
 case 25: 
 var $112=(($__e)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(($__names+24)|0);
 var $115=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$113,$103,$114,$55,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=41;break; }
 case 26: 
 var $116=($115|0)==($103|0);
 var $117=($116&1);
 HEAP8[($__v)]=$117;
 var $118=(($__b)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($agg_result)|0);
 HEAP32[(($120)>>2)]=$119;
 var $121=$108;
 var $122=HEAP8[($121)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=29;break;}else{label=27;break;}
 case 27: 
 var $126=(($__names+20)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==0;
 if($128){label=29;break;}else{label=28;break;}
 case 28: 
 var $130=$127;
 _free($130);
 label=29;break;
 case 29: 
 var $131=$__names;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=48;break;}else{label=30;break;}
 case 30: 
 var $136=(($__names+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=($137|0)==0;
 if($138){label=48;break;}else{label=31;break;}
 case 31: 
 var $140=$137;
 _free($140);
 label=48;break;
 case 32: 
 var $142$0 = ___cxa_find_matching_catch(-1, -1); var $142$1 = tempRet0;
 var $143=$142$0;
 var $144=$142$1;
 var $145=(($29+4)|0);
 var $146=$145;
 var $147=(tempValue=HEAP32[(($146)>>2)],HEAP32[(($146)>>2)]=tempValue+-1,tempValue);
 var $148=($147|0)==0;
 if($148){label=33;break;}else{var $_0=$143;var $_021=$144;label=49;break;}
 case 33: 
 var $150=$29;
 var $151=$29;
 var $152=HEAP32[(($151)>>2)];
 var $153=(($152+8)|0);
 var $154=HEAP32[(($153)>>2)];
 FUNCTION_TABLE[$154]($150);
 var $_0=$143;var $_021=$144;label=49;break;
 case 34: 
 var $156$0 = ___cxa_find_matching_catch(-1, -1); var $156$1 = tempRet0;
 var $157=$156$0;
 var $158=$156$1;
 var $159=(($66+4)|0);
 var $160=$159;
 var $161=(tempValue=HEAP32[(($160)>>2)],HEAP32[(($160)>>2)]=tempValue+-1,tempValue);
 var $162=($161|0)==0;
 if($162){label=35;break;}else{var $_0=$157;var $_021=$158;label=49;break;}
 case 35: 
 var $164=$66;
 var $165=$66;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+8)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($164);
 var $_0=$157;var $_021=$158;label=49;break;
 case 36: 
 var $_022;
 var $170$0 = ___cxa_find_matching_catch(-1, -1); var $170$1 = tempRet0;
 var $171=$170$0;
 var $172=$170$1;
 var $173=($103|0)==($_022|0);
 if($173){var $_0=$171;var $_021=$172;label=49;break;}else{var $174=$_022;label=37;break;}
 case 37: 
 var $174;
 var $175=((($174)-(12))|0);
 var $176=$175;
 var $177=HEAP8[($176)];
 var $178=$177&1;
 var $179=(($178<<24)>>24)==0;
 if($179){label=40;break;}else{label=38;break;}
 case 38: 
 var $181=((($174)-(12)+8)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($182|0)==0;
 if($183){label=40;break;}else{label=39;break;}
 case 39: 
 var $185=$182;
 _free($185);
 label=40;break;
 case 40: 
 var $186=($175|0)==($103|0);
 if($186){var $_0=$171;var $_021=$172;label=49;break;}else{var $174=$175;label=37;break;}
 case 41: 
 var $187$0 = ___cxa_find_matching_catch(-1, -1); var $187$1 = tempRet0;
 var $188=$187$0;
 var $189=$108;
 var $190=HEAP8[($189)];
 var $191=$190&1;
 var $192=(($191<<24)>>24)==0;
 if($192){label=44;break;}else{label=42;break;}
 case 42: 
 var $194=(($__names+20)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==0;
 if($196){label=44;break;}else{label=43;break;}
 case 43: 
 var $198=$195;
 _free($198);
 label=44;break;
 case 44: 
 var $199=$__names;
 var $200=HEAP8[($199)];
 var $201=$200&1;
 var $202=(($201<<24)>>24)==0;
 if($202){label=47;break;}else{label=45;break;}
 case 45: 
 var $204=(($__names+8)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($205|0)==0;
 if($206){label=47;break;}else{label=46;break;}
 case 46: 
 var $208=$205;
 _free($208);
 label=47;break;
 case 47: 
 var $209=$187$1;
 var $_0=$188;var $_021=$209;label=49;break;
 case 48: 
 STACKTOP=sp;return;
 case 49: 
 var $_021;
 var $_0;
 var $210$0=$_0;
 var $210$1=0;
 var $211$0=$210$0;
 var $211$1=$_021;
 ___resumeException($211$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $__stat_hold_sroa_0_1=0;label=11;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $__stat_hold_sroa_0_1=$8;label=11;break;}
 case 3: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($11,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $260$1=$13$1;var $260$0=$13$0;label=102;break;
 case 6: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=9;break;
 case 7: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit251$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit251$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit251$1;var $lpad_phi$0=$lpad_nonloopexit251$0;label=9;break;
 case 9: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $14=($__stat_hold_sroa_0_1|0)==0;
 if($14){var $260$1=$lpad_phi$1;var $260$0=$lpad_phi$0;label=102;break;}else{label=10;break;}
 case 10: 
 _free($__stat_hold_sroa_0_1);
 var $260$1=$lpad_phi$1;var $260$0=$lpad_phi$0;label=102;break;
 case 11: 
 var $__stat_hold_sroa_0_1;
 var $__status_0;
 var $16=($__kb|0)==($__ke|0);
 if($16){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=12;break;}else{var $__n_might_match_0261=$4;var $__n_does_match_0262=0;var $__st_0263=$__status_0;var $__ky_0264=$__kb;label=13;break;}
 case 12: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $17=(($__b)|0);
 var $18=$__ct;
 var $__indx_0=0;var $__n_does_match_2=$__n_does_match_0_lcssa;var $__n_might_match_2=$__n_might_match_0_lcssa;var $__e_sroa_0_0=$__e_0;label=20;break;
 case 13: 
 var $__ky_0264;
 var $__st_0263;
 var $__n_does_match_0262;
 var $__n_might_match_0261;
 var $19=$__ky_0264;
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=$21&1;
 var $23=($22|0)==0;
 if($23){label=15;break;}else{label=14;break;}
 case 14: 
 var $25=(($__ky_0264+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=16;break;
 case 15: 
 var $28=$21>>>1;
 var $29=$28;label=16;break;
 case 16: 
 var $29;
 var $30=($29|0)==0;
 if($30){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($__st_0263)]=1;
 var $__n_does_match_1=$__n_does_match_0262;var $__n_might_match_1=$__n_might_match_0261;label=19;break;
 case 18: 
 HEAP8[($__st_0263)]=2;
 var $33=((($__n_might_match_0261)-(1))|0);
 var $34=((($__n_does_match_0262)+(1))|0);
 var $__n_does_match_1=$34;var $__n_might_match_1=$33;label=19;break;
 case 19: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $36=(($__ky_0264+12)|0);
 var $37=(($__st_0263+1)|0);
 var $38=($36|0)==($__ke|0);
 if($38){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=12;break;}else{var $__n_might_match_0261=$__n_might_match_1;var $__n_does_match_0262=$__n_does_match_1;var $__st_0263=$37;var $__ky_0264=$36;label=13;break;}
 case 20: 
 var $__e_sroa_0_0;
 var $__n_might_match_2;
 var $__n_does_match_2;
 var $__indx_0;
 var $39=HEAP32[(($17)>>2)];
 var $40=($39|0)==0;
 if($40){var $57=0;label=27;break;}else{label=21;break;}
 case 21: 
 var $42=(($39+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($39+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=22;break;}else{label=23;break;}
 case 22: 
 var $48=$39;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0208=$52;label=24;break; } else { label=7;break; }
 case 23: 
 var $54=HEAP32[(($43)>>2)];
 var $_0208=$54;label=24;break;
 case 24: 
 var $_0208;
 var $55=($_0208|0)==-1;
 if($55){label=26;break;}else{label=25;break;}
 case 25: 
 var $_pre=HEAP32[(($17)>>2)];
 var $57=$_pre;label=27;break;
 case 26: 
 HEAP32[(($17)>>2)]=0;
 var $57=0;label=27;break;
 case 27: 
 var $57;
 var $58=($57|0)==0;
 var $59=($__e_sroa_0_0|0)==0;
 if($59){var $75=$57;var $__e_sroa_0_2=0;label=32;break;}else{label=28;break;}
 case 28: 
 var $61=(($__e_sroa_0_0+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($__e_sroa_0_0+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){label=29;break;}else{label=30;break;}
 case 29: 
 var $67=$__e_sroa_0_0;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+36)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$70]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0207=$71;label=31;break; } else { label=7;break; }
 case 30: 
 var $73=HEAP32[(($62)>>2)];
 var $_0207=$73;label=31;break;
 case 31: 
 var $_0207;
 var $74=($_0207|0)==-1;
 var $___e_sroa_0_0=($74?0:$__e_sroa_0_0);
 var $_pr=HEAP32[(($17)>>2)];
 var $75=$_pr;var $__e_sroa_0_2=$___e_sroa_0_0;label=32;break;
 case 32: 
 var $__e_sroa_0_2;
 var $75;
 var $76=($__e_sroa_0_2|0)==0;
 var $77=$58^$76;
 var $78=($__n_might_match_2|0)!=0;
 var $_=$77&$78;
 if($_){label=33;break;}else{label=79;break;}
 case 33: 
 var $80=(($75+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($75+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=34;break;}else{label=35;break;}
 case 34: 
 var $86=$75;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0206=$90;label=36;break; } else { label=7;break; }
 case 35: 
 var $92=HEAP32[(($81)>>2)];
 var $_0206=$92;label=36;break;
 case 36: 
 var $_0206;
 if($__case_sensitive){var $__c_0=$_0206;label=38;break;}else{label=37;break;}
 case 37: 
 var $94=HEAP32[(($18)>>2)];
 var $95=(($94+28)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,$_0206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$97;label=38;break; } else { label=7;break; }
 case 38: 
 var $__c_0;
 var $_pre3=((($__indx_0)+(1))|0);
 if($16){var $__indx_0=$_pre3;var $__n_does_match_2=$__n_does_match_2;var $__n_might_match_2=$__n_might_match_2;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}else{label=39;break;}
 case 39: 
 if($__case_sensitive){var $__n_might_match_3231_us=$__n_might_match_2;var $__n_does_match_3232_us=$__n_does_match_2;var $__st_1233_us=$__status_0;var $__consume_0_off0235_us=0;var $__ky1_0236_us=$__kb;label=40;break;}else{var $__n_might_match_3231=$__n_might_match_2;var $__n_does_match_3232=$__n_does_match_2;var $__st_1233=$__status_0;var $__consume_0_off0235=0;var $__ky1_0236=$__kb;label=53;break;}
 case 40: 
 var $__ky1_0236_us;
 var $__consume_0_off0235_us;
 var $__st_1233_us;
 var $__n_does_match_3232_us;
 var $__n_might_match_3231_us;
 var $98=HEAP8[($__st_1233_us)];
 var $99=(($98<<24)>>24)==1;
 if($99){label=41;break;}else{var $__consume_1_off0_us=$__consume_0_off0235_us;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$__n_might_match_3231_us;label=51;break;}
 case 41: 
 var $101=$__ky1_0236_us;
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=43;break;}else{label=42;break;}
 case 42: 
 var $106=(($__ky1_0236_us+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $110=$107;label=44;break;
 case 43: 
 var $109=(($__ky1_0236_us+4)|0);
 var $110=$109;label=44;break;
 case 44: 
 var $110;
 var $111=(($110+($__indx_0<<2))|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($__c_0|0)==($112|0);
 if($113){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP8[($__st_1233_us)]=0;
 var $115=((($__n_might_match_3231_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off0235_us;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$115;label=51;break;
 case 46: 
 var $117=($102&255);
 var $118=$117&1;
 var $119=($118|0)==0;
 if($119){label=48;break;}else{label=47;break;}
 case 47: 
 var $121=(($__ky1_0236_us+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $125=$122;label=49;break;
 case 48: 
 var $124=$117>>>1;
 var $125=$124;label=49;break;
 case 49: 
 var $125;
 var $126=($125|0)==($_pre3|0);
 if($126){label=50;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_3232_us;var $__n_might_match_4_us=$__n_might_match_3231_us;label=51;break;}
 case 50: 
 HEAP8[($__st_1233_us)]=2;
 var $128=((($__n_might_match_3231_us)-(1))|0);
 var $129=((($__n_does_match_3232_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$129;var $__n_might_match_4_us=$128;label=51;break;
 case 51: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $131=(($__ky1_0236_us+12)|0);
 var $132=($131|0)==($__ke|0);
 if($132){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=67;break;}else{label=52;break;}
 case 52: 
 var $133=(($__st_1233_us+1)|0);
 var $__n_might_match_3231_us=$__n_might_match_4_us;var $__n_does_match_3232_us=$__n_does_match_4_us;var $__st_1233_us=$133;var $__consume_0_off0235_us=$__consume_1_off0_us;var $__ky1_0236_us=$131;label=40;break;
 case 53: 
 var $__ky1_0236;
 var $__consume_0_off0235;
 var $__st_1233;
 var $__n_does_match_3232;
 var $__n_might_match_3231;
 var $134=HEAP8[($__st_1233)];
 var $135=(($134<<24)>>24)==1;
 if($135){label=54;break;}else{var $__consume_1_off0=$__consume_0_off0235;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$__n_might_match_3231;label=65;break;}
 case 54: 
 var $137=$__ky1_0236;
 var $138=HEAP8[($137)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=56;break;}else{label=55;break;}
 case 55: 
 var $142=(($__ky1_0236+8)|0);
 var $143=HEAP32[(($142)>>2)];
 var $147=$143;label=57;break;
 case 56: 
 var $145=(($__ky1_0236+4)|0);
 var $147=$145;label=57;break;
 case 57: 
 var $147;
 var $148=(($147+($__indx_0<<2))|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=HEAP32[(($18)>>2)];
 var $151=(($150+28)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$152]($__ct,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=6;break; }
 case 58: 
 var $154=($__c_0|0)==($153|0);
 if($154){label=59;break;}else{label=64;break;}
 case 59: 
 var $156=HEAP8[($137)];
 var $157=($156&255);
 var $158=$157&1;
 var $159=($158|0)==0;
 if($159){label=61;break;}else{label=60;break;}
 case 60: 
 var $161=(($__ky1_0236+4)|0);
 var $162=HEAP32[(($161)>>2)];
 var $165=$162;label=62;break;
 case 61: 
 var $164=$157>>>1;
 var $165=$164;label=62;break;
 case 62: 
 var $165;
 var $166=($165|0)==($_pre3|0);
 if($166){label=63;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$__n_might_match_3231;label=65;break;}
 case 63: 
 HEAP8[($__st_1233)]=2;
 var $168=((($__n_might_match_3231)-(1))|0);
 var $169=((($__n_does_match_3232)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$169;var $__n_might_match_4=$168;label=65;break;
 case 64: 
 HEAP8[($__st_1233)]=0;
 var $171=((($__n_might_match_3231)-(1))|0);
 var $__consume_1_off0=$__consume_0_off0235;var $__n_does_match_4=$__n_does_match_3232;var $__n_might_match_4=$171;label=65;break;
 case 65: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $173=(($__ky1_0236+12)|0);
 var $174=($173|0)==($__ke|0);
 if($174){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=67;break;}else{label=66;break;}
 case 66: 
 var $175=(($__st_1233+1)|0);
 var $__n_might_match_3231=$__n_might_match_4;var $__n_does_match_3232=$__n_does_match_4;var $__st_1233=$175;var $__consume_0_off0235=$__consume_1_off0;var $__ky1_0236=$173;label=53;break;
 case 67: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=68;break;}else{var $__indx_0=$_pre3;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}
 case 68: 
 var $177=HEAP32[(($17)>>2)];
 var $178=(($177+12)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(($177+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=($179|0)==($181|0);
 if($182){label=69;break;}else{label=70;break;}
 case 69: 
 var $184=$177;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+40)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]($177) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=7;break; }
 case 70: 
 var $190=(($179+4)|0);
 HEAP32[(($178)>>2)]=$190;
 label=71;break;
 case 71: 
 var $191=((($__n_does_match_3_lcssa)+($__n_might_match_3_lcssa))|0);
 var $_not=($191>>>0)<2;
 if($_not){var $__indx_0=$_pre3;var $__n_does_match_2=$__n_does_match_3_lcssa;var $__n_might_match_2=$__n_might_match_3_lcssa;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}else{var $__n_does_match_5245=$__n_does_match_3_lcssa;var $__st_2246=$__status_0;var $__ky2_0247=$__kb;label=72;break;}
 case 72: 
 var $__ky2_0247;
 var $__st_2246;
 var $__n_does_match_5245;
 var $192=HEAP8[($__st_2246)];
 var $193=(($192<<24)>>24)==2;
 if($193){label=73;break;}else{var $__n_does_match_6=$__n_does_match_5245;label=78;break;}
 case 73: 
 var $195=$__ky2_0247;
 var $196=HEAP8[($195)];
 var $197=($196&255);
 var $198=$197&1;
 var $199=($198|0)==0;
 if($199){label=75;break;}else{label=74;break;}
 case 74: 
 var $201=(($__ky2_0247+4)|0);
 var $202=HEAP32[(($201)>>2)];
 var $205=$202;label=76;break;
 case 75: 
 var $204=$197>>>1;
 var $205=$204;label=76;break;
 case 76: 
 var $205;
 var $206=($205|0)==($_pre3|0);
 if($206){var $__n_does_match_6=$__n_does_match_5245;label=78;break;}else{label=77;break;}
 case 77: 
 HEAP8[($__st_2246)]=0;
 var $208=((($__n_does_match_5245)-(1))|0);
 var $__n_does_match_6=$208;label=78;break;
 case 78: 
 var $__n_does_match_6;
 var $210=(($__ky2_0247+12)|0);
 var $211=(($__st_2246+1)|0);
 var $212=($210|0)==($__ke|0);
 if($212){var $__indx_0=$_pre3;var $__n_does_match_2=$__n_does_match_6;var $__n_might_match_2=$__n_might_match_3_lcssa;var $__e_sroa_0_0=$__e_sroa_0_2;label=20;break;}else{var $__n_does_match_5245=$__n_does_match_6;var $__st_2246=$211;var $__ky2_0247=$210;label=72;break;}
 case 79: 
 var $214=($75|0)==0;
 if($214){var $231=1;label=86;break;}else{label=80;break;}
 case 80: 
 var $216=(($75+12)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(($75+16)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($217|0)==($219|0);
 if($220){label=81;break;}else{label=82;break;}
 case 81: 
 var $222=$75;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+36)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$225]($75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0204=$226;label=83;break; } else { label=8;break; }
 case 82: 
 var $228=HEAP32[(($217)>>2)];
 var $_0204=$228;label=83;break;
 case 83: 
 var $_0204;
 var $229=($_0204|0)==-1;
 if($229){label=85;break;}else{label=84;break;}
 case 84: 
 var $_pre275=HEAP32[(($17)>>2)];
 var $phitmp=($_pre275|0)==0;
 var $231=$phitmp;label=86;break;
 case 85: 
 HEAP32[(($17)>>2)]=0;
 var $231=1;label=86;break;
 case 86: 
 var $231;
 if($76){label=91;break;}else{label=87;break;}
 case 87: 
 var $233=(($__e_sroa_0_2+12)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(($__e_sroa_0_2+16)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=($234|0)==($236|0);
 if($237){label=88;break;}else{label=89;break;}
 case 88: 
 var $239=$__e_sroa_0_2;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+36)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$242]($__e_sroa_0_2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$243;label=90;break; } else { label=8;break; }
 case 89: 
 var $245=HEAP32[(($234)>>2)];
 var $_0=$245;label=90;break;
 case 90: 
 var $_0;
 var $246=($_0|0)==-1;
 if($246){label=91;break;}else{label=92;break;}
 case 91: 
 if($231){label=93;break;}else{label=94;break;}
 case 92: 
 if($231){label=94;break;}else{label=93;break;}
 case 93: 
 var $248=HEAP32[(($__err)>>2)];
 var $249=$248|2;
 HEAP32[(($__err)>>2)]=$249;
 label=94;break;
 case 94: 
 if($16){label=98;break;}else{var $_0209225=$__kb;var $__st_3226=$__status_0;label=95;break;}
 case 95: 
 var $__st_3226;
 var $_0209225;
 var $250=HEAP8[($__st_3226)];
 var $251=(($250<<24)>>24)==2;
 if($251){var $_0209224=$_0209225;label=99;break;}else{label=96;break;}
 case 96: 
 var $253=(($_0209225+12)|0);
 var $254=($253|0)==($__ke|0);
 if($254){label=98;break;}else{label=97;break;}
 case 97: 
 var $255=(($__st_3226+1)|0);
 var $_0209225=$253;var $__st_3226=$255;label=95;break;
 case 98: 
 var $256=HEAP32[(($__err)>>2)];
 var $257=$256|4;
 HEAP32[(($__err)>>2)]=$257;
 var $_0209224=$__ke;label=99;break;
 case 99: 
 var $_0209224;
 var $258=($__stat_hold_sroa_0_1|0)==0;
 if($258){label=101;break;}else{label=100;break;}
 case 100: 
 _free($__stat_hold_sroa_0_1);
 label=101;break;
 case 101: 
 STACKTOP=sp;return $_0209224;
 case 102: 
 var $260$0;
 var $260$1;
 ___resumeException($260$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__thousands_sep_i;
 var $7=$__grouping_i;
 var $8=$__buf_i;
 var $9=$__a_end_i;
 var $10=$__g_i;
 var $11=$__g_end_i;
 var $12=$__dc_i;
 var $13=(($__iob+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14&74;
 if(($15|0)==8){ label=2;break;}else if(($15|0)==0){ label=3;break;}else if(($15|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $20=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$20,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $21=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 var $_pre=HEAP8[($8)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre162_i=(($21+1)|0);
 var $27=$24;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$23;label=9;break;
 case 8: 
 var $26=(($21+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $27=$26;var $_pre_phi_i=$26;var $_pre_phi164_i=$_pre163_i;label=9;break;
 case 9: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $27;
 HEAP32[(($__a_end_i)>>2)]=$27;
 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP32[(($__thousands_sep_i)>>2)];
 var $32=(($__buf_i+8)|0);
 var $__a_0_i=$27;var $33=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $33;
 var $__a_0_i;
 var $34=($33|0)==0;
 if($34){var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($33+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($33+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$33;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$46;label=14;break; } else { label=41;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0155_i=$48;label=14;break;
 case 14: 
 var $_0155_i;
 var $49=($_0155_i|0)==-1;
 var $_=($49?0:$33);
 var $50=$_;label=15;break;
 case 15: 
 var $50;
 var $51=($50|0)==0;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$64;label=19;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0154_i=$66;label=19;break;
 case 19: 
 var $_0154_i;
 var $67=($_0154_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $185=0;var $184=1;label=57;break;}else{var $68=1;var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $68=0;var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $185=$_sroa_06_0;var $184=0;label=57;break;}
 case 22: 
 var $_sroa_06_2;
 var $68;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($8)];
 var $74=($73&255);
 var $75=$74&1;
 var $76=($75|0)==0;
 var $77=HEAP32[(($30)>>2)];
 var $78=$74>>>1;
 var $79=($76?$78:$77);
 var $80=($72|0)==($79|0);
 if($80){label=23;break;}else{var $__a_1_i=$__a_0_i;label=50;break;}
 case 23: 
 if($76){label=25;break;}else{var $83=$77;label=24;break;}
 case 24: 
 var $83;
 var $84=$83<<1;
 var $89=$77;var $88=$83;var $87=$84;label=26;break;
 case 25: 
 var $86=$78<<1;
 var $89=$78;var $88=$78;var $87=$86;label=26;break;
 case 26: 
 var $87;
 var $88;
 var $89;
 var $90=($89>>>0)<($87>>>0);
 if($90){label=27;break;}else{label=28;break;}
 case 27: 
 var $92=((($87)-($89))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$92,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=41;break; }
 case 28: 
 var $94=$73&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=HEAP32[(($32)>>2)];
 var $98=(($97+$87)|0);
 HEAP8[($98)]=0;
 HEAP32[(($30)>>2)]=$87;
 label=31;break;
 case 30: 
 var $100=(($21+1+$87)|0);
 HEAP8[($100)]=0;
 var $101=$88<<2;
 var $102=(($101)&255);
 HEAP8[($8)]=$102;
 label=31;break;
 case 31: 
 var $103=HEAP8[($8)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){var $111=10;var $110=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $107=HEAP32[(($29)>>2)];
 var $108=$107&-2;
 var $phitmp159_i=((($108)-(1))|0);
 var $109=(($107)&255);
 var $111=$phitmp159_i;var $110=$109;label=33;break;
 case 33: 
 var $110;
 var $111;
 var $112=($110&255);
 var $113=$112&1;
 var $114=($113|0)==0;
 var $115=HEAP32[(($30)>>2)];
 var $116=$112>>>1;
 var $117=($114?$116:$115);
 var $118=($117>>>0)<($111>>>0);
 if($118){label=34;break;}else{label=35;break;}
 case 34: 
 var $120=((($111)-($117))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 35: 
 var $122=$110&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($32)>>2)];
 var $126=(($125+$111)|0);
 HEAP8[($126)]=0;
 HEAP32[(($30)>>2)]=$111;
 label=38;break;
 case 37: 
 var $128=(($21+1+$111)|0);
 HEAP8[($128)]=0;
 var $129=$111<<1;
 var $130=(($129)&255);
 HEAP8[($8)]=$130;
 label=38;break;
 case 38: 
 var $131=HEAP8[($8)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $136=$_pre_phi_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_pre_phi164_i)>>2)];
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=(($136+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$137;
 var $__a_1_i=$136;label=50;break;
 case 41: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=43;break;
 case 43: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $139=HEAP8[($8)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=46;break;}else{label=44;break;}
 case 44: 
 var $143=(($__buf_i+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=46;break;}else{label=45;break;}
 case 45: 
 _free($144);
 label=46;break;
 case 46: 
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=49;break;}else{label=47;break;}
 case 47: 
 var $151=(($__grouping_i+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 _free($152);
 label=49;break;
 case 49: 
 ___resumeException($lpad_phi_i$0)
 case 50: 
 var $__a_1_i;
 var $155=(($50+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($50+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=51;break;}else{label=52;break;}
 case 51: 
 var $161=$50;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$165;label=53;break; } else { label=41;break; }
 case 52: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i=$167;label=53;break;
 case 53: 
 var $_0_i;
 var $169=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$20);
 var $170=($169|0)==0;
 if($170){label=54;break;}else{var $__a_2_i=$__a_1_i;var $185=$_sroa_06_2;var $184=$68;label=57;break;}
 case 54: 
 var $172=HEAP32[(($155)>>2)];
 var $173=HEAP32[(($157)>>2)];
 var $174=($172|0)==($173|0);
 if($174){label=55;break;}else{label=56;break;}
 case 55: 
 var $176=$50;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=41;break; }
 case 56: 
 var $182=(($172+4)|0);
 HEAP32[(($155)>>2)]=$182;
 var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $184;
 var $185;
 var $__a_2_i;
 var $186=HEAP8[($7)];
 var $187=($186&255);
 var $188=$187&1;
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=(($__grouping_i+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $195=$192;label=60;break;
 case 59: 
 var $194=$187>>>1;
 var $195=$194;label=60;break;
 case 60: 
 var $195;
 var $196=($195|0)==0;
 if($196){label=63;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP32[(($__g_end_i)>>2)];
 var $199=$198;
 var $200=$__g_i;
 var $201=((($199)-($200))|0);
 var $202=($201|0)<160;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=HEAP32[(($__dc_i)>>2)];
 var $205=(($198+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$205;
 HEAP32[(($198)>>2)]=$204;
 label=63;break;
 case 63: 
 var $206=HEAP32[(($__a_end_i)>>2)];
 var $207=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$206,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=42;break; }
 case 64: 
 HEAP32[(($__v)>>2)]=$207;
 var $209=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$209,$__err);
 if($51){var $225=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $211=(($50+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($50+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=66;break;}else{label=67;break;}
 case 66: 
 var $217=$50;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157_i=$221;label=68;break; } else { label=42;break; }
 case 67: 
 var $223=HEAP32[(($212)>>2)];
 var $_0157_i=$223;label=68;break;
 case 68: 
 var $_0157_i;
 var $224=($_0157_i|0)==-1;
 var $_8=($224?0:$50);
 var $225=$_8;label=69;break;
 case 69: 
 var $225;
 var $226=($225|0)==0;
 if($184){label=74;break;}else{label=70;break;}
 case 70: 
 var $228=(($185+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($185+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=71;break;}else{label=72;break;}
 case 71: 
 var $234=$185;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156_i=$238;label=73;break; } else { label=42;break; }
 case 72: 
 var $240=HEAP32[(($229)>>2)];
 var $_0156_i=$240;label=73;break;
 case 73: 
 var $_0156_i;
 var $241=($_0156_i|0)==-1;
 if($241){label=74;break;}else{label=75;break;}
 case 74: 
 if($226){label=76;break;}else{label=77;break;}
 case 75: 
 var $242=($185|0)==0;
 var $tmp158_i=$226^$242;
 if($tmp158_i){label=77;break;}else{label=76;break;}
 case 76: 
 var $244=HEAP32[(($__err)>>2)];
 var $245=$244|2;
 HEAP32[(($__err)>>2)]=$245;
 label=77;break;
 case 77: 
 var $247=(($agg_result)|0);
 HEAP32[(($247)>>2)]=$225;
 var $248=HEAP8[($8)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=80;break;}else{label=78;break;}
 case 78: 
 var $252=HEAP32[(($32)>>2)];
 var $253=($252|0)==0;
 if($253){label=80;break;}else{label=79;break;}
 case 79: 
 _free($252);
 label=80;break;
 case 80: 
 var $255=HEAP8[($7)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=83;break;}else{label=81;break;}
 case 81: 
 var $259=(($__grouping_i+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){label=83;break;}else{label=82;break;}
 case 82: 
 _free($260);
 label=83;break;
 case 83: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__thousands_sep_i;
 var $7=$__grouping_i;
 var $8=$__buf_i;
 var $9=$__a_end_i;
 var $10=$__g_i;
 var $11=$__g_end_i;
 var $12=$__dc_i;
 var $13=(($__iob+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14&74;
 if(($15|0)==8){ label=2;break;}else if(($15|0)==0){ label=3;break;}else if(($15|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $20=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$20,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $21=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 var $_pre=HEAP8[($8)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre162_i=(($21+1)|0);
 var $27=$24;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$23;label=9;break;
 case 8: 
 var $26=(($21+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $27=$26;var $_pre_phi_i=$26;var $_pre_phi164_i=$_pre163_i;label=9;break;
 case 9: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $27;
 HEAP32[(($__a_end_i)>>2)]=$27;
 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP32[(($__thousands_sep_i)>>2)];
 var $32=(($__buf_i+8)|0);
 var $__a_0_i=$27;var $33=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $33;
 var $__a_0_i;
 var $34=($33|0)==0;
 if($34){var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($33+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($33+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$33;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$46;label=14;break; } else { label=41;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0155_i=$48;label=14;break;
 case 14: 
 var $_0155_i;
 var $49=($_0155_i|0)==-1;
 var $_=($49?0:$33);
 var $50=$_;label=15;break;
 case 15: 
 var $50;
 var $51=($50|0)==0;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$64;label=19;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0154_i=$66;label=19;break;
 case 19: 
 var $_0154_i;
 var $67=($_0154_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $185=0;var $184=1;label=57;break;}else{var $68=1;var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $68=0;var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $185=$_sroa_06_0;var $184=0;label=57;break;}
 case 22: 
 var $_sroa_06_2;
 var $68;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($8)];
 var $74=($73&255);
 var $75=$74&1;
 var $76=($75|0)==0;
 var $77=HEAP32[(($30)>>2)];
 var $78=$74>>>1;
 var $79=($76?$78:$77);
 var $80=($72|0)==($79|0);
 if($80){label=23;break;}else{var $__a_1_i=$__a_0_i;label=50;break;}
 case 23: 
 if($76){label=25;break;}else{var $83=$77;label=24;break;}
 case 24: 
 var $83;
 var $84=$83<<1;
 var $89=$77;var $88=$83;var $87=$84;label=26;break;
 case 25: 
 var $86=$78<<1;
 var $89=$78;var $88=$78;var $87=$86;label=26;break;
 case 26: 
 var $87;
 var $88;
 var $89;
 var $90=($89>>>0)<($87>>>0);
 if($90){label=27;break;}else{label=28;break;}
 case 27: 
 var $92=((($87)-($89))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$92,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=41;break; }
 case 28: 
 var $94=$73&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=HEAP32[(($32)>>2)];
 var $98=(($97+$87)|0);
 HEAP8[($98)]=0;
 HEAP32[(($30)>>2)]=$87;
 label=31;break;
 case 30: 
 var $100=(($21+1+$87)|0);
 HEAP8[($100)]=0;
 var $101=$88<<2;
 var $102=(($101)&255);
 HEAP8[($8)]=$102;
 label=31;break;
 case 31: 
 var $103=HEAP8[($8)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){var $111=10;var $110=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $107=HEAP32[(($29)>>2)];
 var $108=$107&-2;
 var $phitmp159_i=((($108)-(1))|0);
 var $109=(($107)&255);
 var $111=$phitmp159_i;var $110=$109;label=33;break;
 case 33: 
 var $110;
 var $111;
 var $112=($110&255);
 var $113=$112&1;
 var $114=($113|0)==0;
 var $115=HEAP32[(($30)>>2)];
 var $116=$112>>>1;
 var $117=($114?$116:$115);
 var $118=($117>>>0)<($111>>>0);
 if($118){label=34;break;}else{label=35;break;}
 case 34: 
 var $120=((($111)-($117))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 35: 
 var $122=$110&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($32)>>2)];
 var $126=(($125+$111)|0);
 HEAP8[($126)]=0;
 HEAP32[(($30)>>2)]=$111;
 label=38;break;
 case 37: 
 var $128=(($21+1+$111)|0);
 HEAP8[($128)]=0;
 var $129=$111<<1;
 var $130=(($129)&255);
 HEAP8[($8)]=$130;
 label=38;break;
 case 38: 
 var $131=HEAP8[($8)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $136=$_pre_phi_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_pre_phi164_i)>>2)];
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=(($136+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$137;
 var $__a_1_i=$136;label=50;break;
 case 41: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=43;break;
 case 43: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $139=HEAP8[($8)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=46;break;}else{label=44;break;}
 case 44: 
 var $143=(($__buf_i+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=46;break;}else{label=45;break;}
 case 45: 
 _free($144);
 label=46;break;
 case 46: 
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=49;break;}else{label=47;break;}
 case 47: 
 var $151=(($__grouping_i+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 _free($152);
 label=49;break;
 case 49: 
 ___resumeException($lpad_phi_i$0)
 case 50: 
 var $__a_1_i;
 var $155=(($50+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($50+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=51;break;}else{label=52;break;}
 case 51: 
 var $161=$50;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$165;label=53;break; } else { label=41;break; }
 case 52: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i=$167;label=53;break;
 case 53: 
 var $_0_i;
 var $169=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$20);
 var $170=($169|0)==0;
 if($170){label=54;break;}else{var $__a_2_i=$__a_1_i;var $185=$_sroa_06_2;var $184=$68;label=57;break;}
 case 54: 
 var $172=HEAP32[(($155)>>2)];
 var $173=HEAP32[(($157)>>2)];
 var $174=($172|0)==($173|0);
 if($174){label=55;break;}else{label=56;break;}
 case 55: 
 var $176=$50;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=41;break; }
 case 56: 
 var $182=(($172+4)|0);
 HEAP32[(($155)>>2)]=$182;
 var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $184;
 var $185;
 var $__a_2_i;
 var $186=HEAP8[($7)];
 var $187=($186&255);
 var $188=$187&1;
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=(($__grouping_i+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $195=$192;label=60;break;
 case 59: 
 var $194=$187>>>1;
 var $195=$194;label=60;break;
 case 60: 
 var $195;
 var $196=($195|0)==0;
 if($196){label=63;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP32[(($__g_end_i)>>2)];
 var $199=$198;
 var $200=$__g_i;
 var $201=((($199)-($200))|0);
 var $202=($201|0)<160;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=HEAP32[(($__dc_i)>>2)];
 var $205=(($198+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$205;
 HEAP32[(($198)>>2)]=$204;
 label=63;break;
 case 63: 
 var $206=HEAP32[(($__a_end_i)>>2)];
 var $207$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$206,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $207$0=$207$r;var $207$1=tempRet0;if (!__THREW__) { label=64;break; } else { label=42;break; }
 case 64: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$207$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$207$1;
 var $209=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$209,$__err);
 if($51){var $225=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $211=(($50+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($50+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=66;break;}else{label=67;break;}
 case 66: 
 var $217=$50;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157_i=$221;label=68;break; } else { label=42;break; }
 case 67: 
 var $223=HEAP32[(($212)>>2)];
 var $_0157_i=$223;label=68;break;
 case 68: 
 var $_0157_i;
 var $224=($_0157_i|0)==-1;
 var $_8=($224?0:$50);
 var $225=$_8;label=69;break;
 case 69: 
 var $225;
 var $226=($225|0)==0;
 if($184){label=74;break;}else{label=70;break;}
 case 70: 
 var $228=(($185+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($185+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=71;break;}else{label=72;break;}
 case 71: 
 var $234=$185;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156_i=$238;label=73;break; } else { label=42;break; }
 case 72: 
 var $240=HEAP32[(($229)>>2)];
 var $_0156_i=$240;label=73;break;
 case 73: 
 var $_0156_i;
 var $241=($_0156_i|0)==-1;
 if($241){label=74;break;}else{label=75;break;}
 case 74: 
 if($226){label=76;break;}else{label=77;break;}
 case 75: 
 var $242=($185|0)==0;
 var $tmp158_i=$226^$242;
 if($tmp158_i){label=77;break;}else{label=76;break;}
 case 76: 
 var $244=HEAP32[(($__err)>>2)];
 var $245=$244|2;
 HEAP32[(($__err)>>2)]=$245;
 label=77;break;
 case 77: 
 var $247=(($agg_result)|0);
 HEAP32[(($247)>>2)]=$225;
 var $248=HEAP8[($8)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=80;break;}else{label=78;break;}
 case 78: 
 var $252=HEAP32[(($32)>>2)];
 var $253=($252|0)==0;
 if($253){label=80;break;}else{label=79;break;}
 case 79: 
 _free($252);
 label=80;break;
 case 80: 
 var $255=HEAP8[($7)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=83;break;}else{label=81;break;}
 case 81: 
 var $259=(($__grouping_i+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){label=83;break;}else{label=82;break;}
 case 82: 
 _free($260);
 label=83;break;
 case 83: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__thousands_sep_i;
 var $7=$__grouping_i;
 var $8=$__buf_i;
 var $9=$__a_end_i;
 var $10=$__g_i;
 var $11=$__g_end_i;
 var $12=$__dc_i;
 var $13=(($__iob+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14&74;
 if(($15|0)==8){ label=2;break;}else if(($15|0)==0){ label=3;break;}else if(($15|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $20=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$20,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $21=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 var $_pre=HEAP8[($8)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre162_i=(($21+1)|0);
 var $27=$24;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$23;label=9;break;
 case 8: 
 var $26=(($21+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $27=$26;var $_pre_phi_i=$26;var $_pre_phi164_i=$_pre163_i;label=9;break;
 case 9: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $27;
 HEAP32[(($__a_end_i)>>2)]=$27;
 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP32[(($__thousands_sep_i)>>2)];
 var $32=(($__buf_i+8)|0);
 var $__a_0_i=$27;var $33=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $33;
 var $__a_0_i;
 var $34=($33|0)==0;
 if($34){var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($33+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($33+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$33;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$46;label=14;break; } else { label=41;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0155_i=$48;label=14;break;
 case 14: 
 var $_0155_i;
 var $49=($_0155_i|0)==-1;
 var $_=($49?0:$33);
 var $50=$_;label=15;break;
 case 15: 
 var $50;
 var $51=($50|0)==0;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$64;label=19;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0154_i=$66;label=19;break;
 case 19: 
 var $_0154_i;
 var $67=($_0154_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $185=0;var $184=1;label=57;break;}else{var $68=1;var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $68=0;var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $185=$_sroa_06_0;var $184=0;label=57;break;}
 case 22: 
 var $_sroa_06_2;
 var $68;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($8)];
 var $74=($73&255);
 var $75=$74&1;
 var $76=($75|0)==0;
 var $77=HEAP32[(($30)>>2)];
 var $78=$74>>>1;
 var $79=($76?$78:$77);
 var $80=($72|0)==($79|0);
 if($80){label=23;break;}else{var $__a_1_i=$__a_0_i;label=50;break;}
 case 23: 
 if($76){label=25;break;}else{var $83=$77;label=24;break;}
 case 24: 
 var $83;
 var $84=$83<<1;
 var $89=$77;var $88=$83;var $87=$84;label=26;break;
 case 25: 
 var $86=$78<<1;
 var $89=$78;var $88=$78;var $87=$86;label=26;break;
 case 26: 
 var $87;
 var $88;
 var $89;
 var $90=($89>>>0)<($87>>>0);
 if($90){label=27;break;}else{label=28;break;}
 case 27: 
 var $92=((($87)-($89))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$92,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=41;break; }
 case 28: 
 var $94=$73&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=HEAP32[(($32)>>2)];
 var $98=(($97+$87)|0);
 HEAP8[($98)]=0;
 HEAP32[(($30)>>2)]=$87;
 label=31;break;
 case 30: 
 var $100=(($21+1+$87)|0);
 HEAP8[($100)]=0;
 var $101=$88<<2;
 var $102=(($101)&255);
 HEAP8[($8)]=$102;
 label=31;break;
 case 31: 
 var $103=HEAP8[($8)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){var $111=10;var $110=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $107=HEAP32[(($29)>>2)];
 var $108=$107&-2;
 var $phitmp159_i=((($108)-(1))|0);
 var $109=(($107)&255);
 var $111=$phitmp159_i;var $110=$109;label=33;break;
 case 33: 
 var $110;
 var $111;
 var $112=($110&255);
 var $113=$112&1;
 var $114=($113|0)==0;
 var $115=HEAP32[(($30)>>2)];
 var $116=$112>>>1;
 var $117=($114?$116:$115);
 var $118=($117>>>0)<($111>>>0);
 if($118){label=34;break;}else{label=35;break;}
 case 34: 
 var $120=((($111)-($117))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 35: 
 var $122=$110&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($32)>>2)];
 var $126=(($125+$111)|0);
 HEAP8[($126)]=0;
 HEAP32[(($30)>>2)]=$111;
 label=38;break;
 case 37: 
 var $128=(($21+1+$111)|0);
 HEAP8[($128)]=0;
 var $129=$111<<1;
 var $130=(($129)&255);
 HEAP8[($8)]=$130;
 label=38;break;
 case 38: 
 var $131=HEAP8[($8)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $136=$_pre_phi_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_pre_phi164_i)>>2)];
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=(($136+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$137;
 var $__a_1_i=$136;label=50;break;
 case 41: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=43;break;
 case 43: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $139=HEAP8[($8)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=46;break;}else{label=44;break;}
 case 44: 
 var $143=(($__buf_i+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=46;break;}else{label=45;break;}
 case 45: 
 _free($144);
 label=46;break;
 case 46: 
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=49;break;}else{label=47;break;}
 case 47: 
 var $151=(($__grouping_i+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 _free($152);
 label=49;break;
 case 49: 
 ___resumeException($lpad_phi_i$0)
 case 50: 
 var $__a_1_i;
 var $155=(($50+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($50+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=51;break;}else{label=52;break;}
 case 51: 
 var $161=$50;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$165;label=53;break; } else { label=41;break; }
 case 52: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i=$167;label=53;break;
 case 53: 
 var $_0_i;
 var $169=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$20);
 var $170=($169|0)==0;
 if($170){label=54;break;}else{var $__a_2_i=$__a_1_i;var $185=$_sroa_06_2;var $184=$68;label=57;break;}
 case 54: 
 var $172=HEAP32[(($155)>>2)];
 var $173=HEAP32[(($157)>>2)];
 var $174=($172|0)==($173|0);
 if($174){label=55;break;}else{label=56;break;}
 case 55: 
 var $176=$50;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=41;break; }
 case 56: 
 var $182=(($172+4)|0);
 HEAP32[(($155)>>2)]=$182;
 var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $184;
 var $185;
 var $__a_2_i;
 var $186=HEAP8[($7)];
 var $187=($186&255);
 var $188=$187&1;
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=(($__grouping_i+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $195=$192;label=60;break;
 case 59: 
 var $194=$187>>>1;
 var $195=$194;label=60;break;
 case 60: 
 var $195;
 var $196=($195|0)==0;
 if($196){label=63;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP32[(($__g_end_i)>>2)];
 var $199=$198;
 var $200=$__g_i;
 var $201=((($199)-($200))|0);
 var $202=($201|0)<160;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=HEAP32[(($__dc_i)>>2)];
 var $205=(($198+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$205;
 HEAP32[(($198)>>2)]=$204;
 label=63;break;
 case 63: 
 var $206=HEAP32[(($__a_end_i)>>2)];
 var $207=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$206,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=42;break; }
 case 64: 
 HEAP16[(($__v)>>1)]=$207;
 var $209=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$209,$__err);
 if($51){var $225=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $211=(($50+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($50+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=66;break;}else{label=67;break;}
 case 66: 
 var $217=$50;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157_i=$221;label=68;break; } else { label=42;break; }
 case 67: 
 var $223=HEAP32[(($212)>>2)];
 var $_0157_i=$223;label=68;break;
 case 68: 
 var $_0157_i;
 var $224=($_0157_i|0)==-1;
 var $_8=($224?0:$50);
 var $225=$_8;label=69;break;
 case 69: 
 var $225;
 var $226=($225|0)==0;
 if($184){label=74;break;}else{label=70;break;}
 case 70: 
 var $228=(($185+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($185+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=71;break;}else{label=72;break;}
 case 71: 
 var $234=$185;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156_i=$238;label=73;break; } else { label=42;break; }
 case 72: 
 var $240=HEAP32[(($229)>>2)];
 var $_0156_i=$240;label=73;break;
 case 73: 
 var $_0156_i;
 var $241=($_0156_i|0)==-1;
 if($241){label=74;break;}else{label=75;break;}
 case 74: 
 if($226){label=76;break;}else{label=77;break;}
 case 75: 
 var $242=($185|0)==0;
 var $tmp158_i=$226^$242;
 if($tmp158_i){label=77;break;}else{label=76;break;}
 case 76: 
 var $244=HEAP32[(($__err)>>2)];
 var $245=$244|2;
 HEAP32[(($__err)>>2)]=$245;
 label=77;break;
 case 77: 
 var $247=(($agg_result)|0);
 HEAP32[(($247)>>2)]=$225;
 var $248=HEAP8[($8)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=80;break;}else{label=78;break;}
 case 78: 
 var $252=HEAP32[(($32)>>2)];
 var $253=($252|0)==0;
 if($253){label=80;break;}else{label=79;break;}
 case 79: 
 _free($252);
 label=80;break;
 case 80: 
 var $255=HEAP8[($7)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=83;break;}else{label=81;break;}
 case 81: 
 var $259=(($__grouping_i+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){label=83;break;}else{label=82;break;}
 case 82: 
 _free($260);
 label=83;break;
 case 83: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__thousands_sep_i;
 var $7=$__grouping_i;
 var $8=$__buf_i;
 var $9=$__a_end_i;
 var $10=$__g_i;
 var $11=$__g_end_i;
 var $12=$__dc_i;
 var $13=(($__iob+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14&74;
 if(($15|0)==8){ label=2;break;}else if(($15|0)==0){ label=3;break;}else if(($15|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $20=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$20,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $21=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 var $_pre=HEAP8[($8)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre162_i=(($21+1)|0);
 var $27=$24;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$23;label=9;break;
 case 8: 
 var $26=(($21+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $27=$26;var $_pre_phi_i=$26;var $_pre_phi164_i=$_pre163_i;label=9;break;
 case 9: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $27;
 HEAP32[(($__a_end_i)>>2)]=$27;
 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP32[(($__thousands_sep_i)>>2)];
 var $32=(($__buf_i+8)|0);
 var $__a_0_i=$27;var $33=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $33;
 var $__a_0_i;
 var $34=($33|0)==0;
 if($34){var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($33+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($33+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$33;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$46;label=14;break; } else { label=41;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0155_i=$48;label=14;break;
 case 14: 
 var $_0155_i;
 var $49=($_0155_i|0)==-1;
 var $_=($49?0:$33);
 var $50=$_;label=15;break;
 case 15: 
 var $50;
 var $51=($50|0)==0;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$64;label=19;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0154_i=$66;label=19;break;
 case 19: 
 var $_0154_i;
 var $67=($_0154_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $185=0;var $184=1;label=57;break;}else{var $68=1;var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $68=0;var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $185=$_sroa_06_0;var $184=0;label=57;break;}
 case 22: 
 var $_sroa_06_2;
 var $68;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($8)];
 var $74=($73&255);
 var $75=$74&1;
 var $76=($75|0)==0;
 var $77=HEAP32[(($30)>>2)];
 var $78=$74>>>1;
 var $79=($76?$78:$77);
 var $80=($72|0)==($79|0);
 if($80){label=23;break;}else{var $__a_1_i=$__a_0_i;label=50;break;}
 case 23: 
 if($76){label=25;break;}else{var $83=$77;label=24;break;}
 case 24: 
 var $83;
 var $84=$83<<1;
 var $89=$77;var $88=$83;var $87=$84;label=26;break;
 case 25: 
 var $86=$78<<1;
 var $89=$78;var $88=$78;var $87=$86;label=26;break;
 case 26: 
 var $87;
 var $88;
 var $89;
 var $90=($89>>>0)<($87>>>0);
 if($90){label=27;break;}else{label=28;break;}
 case 27: 
 var $92=((($87)-($89))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$92,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=41;break; }
 case 28: 
 var $94=$73&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=HEAP32[(($32)>>2)];
 var $98=(($97+$87)|0);
 HEAP8[($98)]=0;
 HEAP32[(($30)>>2)]=$87;
 label=31;break;
 case 30: 
 var $100=(($21+1+$87)|0);
 HEAP8[($100)]=0;
 var $101=$88<<2;
 var $102=(($101)&255);
 HEAP8[($8)]=$102;
 label=31;break;
 case 31: 
 var $103=HEAP8[($8)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){var $111=10;var $110=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $107=HEAP32[(($29)>>2)];
 var $108=$107&-2;
 var $phitmp159_i=((($108)-(1))|0);
 var $109=(($107)&255);
 var $111=$phitmp159_i;var $110=$109;label=33;break;
 case 33: 
 var $110;
 var $111;
 var $112=($110&255);
 var $113=$112&1;
 var $114=($113|0)==0;
 var $115=HEAP32[(($30)>>2)];
 var $116=$112>>>1;
 var $117=($114?$116:$115);
 var $118=($117>>>0)<($111>>>0);
 if($118){label=34;break;}else{label=35;break;}
 case 34: 
 var $120=((($111)-($117))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 35: 
 var $122=$110&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($32)>>2)];
 var $126=(($125+$111)|0);
 HEAP8[($126)]=0;
 HEAP32[(($30)>>2)]=$111;
 label=38;break;
 case 37: 
 var $128=(($21+1+$111)|0);
 HEAP8[($128)]=0;
 var $129=$111<<1;
 var $130=(($129)&255);
 HEAP8[($8)]=$130;
 label=38;break;
 case 38: 
 var $131=HEAP8[($8)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $136=$_pre_phi_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_pre_phi164_i)>>2)];
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=(($136+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$137;
 var $__a_1_i=$136;label=50;break;
 case 41: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=43;break;
 case 43: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $139=HEAP8[($8)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=46;break;}else{label=44;break;}
 case 44: 
 var $143=(($__buf_i+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=46;break;}else{label=45;break;}
 case 45: 
 _free($144);
 label=46;break;
 case 46: 
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=49;break;}else{label=47;break;}
 case 47: 
 var $151=(($__grouping_i+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 _free($152);
 label=49;break;
 case 49: 
 ___resumeException($lpad_phi_i$0)
 case 50: 
 var $__a_1_i;
 var $155=(($50+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($50+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=51;break;}else{label=52;break;}
 case 51: 
 var $161=$50;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$165;label=53;break; } else { label=41;break; }
 case 52: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i=$167;label=53;break;
 case 53: 
 var $_0_i;
 var $169=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$20);
 var $170=($169|0)==0;
 if($170){label=54;break;}else{var $__a_2_i=$__a_1_i;var $185=$_sroa_06_2;var $184=$68;label=57;break;}
 case 54: 
 var $172=HEAP32[(($155)>>2)];
 var $173=HEAP32[(($157)>>2)];
 var $174=($172|0)==($173|0);
 if($174){label=55;break;}else{label=56;break;}
 case 55: 
 var $176=$50;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=41;break; }
 case 56: 
 var $182=(($172+4)|0);
 HEAP32[(($155)>>2)]=$182;
 var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $184;
 var $185;
 var $__a_2_i;
 var $186=HEAP8[($7)];
 var $187=($186&255);
 var $188=$187&1;
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=(($__grouping_i+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $195=$192;label=60;break;
 case 59: 
 var $194=$187>>>1;
 var $195=$194;label=60;break;
 case 60: 
 var $195;
 var $196=($195|0)==0;
 if($196){label=63;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP32[(($__g_end_i)>>2)];
 var $199=$198;
 var $200=$__g_i;
 var $201=((($199)-($200))|0);
 var $202=($201|0)<160;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=HEAP32[(($__dc_i)>>2)];
 var $205=(($198+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$205;
 HEAP32[(($198)>>2)]=$204;
 label=63;break;
 case 63: 
 var $206=HEAP32[(($__a_end_i)>>2)];
 var $207=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$206,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=42;break; }
 case 64: 
 HEAP32[(($__v)>>2)]=$207;
 var $209=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$209,$__err);
 if($51){var $225=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $211=(($50+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($50+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=66;break;}else{label=67;break;}
 case 66: 
 var $217=$50;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157_i=$221;label=68;break; } else { label=42;break; }
 case 67: 
 var $223=HEAP32[(($212)>>2)];
 var $_0157_i=$223;label=68;break;
 case 68: 
 var $_0157_i;
 var $224=($_0157_i|0)==-1;
 var $_8=($224?0:$50);
 var $225=$_8;label=69;break;
 case 69: 
 var $225;
 var $226=($225|0)==0;
 if($184){label=74;break;}else{label=70;break;}
 case 70: 
 var $228=(($185+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($185+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=71;break;}else{label=72;break;}
 case 71: 
 var $234=$185;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156_i=$238;label=73;break; } else { label=42;break; }
 case 72: 
 var $240=HEAP32[(($229)>>2)];
 var $_0156_i=$240;label=73;break;
 case 73: 
 var $_0156_i;
 var $241=($_0156_i|0)==-1;
 if($241){label=74;break;}else{label=75;break;}
 case 74: 
 if($226){label=76;break;}else{label=77;break;}
 case 75: 
 var $242=($185|0)==0;
 var $tmp158_i=$226^$242;
 if($tmp158_i){label=77;break;}else{label=76;break;}
 case 76: 
 var $244=HEAP32[(($__err)>>2)];
 var $245=$244|2;
 HEAP32[(($__err)>>2)]=$245;
 label=77;break;
 case 77: 
 var $247=(($agg_result)|0);
 HEAP32[(($247)>>2)]=$225;
 var $248=HEAP8[($8)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=80;break;}else{label=78;break;}
 case 78: 
 var $252=HEAP32[(($32)>>2)];
 var $253=($252|0)==0;
 if($253){label=80;break;}else{label=79;break;}
 case 79: 
 _free($252);
 label=80;break;
 case 80: 
 var $255=HEAP8[($7)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=83;break;}else{label=81;break;}
 case 81: 
 var $259=(($__grouping_i+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){label=83;break;}else{label=82;break;}
 case 82: 
 _free($260);
 label=83;break;
 case 83: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__thousands_sep_i;
 var $7=$__grouping_i;
 var $8=$__buf_i;
 var $9=$__a_end_i;
 var $10=$__g_i;
 var $11=$__g_end_i;
 var $12=$__dc_i;
 var $13=(($__iob+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14&74;
 if(($15|0)==8){ label=2;break;}else if(($15|0)==0){ label=3;break;}else if(($15|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $20=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$20,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $21=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 var $_pre=HEAP8[($8)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre162_i=(($21+1)|0);
 var $27=$24;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$23;label=9;break;
 case 8: 
 var $26=(($21+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $27=$26;var $_pre_phi_i=$26;var $_pre_phi164_i=$_pre163_i;label=9;break;
 case 9: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $27;
 HEAP32[(($__a_end_i)>>2)]=$27;
 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP32[(($__thousands_sep_i)>>2)];
 var $32=(($__buf_i+8)|0);
 var $__a_0_i=$27;var $33=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $33;
 var $__a_0_i;
 var $34=($33|0)==0;
 if($34){var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($33+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($33+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$33;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$46;label=14;break; } else { label=41;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0155_i=$48;label=14;break;
 case 14: 
 var $_0155_i;
 var $49=($_0155_i|0)==-1;
 var $_=($49?0:$33);
 var $50=$_;label=15;break;
 case 15: 
 var $50;
 var $51=($50|0)==0;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$64;label=19;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0154_i=$66;label=19;break;
 case 19: 
 var $_0154_i;
 var $67=($_0154_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $185=0;var $184=1;label=57;break;}else{var $68=1;var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $68=0;var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $185=$_sroa_06_0;var $184=0;label=57;break;}
 case 22: 
 var $_sroa_06_2;
 var $68;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($8)];
 var $74=($73&255);
 var $75=$74&1;
 var $76=($75|0)==0;
 var $77=HEAP32[(($30)>>2)];
 var $78=$74>>>1;
 var $79=($76?$78:$77);
 var $80=($72|0)==($79|0);
 if($80){label=23;break;}else{var $__a_1_i=$__a_0_i;label=50;break;}
 case 23: 
 if($76){label=25;break;}else{var $83=$77;label=24;break;}
 case 24: 
 var $83;
 var $84=$83<<1;
 var $89=$77;var $88=$83;var $87=$84;label=26;break;
 case 25: 
 var $86=$78<<1;
 var $89=$78;var $88=$78;var $87=$86;label=26;break;
 case 26: 
 var $87;
 var $88;
 var $89;
 var $90=($89>>>0)<($87>>>0);
 if($90){label=27;break;}else{label=28;break;}
 case 27: 
 var $92=((($87)-($89))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$92,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=41;break; }
 case 28: 
 var $94=$73&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=HEAP32[(($32)>>2)];
 var $98=(($97+$87)|0);
 HEAP8[($98)]=0;
 HEAP32[(($30)>>2)]=$87;
 label=31;break;
 case 30: 
 var $100=(($21+1+$87)|0);
 HEAP8[($100)]=0;
 var $101=$88<<2;
 var $102=(($101)&255);
 HEAP8[($8)]=$102;
 label=31;break;
 case 31: 
 var $103=HEAP8[($8)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){var $111=10;var $110=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $107=HEAP32[(($29)>>2)];
 var $108=$107&-2;
 var $phitmp159_i=((($108)-(1))|0);
 var $109=(($107)&255);
 var $111=$phitmp159_i;var $110=$109;label=33;break;
 case 33: 
 var $110;
 var $111;
 var $112=($110&255);
 var $113=$112&1;
 var $114=($113|0)==0;
 var $115=HEAP32[(($30)>>2)];
 var $116=$112>>>1;
 var $117=($114?$116:$115);
 var $118=($117>>>0)<($111>>>0);
 if($118){label=34;break;}else{label=35;break;}
 case 34: 
 var $120=((($111)-($117))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 35: 
 var $122=$110&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($32)>>2)];
 var $126=(($125+$111)|0);
 HEAP8[($126)]=0;
 HEAP32[(($30)>>2)]=$111;
 label=38;break;
 case 37: 
 var $128=(($21+1+$111)|0);
 HEAP8[($128)]=0;
 var $129=$111<<1;
 var $130=(($129)&255);
 HEAP8[($8)]=$130;
 label=38;break;
 case 38: 
 var $131=HEAP8[($8)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $136=$_pre_phi_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_pre_phi164_i)>>2)];
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=(($136+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$137;
 var $__a_1_i=$136;label=50;break;
 case 41: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=43;break;
 case 43: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $139=HEAP8[($8)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=46;break;}else{label=44;break;}
 case 44: 
 var $143=(($__buf_i+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=46;break;}else{label=45;break;}
 case 45: 
 _free($144);
 label=46;break;
 case 46: 
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=49;break;}else{label=47;break;}
 case 47: 
 var $151=(($__grouping_i+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 _free($152);
 label=49;break;
 case 49: 
 ___resumeException($lpad_phi_i$0)
 case 50: 
 var $__a_1_i;
 var $155=(($50+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($50+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=51;break;}else{label=52;break;}
 case 51: 
 var $161=$50;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$165;label=53;break; } else { label=41;break; }
 case 52: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i=$167;label=53;break;
 case 53: 
 var $_0_i;
 var $169=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$20);
 var $170=($169|0)==0;
 if($170){label=54;break;}else{var $__a_2_i=$__a_1_i;var $185=$_sroa_06_2;var $184=$68;label=57;break;}
 case 54: 
 var $172=HEAP32[(($155)>>2)];
 var $173=HEAP32[(($157)>>2)];
 var $174=($172|0)==($173|0);
 if($174){label=55;break;}else{label=56;break;}
 case 55: 
 var $176=$50;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=41;break; }
 case 56: 
 var $182=(($172+4)|0);
 HEAP32[(($155)>>2)]=$182;
 var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $184;
 var $185;
 var $__a_2_i;
 var $186=HEAP8[($7)];
 var $187=($186&255);
 var $188=$187&1;
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=(($__grouping_i+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $195=$192;label=60;break;
 case 59: 
 var $194=$187>>>1;
 var $195=$194;label=60;break;
 case 60: 
 var $195;
 var $196=($195|0)==0;
 if($196){label=63;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP32[(($__g_end_i)>>2)];
 var $199=$198;
 var $200=$__g_i;
 var $201=((($199)-($200))|0);
 var $202=($201|0)<160;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=HEAP32[(($__dc_i)>>2)];
 var $205=(($198+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$205;
 HEAP32[(($198)>>2)]=$204;
 label=63;break;
 case 63: 
 var $206=HEAP32[(($__a_end_i)>>2)];
 var $207=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$206,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=42;break; }
 case 64: 
 HEAP32[(($__v)>>2)]=$207;
 var $209=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$209,$__err);
 if($51){var $225=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $211=(($50+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($50+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=66;break;}else{label=67;break;}
 case 66: 
 var $217=$50;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157_i=$221;label=68;break; } else { label=42;break; }
 case 67: 
 var $223=HEAP32[(($212)>>2)];
 var $_0157_i=$223;label=68;break;
 case 68: 
 var $_0157_i;
 var $224=($_0157_i|0)==-1;
 var $_8=($224?0:$50);
 var $225=$_8;label=69;break;
 case 69: 
 var $225;
 var $226=($225|0)==0;
 if($184){label=74;break;}else{label=70;break;}
 case 70: 
 var $228=(($185+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($185+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=71;break;}else{label=72;break;}
 case 71: 
 var $234=$185;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156_i=$238;label=73;break; } else { label=42;break; }
 case 72: 
 var $240=HEAP32[(($229)>>2)];
 var $_0156_i=$240;label=73;break;
 case 73: 
 var $_0156_i;
 var $241=($_0156_i|0)==-1;
 if($241){label=74;break;}else{label=75;break;}
 case 74: 
 if($226){label=76;break;}else{label=77;break;}
 case 75: 
 var $242=($185|0)==0;
 var $tmp158_i=$226^$242;
 if($tmp158_i){label=77;break;}else{label=76;break;}
 case 76: 
 var $244=HEAP32[(($__err)>>2)];
 var $245=$244|2;
 HEAP32[(($__err)>>2)]=$245;
 label=77;break;
 case 77: 
 var $247=(($agg_result)|0);
 HEAP32[(($247)>>2)]=$225;
 var $248=HEAP8[($8)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=80;break;}else{label=78;break;}
 case 78: 
 var $252=HEAP32[(($32)>>2)];
 var $253=($252|0)==0;
 if($253){label=80;break;}else{label=79;break;}
 case 79: 
 _free($252);
 label=80;break;
 case 80: 
 var $255=HEAP8[($7)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=83;break;}else{label=81;break;}
 case 81: 
 var $259=(($__grouping_i+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){label=83;break;}else{label=82;break;}
 case 82: 
 _free($260);
 label=83;break;
 case 83: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__thousands_sep_i;
 var $7=$__grouping_i;
 var $8=$__buf_i;
 var $9=$__a_end_i;
 var $10=$__g_i;
 var $11=$__g_end_i;
 var $12=$__dc_i;
 var $13=(($__iob+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=$14&74;
 if(($15|0)==8){ label=2;break;}else if(($15|0)==0){ label=3;break;}else if(($15|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $20=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$20,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $21=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 var $_pre=HEAP8[($8)];
 var $phitmp=$_pre&1;
 var $phitmp7=(($phitmp<<24)>>24)==0;
 if($phitmp7){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre162_i=(($21+1)|0);
 var $27=$24;var $_pre_phi_i=$_pre162_i;var $_pre_phi164_i=$23;label=9;break;
 case 8: 
 var $26=(($21+1)|0);
 var $_pre163_i=(($__buf_i+8)|0);
 var $27=$26;var $_pre_phi_i=$26;var $_pre_phi164_i=$_pre163_i;label=9;break;
 case 9: 
 var $_pre_phi164_i;
 var $_pre_phi_i;
 var $27;
 HEAP32[(($__a_end_i)>>2)]=$27;
 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP32[(($__thousands_sep_i)>>2)];
 var $32=(($__buf_i+8)|0);
 var $__a_0_i=$27;var $33=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $33;
 var $__a_0_i;
 var $34=($33|0)==0;
 if($34){var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($33+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($33+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$33;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$46;label=14;break; } else { label=41;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0155_i=$48;label=14;break;
 case 14: 
 var $_0155_i;
 var $49=($_0155_i|0)==-1;
 var $_=($49?0:$33);
 var $50=$_;label=15;break;
 case 15: 
 var $50;
 var $51=($50|0)==0;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$64;label=19;break; } else { label=41;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0154_i=$66;label=19;break;
 case 19: 
 var $_0154_i;
 var $67=($_0154_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $185=0;var $184=1;label=57;break;}else{var $68=1;var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $68=0;var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $185=$_sroa_06_0;var $184=0;label=57;break;}
 case 22: 
 var $_sroa_06_2;
 var $68;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($8)];
 var $74=($73&255);
 var $75=$74&1;
 var $76=($75|0)==0;
 var $77=HEAP32[(($30)>>2)];
 var $78=$74>>>1;
 var $79=($76?$78:$77);
 var $80=($72|0)==($79|0);
 if($80){label=23;break;}else{var $__a_1_i=$__a_0_i;label=50;break;}
 case 23: 
 if($76){label=25;break;}else{var $83=$77;label=24;break;}
 case 24: 
 var $83;
 var $84=$83<<1;
 var $89=$77;var $88=$83;var $87=$84;label=26;break;
 case 25: 
 var $86=$78<<1;
 var $89=$78;var $88=$78;var $87=$86;label=26;break;
 case 26: 
 var $87;
 var $88;
 var $89;
 var $90=($89>>>0)<($87>>>0);
 if($90){label=27;break;}else{label=28;break;}
 case 27: 
 var $92=((($87)-($89))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$92,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=41;break; }
 case 28: 
 var $94=$73&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=30;break;}else{label=29;break;}
 case 29: 
 var $97=HEAP32[(($32)>>2)];
 var $98=(($97+$87)|0);
 HEAP8[($98)]=0;
 HEAP32[(($30)>>2)]=$87;
 label=31;break;
 case 30: 
 var $100=(($21+1+$87)|0);
 HEAP8[($100)]=0;
 var $101=$88<<2;
 var $102=(($101)&255);
 HEAP8[($8)]=$102;
 label=31;break;
 case 31: 
 var $103=HEAP8[($8)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){var $111=10;var $110=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $107=HEAP32[(($29)>>2)];
 var $108=$107&-2;
 var $phitmp159_i=((($108)-(1))|0);
 var $109=(($107)&255);
 var $111=$phitmp159_i;var $110=$109;label=33;break;
 case 33: 
 var $110;
 var $111;
 var $112=($110&255);
 var $113=$112&1;
 var $114=($113|0)==0;
 var $115=HEAP32[(($30)>>2)];
 var $116=$112>>>1;
 var $117=($114?$116:$115);
 var $118=($117>>>0)<($111>>>0);
 if($118){label=34;break;}else{label=35;break;}
 case 34: 
 var $120=((($111)-($117))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$120,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=41;break; }
 case 35: 
 var $122=$110&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=37;break;}else{label=36;break;}
 case 36: 
 var $125=HEAP32[(($32)>>2)];
 var $126=(($125+$111)|0);
 HEAP8[($126)]=0;
 HEAP32[(($30)>>2)]=$111;
 label=38;break;
 case 37: 
 var $128=(($21+1+$111)|0);
 HEAP8[($128)]=0;
 var $129=$111<<1;
 var $130=(($129)&255);
 HEAP8[($8)]=$130;
 label=38;break;
 case 38: 
 var $131=HEAP8[($8)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $136=$_pre_phi_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $135=HEAP32[(($_pre_phi164_i)>>2)];
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=(($136+$88)|0);
 HEAP32[(($__a_end_i)>>2)]=$137;
 var $__a_1_i=$136;label=50;break;
 case 41: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=43;break;
 case 42: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=43;break;
 case 43: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $139=HEAP8[($8)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=46;break;}else{label=44;break;}
 case 44: 
 var $143=(($__buf_i+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=46;break;}else{label=45;break;}
 case 45: 
 _free($144);
 label=46;break;
 case 46: 
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=49;break;}else{label=47;break;}
 case 47: 
 var $151=(($__grouping_i+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=49;break;}else{label=48;break;}
 case 48: 
 _free($152);
 label=49;break;
 case 49: 
 ___resumeException($lpad_phi_i$0)
 case 50: 
 var $__a_1_i;
 var $155=(($50+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($50+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=51;break;}else{label=52;break;}
 case 51: 
 var $161=$50;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$164]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$165;label=53;break; } else { label=41;break; }
 case 52: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i=$167;label=53;break;
 case 53: 
 var $_0_i;
 var $169=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$20);
 var $170=($169|0)==0;
 if($170){label=54;break;}else{var $__a_2_i=$__a_1_i;var $185=$_sroa_06_2;var $184=$68;label=57;break;}
 case 54: 
 var $172=HEAP32[(($155)>>2)];
 var $173=HEAP32[(($157)>>2)];
 var $174=($172|0)==($173|0);
 if($174){label=55;break;}else{label=56;break;}
 case 55: 
 var $176=$50;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$179]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=41;break; }
 case 56: 
 var $182=(($172+4)|0);
 HEAP32[(($155)>>2)]=$182;
 var $__a_0_i=$__a_1_i;var $33=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 57: 
 var $184;
 var $185;
 var $__a_2_i;
 var $186=HEAP8[($7)];
 var $187=($186&255);
 var $188=$187&1;
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=(($__grouping_i+4)|0);
 var $192=HEAP32[(($191)>>2)];
 var $195=$192;label=60;break;
 case 59: 
 var $194=$187>>>1;
 var $195=$194;label=60;break;
 case 60: 
 var $195;
 var $196=($195|0)==0;
 if($196){label=63;break;}else{label=61;break;}
 case 61: 
 var $198=HEAP32[(($__g_end_i)>>2)];
 var $199=$198;
 var $200=$__g_i;
 var $201=((($199)-($200))|0);
 var $202=($201|0)<160;
 if($202){label=62;break;}else{label=63;break;}
 case 62: 
 var $204=HEAP32[(($__dc_i)>>2)];
 var $205=(($198+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$205;
 HEAP32[(($198)>>2)]=$204;
 label=63;break;
 case 63: 
 var $206=HEAP32[(($__a_end_i)>>2)];
 var $207$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$206,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $207$0=$207$r;var $207$1=tempRet0;if (!__THREW__) { label=64;break; } else { label=42;break; }
 case 64: 
 var $st$0$0=(($__v)|0);
 HEAP32[(($st$0$0)>>2)]=$207$0;
 var $st$1$1=(($__v+4)|0);
 HEAP32[(($st$1$1)>>2)]=$207$1;
 var $209=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$209,$__err);
 if($51){var $225=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $211=(($50+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($50+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=66;break;}else{label=67;break;}
 case 66: 
 var $217=$50;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$220]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0157_i=$221;label=68;break; } else { label=42;break; }
 case 67: 
 var $223=HEAP32[(($212)>>2)];
 var $_0157_i=$223;label=68;break;
 case 68: 
 var $_0157_i;
 var $224=($_0157_i|0)==-1;
 var $_8=($224?0:$50);
 var $225=$_8;label=69;break;
 case 69: 
 var $225;
 var $226=($225|0)==0;
 if($184){label=74;break;}else{label=70;break;}
 case 70: 
 var $228=(($185+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=(($185+16)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($229|0)==($231|0);
 if($232){label=71;break;}else{label=72;break;}
 case 71: 
 var $234=$185;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0156_i=$238;label=73;break; } else { label=42;break; }
 case 72: 
 var $240=HEAP32[(($229)>>2)];
 var $_0156_i=$240;label=73;break;
 case 73: 
 var $_0156_i;
 var $241=($_0156_i|0)==-1;
 if($241){label=74;break;}else{label=75;break;}
 case 74: 
 if($226){label=76;break;}else{label=77;break;}
 case 75: 
 var $242=($185|0)==0;
 var $tmp158_i=$226^$242;
 if($tmp158_i){label=77;break;}else{label=76;break;}
 case 76: 
 var $244=HEAP32[(($__err)>>2)];
 var $245=$244|2;
 HEAP32[(($__err)>>2)]=$245;
 label=77;break;
 case 77: 
 var $247=(($agg_result)|0);
 HEAP32[(($247)>>2)]=$225;
 var $248=HEAP8[($8)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=80;break;}else{label=78;break;}
 case 78: 
 var $252=HEAP32[(($32)>>2)];
 var $253=($252|0)==0;
 if($253){label=80;break;}else{label=79;break;}
 case 79: 
 _free($252);
 label=80;break;
 case 80: 
 var $255=HEAP8[($7)];
 var $256=$255&1;
 var $257=(($256<<24)>>24)==0;
 if($257){label=83;break;}else{label=81;break;}
 case 81: 
 var $259=(($__grouping_i+8)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=($260|0)==0;
 if($261){label=83;break;}else{label=82;break;}
 case 82: 
 _free($260);
 label=83;break;
 case 83: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__decimal_point_i;
 var $7=$__thousands_sep_i;
 var $8=$__grouping_i;
 var $9=$__buf_i;
 var $10=$__a_end_i;
 var $11=$__g_i;
 var $12=$__g_end_i;
 var $13=$__dc_i;
 var $14=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$14,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 var $15=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $_pre=HEAP8[($9)];
 var $phitmp=$_pre&1;
 var $phitmp8=(($phitmp<<24)>>24)==0;
 if($phitmp8){label=4;break;}else{label=3;break;}
 case 3: 
 var $17=(($__buf_i+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $_pre161_i=(($15+1)|0);
 var $21=$18;var $_pre_phi_i=$_pre161_i;var $_pre_phi163_i=$17;label=5;break;
 case 4: 
 var $20=(($15+1)|0);
 var $_pre162_i=(($__buf_i+8)|0);
 var $21=$20;var $_pre_phi_i=$20;var $_pre_phi163_i=$_pre162_i;label=5;break;
 case 5: 
 var $_pre_phi163_i;
 var $_pre_phi_i;
 var $21;
 HEAP32[(($__a_end_i)>>2)]=$21;
 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP32[(($__decimal_point_i)>>2)];
 var $26=HEAP32[(($__thousands_sep_i)>>2)];
 var $27=(($__buf_i+8)|0);
 var $__a_0_i=$21;var $28=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $28;
 var $__a_0_i;
 var $29=($28|0)==0;
 if($29){var $45=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $31=(($28+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($28+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$28;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153_i=$41;label=10;break; } else { label=37;break; }
 case 9: 
 var $43=HEAP32[(($32)>>2)];
 var $_0153_i=$43;label=10;break;
 case 10: 
 var $_0153_i;
 var $44=($_0153_i|0)==-1;
 var $_=($44?0:$28);
 var $45=$_;label=11;break;
 case 11: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=16;break;}else{label=12;break;}
 case 12: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=$_sroa_06_0;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152_i=$59;label=15;break; } else { label=37;break; }
 case 14: 
 var $61=HEAP32[(($50)>>2)];
 var $_0152_i=$61;label=15;break;
 case 15: 
 var $_0152_i;
 var $62=($_0152_i|0)==-1;
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 if($46){var $__a_2_i=$__a_0_i;var $180=0;var $179=1;label=53;break;}else{var $63=1;var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($46){var $63=0;var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $180=$_sroa_06_0;var $179=0;label=53;break;}
 case 18: 
 var $_sroa_06_2;
 var $63;
 var $64=HEAP32[(($__a_end_i)>>2)];
 var $65=$64;
 var $66=$__a_0_i;
 var $67=((($65)-($66))|0);
 var $68=HEAP8[($9)];
 var $69=($68&255);
 var $70=$69&1;
 var $71=($70|0)==0;
 var $72=HEAP32[(($24)>>2)];
 var $73=$69>>>1;
 var $74=($71?$73:$72);
 var $75=($67|0)==($74|0);
 if($75){label=19;break;}else{var $__a_1_i=$__a_0_i;label=46;break;}
 case 19: 
 if($71){label=21;break;}else{var $78=$72;label=20;break;}
 case 20: 
 var $78;
 var $79=$78<<1;
 var $84=$72;var $83=$78;var $82=$79;label=22;break;
 case 21: 
 var $81=$73<<1;
 var $84=$73;var $83=$73;var $82=$81;label=22;break;
 case 22: 
 var $82;
 var $83;
 var $84;
 var $85=($84>>>0)<($82>>>0);
 if($85){label=23;break;}else{label=24;break;}
 case 23: 
 var $87=((($82)-($84))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=37;break; }
 case 24: 
 var $89=$68&1;
 var $90=(($89<<24)>>24)==0;
 if($90){label=26;break;}else{label=25;break;}
 case 25: 
 var $92=HEAP32[(($27)>>2)];
 var $93=(($92+$82)|0);
 HEAP8[($93)]=0;
 HEAP32[(($24)>>2)]=$82;
 label=27;break;
 case 26: 
 var $95=(($15+1+$82)|0);
 HEAP8[($95)]=0;
 var $96=$83<<2;
 var $97=(($96)&255);
 HEAP8[($9)]=$97;
 label=27;break;
 case 27: 
 var $98=HEAP8[($9)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $106=10;var $105=$98;label=29;break;}else{label=28;break;}
 case 28: 
 var $102=HEAP32[(($23)>>2)];
 var $103=$102&-2;
 var $phitmp157_i=((($103)-(1))|0);
 var $104=(($102)&255);
 var $106=$phitmp157_i;var $105=$104;label=29;break;
 case 29: 
 var $105;
 var $106;
 var $107=($105&255);
 var $108=$107&1;
 var $109=($108|0)==0;
 var $110=HEAP32[(($24)>>2)];
 var $111=$107>>>1;
 var $112=($109?$111:$110);
 var $113=($112>>>0)<($106>>>0);
 if($113){label=30;break;}else{label=31;break;}
 case 30: 
 var $115=((($106)-($112))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$115,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 31: 
 var $117=$105&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=33;break;}else{label=32;break;}
 case 32: 
 var $120=HEAP32[(($27)>>2)];
 var $121=(($120+$106)|0);
 HEAP8[($121)]=0;
 HEAP32[(($24)>>2)]=$106;
 label=34;break;
 case 33: 
 var $123=(($15+1+$106)|0);
 HEAP8[($123)]=0;
 var $124=$106<<1;
 var $125=(($124)&255);
 HEAP8[($9)]=$125;
 label=34;break;
 case 34: 
 var $126=HEAP8[($9)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){var $131=$_pre_phi_i;label=36;break;}else{label=35;break;}
 case 35: 
 var $130=HEAP32[(($_pre_phi163_i)>>2)];
 var $131=$130;label=36;break;
 case 36: 
 var $131;
 var $132=(($131+$83)|0);
 HEAP32[(($__a_end_i)>>2)]=$132;
 var $__a_1_i=$131;label=46;break;
 case 37: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=39;break;
 case 39: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $134=HEAP8[($9)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=42;break;}else{label=40;break;}
 case 40: 
 var $138=(($__buf_i+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)==0;
 if($140){label=42;break;}else{label=41;break;}
 case 41: 
 _free($139);
 label=42;break;
 case 42: 
 var $142=HEAP8[($8)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=45;break;}else{label=43;break;}
 case 43: 
 var $146=(($__grouping_i+8)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 _free($147);
 label=45;break;
 case 45: 
 ___resumeException($lpad_phi_i$0)
 case 46: 
 var $__a_1_i;
 var $150=(($45+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($45+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($151|0)==($153|0);
 if($154){label=47;break;}else{label=48;break;}
 case 47: 
 var $156=$45;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$160;label=49;break; } else { label=37;break; }
 case 48: 
 var $162=HEAP32[(($151)>>2)];
 var $_0_i=$162;label=49;break;
 case 49: 
 var $_0_i;
 var $164=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$14);
 var $165=($164|0)==0;
 if($165){label=50;break;}else{var $__a_2_i=$__a_1_i;var $180=$_sroa_06_2;var $179=$63;label=53;break;}
 case 50: 
 var $167=HEAP32[(($150)>>2)];
 var $168=HEAP32[(($152)>>2)];
 var $169=($167|0)==($168|0);
 if($169){label=51;break;}else{label=52;break;}
 case 51: 
 var $171=$45;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+40)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $28=$45;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=37;break; }
 case 52: 
 var $177=(($167+4)|0);
 HEAP32[(($150)>>2)]=$177;
 var $__a_0_i=$__a_1_i;var $28=$45;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 53: 
 var $179;
 var $180;
 var $__a_2_i;
 var $181=HEAP8[($8)];
 var $182=($181&255);
 var $183=$182&1;
 var $184=($183|0)==0;
 if($184){label=55;break;}else{label=54;break;}
 case 54: 
 var $186=(($__grouping_i+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $190=$187;label=56;break;
 case 55: 
 var $189=$182>>>1;
 var $190=$189;label=56;break;
 case 56: 
 var $190;
 var $191=($190|0)==0;
 if($191){label=60;break;}else{label=57;break;}
 case 57: 
 var $193=HEAP8[($__in_units_i)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=60;break;}else{label=58;break;}
 case 58: 
 var $197=HEAP32[(($__g_end_i)>>2)];
 var $198=$197;
 var $199=$__g_i;
 var $200=((($198)-($199))|0);
 var $201=($200|0)<160;
 if($201){label=59;break;}else{label=60;break;}
 case 59: 
 var $203=HEAP32[(($__dc_i)>>2)];
 var $204=(($197+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$204;
 HEAP32[(($197)>>2)]=$203;
 label=60;break;
 case 60: 
 var $205=HEAP32[(($__a_end_i)>>2)];
 var $206=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$205,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=38;break; }
 case 61: 
 HEAPF32[(($__v)>>2)]=$206;
 var $208=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$208,$__err);
 if($46){var $224=0;label=66;break;}else{label=62;break;}
 case 62: 
 var $210=(($45+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($45+16)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($211|0)==($213|0);
 if($214){label=63;break;}else{label=64;break;}
 case 63: 
 var $216=$45;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+36)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$219]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$220;label=65;break; } else { label=38;break; }
 case 64: 
 var $222=HEAP32[(($211)>>2)];
 var $_0155_i=$222;label=65;break;
 case 65: 
 var $_0155_i;
 var $223=($_0155_i|0)==-1;
 var $_9=($223?0:$45);
 var $224=$_9;label=66;break;
 case 66: 
 var $224;
 var $225=($224|0)==0;
 if($179){label=71;break;}else{label=67;break;}
 case 67: 
 var $227=(($180+12)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($180+16)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($228|0)==($230|0);
 if($231){label=68;break;}else{label=69;break;}
 case 68: 
 var $233=$180;
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+36)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$237;label=70;break; } else { label=38;break; }
 case 69: 
 var $239=HEAP32[(($228)>>2)];
 var $_0154_i=$239;label=70;break;
 case 70: 
 var $_0154_i;
 var $240=($_0154_i|0)==-1;
 if($240){label=71;break;}else{label=72;break;}
 case 71: 
 if($225){label=73;break;}else{label=74;break;}
 case 72: 
 var $241=($180|0)==0;
 var $tmp156_i=$225^$241;
 if($tmp156_i){label=74;break;}else{label=73;break;}
 case 73: 
 var $243=HEAP32[(($__err)>>2)];
 var $244=$243|2;
 HEAP32[(($__err)>>2)]=$244;
 label=74;break;
 case 74: 
 var $246=(($agg_result)|0);
 HEAP32[(($246)>>2)]=$224;
 var $247=HEAP8[($9)];
 var $248=$247&1;
 var $249=(($248<<24)>>24)==0;
 if($249){label=77;break;}else{label=75;break;}
 case 75: 
 var $251=HEAP32[(($27)>>2)];
 var $252=($251|0)==0;
 if($252){label=77;break;}else{label=76;break;}
 case 76: 
 _free($251);
 label=77;break;
 case 77: 
 var $254=HEAP8[($8)];
 var $255=$254&1;
 var $256=(($255<<24)>>24)==0;
 if($256){label=80;break;}else{label=78;break;}
 case 78: 
 var $258=(($__grouping_i+8)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==0;
 if($260){label=80;break;}else{label=79;break;}
 case 79: 
 _free($259);
 label=80;break;
 case 80: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__decimal_point_i;
 var $7=$__thousands_sep_i;
 var $8=$__grouping_i;
 var $9=$__buf_i;
 var $10=$__a_end_i;
 var $11=$__g_i;
 var $12=$__g_end_i;
 var $13=$__dc_i;
 var $14=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$14,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 var $15=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $_pre=HEAP8[($9)];
 var $phitmp=$_pre&1;
 var $phitmp8=(($phitmp<<24)>>24)==0;
 if($phitmp8){label=4;break;}else{label=3;break;}
 case 3: 
 var $17=(($__buf_i+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $_pre161_i=(($15+1)|0);
 var $21=$18;var $_pre_phi_i=$_pre161_i;var $_pre_phi163_i=$17;label=5;break;
 case 4: 
 var $20=(($15+1)|0);
 var $_pre162_i=(($__buf_i+8)|0);
 var $21=$20;var $_pre_phi_i=$20;var $_pre_phi163_i=$_pre162_i;label=5;break;
 case 5: 
 var $_pre_phi163_i;
 var $_pre_phi_i;
 var $21;
 HEAP32[(($__a_end_i)>>2)]=$21;
 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP32[(($__decimal_point_i)>>2)];
 var $26=HEAP32[(($__thousands_sep_i)>>2)];
 var $27=(($__buf_i+8)|0);
 var $__a_0_i=$21;var $28=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $28;
 var $__a_0_i;
 var $29=($28|0)==0;
 if($29){var $45=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $31=(($28+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($28+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$28;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153_i=$41;label=10;break; } else { label=37;break; }
 case 9: 
 var $43=HEAP32[(($32)>>2)];
 var $_0153_i=$43;label=10;break;
 case 10: 
 var $_0153_i;
 var $44=($_0153_i|0)==-1;
 var $_=($44?0:$28);
 var $45=$_;label=11;break;
 case 11: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=16;break;}else{label=12;break;}
 case 12: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=$_sroa_06_0;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152_i=$59;label=15;break; } else { label=37;break; }
 case 14: 
 var $61=HEAP32[(($50)>>2)];
 var $_0152_i=$61;label=15;break;
 case 15: 
 var $_0152_i;
 var $62=($_0152_i|0)==-1;
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 if($46){var $__a_2_i=$__a_0_i;var $180=0;var $179=1;label=53;break;}else{var $63=1;var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($46){var $63=0;var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $180=$_sroa_06_0;var $179=0;label=53;break;}
 case 18: 
 var $_sroa_06_2;
 var $63;
 var $64=HEAP32[(($__a_end_i)>>2)];
 var $65=$64;
 var $66=$__a_0_i;
 var $67=((($65)-($66))|0);
 var $68=HEAP8[($9)];
 var $69=($68&255);
 var $70=$69&1;
 var $71=($70|0)==0;
 var $72=HEAP32[(($24)>>2)];
 var $73=$69>>>1;
 var $74=($71?$73:$72);
 var $75=($67|0)==($74|0);
 if($75){label=19;break;}else{var $__a_1_i=$__a_0_i;label=46;break;}
 case 19: 
 if($71){label=21;break;}else{var $78=$72;label=20;break;}
 case 20: 
 var $78;
 var $79=$78<<1;
 var $84=$72;var $83=$78;var $82=$79;label=22;break;
 case 21: 
 var $81=$73<<1;
 var $84=$73;var $83=$73;var $82=$81;label=22;break;
 case 22: 
 var $82;
 var $83;
 var $84;
 var $85=($84>>>0)<($82>>>0);
 if($85){label=23;break;}else{label=24;break;}
 case 23: 
 var $87=((($82)-($84))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=37;break; }
 case 24: 
 var $89=$68&1;
 var $90=(($89<<24)>>24)==0;
 if($90){label=26;break;}else{label=25;break;}
 case 25: 
 var $92=HEAP32[(($27)>>2)];
 var $93=(($92+$82)|0);
 HEAP8[($93)]=0;
 HEAP32[(($24)>>2)]=$82;
 label=27;break;
 case 26: 
 var $95=(($15+1+$82)|0);
 HEAP8[($95)]=0;
 var $96=$83<<2;
 var $97=(($96)&255);
 HEAP8[($9)]=$97;
 label=27;break;
 case 27: 
 var $98=HEAP8[($9)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $106=10;var $105=$98;label=29;break;}else{label=28;break;}
 case 28: 
 var $102=HEAP32[(($23)>>2)];
 var $103=$102&-2;
 var $phitmp157_i=((($103)-(1))|0);
 var $104=(($102)&255);
 var $106=$phitmp157_i;var $105=$104;label=29;break;
 case 29: 
 var $105;
 var $106;
 var $107=($105&255);
 var $108=$107&1;
 var $109=($108|0)==0;
 var $110=HEAP32[(($24)>>2)];
 var $111=$107>>>1;
 var $112=($109?$111:$110);
 var $113=($112>>>0)<($106>>>0);
 if($113){label=30;break;}else{label=31;break;}
 case 30: 
 var $115=((($106)-($112))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$115,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 31: 
 var $117=$105&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=33;break;}else{label=32;break;}
 case 32: 
 var $120=HEAP32[(($27)>>2)];
 var $121=(($120+$106)|0);
 HEAP8[($121)]=0;
 HEAP32[(($24)>>2)]=$106;
 label=34;break;
 case 33: 
 var $123=(($15+1+$106)|0);
 HEAP8[($123)]=0;
 var $124=$106<<1;
 var $125=(($124)&255);
 HEAP8[($9)]=$125;
 label=34;break;
 case 34: 
 var $126=HEAP8[($9)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){var $131=$_pre_phi_i;label=36;break;}else{label=35;break;}
 case 35: 
 var $130=HEAP32[(($_pre_phi163_i)>>2)];
 var $131=$130;label=36;break;
 case 36: 
 var $131;
 var $132=(($131+$83)|0);
 HEAP32[(($__a_end_i)>>2)]=$132;
 var $__a_1_i=$131;label=46;break;
 case 37: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=39;break;
 case 39: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $134=HEAP8[($9)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=42;break;}else{label=40;break;}
 case 40: 
 var $138=(($__buf_i+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)==0;
 if($140){label=42;break;}else{label=41;break;}
 case 41: 
 _free($139);
 label=42;break;
 case 42: 
 var $142=HEAP8[($8)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=45;break;}else{label=43;break;}
 case 43: 
 var $146=(($__grouping_i+8)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 _free($147);
 label=45;break;
 case 45: 
 ___resumeException($lpad_phi_i$0)
 case 46: 
 var $__a_1_i;
 var $150=(($45+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($45+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($151|0)==($153|0);
 if($154){label=47;break;}else{label=48;break;}
 case 47: 
 var $156=$45;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$160;label=49;break; } else { label=37;break; }
 case 48: 
 var $162=HEAP32[(($151)>>2)];
 var $_0_i=$162;label=49;break;
 case 49: 
 var $_0_i;
 var $164=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$14);
 var $165=($164|0)==0;
 if($165){label=50;break;}else{var $__a_2_i=$__a_1_i;var $180=$_sroa_06_2;var $179=$63;label=53;break;}
 case 50: 
 var $167=HEAP32[(($150)>>2)];
 var $168=HEAP32[(($152)>>2)];
 var $169=($167|0)==($168|0);
 if($169){label=51;break;}else{label=52;break;}
 case 51: 
 var $171=$45;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+40)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $28=$45;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=37;break; }
 case 52: 
 var $177=(($167+4)|0);
 HEAP32[(($150)>>2)]=$177;
 var $__a_0_i=$__a_1_i;var $28=$45;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 53: 
 var $179;
 var $180;
 var $__a_2_i;
 var $181=HEAP8[($8)];
 var $182=($181&255);
 var $183=$182&1;
 var $184=($183|0)==0;
 if($184){label=55;break;}else{label=54;break;}
 case 54: 
 var $186=(($__grouping_i+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $190=$187;label=56;break;
 case 55: 
 var $189=$182>>>1;
 var $190=$189;label=56;break;
 case 56: 
 var $190;
 var $191=($190|0)==0;
 if($191){label=60;break;}else{label=57;break;}
 case 57: 
 var $193=HEAP8[($__in_units_i)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=60;break;}else{label=58;break;}
 case 58: 
 var $197=HEAP32[(($__g_end_i)>>2)];
 var $198=$197;
 var $199=$__g_i;
 var $200=((($198)-($199))|0);
 var $201=($200|0)<160;
 if($201){label=59;break;}else{label=60;break;}
 case 59: 
 var $203=HEAP32[(($__dc_i)>>2)];
 var $204=(($197+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$204;
 HEAP32[(($197)>>2)]=$203;
 label=60;break;
 case 60: 
 var $205=HEAP32[(($__a_end_i)>>2)];
 var $206=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$205,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=38;break; }
 case 61: 
 HEAPF64[(($__v)>>3)]=$206;
 var $208=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$208,$__err);
 if($46){var $224=0;label=66;break;}else{label=62;break;}
 case 62: 
 var $210=(($45+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($45+16)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($211|0)==($213|0);
 if($214){label=63;break;}else{label=64;break;}
 case 63: 
 var $216=$45;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+36)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$219]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$220;label=65;break; } else { label=38;break; }
 case 64: 
 var $222=HEAP32[(($211)>>2)];
 var $_0155_i=$222;label=65;break;
 case 65: 
 var $_0155_i;
 var $223=($_0155_i|0)==-1;
 var $_9=($223?0:$45);
 var $224=$_9;label=66;break;
 case 66: 
 var $224;
 var $225=($224|0)==0;
 if($179){label=71;break;}else{label=67;break;}
 case 67: 
 var $227=(($180+12)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($180+16)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($228|0)==($230|0);
 if($231){label=68;break;}else{label=69;break;}
 case 68: 
 var $233=$180;
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+36)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$237;label=70;break; } else { label=38;break; }
 case 69: 
 var $239=HEAP32[(($228)>>2)];
 var $_0154_i=$239;label=70;break;
 case 70: 
 var $_0154_i;
 var $240=($_0154_i|0)==-1;
 if($240){label=71;break;}else{label=72;break;}
 case 71: 
 if($225){label=73;break;}else{label=74;break;}
 case 72: 
 var $241=($180|0)==0;
 var $tmp156_i=$225^$241;
 if($tmp156_i){label=74;break;}else{label=73;break;}
 case 73: 
 var $243=HEAP32[(($__err)>>2)];
 var $244=$243|2;
 HEAP32[(($__err)>>2)]=$244;
 label=74;break;
 case 74: 
 var $246=(($agg_result)|0);
 HEAP32[(($246)>>2)]=$224;
 var $247=HEAP8[($9)];
 var $248=$247&1;
 var $249=(($248<<24)>>24)==0;
 if($249){label=77;break;}else{label=75;break;}
 case 75: 
 var $251=HEAP32[(($27)>>2)];
 var $252=($251|0)==0;
 if($252){label=77;break;}else{label=76;break;}
 case 76: 
 _free($251);
 label=77;break;
 case 77: 
 var $254=HEAP8[($8)];
 var $255=$254&1;
 var $256=(($255<<24)>>24)==0;
 if($256){label=80;break;}else{label=78;break;}
 case 78: 
 var $258=(($__grouping_i+8)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==0;
 if($260){label=80;break;}else{label=79;break;}
 case 79: 
 _free($259);
 label=80;break;
 case 80: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__atoms_i;
 var $6=$__decimal_point_i;
 var $7=$__thousands_sep_i;
 var $8=$__grouping_i;
 var $9=$__buf_i;
 var $10=$__a_end_i;
 var $11=$__g_i;
 var $12=$__g_end_i;
 var $13=$__dc_i;
 var $14=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$14,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($9)>>2)]=0; HEAP32[((($9)+(4))>>2)]=0; HEAP32[((($9)+(8))>>2)]=0;
 var $15=$__buf_i;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=38;break; }
 case 2: 
 var $_pre=HEAP8[($9)];
 var $phitmp=$_pre&1;
 var $phitmp8=(($phitmp<<24)>>24)==0;
 if($phitmp8){label=4;break;}else{label=3;break;}
 case 3: 
 var $17=(($__buf_i+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $_pre161_i=(($15+1)|0);
 var $21=$18;var $_pre_phi_i=$_pre161_i;var $_pre_phi163_i=$17;label=5;break;
 case 4: 
 var $20=(($15+1)|0);
 var $_pre162_i=(($__buf_i+8)|0);
 var $21=$20;var $_pre_phi_i=$20;var $_pre_phi163_i=$_pre162_i;label=5;break;
 case 5: 
 var $_pre_phi163_i;
 var $_pre_phi_i;
 var $21;
 HEAP32[(($__a_end_i)>>2)]=$21;
 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP32[(($__decimal_point_i)>>2)];
 var $26=HEAP32[(($__thousands_sep_i)>>2)];
 var $27=(($__buf_i+8)|0);
 var $__a_0_i=$21;var $28=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $28;
 var $__a_0_i;
 var $29=($28|0)==0;
 if($29){var $45=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $31=(($28+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($28+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$28;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0153_i=$41;label=10;break; } else { label=37;break; }
 case 9: 
 var $43=HEAP32[(($32)>>2)];
 var $_0153_i=$43;label=10;break;
 case 10: 
 var $_0153_i;
 var $44=($_0153_i|0)==-1;
 var $_=($44?0:$28);
 var $45=$_;label=11;break;
 case 11: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=16;break;}else{label=12;break;}
 case 12: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=13;break;}else{label=14;break;}
 case 13: 
 var $55=$_sroa_06_0;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0152_i=$59;label=15;break; } else { label=37;break; }
 case 14: 
 var $61=HEAP32[(($50)>>2)];
 var $_0152_i=$61;label=15;break;
 case 15: 
 var $_0152_i;
 var $62=($_0152_i|0)==-1;
 if($62){label=16;break;}else{label=17;break;}
 case 16: 
 if($46){var $__a_2_i=$__a_0_i;var $180=0;var $179=1;label=53;break;}else{var $63=1;var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($46){var $63=0;var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $180=$_sroa_06_0;var $179=0;label=53;break;}
 case 18: 
 var $_sroa_06_2;
 var $63;
 var $64=HEAP32[(($__a_end_i)>>2)];
 var $65=$64;
 var $66=$__a_0_i;
 var $67=((($65)-($66))|0);
 var $68=HEAP8[($9)];
 var $69=($68&255);
 var $70=$69&1;
 var $71=($70|0)==0;
 var $72=HEAP32[(($24)>>2)];
 var $73=$69>>>1;
 var $74=($71?$73:$72);
 var $75=($67|0)==($74|0);
 if($75){label=19;break;}else{var $__a_1_i=$__a_0_i;label=46;break;}
 case 19: 
 if($71){label=21;break;}else{var $78=$72;label=20;break;}
 case 20: 
 var $78;
 var $79=$78<<1;
 var $84=$72;var $83=$78;var $82=$79;label=22;break;
 case 21: 
 var $81=$73<<1;
 var $84=$73;var $83=$73;var $82=$81;label=22;break;
 case 22: 
 var $82;
 var $83;
 var $84;
 var $85=($84>>>0)<($82>>>0);
 if($85){label=23;break;}else{label=24;break;}
 case 23: 
 var $87=((($82)-($84))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$87,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=37;break; }
 case 24: 
 var $89=$68&1;
 var $90=(($89<<24)>>24)==0;
 if($90){label=26;break;}else{label=25;break;}
 case 25: 
 var $92=HEAP32[(($27)>>2)];
 var $93=(($92+$82)|0);
 HEAP8[($93)]=0;
 HEAP32[(($24)>>2)]=$82;
 label=27;break;
 case 26: 
 var $95=(($15+1+$82)|0);
 HEAP8[($95)]=0;
 var $96=$83<<2;
 var $97=(($96)&255);
 HEAP8[($9)]=$97;
 label=27;break;
 case 27: 
 var $98=HEAP8[($9)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $106=10;var $105=$98;label=29;break;}else{label=28;break;}
 case 28: 
 var $102=HEAP32[(($23)>>2)];
 var $103=$102&-2;
 var $phitmp157_i=((($103)-(1))|0);
 var $104=(($102)&255);
 var $106=$phitmp157_i;var $105=$104;label=29;break;
 case 29: 
 var $105;
 var $106;
 var $107=($105&255);
 var $108=$107&1;
 var $109=($108|0)==0;
 var $110=HEAP32[(($24)>>2)];
 var $111=$107>>>1;
 var $112=($109?$111:$110);
 var $113=($112>>>0)<($106>>>0);
 if($113){label=30;break;}else{label=31;break;}
 case 30: 
 var $115=((($106)-($112))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf_i,$115,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=37;break; }
 case 31: 
 var $117=$105&1;
 var $118=(($117<<24)>>24)==0;
 if($118){label=33;break;}else{label=32;break;}
 case 32: 
 var $120=HEAP32[(($27)>>2)];
 var $121=(($120+$106)|0);
 HEAP8[($121)]=0;
 HEAP32[(($24)>>2)]=$106;
 label=34;break;
 case 33: 
 var $123=(($15+1+$106)|0);
 HEAP8[($123)]=0;
 var $124=$106<<1;
 var $125=(($124)&255);
 HEAP8[($9)]=$125;
 label=34;break;
 case 34: 
 var $126=HEAP8[($9)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){var $131=$_pre_phi_i;label=36;break;}else{label=35;break;}
 case 35: 
 var $130=HEAP32[(($_pre_phi163_i)>>2)];
 var $131=$130;label=36;break;
 case 36: 
 var $131;
 var $132=(($131+$83)|0);
 HEAP32[(($__a_end_i)>>2)]=$132;
 var $__a_1_i=$131;label=46;break;
 case 37: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=39;break;
 case 38: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=39;break;
 case 39: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $134=HEAP8[($9)];
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=42;break;}else{label=40;break;}
 case 40: 
 var $138=(($__buf_i+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)==0;
 if($140){label=42;break;}else{label=41;break;}
 case 41: 
 _free($139);
 label=42;break;
 case 42: 
 var $142=HEAP8[($8)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=45;break;}else{label=43;break;}
 case 43: 
 var $146=(($__grouping_i+8)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($147|0)==0;
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 _free($147);
 label=45;break;
 case 45: 
 ___resumeException($lpad_phi_i$0)
 case 46: 
 var $__a_1_i;
 var $150=(($45+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($45+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($151|0)==($153|0);
 if($154){label=47;break;}else{label=48;break;}
 case 47: 
 var $156=$45;
 var $157=HEAP32[(($156)>>2)];
 var $158=(($157+36)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$159]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i=$160;label=49;break; } else { label=37;break; }
 case 48: 
 var $162=HEAP32[(($151)>>2)];
 var $_0_i=$162;label=49;break;
 case 49: 
 var $_0_i;
 var $164=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$14);
 var $165=($164|0)==0;
 if($165){label=50;break;}else{var $__a_2_i=$__a_1_i;var $180=$_sroa_06_2;var $179=$63;label=53;break;}
 case 50: 
 var $167=HEAP32[(($150)>>2)];
 var $168=HEAP32[(($152)>>2)];
 var $169=($167|0)==($168|0);
 if($169){label=51;break;}else{label=52;break;}
 case 51: 
 var $171=$45;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+40)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $28=$45;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=37;break; }
 case 52: 
 var $177=(($167+4)|0);
 HEAP32[(($150)>>2)]=$177;
 var $__a_0_i=$__a_1_i;var $28=$45;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 53: 
 var $179;
 var $180;
 var $__a_2_i;
 var $181=HEAP8[($8)];
 var $182=($181&255);
 var $183=$182&1;
 var $184=($183|0)==0;
 if($184){label=55;break;}else{label=54;break;}
 case 54: 
 var $186=(($__grouping_i+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $190=$187;label=56;break;
 case 55: 
 var $189=$182>>>1;
 var $190=$189;label=56;break;
 case 56: 
 var $190;
 var $191=($190|0)==0;
 if($191){label=60;break;}else{label=57;break;}
 case 57: 
 var $193=HEAP8[($__in_units_i)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=60;break;}else{label=58;break;}
 case 58: 
 var $197=HEAP32[(($__g_end_i)>>2)];
 var $198=$197;
 var $199=$__g_i;
 var $200=((($198)-($199))|0);
 var $201=($200|0)<160;
 if($201){label=59;break;}else{label=60;break;}
 case 59: 
 var $203=HEAP32[(($__dc_i)>>2)];
 var $204=(($197+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$204;
 HEAP32[(($197)>>2)]=$203;
 label=60;break;
 case 60: 
 var $205=HEAP32[(($__a_end_i)>>2)];
 var $206=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$205,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=38;break; }
 case 61: 
 HEAPF64[(($__v)>>3)]=$206;
 var $208=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$208,$__err);
 if($46){var $224=0;label=66;break;}else{label=62;break;}
 case 62: 
 var $210=(($45+12)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=(($45+16)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($211|0)==($213|0);
 if($214){label=63;break;}else{label=64;break;}
 case 63: 
 var $216=$45;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+36)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$219]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0155_i=$220;label=65;break; } else { label=38;break; }
 case 64: 
 var $222=HEAP32[(($211)>>2)];
 var $_0155_i=$222;label=65;break;
 case 65: 
 var $_0155_i;
 var $223=($_0155_i|0)==-1;
 var $_9=($223?0:$45);
 var $224=$_9;label=66;break;
 case 66: 
 var $224;
 var $225=($224|0)==0;
 if($179){label=71;break;}else{label=67;break;}
 case 67: 
 var $227=(($180+12)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(($180+16)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($228|0)==($230|0);
 if($231){label=68;break;}else{label=69;break;}
 case 68: 
 var $233=$180;
 var $234=HEAP32[(($233)>>2)];
 var $235=(($234+36)|0);
 var $236=HEAP32[(($235)>>2)];
 var $237=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($180) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0154_i=$237;label=70;break; } else { label=38;break; }
 case 69: 
 var $239=HEAP32[(($228)>>2)];
 var $_0154_i=$239;label=70;break;
 case 70: 
 var $_0154_i;
 var $240=($_0154_i|0)==-1;
 if($240){label=71;break;}else{label=72;break;}
 case 71: 
 if($225){label=73;break;}else{label=74;break;}
 case 72: 
 var $241=($180|0)==0;
 var $tmp156_i=$225^$241;
 if($tmp156_i){label=74;break;}else{label=73;break;}
 case 73: 
 var $243=HEAP32[(($__err)>>2)];
 var $244=$243|2;
 HEAP32[(($__err)>>2)]=$244;
 label=74;break;
 case 74: 
 var $246=(($agg_result)|0);
 HEAP32[(($246)>>2)]=$224;
 var $247=HEAP8[($9)];
 var $248=$247&1;
 var $249=(($248<<24)>>24)==0;
 if($249){label=77;break;}else{label=75;break;}
 case 75: 
 var $251=HEAP32[(($27)>>2)];
 var $252=($251|0)==0;
 if($252){label=77;break;}else{label=76;break;}
 case 76: 
 _free($251);
 label=77;break;
 case 77: 
 var $254=HEAP8[($8)];
 var $255=$254&1;
 var $256=(($255<<24)>>24)==0;
 if($256){label=80;break;}else{label=78;break;}
 case 78: 
 var $258=(($__grouping_i+8)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==0;
 if($260){label=80;break;}else{label=79;break;}
 case 79: 
 _free($259);
 label=80;break;
 case 80: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $__grouping170=$__grouping;
 var $__buf=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__a_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g=STACKTOP;STACKTOP = (STACKTOP + 160)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__g_end=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__dc=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($__grouping170)>>2)]=0; HEAP32[((($__grouping170)+(4))>>2)]=0; HEAP32[((($__grouping170)+(8))>>2)]=0;
 var $1=$__buf;
 var $2=(($__iob+28)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=$__p_i_i_i;
 var $8=HEAP32[((19280)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=48;break; }
 case 3: 
 var $11=HEAP32[((19284)>>2)];
 var $12=((($11)-(1))|0);
 var $13=(($3+12)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=(($3+8)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=$15;
 var $20=$18;
 var $21=((($19)-($20))|0);
 var $22=$21>>2;
 var $23=($22>>>0)>($12>>>0);
 if($23){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=(($18+($12<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=5;break;}else{label=7;break;}
 case 5: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 HEAP32[(($28)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=48;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $29=$25;
 var $30=(($__atoms)|0);
 var $31=$25;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($32+48)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$34]($29,15512,15538,$30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=48;break; }
 case 8: 
 var $36=(($3+4)|0);
 var $37=$36;
 var $38=(tempValue=HEAP32[(($37)>>2)],HEAP32[(($37)>>2)]=tempValue+-1,tempValue);
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=$3;
 var $42=$3;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41);
 label=10;break;
 case 10: 
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 var $47=$__buf;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf,10,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=51;break; }
 case 11: 
 var $_pre16=HEAP8[($1)];
 var $phitmp=$_pre16&1;
 var $phitmp17=(($phitmp<<24)>>24)==0;
 if($phitmp17){label=13;break;}else{label=12;break;}
 case 12: 
 var $49=(($__buf+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $_pre171=(($47+1)|0);
 var $53=$50;var $_pre_phi=$_pre171;var $_pre_phi173=$49;label=14;break;
 case 13: 
 var $52=(($47+1)|0);
 var $_pre172=(($__buf+8)|0);
 var $53=$52;var $_pre_phi=$52;var $_pre_phi173=$_pre172;label=14;break;
 case 14: 
 var $_pre_phi173;
 var $_pre_phi;
 var $53;
 HEAP32[(($__a_end)>>2)]=$53;
 var $54=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $55=(($__b)|0);
 var $56=(($__e)|0);
 var $57=(($__buf)|0);
 var $58=(($__buf+4)|0);
 var $_pre=HEAP32[(($55)>>2)];
 var $59=(($__buf+8)|0);
 var $__a_0=$53;var $60=$_pre;label=15;break;
 case 15: 
 var $60;
 var $__a_0;
 var $61=($60|0)==0;
 if($61){var $78=0;label=21;break;}else{label=16;break;}
 case 16: 
 var $63=(($60+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($60+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=17;break;}else{label=18;break;}
 case 17: 
 var $69=$60;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+36)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0161=$73;label=19;break; } else { label=50;break; }
 case 18: 
 var $75=HEAP32[(($64)>>2)];
 var $_0161=$75;label=19;break;
 case 19: 
 var $_0161;
 var $76=($_0161|0)==-1;
 if($76){label=20;break;}else{var $78=$60;label=21;break;}
 case 20: 
 HEAP32[(($55)>>2)]=0;
 var $78=0;label=21;break;
 case 21: 
 var $78;
 var $79=($78|0)==0;
 var $80=HEAP32[(($56)>>2)];
 var $81=($80|0)==0;
 if($81){label=27;break;}else{label=22;break;}
 case 22: 
 var $83=(($80+12)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($80+16)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($84|0)==($86|0);
 if($87){label=23;break;}else{label=24;break;}
 case 23: 
 var $89=$80;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+36)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0160=$93;label=25;break; } else { label=50;break; }
 case 24: 
 var $95=HEAP32[(($84)>>2)];
 var $_0160=$95;label=25;break;
 case 25: 
 var $_0160;
 var $96=($_0160|0)==-1;
 if($96){label=26;break;}else{label=28;break;}
 case 26: 
 HEAP32[(($56)>>2)]=0;
 label=27;break;
 case 27: 
 if($79){var $__a_2=$__a_0;label=62;break;}else{label=29;break;}
 case 28: 
 if($79){label=29;break;}else{var $__a_2=$__a_0;label=62;break;}
 case 29: 
 var $98=HEAP32[(($__a_end)>>2)];
 var $99=$98;
 var $100=$__a_0;
 var $101=((($99)-($100))|0);
 var $102=HEAP8[($1)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 var $106=HEAP32[(($58)>>2)];
 var $107=$103>>>1;
 var $108=($105?$107:$106);
 var $109=($101|0)==($108|0);
 if($109){label=30;break;}else{var $__a_1=$__a_0;label=55;break;}
 case 30: 
 if($105){label=32;break;}else{var $112=$106;label=31;break;}
 case 31: 
 var $112;
 var $113=$112<<1;
 var $118=$106;var $117=$112;var $116=$113;label=33;break;
 case 32: 
 var $115=$107<<1;
 var $118=$107;var $117=$107;var $116=$115;label=33;break;
 case 33: 
 var $116;
 var $117;
 var $118;
 var $119=($118>>>0)<($116>>>0);
 if($119){label=34;break;}else{label=35;break;}
 case 34: 
 var $121=((($116)-($118))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf,$121,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=50;break; }
 case 35: 
 var $123=$102&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=37;break;}else{label=36;break;}
 case 36: 
 var $126=HEAP32[(($59)>>2)];
 var $127=(($126+$116)|0);
 HEAP8[($127)]=0;
 HEAP32[(($58)>>2)]=$116;
 label=38;break;
 case 37: 
 var $129=(($47+1+$116)|0);
 HEAP8[($129)]=0;
 var $130=$117<<2;
 var $131=(($130)&255);
 HEAP8[($1)]=$131;
 label=38;break;
 case 38: 
 var $132=HEAP8[($1)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){var $140=10;var $139=$132;label=40;break;}else{label=39;break;}
 case 39: 
 var $136=HEAP32[(($57)>>2)];
 var $137=$136&-2;
 var $phitmp165=((($137)-(1))|0);
 var $138=(($136)&255);
 var $140=$phitmp165;var $139=$138;label=40;break;
 case 40: 
 var $139;
 var $140;
 var $141=($139&255);
 var $142=$141&1;
 var $143=($142|0)==0;
 var $144=HEAP32[(($58)>>2)];
 var $145=$141>>>1;
 var $146=($143?$145:$144);
 var $147=($146>>>0)<($140>>>0);
 if($147){label=41;break;}else{label=42;break;}
 case 41: 
 var $149=((($140)-($146))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($__buf,$149,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=50;break; }
 case 42: 
 var $151=$139&1;
 var $152=(($151<<24)>>24)==0;
 if($152){label=44;break;}else{label=43;break;}
 case 43: 
 var $154=HEAP32[(($59)>>2)];
 var $155=(($154+$140)|0);
 HEAP8[($155)]=0;
 HEAP32[(($58)>>2)]=$140;
 label=45;break;
 case 44: 
 var $157=(($47+1+$140)|0);
 HEAP8[($157)]=0;
 var $158=$140<<1;
 var $159=(($158)&255);
 HEAP8[($1)]=$159;
 label=45;break;
 case 45: 
 var $160=HEAP8[($1)];
 var $161=$160&1;
 var $162=(($161<<24)>>24)==0;
 if($162){var $165=$_pre_phi;label=47;break;}else{label=46;break;}
 case 46: 
 var $164=HEAP32[(($_pre_phi173)>>2)];
 var $165=$164;label=47;break;
 case 47: 
 var $165;
 var $166=(($165+$117)|0);
 HEAP32[(($__a_end)>>2)]=$166;
 var $__a_1=$165;label=55;break;
 case 48: 
 var $168$0 = ___cxa_find_matching_catch(-1, -1); var $168$1 = tempRet0;
 var $169=$168$0;
 var $170=$168$1;
 var $171=(($3+4)|0);
 var $172=$171;
 var $173=(tempValue=HEAP32[(($172)>>2)],HEAP32[(($172)>>2)]=tempValue+-1,tempValue);
 var $174=($173|0)==0;
 if($174){label=49;break;}else{var $_0158=$170;var $_0159=$169;label=92;break;}
 case 49: 
 var $176=$3;
 var $177=$3;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+8)|0);
 var $180=HEAP32[(($179)>>2)];
 FUNCTION_TABLE[$180]($176);
 var $_0158=$170;var $_0159=$169;label=92;break;
 case 50: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=52;break;
 case 51: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=52;break;
 case 52: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $181=$eh_lpad_body$0;
 var $182=$eh_lpad_body$1;
 var $183=HEAP8[($1)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){var $_0158=$182;var $_0159=$181;label=92;break;}else{label=53;break;}
 case 53: 
 var $187=(($__buf+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){var $_0158=$182;var $_0159=$181;label=92;break;}else{label=54;break;}
 case 54: 
 _free($188);
 var $_0158=$182;var $_0159=$181;label=92;break;
 case 55: 
 var $__a_1;
 var $191=(($78+12)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=(($78+16)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=($192|0)==($194|0);
 if($195){label=56;break;}else{label=57;break;}
 case 56: 
 var $197=$78;
 var $198=HEAP32[(($197)>>2)];
 var $199=(($198+36)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$200]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$201;label=58;break; } else { label=50;break; }
 case 57: 
 var $203=HEAP32[(($192)>>2)];
 var $_0=$203;label=58;break;
 case 58: 
 var $_0;
 var $205=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0,16,$__a_1,$__a_end,$__dc,0,$__grouping,$54,$__g_end,$30);
 var $206=($205|0)==0;
 if($206){label=59;break;}else{var $__a_2=$__a_1;label=62;break;}
 case 59: 
 var $208=HEAP32[(($191)>>2)];
 var $209=HEAP32[(($193)>>2)];
 var $210=($208|0)==($209|0);
 if($210){label=60;break;}else{label=61;break;}
 case 60: 
 var $212=$78;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+40)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$215]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $60=$78;label=15;break; } else { label=50;break; }
 case 61: 
 var $218=(($208+4)|0);
 HEAP32[(($191)>>2)]=$218;
 var $__a_0=$__a_1;var $60=$78;label=15;break;
 case 62: 
 var $__a_2;
 var $220=(($__a_2+3)|0);
 HEAP8[($220)]=0;
 var $221=HEAP8[(19864)];
 var $222=(($221<<24)>>24)==0;
 if($222){label=63;break;}else{label=67;break;}
 case 63: 
 var $224=___cxa_guard_acquire(19864);
 var $225=($224|0)==0;
 if($225){label=67;break;}else{label=64;break;}
 case 64: 
 var $227=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=66;break; }
 case 65: 
 HEAP32[((17856)>>2)]=$227;
 label=67;break;
 case 66: 
 var $230$0 = ___cxa_find_matching_catch(-1, -1); var $230$1 = tempRet0;
 var $eh_lpad_body$1=$230$1;var $eh_lpad_body$0=$230$0;label=52;break;
 case 67: 
 var $232=HEAP32[((17856)>>2)];
 var $233=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$232,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=68;break; } else { label=51;break; }
 case 68: 
 var $235=($233|0)==1;
 if($235){label=70;break;}else{label=69;break;}
 case 69: 
 HEAP32[(($__err)>>2)]=4;
 label=70;break;
 case 70: 
 var $238=HEAP32[(($55)>>2)];
 var $239=($238|0)==0;
 if($239){var $256=0;label=76;break;}else{label=71;break;}
 case 71: 
 var $241=(($238+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($238+16)|0);
 var $244=HEAP32[(($243)>>2)];
 var $245=($242|0)==($244|0);
 if($245){label=72;break;}else{label=73;break;}
 case 72: 
 var $247=$238;
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+36)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$250]($238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0163=$251;label=74;break; } else { label=51;break; }
 case 73: 
 var $253=HEAP32[(($242)>>2)];
 var $_0163=$253;label=74;break;
 case 74: 
 var $_0163;
 var $254=($_0163|0)==-1;
 if($254){label=75;break;}else{var $256=$238;label=76;break;}
 case 75: 
 HEAP32[(($55)>>2)]=0;
 var $256=0;label=76;break;
 case 76: 
 var $256;
 var $257=($256|0)==0;
 var $258=HEAP32[(($56)>>2)];
 var $259=($258|0)==0;
 if($259){label=82;break;}else{label=77;break;}
 case 77: 
 var $261=(($258+12)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=(($258+16)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=($262|0)==($264|0);
 if($265){label=78;break;}else{label=79;break;}
 case 78: 
 var $267=$258;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$270]($258) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0162=$271;label=80;break; } else { label=51;break; }
 case 79: 
 var $273=HEAP32[(($262)>>2)];
 var $_0162=$273;label=80;break;
 case 80: 
 var $_0162;
 var $274=($_0162|0)==-1;
 if($274){label=81;break;}else{label=83;break;}
 case 81: 
 HEAP32[(($56)>>2)]=0;
 label=82;break;
 case 82: 
 if($257){label=84;break;}else{label=85;break;}
 case 83: 
 if($257){label=85;break;}else{label=84;break;}
 case 84: 
 var $276=HEAP32[(($__err)>>2)];
 var $277=$276|2;
 HEAP32[(($__err)>>2)]=$277;
 label=85;break;
 case 85: 
 var $279=(($agg_result)|0);
 HEAP32[(($279)>>2)]=$256;
 var $280=HEAP8[($1)];
 var $281=$280&1;
 var $282=(($281<<24)>>24)==0;
 if($282){label=88;break;}else{label=86;break;}
 case 86: 
 var $284=HEAP32[(($59)>>2)];
 var $285=($284|0)==0;
 if($285){label=88;break;}else{label=87;break;}
 case 87: 
 _free($284);
 label=88;break;
 case 88: 
 var $287=HEAP8[($__grouping170)];
 var $288=$287&1;
 var $289=(($288<<24)>>24)==0;
 if($289){label=91;break;}else{label=89;break;}
 case 89: 
 var $291=(($__grouping+8)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=($292|0)==0;
 if($293){label=91;break;}else{label=90;break;}
 case 90: 
 _free($292);
 label=91;break;
 case 91: 
 STACKTOP=sp;return;
 case 92: 
 var $_0159;
 var $_0158;
 var $295=HEAP8[($__grouping170)];
 var $296=$295&1;
 var $297=(($296<<24)>>24)==0;
 if($297){label=95;break;}else{label=93;break;}
 case 93: 
 var $299=(($__grouping+8)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==0;
 if($301){label=95;break;}else{label=94;break;}
 case 94: 
 _free($300);
 label=95;break;
 case 95: 
 var $303$0=$_0159;
 var $303$1=0;
 var $304$0=$303$0;
 var $304$1=$_0158;
 ___resumeException($304$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($__grouping+4)|0);
 var $22=HEAP32[(($21)>>2)];
 var $25=$22;label=8;break;
 case 7: 
 var $24=$17>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_049=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_049=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_0=$__atoms;label=12;break;
 case 12: 
 var $_0;
 var $40=($_0|0)==($38|0);
 if($40){var $_0_lcssa=$38;label=14;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP32[(($_0)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_0+4)|0);
 if($43){var $_0_lcssa=$_0;label=14;break;}else{var $_0=$44;label=12;break;}
 case 14: 
 var $_0_lcssa;
 var $45=$_0_lcssa;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_049=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_049=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_049=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_049=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_049=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((15512+$48)|0);
 var $67=HEAP8[($66)];
 var $68=HEAP32[(($__a_end)>>2)];
 var $69=(($68+1)|0);
 HEAP32[(($__a_end)>>2)]=$69;
 HEAP8[($68)]=$67;
 var $_049=0;label=23;break;
 case 22: 
 var $71=((15512+$48)|0);
 var $72=HEAP8[($71)];
 var $73=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$73;
 HEAP8[($1)]=$72;
 var $74=HEAP32[(($__dc)>>2)];
 var $75=((($74)+(1))|0);
 HEAP32[(($__dc)>>2)]=$75;
 var $_049=0;label=23;break;
 case 23: 
 var $_049;
 return $_049;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i15=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19288)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=19;break; }
 case 3: 
 var $10=HEAP32[((19292)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=$24;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+32)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28,15512,15538,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=19;break; }
 case 8: 
 var $34=$__p_i_i_i15;
 var $35=HEAP32[((18904)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i16=(($__p_i_i_i15)|0);
 HEAP32[(($_sroa_016_0__idx_i_i16)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i17=(($__p_i_i_i15+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i17)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i18=(($__p_i_i_i15+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=19;break; }
 case 10: 
 var $38=HEAP32[((18908)>>2)];
 var $39=((($38)-(1))|0);
 var $40=HEAP32[(($13)>>2)];
 var $41=HEAP32[(($16)>>2)];
 var $42=$40;
 var $43=$41;
 var $44=((($42)-($43))|0);
 var $45=$44>>2;
 var $46=($45>>>0)>($39>>>0);
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=(($41+($39<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $50=___cxa_allocate_exception(4);
 var $51=$50;
 HEAP32[(($51)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($50,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=19;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $52=$48;
 var $53=$48;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$57;
 var $58=$48;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+20)|0);
 var $61=HEAP32[(($60)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($agg_result,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=19;break; }
 case 16: 
 var $62=(($2+4)|0);
 var $63=$62;
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=17;break;}else{label=18;break;}
 case 17: 
 var $67=$2;
 var $68=$2;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
 case 19: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=(($2+4)|0);
 var $75=$74;
 var $76=(tempValue=HEAP32[(($75)>>2)],HEAP32[(($75)>>2)]=tempValue+-1,tempValue);
 var $77=($76|0)==0;
 if($77){label=20;break;}else{label=21;break;}
 case 20: 
 var $79=$2;
 var $80=$2;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 FUNCTION_TABLE[$83]($79);
 label=21;break;
 case 21: 
 ___resumeException($73$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i18=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19288)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $10=HEAP32[((19292)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=20;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=$24;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+32)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28,15512,15544,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=20;break; }
 case 8: 
 var $34=$__p_i_i_i18;
 var $35=HEAP32[((18904)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i19=(($__p_i_i_i18)|0);
 HEAP32[(($_sroa_016_0__idx_i_i19)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i20=(($__p_i_i_i18+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i20)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i21=(($__p_i_i_i18+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i21)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=20;break; }
 case 10: 
 var $38=HEAP32[((18908)>>2)];
 var $39=((($38)-(1))|0);
 var $40=HEAP32[(($13)>>2)];
 var $41=HEAP32[(($16)>>2)];
 var $42=$40;
 var $43=$41;
 var $44=((($42)-($43))|0);
 var $45=$44>>2;
 var $46=($45>>>0)>($39>>>0);
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=(($41+($39<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $50=___cxa_allocate_exception(4);
 var $51=$50;
 HEAP32[(($51)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($50,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=20;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $52=$48;
 var $53=$48;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+12)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$57;
 var $58=HEAP32[(($53)>>2)];
 var $59=(($58+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$61;
 var $62=$48;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($agg_result,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $66=(($2+4)|0);
 var $67=$66;
 var $68=(tempValue=HEAP32[(($67)>>2)],HEAP32[(($67)>>2)]=tempValue+-1,tempValue);
 var $69=($68|0)==0;
 if($69){label=18;break;}else{label=19;break;}
 case 18: 
 var $71=$2;
 var $72=$2;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+8)|0);
 var $75=HEAP32[(($74)>>2)];
 FUNCTION_TABLE[$75]($71);
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
 case 20: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=(($2+4)|0);
 var $79=$78;
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{label=22;break;}
 case 21: 
 var $83=$2;
 var $84=$2;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=22;break;
 case 22: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_082=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_082=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_082=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_082=0;label=36;break;
 case 9: 
 var $31=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_082=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_082=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_082=0;label=36;break;
 case 17: 
 var $59=(($__atoms+32)|0);
 var $_0=$__atoms;label=18;break;
 case 18: 
 var $_0;
 var $61=($_0|0)==($59|0);
 if($61){var $_0_lcssa=$59;label=20;break;}else{label=19;break;}
 case 19: 
 var $63=HEAP8[($_0)];
 var $64=(($63<<24)>>24)==(($__ct<<24)>>24);
 var $65=(($_0+1)|0);
 if($64){var $_0_lcssa=$_0;label=20;break;}else{var $_0=$65;label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $66=$_0_lcssa;
 var $67=$__atoms;
 var $68=((($66)-($67))|0);
 var $69=($68|0)>31;
 if($69){var $_082=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $71=((15512+$68)|0);
 var $72=HEAP8[($71)];
 if(($68|0)==25|($68|0)==24){ label=22;break;}else if(($68|0)==22|($68|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $74=HEAP32[(($__a_end)>>2)];
 var $75=($74|0)==($__a|0);
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=((($74)-(1))|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=$79&95;
 var $81=HEAP8[($__exp)];
 var $82=($81&255);
 var $83=$82&127;
 var $84=($80|0)==($83|0);
 if($84){label=24;break;}else{var $_082=-1;label=36;break;}
 case 24: 
 var $86=(($74+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($74)]=$72;
 var $_082=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $87=HEAP32[(($__a_end)>>2)];
 var $88=(($87+1)|0);
 HEAP32[(($__a_end)>>2)]=$88;
 HEAP8[($87)]=$72;
 var $_082=0;label=36;break;
 case 26: 
 var $90=($72&255);
 var $91=$90&95;
 var $92=HEAP8[($__exp)];
 var $93=(($92<<24)>>24);
 var $94=($91|0)==($93|0);
 if($94){label=27;break;}else{label=34;break;}
 case 27: 
 var $96=$92|-128;
 HEAP8[($__exp)]=$96;
 var $97=HEAP8[($__in_units)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $101=$__grouping;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 var $107=(($__grouping+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $111=$108;label=31;break;
 case 30: 
 var $110=$103>>>1;
 var $111=$110;label=31;break;
 case 31: 
 var $111;
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=32;break;}
 case 32: 
 var $114=HEAP32[(($__g_end)>>2)];
 var $115=$114;
 var $116=$__g;
 var $117=((($115)-($116))|0);
 var $118=($117|0)<160;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 var $120=HEAP32[(($__dc)>>2)];
 var $121=(($114+4)|0);
 HEAP32[(($__g_end)>>2)]=$121;
 HEAP32[(($114)>>2)]=$120;
 label=34;break;
 case 34: 
 var $123=HEAP32[(($__a_end)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 HEAP8[($123)]=$72;
 var $125=($68|0)>21;
 if($125){var $_082=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $127=HEAP32[(($__dc)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($__dc)>>2)]=$128;
 var $_082=0;label=36;break;
 case 36: 
 var $_082;
 return $_082;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i15=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19280)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=19;break; }
 case 3: 
 var $10=HEAP32[((19284)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=$24;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+48)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28,15512,15538,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=19;break; }
 case 8: 
 var $34=$__p_i_i_i15;
 var $35=HEAP32[((18896)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i16=(($__p_i_i_i15)|0);
 HEAP32[(($_sroa_016_0__idx_i_i16)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i17=(($__p_i_i_i15+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i17)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i18=(($__p_i_i_i15+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=19;break; }
 case 10: 
 var $38=HEAP32[((18900)>>2)];
 var $39=((($38)-(1))|0);
 var $40=HEAP32[(($13)>>2)];
 var $41=HEAP32[(($16)>>2)];
 var $42=$40;
 var $43=$41;
 var $44=((($42)-($43))|0);
 var $45=$44>>2;
 var $46=($45>>>0)>($39>>>0);
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=(($41+($39<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $50=___cxa_allocate_exception(4);
 var $51=$50;
 HEAP32[(($51)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($50,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=19;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $52=$48;
 var $53=$48;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+16)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$57;
 var $58=$48;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+20)|0);
 var $61=HEAP32[(($60)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($agg_result,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=19;break; }
 case 16: 
 var $62=(($2+4)|0);
 var $63=$62;
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=17;break;}else{label=18;break;}
 case 17: 
 var $67=$2;
 var $68=$2;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
 case 19: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $74=(($2+4)|0);
 var $75=$74;
 var $76=(tempValue=HEAP32[(($75)>>2)],HEAP32[(($75)>>2)]=tempValue+-1,tempValue);
 var $77=($76|0)==0;
 if($77){label=20;break;}else{label=21;break;}
 case 20: 
 var $79=$2;
 var $80=$2;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 FUNCTION_TABLE[$83]($79);
 label=21;break;
 case 21: 
 ___resumeException($73$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i18=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19280)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $10=HEAP32[((19284)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=20;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=$24;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+48)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28,15512,15544,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=20;break; }
 case 8: 
 var $34=$__p_i_i_i18;
 var $35=HEAP32[((18896)>>2)];
 var $36=($35|0)==-1;
 if($36){label=10;break;}else{label=9;break;}
 case 9: 
 var $_sroa_016_0__idx_i_i19=(($__p_i_i_i18)|0);
 HEAP32[(($_sroa_016_0__idx_i_i19)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i20=(($__p_i_i_i18+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i20)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i21=(($__p_i_i_i18+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i21)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=20;break; }
 case 10: 
 var $38=HEAP32[((18900)>>2)];
 var $39=((($38)-(1))|0);
 var $40=HEAP32[(($13)>>2)];
 var $41=HEAP32[(($16)>>2)];
 var $42=$40;
 var $43=$41;
 var $44=((($42)-($43))|0);
 var $45=$44>>2;
 var $46=($45>>>0)>($39>>>0);
 if($46){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=(($41+($39<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=14;break;}
 case 12: 
 var $50=___cxa_allocate_exception(4);
 var $51=$50;
 HEAP32[(($51)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($50,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=20;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $52=$48;
 var $53=$48;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+12)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$57;
 var $58=HEAP32[(($53)>>2)];
 var $59=(($58+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$60]($52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$61;
 var $62=$48;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($agg_result,$52) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $66=(($2+4)|0);
 var $67=$66;
 var $68=(tempValue=HEAP32[(($67)>>2)],HEAP32[(($67)>>2)]=tempValue+-1,tempValue);
 var $69=($68|0)==0;
 if($69){label=18;break;}else{label=19;break;}
 case 18: 
 var $71=$2;
 var $72=$2;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+8)|0);
 var $75=HEAP32[(($74)>>2)];
 FUNCTION_TABLE[$75]($71);
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
 case 20: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=(($2+4)|0);
 var $79=$78;
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=21;break;}else{label=22;break;}
 case 21: 
 var $83=$2;
 var $84=$2;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=22;break;
 case 22: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $_082=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $7=HEAP32[(($__a_end)>>2)];
 var $8=(($7+1)|0);
 HEAP32[(($__a_end)>>2)]=$8;
 HEAP8[($7)]=46;
 var $9=$__grouping;
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=$11&1;
 var $13=($12|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($__grouping+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $19=$16;label=6;break;
 case 5: 
 var $18=$11>>>1;
 var $19=$18;label=6;break;
 case 6: 
 var $19;
 var $20=($19|0)==0;
 if($20){var $_082=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $22=HEAP32[(($__g_end)>>2)];
 var $23=$22;
 var $24=$__g;
 var $25=((($23)-($24))|0);
 var $26=($25|0)<160;
 if($26){label=8;break;}else{var $_082=0;label=36;break;}
 case 8: 
 var $28=HEAP32[(($__dc)>>2)];
 var $29=(($22+4)|0);
 HEAP32[(($__g_end)>>2)]=$29;
 HEAP32[(($22)>>2)]=$28;
 var $_082=0;label=36;break;
 case 9: 
 var $31=($__ct|0)==($__thousands_sep|0);
 if($31){label=10;break;}else{label=17;break;}
 case 10: 
 var $33=$__grouping;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=12;break;}else{label=11;break;}
 case 11: 
 var $39=(($__grouping+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=13;break;
 case 12: 
 var $42=$35>>>1;
 var $43=$42;label=13;break;
 case 13: 
 var $43;
 var $44=($43|0)==0;
 if($44){label=17;break;}else{label=14;break;}
 case 14: 
 var $46=HEAP8[($__in_units)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $_082=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $50=HEAP32[(($__g_end)>>2)];
 var $51=$50;
 var $52=$__g;
 var $53=((($51)-($52))|0);
 var $54=($53|0)<160;
 if($54){label=16;break;}else{var $_082=0;label=36;break;}
 case 16: 
 var $56=HEAP32[(($__dc)>>2)];
 var $57=(($50+4)|0);
 HEAP32[(($__g_end)>>2)]=$57;
 HEAP32[(($50)>>2)]=$56;
 HEAP32[(($__dc)>>2)]=0;
 var $_082=0;label=36;break;
 case 17: 
 var $59=(($__atoms+128)|0);
 var $_0=$__atoms;label=18;break;
 case 18: 
 var $_0;
 var $61=($_0|0)==($59|0);
 if($61){var $_0_lcssa=$59;label=20;break;}else{label=19;break;}
 case 19: 
 var $63=HEAP32[(($_0)>>2)];
 var $64=($63|0)==($__ct|0);
 var $65=(($_0+4)|0);
 if($64){var $_0_lcssa=$_0;label=20;break;}else{var $_0=$65;label=18;break;}
 case 20: 
 var $_0_lcssa;
 var $66=$_0_lcssa;
 var $67=$__atoms;
 var $68=((($66)-($67))|0);
 var $69=$68>>2;
 var $70=($68|0)>124;
 if($70){var $_082=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $72=((15512+$69)|0);
 var $73=HEAP8[($72)];
 if(($69|0)==25|($69|0)==24){ label=22;break;}else if(($69|0)==22|($69|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $75=HEAP32[(($__a_end)>>2)];
 var $76=($75|0)==($__a|0);
 if($76){label=24;break;}else{label=23;break;}
 case 23: 
 var $78=((($75)-(1))|0);
 var $79=HEAP8[($78)];
 var $80=($79&255);
 var $81=$80&95;
 var $82=HEAP8[($__exp)];
 var $83=($82&255);
 var $84=$83&127;
 var $85=($81|0)==($84|0);
 if($85){label=24;break;}else{var $_082=-1;label=36;break;}
 case 24: 
 var $87=(($75+1)|0);
 HEAP32[(($__a_end)>>2)]=$87;
 HEAP8[($75)]=$73;
 var $_082=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $90=($73&255);
 var $91=$90&95;
 var $92=HEAP8[($__exp)];
 var $93=(($92<<24)>>24);
 var $94=($91|0)==($93|0);
 if($94){label=27;break;}else{label=34;break;}
 case 27: 
 var $96=$92|-128;
 HEAP8[($__exp)]=$96;
 var $97=HEAP8[($__in_units)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $101=$__grouping;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$103&1;
 var $105=($104|0)==0;
 if($105){label=30;break;}else{label=29;break;}
 case 29: 
 var $107=(($__grouping+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $111=$108;label=31;break;
 case 30: 
 var $110=$103>>>1;
 var $111=$110;label=31;break;
 case 31: 
 var $111;
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=32;break;}
 case 32: 
 var $114=HEAP32[(($__g_end)>>2)];
 var $115=$114;
 var $116=$__g;
 var $117=((($115)-($116))|0);
 var $118=($117|0)<160;
 if($118){label=33;break;}else{label=34;break;}
 case 33: 
 var $120=HEAP32[(($__dc)>>2)];
 var $121=(($114+4)|0);
 HEAP32[(($__g_end)>>2)]=$121;
 HEAP32[(($114)>>2)]=$120;
 label=34;break;
 case 34: 
 var $123=HEAP32[(($__a_end)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__a_end)>>2)]=$124;
 HEAP8[($123)]=$73;
 var $125=($68|0)>84;
 if($125){var $_082=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $127=HEAP32[(($__dc)>>2)];
 var $128=((($127)+(1))|0);
 HEAP32[(($__dc)>>2)]=$128;
 var $_082=0;label=36;break;
 case 36: 
 var $_082;
 return $_082;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $__nm=(sp)+(24);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=36;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=$__p_i_i_i;
 var $22=HEAP32[((18904)>>2)];
 var $23=($22|0)==-1;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=28;break; }
 case 5: 
 var $25=HEAP32[((18908)>>2)];
 var $26=((($25)-(1))|0);
 var $27=(($17+12)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($17+8)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$29;
 var $34=$32;
 var $35=((($33)-($34))|0);
 var $36=$35>>2;
 var $37=($36>>>0)>($26>>>0);
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 var $38=(($32+($26<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){label=7;break;}else{label=9;break;}
 case 7: 
 var $41=___cxa_allocate_exception(4);
 var $42=$41;
 HEAP32[(($42)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($41,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=28;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $43=$39;
 var $44=(($17+4)|0);
 var $45=$44;
 var $46=(tempValue=HEAP32[(($45)>>2)],HEAP32[(($45)>>2)]=tempValue+-1,tempValue);
 var $47=($46|0)==0;
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=$17;
 var $50=$17;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($49);
 label=11;break;
 case 11: 
 var $54=$39;
 var $55=HEAP32[(($54)>>2)];
 if($__v){label=12;break;}else{label=13;break;}
 case 12: 
 var $57=(($55+24)|0);
 var $58=HEAP32[(($57)>>2)];
 FUNCTION_TABLE[$58]($__nm,$43);
 label=14;break;
 case 13: 
 var $60=(($55+28)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$61]($__nm,$43);
 label=14;break;
 case 14: 
 var $63=$__nm;
 var $64=$__nm;
 var $65=HEAP8[($64)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=16;break;}else{label=15;break;}
 case 15: 
 var $69=(($__nm+8)|0);
 var $70=HEAP32[(($69)>>2)];
 var $_pre83=(($63+1)|0);
 var $__i_sroa_0_0_ph=$70;var $_pre_phi=$_pre83;var $_pre_phi85=$69;label=17;break;
 case 16: 
 var $72=(($63+1)|0);
 var $_pre84=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$72;var $_pre_phi=$72;var $_pre_phi85=$_pre84;label=17;break;
 case 17: 
 var $_pre_phi85;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $73=(($__s)|0);
 var $74=(($__nm+4)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $75=$65;label=18;break;
 case 18: 
 var $75;
 var $__i_sroa_0_0;
 var $76=$75&1;
 var $77=(($76<<24)>>24)==0;
 if($77){var $80=$_pre_phi;label=20;break;}else{label=19;break;}
 case 19: 
 var $79=HEAP32[(($_pre_phi85)>>2)];
 var $80=$79;label=20;break;
 case 20: 
 var $80;
 var $81=($75&255);
 var $82=$81&1;
 var $83=($82|0)==0;
 var $84=HEAP32[(($74)>>2)];
 var $85=$81>>>1;
 var $86=($83?$85:$84);
 var $87=(($80+$86)|0);
 var $88=($__i_sroa_0_0|0)==($87|0);
 if($88){label=33;break;}else{label=21;break;}
 case 21: 
 var $90=HEAP8[($__i_sroa_0_0)];
 var $91=HEAP32[(($73)>>2)];
 var $92=($91|0)==0;
 if($92){label=27;break;}else{label=22;break;}
 case 22: 
 var $94=(($91+24)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($91+28)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=23;break;}else{label=24;break;}
 case 23: 
 var $100=$91;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+52)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($90&255);
 var $105=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$103]($91,$104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=30;break; }
 case 24: 
 var $106=(($95+1)|0);
 HEAP32[(($94)>>2)]=$106;
 HEAP8[($95)]=$90;
 label=27;break;
 case 25: 
 var $107=($105|0)==-1;
 if($107){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP32[(($73)>>2)]=0;
 label=27;break;
 case 27: 
 var $109=(($__i_sroa_0_0+1)|0);
 var $_pre=HEAP8[($64)];
 var $__i_sroa_0_0=$109;var $75=$_pre;label=18;break;
 case 28: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 var $112=$111$0;
 var $113=$111$1;
 var $114=(($17+4)|0);
 var $115=$114;
 var $116=(tempValue=HEAP32[(($115)>>2)],HEAP32[(($115)>>2)]=tempValue+-1,tempValue);
 var $117=($116|0)==0;
 if($117){label=29;break;}else{var $_078=$113;var $_079=$112;label=37;break;}
 case 29: 
 var $119=$17;
 var $120=$17;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+8)|0);
 var $123=HEAP32[(($122)>>2)];
 FUNCTION_TABLE[$123]($119);
 var $_078=$113;var $_079=$112;label=37;break;
 case 30: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $128=HEAP8[($64)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $_078=$127;var $_079=$126;label=37;break;}else{label=31;break;}
 case 31: 
 var $132=(($__nm+8)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($133|0)==0;
 if($134){var $_078=$127;var $_079=$126;label=37;break;}else{label=32;break;}
 case 32: 
 _free($133);
 var $_078=$127;var $_079=$126;label=37;break;
 case 33: 
 var $137=HEAP32[(($73)>>2)];
 var $138=(($agg_result)|0);
 HEAP32[(($138)>>2)]=$137;
 if($77){label=36;break;}else{label=34;break;}
 case 34: 
 var $140=(($__nm+8)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($141|0)==0;
 if($142){label=36;break;}else{label=35;break;}
 case 35: 
 _free($141);
 label=36;break;
 case 36: 
 STACKTOP=sp;return;
 case 37: 
 var $_079;
 var $_078;
 var $144$0=$_079;
 var $144$1=0;
 var $145$0=$144$0;
 var $145$1=$_078;
 ___resumeException($145$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5496)];HEAP8[((($2)+(1))|0)]=HEAP8[(5497)];HEAP8[((($2)+(2))|0)]=HEAP8[(5498)];HEAP8[((($2)+(3))|0)]=HEAP8[(5499)];HEAP8[((($2)+(4))|0)]=HEAP8[(5500)];HEAP8[((($2)+(5))|0)]=HEAP8[(5501)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19864)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19864);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$30;
 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17856)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i11=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i11=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i11=$50;label=23;break;
 case 22: 
 var $_0_i11=$23;label=23;break;
 case 23: 
 var $_0_i11;
 var $52=(($__o)|0);
 var $53=(($__iob+28)|0);
 var $54=(($1)|0);
 var $55=HEAP32[(($53)>>2)];
 var $56=$55;
 HEAP32[(($54)>>2)]=$56;
 var $57=(($55+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23,$_0_i11,$36,$52,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $61=HEAP32[(($54)>>2)];
 var $62=(($61+4)|0);
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=26;break;}
 case 25: 
 var $66=(($61)|0);
 var $67=$61;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=26;break;
 case 26: 
 var $71=(($__s)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=HEAP32[(($__op)>>2)];
 var $74=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$72,$52,$73,$74,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($54)>>2)];
 var $78=(($77+4)|0);
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=(($77)|0);
 var $83=$77;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 label=29;break;
 case 29: 
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);
 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i158=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((19288)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$3);
 label=3;break;
 case 3: 
 var $7=HEAP32[((19292)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 HEAP32[(($22)>>2)]=5880;
 ___cxa_throw($21,13520,(594));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i158;
 var $26=HEAP32[((18904)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i159=(($__p_i_i_i158)|0);
 HEAP32[(($_sroa_016_0__idx_i_i159)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i160=(($__p_i_i_i158+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i160)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i161=(($__p_i_i_i158+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i161)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$25);
 label=8;break;
 case 8: 
 var $29=HEAP32[((18908)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 HEAP32[(($44)>>2)]=5880;
 ___cxa_throw($43,13520,(594));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 var $50=$__grouping;
 var $51=$__grouping;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($__grouping+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $61=$58;label=14;break;
 case 13: 
 var $60=$53>>>1;
 var $61=$60;label=14;break;
 case 14: 
 var $61;
 var $62=($61|0)==0;
 if($62){label=15;break;}else{label=23;break;}
 case 15: 
 var $64=$19;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+32)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($23,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $69=$__ne;
 var $70=$__nb;
 var $71=((($69)-($70))|0);
 var $72=(($__ob+$71)|0);
 HEAP32[(($__oe)>>2)]=$72;
 label=45;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $74=HEAP8[($51)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=22;break;}else{label=20;break;}
 case 20: 
 var $78=(($__grouping+8)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){label=22;break;}else{label=21;break;}
 case 21: 
 _free($79);
 label=22;break;
 case 22: 
 ___resumeException($lpad_phi$0)
 case 23: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $83=HEAP8[($__nb)];
 if((($83<<24)>>24)==45|(($83<<24)>>24)==43){ label=24;break;}else{var $__nf_0=$__nb;label=26;break;}
 case 24: 
 var $85=$19;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+28)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($23,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $90=(($__nb+1)|0);
 var $91=HEAP32[(($__oe)>>2)];
 var $92=(($91+1)|0);
 HEAP32[(($__oe)>>2)]=$92;
 HEAP8[($91)]=$89;
 var $__nf_0=$90;label=26;break;
 case 26: 
 var $__nf_0;
 var $94=$__ne;
 var $95=$__nf_0;
 var $96=((($94)-($95))|0);
 var $97=($96|0)>1;
 if($97){label=27;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 27: 
 var $99=HEAP8[($__nf_0)];
 var $100=(($99<<24)>>24)==48;
 if($100){label=28;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 28: 
 var $102=(($__nf_0+1)|0);
 var $103=HEAP8[($102)];
 if((($103<<24)>>24)==120|(($103<<24)>>24)==88){ label=29;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 29: 
 var $105=$19;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+28)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=18;break; }
 case 30: 
 var $110=HEAP32[(($__oe)>>2)];
 var $111=(($110+1)|0);
 HEAP32[(($__oe)>>2)]=$111;
 HEAP8[($110)]=$109;
 var $112=HEAP8[($102)];
 var $113=HEAP32[(($105)>>2)];
 var $114=(($113+28)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($23,$112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=18;break; }
 case 31: 
 var $117=(($__nf_0+2)|0);
 var $118=HEAP32[(($__oe)>>2)];
 var $119=(($118+1)|0);
 HEAP32[(($__oe)>>2)]=$119;
 HEAP8[($118)]=$116;
 var $__nf_1=$117;label=32;break;
 case 32: 
 var $__nf_1;
 var $121=($__nf_1|0)==($__ne|0);
 if($121){label=35;break;}else{label=33;break;}
 case 33: 
 var $122=((($__ne)-(1))|0);
 var $123=($__nf_1>>>0)<($122>>>0);
 if($123){var $_0172=$__nf_1;var $124=$122;label=34;break;}else{label=35;break;}
 case 34: 
 var $124;
 var $_0172;
 var $125=HEAP8[($_0172)];
 var $126=HEAP8[($124)];
 HEAP8[($_0172)]=$126;
 HEAP8[($124)]=$125;
 var $127=(($_0172+1)|0);
 var $128=((($124)-(1))|0);
 var $129=($127>>>0)<($128>>>0);
 if($129){var $_0172=$127;var $124=$128;label=34;break;}else{label=35;break;}
 case 35: 
 var $130=$41;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+16)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$133]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=18;break; }
 case 36: 
 var $135=($__nf_1>>>0)<($__ne>>>0);
 if($135){label=37;break;}else{label=42;break;}
 case 37: 
 var $136=(($50+1)|0);
 var $137=$19;
 var $138=(($__grouping+4)|0);
 var $139=(($__grouping+8)|0);
 var $__dc_0167=0;var $__dg_0168=0;var $__p_0169=$__nf_1;label=38;break;
 case 38: 
 var $__p_0169;
 var $__dg_0168;
 var $__dc_0167;
 var $140=HEAP8[($51)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 var $143=HEAP32[(($139)>>2)];
 var $_=($142?$136:$143);
 var $144=(($_+$__dg_0168)|0);
 var $145=HEAP8[($144)];
 var $146=(($145<<24)>>24)!=0;
 var $147=(($145<<24)>>24);
 var $148=($__dc_0167|0)==($147|0);
 var $or_cond=$146&$148;
 if($or_cond){label=39;break;}else{var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=40;break;}
 case 39: 
 var $149=HEAP32[(($__oe)>>2)];
 var $150=(($149+1)|0);
 HEAP32[(($__oe)>>2)]=$150;
 HEAP8[($149)]=$134;
 var $151=HEAP8[($51)];
 var $152=($151&255);
 var $153=$152&1;
 var $154=($153|0)==0;
 var $155=HEAP32[(($138)>>2)];
 var $156=$152>>>1;
 var $157=($154?$156:$155);
 var $158=((($157)-(1))|0);
 var $159=($__dg_0168>>>0)<($158>>>0);
 var $160=($159&1);
 var $___dg_0=((($160)+($__dg_0168))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=40;break;
 case 40: 
 var $__dc_1;
 var $__dg_1;
 var $162=HEAP8[($__p_0169)];
 var $163=HEAP32[(($137)>>2)];
 var $164=(($163+28)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($23,$162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=17;break; }
 case 41: 
 var $167=HEAP32[(($__oe)>>2)];
 var $168=(($167+1)|0);
 HEAP32[(($__oe)>>2)]=$168;
 HEAP8[($167)]=$166;
 var $169=((($__dc_1)+(1))|0);
 var $170=(($__p_0169+1)|0);
 var $171=($170>>>0)<($__ne>>>0);
 if($171){var $__dc_0167=$169;var $__dg_0168=$__dg_1;var $__p_0169=$170;label=38;break;}else{label=42;break;}
 case 42: 
 var $172=$__nf_1;
 var $173=$__nb;
 var $174=((($172)-($173))|0);
 var $175=(($__ob+$174)|0);
 var $176=HEAP32[(($__oe)>>2)];
 var $177=($175|0)==($176|0);
 if($177){label=45;break;}else{label=43;break;}
 case 43: 
 var $178=((($176)-(1))|0);
 var $179=($175>>>0)<($178>>>0);
 if($179){var $_0156166=$175;var $180=$178;label=44;break;}else{label=45;break;}
 case 44: 
 var $180;
 var $_0156166;
 var $181=HEAP8[($_0156166)];
 var $182=HEAP8[($180)];
 HEAP8[($_0156166)]=$182;
 HEAP8[($180)]=$181;
 var $183=(($_0156166+1)|0);
 var $184=((($180)-(1))|0);
 var $185=($183>>>0)<($184>>>0);
 if($185){var $_0156166=$183;var $180=$184;label=44;break;}else{label=45;break;}
 case 45: 
 var $186=($__np|0)==($__ne|0);
 if($186){label=46;break;}else{label=47;break;}
 case 46: 
 var $188=HEAP32[(($__oe)>>2)];
 var $storemerge=$188;label=48;break;
 case 47: 
 var $190=$__np;
 var $191=$__nb;
 var $192=((($190)-($191))|0);
 var $193=(($__ob+$192)|0);
 var $storemerge=$193;label=48;break;
 case 48: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $195=HEAP8[($51)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=51;break;}else{label=49;break;}
 case 49: 
 var $199=(($__grouping+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($200|0)==0;
 if($201){label=51;break;}else{label=50;break;}
 case 50: 
 _free($200);
 label=51;break;
 case 51: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $15=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19864)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19864);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17856)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,22,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5496)];HEAP8[((($2)+(1))|0)]=HEAP8[(5497)];HEAP8[((($2)+(2))|0)]=HEAP8[(5498)];HEAP8[((($2)+(3))|0)]=HEAP8[(5499)];HEAP8[((($2)+(4))|0)]=HEAP8[(5500)];HEAP8[((($2)+(5))|0)]=HEAP8[(5501)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19864)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19864);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$30;
 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17856)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i11=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i11=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i11=$50;label=23;break;
 case 22: 
 var $_0_i11=$23;label=23;break;
 case 23: 
 var $_0_i11;
 var $52=(($__o)|0);
 var $53=(($__iob+28)|0);
 var $54=(($1)|0);
 var $55=HEAP32[(($53)>>2)];
 var $56=$55;
 HEAP32[(($54)>>2)]=$56;
 var $57=(($55+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23,$_0_i11,$36,$52,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $61=HEAP32[(($54)>>2)];
 var $62=(($61+4)|0);
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=26;break;}
 case 25: 
 var $66=(($61)|0);
 var $67=$61;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=26;break;
 case 26: 
 var $71=(($__s)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=HEAP32[(($__op)>>2)];
 var $74=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$72,$52,$73,$74,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($54)>>2)];
 var $78=(($77+4)|0);
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=(($77)|0);
 var $83=$77;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 label=29;break;
 case 29: 
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $15=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19864)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19864);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17856)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,23,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($21)]=70;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 9: 
 HEAP8[($21)]=102;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($21)]=69;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 12: 
 HEAP8[($21)]=101;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 13: 
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($21)]=71;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 18: 
 HEAP8[($21)]=103;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i144;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19864)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19864);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17856)>>2)]=$49;
 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17856)>>2)];
 if($specify_precision_0_off0_ph_i144){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre151=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $103=$_pre151;label=47;break;
 case 29: 
 var $63=HEAP8[(19864)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i144){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19864);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17856)>>2)]=$70;
 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17856)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1121149=$82;var $_1150=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19864);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17856)>>2)]=$88;
 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17856)>>2)];
 var $94=(($__iob+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$95,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$96;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $98=HEAP32[(($__nb)>>2)];
 var $99=($98|0)==0;
 if($99){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$98;var $103=$98;label=47;break;}
 case 45: 
 var $101=___cxa_allocate_exception(4);
 var $102=$101;
 HEAP32[(($102)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $103;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $104=(($103+$__nc_2)|0);
 var $105=HEAP32[(($5)>>2)];
 var $106=$105&176;
 if(($106|0)==16){ label=48;break;}else if(($106|0)==32){ var $_0_i143=$104;label=54;break;}else{label=53;break;}
 case 48: 
 var $108=HEAP8[($103)];
 if((($108<<24)>>24)==45|(($108<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $110=(($103+1)|0);
 var $_0_i143=$110;label=54;break;
 case 50: 
 var $112=($__nc_2|0)>1;
 var $113=(($108<<24)>>24)==48;
 var $or_cond_i=$112&$113;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $115=(($103+1)|0);
 var $116=HEAP8[($115)];
 if((($116<<24)>>24)==120|(($116<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $118=(($103+2)|0);
 var $_0_i143=$118;label=54;break;
 case 53: 
 var $_0_i143=$103;label=54;break;
 case 54: 
 var $_0_i143;
 var $120=(($__o)|0);
 var $121=($103|0)==($42|0);
 if($121){var $__ob_0=$120;var $__obh_sroa_0_1=0;var $134=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $123=$__nc_2<<1;
 var $124=_malloc($123);
 var $125=($124|0)==0;
 if($125){label=56;break;}else{var $__ob_0=$124;var $__obh_sroa_0_1=$124;var $134=$103;label=59;break;}
 case 56: 
 var $127=___cxa_allocate_exception(4);
 var $128=$127;
 HEAP32[(($128)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($127,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $__obh_sroa_0_0;
 var $130$0 = ___cxa_find_matching_catch(-1, -1); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $_0=$131;var $_0120=$132;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=70;break;
 case 59: 
 var $134;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $135=(($__iob+28)|0);
 var $136=(($1)|0);
 var $137=HEAP32[(($135)>>2)];
 var $138=$137;
 HEAP32[(($136)>>2)]=$138;
 var $139=(($137+4)|0);
 var $140=$139;
 var $141=(tempValue=HEAP32[(($140)>>2)],HEAP32[(($140)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($134,$_0_i143,$104,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $143=HEAP32[(($136)>>2)];
 var $144=(($143+4)|0);
 var $145=(tempValue=HEAP32[(($144)>>2)],HEAP32[(($144)>>2)]=tempValue+-1,tempValue);
 var $146=($145|0)==0;
 if($146){label=61;break;}else{label=62;break;}
 case 61: 
 var $148=(($143)|0);
 var $149=$143;
 var $150=HEAP32[(($149)>>2)];
 var $151=(($150+8)|0);
 var $152=HEAP32[(($151)>>2)];
 FUNCTION_TABLE[$152]($148);
 label=62;break;
 case 62: 
 var $153=(($__s)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=HEAP32[(($__op)>>2)];
 var $156=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$154,$__ob_0,$155,$156,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 63: 
 var $158=(($2)|0);
 var $159=HEAP32[(($158)>>2)];
 HEAP32[(($153)>>2)]=$159;
 var $160=(($agg_result)|0);
 HEAP32[(($160)>>2)]=$159;
 var $161=($__obh_sroa_0_1|0)==0;
 if($161){label=65;break;}else{label=64;break;}
 case 64: 
 _free($__obh_sroa_0_1);
 label=65;break;
 case 65: 
 var $163=($__nbh_sroa_0_1|0)==0;
 if($163){label=67;break;}else{label=66;break;}
 case 66: 
 _free($__nbh_sroa_0_1);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $166$0 = ___cxa_find_matching_catch(-1, -1); var $166$1 = tempRet0;
 var $167=$166$0;
 var $168=$166$1;
 var $169=HEAP32[(($136)>>2)];
 var $170=(($169+4)|0);
 var $171=(tempValue=HEAP32[(($170)>>2)],HEAP32[(($170)>>2)]=tempValue+-1,tempValue);
 var $172=($171|0)==0;
 if($172){label=69;break;}else{var $_0=$167;var $_0120=$168;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;}
 case 69: 
 var $174=(($169)|0);
 var $175=$169;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+8)|0);
 var $178=HEAP32[(($177)>>2)];
 FUNCTION_TABLE[$178]($174);
 var $_0=$167;var $_0120=$168;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;
 case 70: 
 var $__obh_sroa_0_2;
 var $_0120;
 var $_0;
 var $179=($__obh_sroa_0_2|0)==0;
 if($179){label=72;break;}else{label=71;break;}
 case 71: 
 _free($__obh_sroa_0_2);
 label=72;break;
 case 72: 
 var $181=($__nbh_sroa_0_1|0)==0;
 if($181){var $_1121149=$_0120;var $_1150=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($__nbh_sroa_0_1);
 var $_1121149=$_0120;var $_1150=$_0;label=74;break;
 case 74: 
 var $_1150;
 var $_1121149;
 var $183$0=$_1150;
 var $183$1=0;
 var $184$0=$183$0;
 var $184$1=$_1121149;
 ___resumeException($184$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 var $13=($3|0)==0;
 if($13){label=9;break;}else{label=7;break;}
 case 7: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($12$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i191=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((19288)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$3);
 label=3;break;
 case 3: 
 var $7=HEAP32[((19292)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 HEAP32[(($22)>>2)]=5880;
 ___cxa_throw($21,13520,(594));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i191;
 var $26=HEAP32[((18904)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i192=(($__p_i_i_i191)|0);
 HEAP32[(($_sroa_016_0__idx_i_i192)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i193=(($__p_i_i_i191+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i193)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i194=(($__p_i_i_i191+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i194)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$25);
 label=8;break;
 case 8: 
 var $29=HEAP32[((18908)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 HEAP32[(($44)>>2)]=5880;
 ___cxa_throw($43,13520,(594));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $50=HEAP8[($__nb)];
 if((($50<<24)>>24)==45|(($50<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 12: 
 var $52=$19;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+28)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($23,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $57=(($__nb+1)|0);
 var $58=HEAP32[(($__oe)>>2)];
 var $59=(($58+1)|0);
 HEAP32[(($__oe)>>2)]=$59;
 HEAP8[($58)]=$56;
 var $__nf_0=$57;label=23;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit208$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit208$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit208$1;var $eh_lpad_body$0=$lpad_loopexit208$0;label=19;break;
 case 16: 
 var $lpad_loopexit220$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit220$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit220$1;var $eh_lpad_body$0=$lpad_loopexit220$0;label=19;break;
 case 17: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit225$1;var $eh_lpad_body$0=$lpad_loopexit225$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit226$1;var $eh_lpad_body$0=$lpad_nonloopexit226$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $60=$__grouping;
 var $61=HEAP8[($60)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=22;break;}else{label=20;break;}
 case 20: 
 var $65=(($__grouping+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)==0;
 if($67){label=22;break;}else{label=21;break;}
 case 21: 
 _free($66);
 label=22;break;
 case 22: 
 ___resumeException($eh_lpad_body$0)
 case 23: 
 var $__nf_0;
 var $70=$__ne;
 var $71=$__nf_0;
 var $72=((($70)-($71))|0);
 var $73=($72|0)>1;
 if($73){label=24;break;}else{var $__ns_1=$__nf_0;label=37;break;}
 case 24: 
 var $75=HEAP8[($__nf_0)];
 var $76=(($75<<24)>>24)==48;
 if($76){label=25;break;}else{var $__ns_1=$__nf_0;label=37;break;}
 case 25: 
 var $78=(($__nf_0+1)|0);
 var $79=HEAP8[($78)];
 if((($79<<24)>>24)==120|(($79<<24)>>24)==88){ label=26;break;}else{var $__ns_1=$__nf_0;label=37;break;}
 case 26: 
 var $81=$19;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+28)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$84]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $86=HEAP32[(($__oe)>>2)];
 var $87=(($86+1)|0);
 HEAP32[(($__oe)>>2)]=$87;
 HEAP8[($86)]=$85;
 var $88=(($__nf_0+2)|0);
 var $89=HEAP8[($78)];
 var $90=HEAP32[(($81)>>2)];
 var $91=(($90+28)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($23,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $94=HEAP32[(($__oe)>>2)];
 var $95=(($94+1)|0);
 HEAP32[(($__oe)>>2)]=$95;
 HEAP8[($94)]=$93;
 var $__ns_0=$88;label=29;break;
 case 29: 
 var $__ns_0;
 var $97=($__ns_0>>>0)<($__ne>>>0);
 if($97){label=30;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$88;label=45;break;}
 case 30: 
 var $99=HEAP8[($__ns_0)];
 var $100=HEAP8[(19864)];
 var $101=(($100<<24)>>24)==0;
 if($101){label=31;break;}else{label=35;break;}
 case 31: 
 var $103=___cxa_guard_acquire(19864);
 var $104=($103|0)==0;
 if($104){label=35;break;}else{label=32;break;}
 case 32: 
 var $106=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17856)>>2)]=$106;
 label=35;break;
 case 34: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 var $eh_lpad_body$1=$109$1;var $eh_lpad_body$0=$109$0;label=19;break;
 case 35: 
 var $111=HEAP32[((17856)>>2)];
 var $112=(($99<<24)>>24);
 var $113=(function() { try { __THREW__ = 0; return _isxdigit($112,$111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=17;break; }
 case 36: 
 var $115=($113|0)==0;
 var $116=(($__ns_0+1)|0);
 if($115){var $__ns_2=$__ns_0;var $__nf_1=$88;label=45;break;}else{var $__ns_0=$116;label=29;break;}
 case 37: 
 var $__ns_1;
 var $117=($__ns_1>>>0)<($__ne>>>0);
 if($117){label=38;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=45;break;}
 case 38: 
 var $119=HEAP8[($__ns_1)];
 var $120=HEAP8[(19864)];
 var $121=(($120<<24)>>24)==0;
 if($121){label=39;break;}else{label=43;break;}
 case 39: 
 var $123=___cxa_guard_acquire(19864);
 var $124=($123|0)==0;
 if($124){label=43;break;}else{label=40;break;}
 case 40: 
 var $126=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17856)>>2)]=$126;
 label=43;break;
 case 42: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $eh_lpad_body$1=$129$1;var $eh_lpad_body$0=$129$0;label=19;break;
 case 43: 
 var $131=HEAP32[((17856)>>2)];
 var $132=(($119<<24)>>24);
 var $133=(function() { try { __THREW__ = 0; return _isdigit($132,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=16;break; }
 case 44: 
 var $135=($133|0)==0;
 var $136=(($__ns_1+1)|0);
 if($135){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=45;break;}else{var $__ns_1=$136;label=37;break;}
 case 45: 
 var $__nf_1;
 var $__ns_2;
 var $137=$__grouping;
 var $138=$__grouping;
 var $139=HEAP8[($138)];
 var $140=($139&255);
 var $141=$140&1;
 var $142=($141|0)==0;
 if($142){label=47;break;}else{label=46;break;}
 case 46: 
 var $144=(($__grouping+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $148=$145;label=48;break;
 case 47: 
 var $147=$140>>>1;
 var $148=$147;label=48;break;
 case 48: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=49;break;}else{label=53;break;}
 case 49: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=$19;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+32)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($23,$__nf_1,$__ns_2,$151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $157=$__ns_2;
 var $158=$__nf_1;
 var $159=((($157)-($158))|0);
 var $160=HEAP32[(($__oe)>>2)];
 var $161=(($160+$159)|0);
 HEAP32[(($__oe)>>2)]=$161;
 label=51;break;
 case 51: 
 var $162=($__ns_2>>>0)<($__ne>>>0);
 if($162){label=52;break;}else{var $__nf_3=$__ns_2;label=71;break;}
 case 52: 
 var $163=$19;
 var $__nf_2205=$__ns_2;label=66;break;
 case 53: 
 var $165=($__nf_1|0)==($__ns_2|0);
 if($165){label=56;break;}else{label=54;break;}
 case 54: 
 var $166=((($__ns_2)-(1))|0);
 var $167=($__nf_1>>>0)<($166>>>0);
 if($167){var $_0189216=$__nf_1;var $168=$166;label=55;break;}else{label=56;break;}
 case 55: 
 var $168;
 var $_0189216;
 var $169=HEAP8[($_0189216)];
 var $170=HEAP8[($168)];
 HEAP8[($_0189216)]=$170;
 HEAP8[($168)]=$169;
 var $171=(($_0189216+1)|0);
 var $172=((($168)-(1))|0);
 var $173=($171>>>0)<($172>>>0);
 if($173){var $_0189216=$171;var $168=$172;label=55;break;}else{label=56;break;}
 case 56: 
 var $174=$41;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$177]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=18;break; }
 case 57: 
 var $179=($__nf_1>>>0)<($__ns_2>>>0);
 if($179){label=58;break;}else{label=63;break;}
 case 58: 
 var $180=(($137+1)|0);
 var $181=(($__grouping+4)|0);
 var $182=(($__grouping+8)|0);
 var $183=$19;
 var $__dc_0211=0;var $__dg_0212=0;var $__p_0213=$__nf_1;label=59;break;
 case 59: 
 var $__p_0213;
 var $__dg_0212;
 var $__dc_0211;
 var $184=HEAP8[($138)];
 var $185=$184&1;
 var $186=(($185<<24)>>24)==0;
 var $187=HEAP32[(($182)>>2)];
 var $_=($186?$180:$187);
 var $188=(($_+$__dg_0212)|0);
 var $189=HEAP8[($188)];
 var $190=(($189<<24)>>24)>0;
 var $191=(($189<<24)>>24);
 var $192=($__dc_0211|0)==($191|0);
 var $or_cond=$190&$192;
 if($or_cond){label=60;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=61;break;}
 case 60: 
 var $193=HEAP32[(($__oe)>>2)];
 var $194=(($193+1)|0);
 HEAP32[(($__oe)>>2)]=$194;
 HEAP8[($193)]=$178;
 var $195=HEAP8[($138)];
 var $196=($195&255);
 var $197=$196&1;
 var $198=($197|0)==0;
 var $199=HEAP32[(($181)>>2)];
 var $200=$196>>>1;
 var $201=($198?$200:$199);
 var $202=((($201)-(1))|0);
 var $203=($__dg_0212>>>0)<($202>>>0);
 var $204=($203&1);
 var $___dg_0=((($204)+($__dg_0212))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=61;break;
 case 61: 
 var $__dc_1;
 var $__dg_1;
 var $206=HEAP8[($__p_0213)];
 var $207=HEAP32[(($183)>>2)];
 var $208=(($207+28)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$209]($23,$206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=15;break; }
 case 62: 
 var $211=HEAP32[(($__oe)>>2)];
 var $212=(($211+1)|0);
 HEAP32[(($__oe)>>2)]=$212;
 HEAP8[($211)]=$210;
 var $213=((($__dc_1)+(1))|0);
 var $214=(($__p_0213+1)|0);
 var $215=($214>>>0)<($__ns_2>>>0);
 if($215){var $__dc_0211=$213;var $__dg_0212=$__dg_1;var $__p_0213=$214;label=59;break;}else{label=63;break;}
 case 63: 
 var $216=$__nf_1;
 var $217=$__nb;
 var $218=((($216)-($217))|0);
 var $219=(($__ob+$218)|0);
 var $220=HEAP32[(($__oe)>>2)];
 var $221=($219|0)==($220|0);
 if($221){label=51;break;}else{label=64;break;}
 case 64: 
 var $222=((($220)-(1))|0);
 var $223=($219>>>0)<($222>>>0);
 if($223){var $_0206=$219;var $224=$222;label=65;break;}else{label=51;break;}
 case 65: 
 var $224;
 var $_0206;
 var $225=HEAP8[($_0206)];
 var $226=HEAP8[($224)];
 HEAP8[($_0206)]=$226;
 HEAP8[($224)]=$225;
 var $227=(($_0206+1)|0);
 var $228=((($224)-(1))|0);
 var $229=($227>>>0)<($228>>>0);
 if($229){var $_0206=$227;var $224=$228;label=65;break;}else{label=51;break;}
 case 66: 
 var $__nf_2205;
 var $231=HEAP8[($__nf_2205)];
 var $232=(($231<<24)>>24)==46;
 if($232){label=67;break;}else{label=69;break;}
 case 67: 
 var $234=$41;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+12)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=18;break; }
 case 68: 
 var $239=HEAP32[(($__oe)>>2)];
 var $240=(($239+1)|0);
 HEAP32[(($__oe)>>2)]=$240;
 HEAP8[($239)]=$238;
 var $241=(($__nf_2205+1)|0);
 var $__nf_3=$241;label=71;break;
 case 69: 
 var $243=HEAP32[(($163)>>2)];
 var $244=(($243+28)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$245]($23,$231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=14;break; }
 case 70: 
 var $247=HEAP32[(($__oe)>>2)];
 var $248=(($247+1)|0);
 HEAP32[(($__oe)>>2)]=$248;
 HEAP8[($247)]=$246;
 var $249=(($__nf_2205+1)|0);
 var $250=($249>>>0)<($__ne>>>0);
 if($250){var $__nf_2205=$249;label=66;break;}else{var $__nf_3=$249;label=71;break;}
 case 71: 
 var $__nf_3;
 var $251=HEAP32[(($__oe)>>2)];
 var $252=$19;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+32)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($23,$__nf_3,$__ne,$251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=18;break; }
 case 72: 
 var $257=$__nf_3;
 var $258=((($70)-($257))|0);
 var $259=HEAP32[(($__oe)>>2)];
 var $260=(($259+$258)|0);
 HEAP32[(($__oe)>>2)]=$260;
 var $261=($__np|0)==($__ne|0);
 if($261){var $storemerge=$260;label=74;break;}else{label=73;break;}
 case 73: 
 var $263=$__np;
 var $264=$__nb;
 var $265=((($263)-($264))|0);
 var $266=(($__ob+$265)|0);
 var $storemerge=$266;label=74;break;
 case 74: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $268=HEAP8[($138)];
 var $269=$268&1;
 var $270=(($269<<24)>>24)==0;
 if($270){label=77;break;}else{label=75;break;}
 case 75: 
 var $272=(($__grouping+8)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=77;break;}else{label=76;break;}
 case 76: 
 _free($273);
 label=77;break;
 case 77: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 HEAP8[($21)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep146=(($_1_i+1)|0);
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep146)]=65;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 15: 
 HEAP8[($scevgep146)]=97;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i147;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19864)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19864);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17856)>>2)]=$49;
 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17856)>>2)];
 if($specify_precision_0_off0_ph_i147){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre144=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $101=$_pre144;label=47;break;
 case 29: 
 var $63=HEAP8[(19864)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i147){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19864);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17856)>>2)]=$70;
 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17856)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1119142=$82;var $_1143=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19864);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17856)>>2)]=$88;
 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17856)>>2)];
 var $94=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$94;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $96=HEAP32[(($__nb)>>2)];
 var $97=($96|0)==0;
 if($97){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$96;var $101=$96;label=47;break;}
 case 45: 
 var $99=___cxa_allocate_exception(4);
 var $100=$99;
 HEAP32[(($100)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $101;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $102=(($101+$__nc_2)|0);
 var $103=HEAP32[(($5)>>2)];
 var $104=$103&176;
 if(($104|0)==16){ label=48;break;}else if(($104|0)==32){ var $_0_i141=$102;label=54;break;}else{label=53;break;}
 case 48: 
 var $106=HEAP8[($101)];
 if((($106<<24)>>24)==45|(($106<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $108=(($101+1)|0);
 var $_0_i141=$108;label=54;break;
 case 50: 
 var $110=($__nc_2|0)>1;
 var $111=(($106<<24)>>24)==48;
 var $or_cond_i=$110&$111;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $113=(($101+1)|0);
 var $114=HEAP8[($113)];
 if((($114<<24)>>24)==120|(($114<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $116=(($101+2)|0);
 var $_0_i141=$116;label=54;break;
 case 53: 
 var $_0_i141=$101;label=54;break;
 case 54: 
 var $_0_i141;
 var $118=(($__o)|0);
 var $119=($101|0)==($42|0);
 if($119){var $__ob_0=$118;var $__obh_sroa_0_1=0;var $132=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $121=$__nc_2<<1;
 var $122=_malloc($121);
 var $123=($122|0)==0;
 if($123){label=56;break;}else{var $__ob_0=$122;var $__obh_sroa_0_1=$122;var $132=$101;label=59;break;}
 case 56: 
 var $125=___cxa_allocate_exception(4);
 var $126=$125;
 HEAP32[(($126)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($125,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $__obh_sroa_0_0;
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $_0=$129;var $_0118=$130;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=70;break;
 case 59: 
 var $132;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $133=(($__iob+28)|0);
 var $134=(($1)|0);
 var $135=HEAP32[(($133)>>2)];
 var $136=$135;
 HEAP32[(($134)>>2)]=$136;
 var $137=(($135+4)|0);
 var $138=$137;
 var $139=(tempValue=HEAP32[(($138)>>2)],HEAP32[(($138)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($132,$_0_i141,$102,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $141=HEAP32[(($134)>>2)];
 var $142=(($141+4)|0);
 var $143=(tempValue=HEAP32[(($142)>>2)],HEAP32[(($142)>>2)]=tempValue+-1,tempValue);
 var $144=($143|0)==0;
 if($144){label=61;break;}else{label=62;break;}
 case 61: 
 var $146=(($141)|0);
 var $147=$141;
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148+8)|0);
 var $150=HEAP32[(($149)>>2)];
 FUNCTION_TABLE[$150]($146);
 label=62;break;
 case 62: 
 var $151=(($__s)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=HEAP32[(($__op)>>2)];
 var $154=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$152,$__ob_0,$153,$154,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 63: 
 var $156=(($2)|0);
 var $157=HEAP32[(($156)>>2)];
 HEAP32[(($151)>>2)]=$157;
 var $158=(($agg_result)|0);
 HEAP32[(($158)>>2)]=$157;
 var $159=($__obh_sroa_0_1|0)==0;
 if($159){label=65;break;}else{label=64;break;}
 case 64: 
 _free($__obh_sroa_0_1);
 label=65;break;
 case 65: 
 var $161=($__nbh_sroa_0_1|0)==0;
 if($161){label=67;break;}else{label=66;break;}
 case 66: 
 _free($__nbh_sroa_0_1);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1); var $164$1 = tempRet0;
 var $165=$164$0;
 var $166=$164$1;
 var $167=HEAP32[(($134)>>2)];
 var $168=(($167+4)|0);
 var $169=(tempValue=HEAP32[(($168)>>2)],HEAP32[(($168)>>2)]=tempValue+-1,tempValue);
 var $170=($169|0)==0;
 if($170){label=69;break;}else{var $_0=$165;var $_0118=$166;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;}
 case 69: 
 var $172=(($167)|0);
 var $173=$167;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+8)|0);
 var $176=HEAP32[(($175)>>2)];
 FUNCTION_TABLE[$176]($172);
 var $_0=$165;var $_0118=$166;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;
 case 70: 
 var $__obh_sroa_0_2;
 var $_0118;
 var $_0;
 var $177=($__obh_sroa_0_2|0)==0;
 if($177){label=72;break;}else{label=71;break;}
 case 71: 
 _free($__obh_sroa_0_2);
 label=72;break;
 case 72: 
 var $179=($__nbh_sroa_0_1|0)==0;
 if($179){var $_1119142=$_0118;var $_1143=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($__nbh_sroa_0_1);
 var $_1119142=$_0118;var $_1143=$_0;label=74;break;
 case 74: 
 var $_1143;
 var $_1119142;
 var $181$0=$_1143;
 var $181$1=0;
 var $182$0=$181$0;
 var $182$1=$_1119142;
 ___resumeException($182$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($1)]=HEAP8[(5504)];HEAP8[((($1)+(1))|0)]=HEAP8[(5505)];HEAP8[((($1)+(2))|0)]=HEAP8[(5506)];HEAP8[((($1)+(3))|0)]=HEAP8[(5507)];HEAP8[((($1)+(4))|0)]=HEAP8[(5508)];HEAP8[((($1)+(5))|0)]=HEAP8[(5509)];
 var $2=(($__nar)|0);
 var $3=HEAP8[(19864)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19864);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 ___resumeException($12$0)
 case 6: 
 var $13=HEAP32[((17856)>>2)];
 var $14=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$13,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=(($__nar+$14)|0);
 var $16=(($__iob+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&176;
 if(($18|0)==32){ var $_0_i=$15;label=13;break;}else if(($18|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $20=HEAP8[($2)];
 if((($20<<24)>>24)==45|(($20<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $22=(($__nar+1)|0);
 var $_0_i=$22;label=13;break;
 case 9: 
 var $24=($14|0)>1;
 var $25=(($20<<24)>>24)==48;
 var $or_cond_i=$24&$25;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $27=(($__nar+1)|0);
 var $28=HEAP8[($27)];
 if((($28<<24)>>24)==120|(($28<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $30=(($__nar+2)|0);
 var $_0_i=$30;label=13;break;
 case 12: 
 var $_0_i=$2;label=13;break;
 case 13: 
 var $_0_i;
 var $32=(($__iob+28)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+4)|0);
 var $35=$34;
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+1,tempValue);
 var $37=$__p_i_i_i;
 var $38=HEAP32[((19288)>>2)];
 var $39=($38|0)==-1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $41=HEAP32[((19292)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($33+8)|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $49=$45;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($42>>>0);
 if($53){label=16;break;}else{label=17;break;}
 case 16: 
 var $54=(($48+($42<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=17;break;}else{label=19;break;}
 case 17: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $59=$55;
 var $60=(($33+4)|0);
 var $61=$60;
 var $62=(tempValue=HEAP32[(($61)>>2)],HEAP32[(($61)>>2)]=tempValue+-1,tempValue);
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=21;break;}
 case 20: 
 var $65=$33;
 var $66=$33;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($65);
 label=21;break;
 case 21: 
 var $70=(($__o)|0);
 var $71=$55;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+32)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=FUNCTION_TABLE[$74]($59,$2,$15,$70);
 var $76=(($__o+$14)|0);
 var $77=($_0_i|0)==($15|0);
 if($77){var $__op_0=$76;label=26;break;}else{label=25;break;}
 case 22: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=(($33+4)|0);
 var $81=$80;
 var $82=(tempValue=HEAP32[(($81)>>2)],HEAP32[(($81)>>2)]=tempValue+-1,tempValue);
 var $83=($82|0)==0;
 if($83){label=23;break;}else{label=24;break;}
 case 23: 
 var $85=$33;
 var $86=$33;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 FUNCTION_TABLE[$89]($85);
 label=24;break;
 case 24: 
 ___resumeException($79$0)
 case 25: 
 var $91=$__nar;
 var $92=$_0_i;
 var $93=((($92)-($91))|0);
 var $94=(($__o+$93)|0);
 var $__op_0=$94;label=26;break;
 case 26: 
 var $__op_0;
 var $96=(($__s)|0);
 var $97=HEAP32[(($96)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$97,$70,$__op_0,$76,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $__nm=(sp)+(24);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=39;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=$__p_i_i_i;
 var $22=HEAP32[((18896)>>2)];
 var $23=($22|0)==-1;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=31;break; }
 case 5: 
 var $25=HEAP32[((18900)>>2)];
 var $26=((($25)-(1))|0);
 var $27=(($17+12)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($17+8)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$29;
 var $34=$32;
 var $35=((($33)-($34))|0);
 var $36=$35>>2;
 var $37=($36>>>0)>($26>>>0);
 if($37){label=6;break;}else{label=7;break;}
 case 6: 
 var $38=(($32+($26<<2))|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){label=7;break;}else{label=9;break;}
 case 7: 
 var $41=___cxa_allocate_exception(4);
 var $42=$41;
 HEAP32[(($42)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($41,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=31;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $43=$39;
 var $44=(($17+4)|0);
 var $45=$44;
 var $46=(tempValue=HEAP32[(($45)>>2)],HEAP32[(($45)>>2)]=tempValue+-1,tempValue);
 var $47=($46|0)==0;
 if($47){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=$17;
 var $50=$17;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+8)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($49);
 label=11;break;
 case 11: 
 var $54=$39;
 var $55=HEAP32[(($54)>>2)];
 if($__v){label=12;break;}else{label=13;break;}
 case 12: 
 var $57=(($55+24)|0);
 var $58=HEAP32[(($57)>>2)];
 FUNCTION_TABLE[$58]($__nm,$43);
 label=14;break;
 case 13: 
 var $60=(($55+28)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$61]($__nm,$43);
 label=14;break;
 case 14: 
 var $63=$__nm;
 var $64=HEAP8[($63)];
 var $65=$64&1;
 var $66=(($65<<24)>>24)==0;
 if($66){label=16;break;}else{label=15;break;}
 case 15: 
 var $68=(($__nm+8)|0);
 var $69=HEAP32[(($68)>>2)];
 var $_pre83=(($__nm+4)|0);
 var $__i_sroa_0_0_ph=$69;var $_pre_phi=$_pre83;var $_pre_phi85=$68;label=17;break;
 case 16: 
 var $71=(($__nm+4)|0);
 var $_pre84=(($__nm+8)|0);
 var $__i_sroa_0_0_ph=$71;var $_pre_phi=$71;var $_pre_phi85=$_pre84;label=17;break;
 case 17: 
 var $_pre_phi85;
 var $_pre_phi;
 var $__i_sroa_0_0_ph;
 var $72=(($__s)|0);
 var $__i_sroa_0_0=$__i_sroa_0_0_ph;var $73=$64;label=18;break;
 case 18: 
 var $73;
 var $__i_sroa_0_0;
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){var $78=$_pre_phi;label=20;break;}else{label=19;break;}
 case 19: 
 var $77=HEAP32[(($_pre_phi85)>>2)];
 var $78=$77;label=20;break;
 case 20: 
 var $78;
 var $79=($73&255);
 var $80=$79&1;
 var $81=($80|0)==0;
 if($81){label=22;break;}else{label=21;break;}
 case 21: 
 var $83=HEAP32[(($_pre_phi)>>2)];
 var $86=$83;label=23;break;
 case 22: 
 var $85=$79>>>1;
 var $86=$85;label=23;break;
 case 23: 
 var $86;
 var $87=(($78+($86<<2))|0);
 var $88=($__i_sroa_0_0|0)==($87|0);
 if($88){label=36;break;}else{label=24;break;}
 case 24: 
 var $90=HEAP32[(($__i_sroa_0_0)>>2)];
 var $91=HEAP32[(($72)>>2)];
 var $92=($91|0)==0;
 if($92){label=30;break;}else{label=25;break;}
 case 25: 
 var $94=(($91+24)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(($91+28)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=($95|0)==($97|0);
 if($98){label=26;break;}else{label=27;break;}
 case 26: 
 var $100=$91;
 var $101=HEAP32[(($100)>>2)];
 var $102=(($101+52)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$103]($91,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$104;label=28;break; } else { label=33;break; }
 case 27: 
 var $106=(($95+4)|0);
 HEAP32[(($94)>>2)]=$106;
 HEAP32[(($95)>>2)]=$90;
 var $_0=$90;label=28;break;
 case 28: 
 var $_0;
 var $107=($_0|0)==-1;
 if($107){label=29;break;}else{label=30;break;}
 case 29: 
 HEAP32[(($72)>>2)]=0;
 label=30;break;
 case 30: 
 var $109=(($__i_sroa_0_0+4)|0);
 var $_pre=HEAP8[($63)];
 var $__i_sroa_0_0=$109;var $73=$_pre;label=18;break;
 case 31: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1); var $111$1 = tempRet0;
 var $112=$111$0;
 var $113=$111$1;
 var $114=(($17+4)|0);
 var $115=$114;
 var $116=(tempValue=HEAP32[(($115)>>2)],HEAP32[(($115)>>2)]=tempValue+-1,tempValue);
 var $117=($116|0)==0;
 if($117){label=32;break;}else{var $_078=$113;var $_079=$112;label=40;break;}
 case 32: 
 var $119=$17;
 var $120=$17;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+8)|0);
 var $123=HEAP32[(($122)>>2)];
 FUNCTION_TABLE[$123]($119);
 var $_078=$113;var $_079=$112;label=40;break;
 case 33: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $126=$125$0;
 var $127=$125$1;
 var $128=HEAP8[($63)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){var $_078=$127;var $_079=$126;label=40;break;}else{label=34;break;}
 case 34: 
 var $132=(($__nm+8)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=($133|0)==0;
 if($134){var $_078=$127;var $_079=$126;label=40;break;}else{label=35;break;}
 case 35: 
 var $136=$133;
 _free($136);
 var $_078=$127;var $_079=$126;label=40;break;
 case 36: 
 var $138=HEAP32[(($72)>>2)];
 var $139=(($agg_result)|0);
 HEAP32[(($139)>>2)]=$138;
 if($75){label=39;break;}else{label=37;break;}
 case 37: 
 var $141=(($__nm+8)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=39;break;}else{label=38;break;}
 case 38: 
 var $145=$142;
 _free($145);
 label=39;break;
 case 39: 
 STACKTOP=sp;return;
 case 40: 
 var $_079;
 var $_078;
 var $146$0=$_079;
 var $146$1=0;
 var $147$0=$146$0;
 var $147$1=$_078;
 ___resumeException($147$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5496)];HEAP8[((($2)+(1))|0)]=HEAP8[(5497)];HEAP8[((($2)+(2))|0)]=HEAP8[(5498)];HEAP8[((($2)+(3))|0)]=HEAP8[(5499)];HEAP8[((($2)+(4))|0)]=HEAP8[(5500)];HEAP8[((($2)+(5))|0)]=HEAP8[(5501)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19864)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19864);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$30;
 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17856)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i11=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i11=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i11=$50;label=23;break;
 case 22: 
 var $_0_i11=$23;label=23;break;
 case 23: 
 var $_0_i11;
 var $52=(($__o)|0);
 var $53=(($__iob+28)|0);
 var $54=(($1)|0);
 var $55=HEAP32[(($53)>>2)];
 var $56=$55;
 HEAP32[(($54)>>2)]=$56;
 var $57=(($55+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23,$_0_i11,$36,$52,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $61=HEAP32[(($54)>>2)];
 var $62=(($61+4)|0);
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=26;break;}
 case 25: 
 var $66=(($61)|0);
 var $67=$61;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=26;break;
 case 26: 
 var $71=(($__s)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=HEAP32[(($__op)>>2)];
 var $74=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$72,$52,$73,$74,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($54)>>2)];
 var $78=(($77+4)|0);
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=(($77)|0);
 var $83=$77;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 label=29;break;
 case 29: 
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i158=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((19280)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$3);
 label=3;break;
 case 3: 
 var $7=HEAP32[((19284)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 HEAP32[(($22)>>2)]=5880;
 ___cxa_throw($21,13520,(594));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i158;
 var $26=HEAP32[((18896)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i159=(($__p_i_i_i158)|0);
 HEAP32[(($_sroa_016_0__idx_i_i159)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i160=(($__p_i_i_i158+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i160)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i161=(($__p_i_i_i158+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i161)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$25);
 label=8;break;
 case 8: 
 var $29=HEAP32[((18900)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 HEAP32[(($44)>>2)]=5880;
 ___cxa_throw($43,13520,(594));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 var $50=$__grouping;
 var $51=$__grouping;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=13;break;}else{label=12;break;}
 case 12: 
 var $57=(($__grouping+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $61=$58;label=14;break;
 case 13: 
 var $60=$53>>>1;
 var $61=$60;label=14;break;
 case 14: 
 var $61;
 var $62=($61|0)==0;
 if($62){label=15;break;}else{label=23;break;}
 case 15: 
 var $64=$19;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+48)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$67]($23,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $69=$__ne;
 var $70=$__nb;
 var $71=((($69)-($70))|0);
 var $72=(($__ob+($71<<2))|0);
 HEAP32[(($__oe)>>2)]=$72;
 label=45;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $74=HEAP8[($51)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=22;break;}else{label=20;break;}
 case 20: 
 var $78=(($__grouping+8)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($79|0)==0;
 if($80){label=22;break;}else{label=21;break;}
 case 21: 
 _free($79);
 label=22;break;
 case 22: 
 ___resumeException($lpad_phi$0)
 case 23: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $83=HEAP8[($__nb)];
 if((($83<<24)>>24)==45|(($83<<24)>>24)==43){ label=24;break;}else{var $__nf_0=$__nb;label=26;break;}
 case 24: 
 var $85=$19;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+44)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($23,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $90=(($__nb+1)|0);
 var $91=HEAP32[(($__oe)>>2)];
 var $92=(($91+4)|0);
 HEAP32[(($__oe)>>2)]=$92;
 HEAP32[(($91)>>2)]=$89;
 var $__nf_0=$90;label=26;break;
 case 26: 
 var $__nf_0;
 var $94=$__ne;
 var $95=$__nf_0;
 var $96=((($94)-($95))|0);
 var $97=($96|0)>1;
 if($97){label=27;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 27: 
 var $99=HEAP8[($__nf_0)];
 var $100=(($99<<24)>>24)==48;
 if($100){label=28;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 28: 
 var $102=(($__nf_0+1)|0);
 var $103=HEAP8[($102)];
 if((($103<<24)>>24)==120|(($103<<24)>>24)==88){ label=29;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 29: 
 var $105=$19;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+44)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$108]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=18;break; }
 case 30: 
 var $110=HEAP32[(($__oe)>>2)];
 var $111=(($110+4)|0);
 HEAP32[(($__oe)>>2)]=$111;
 HEAP32[(($110)>>2)]=$109;
 var $112=HEAP8[($102)];
 var $113=HEAP32[(($105)>>2)];
 var $114=(($113+44)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($23,$112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=18;break; }
 case 31: 
 var $117=(($__nf_0+2)|0);
 var $118=HEAP32[(($__oe)>>2)];
 var $119=(($118+4)|0);
 HEAP32[(($__oe)>>2)]=$119;
 HEAP32[(($118)>>2)]=$116;
 var $__nf_1=$117;label=32;break;
 case 32: 
 var $__nf_1;
 var $121=($__nf_1|0)==($__ne|0);
 if($121){label=35;break;}else{label=33;break;}
 case 33: 
 var $122=((($__ne)-(1))|0);
 var $123=($__nf_1>>>0)<($122>>>0);
 if($123){var $_0172=$__nf_1;var $124=$122;label=34;break;}else{label=35;break;}
 case 34: 
 var $124;
 var $_0172;
 var $125=HEAP8[($_0172)];
 var $126=HEAP8[($124)];
 HEAP8[($_0172)]=$126;
 HEAP8[($124)]=$125;
 var $127=(($_0172+1)|0);
 var $128=((($124)-(1))|0);
 var $129=($127>>>0)<($128>>>0);
 if($129){var $_0172=$127;var $124=$128;label=34;break;}else{label=35;break;}
 case 35: 
 var $130=$41;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+16)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$133]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=18;break; }
 case 36: 
 var $135=($__nf_1>>>0)<($__ne>>>0);
 if($135){label=37;break;}else{label=42;break;}
 case 37: 
 var $136=(($50+1)|0);
 var $137=$19;
 var $138=(($__grouping+4)|0);
 var $139=(($__grouping+8)|0);
 var $__dc_0167=0;var $__dg_0168=0;var $__p_0169=$__nf_1;label=38;break;
 case 38: 
 var $__p_0169;
 var $__dg_0168;
 var $__dc_0167;
 var $140=HEAP8[($51)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 var $143=HEAP32[(($139)>>2)];
 var $_=($142?$136:$143);
 var $144=(($_+$__dg_0168)|0);
 var $145=HEAP8[($144)];
 var $146=(($145<<24)>>24)!=0;
 var $147=(($145<<24)>>24);
 var $148=($__dc_0167|0)==($147|0);
 var $or_cond=$146&$148;
 if($or_cond){label=39;break;}else{var $__dg_1=$__dg_0168;var $__dc_1=$__dc_0167;label=40;break;}
 case 39: 
 var $149=HEAP32[(($__oe)>>2)];
 var $150=(($149+4)|0);
 HEAP32[(($__oe)>>2)]=$150;
 HEAP32[(($149)>>2)]=$134;
 var $151=HEAP8[($51)];
 var $152=($151&255);
 var $153=$152&1;
 var $154=($153|0)==0;
 var $155=HEAP32[(($138)>>2)];
 var $156=$152>>>1;
 var $157=($154?$156:$155);
 var $158=((($157)-(1))|0);
 var $159=($__dg_0168>>>0)<($158>>>0);
 var $160=($159&1);
 var $___dg_0=((($160)+($__dg_0168))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=40;break;
 case 40: 
 var $__dc_1;
 var $__dg_1;
 var $162=HEAP8[($__p_0169)];
 var $163=HEAP32[(($137)>>2)];
 var $164=(($163+44)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($23,$162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=17;break; }
 case 41: 
 var $167=HEAP32[(($__oe)>>2)];
 var $168=(($167+4)|0);
 HEAP32[(($__oe)>>2)]=$168;
 HEAP32[(($167)>>2)]=$166;
 var $169=((($__dc_1)+(1))|0);
 var $170=(($__p_0169+1)|0);
 var $171=($170>>>0)<($__ne>>>0);
 if($171){var $__dc_0167=$169;var $__dg_0168=$__dg_1;var $__p_0169=$170;label=38;break;}else{label=42;break;}
 case 42: 
 var $172=$__nf_1;
 var $173=$__nb;
 var $174=((($172)-($173))|0);
 var $175=(($__ob+($174<<2))|0);
 var $176=HEAP32[(($__oe)>>2)];
 var $177=($175|0)==($176|0);
 if($177){label=45;break;}else{label=43;break;}
 case 43: 
 var $178=((($176)-(4))|0);
 var $179=($175>>>0)<($178>>>0);
 if($179){var $_0156166=$175;var $180=$178;label=44;break;}else{label=45;break;}
 case 44: 
 var $180;
 var $_0156166;
 var $181=HEAP32[(($_0156166)>>2)];
 var $182=HEAP32[(($180)>>2)];
 HEAP32[(($_0156166)>>2)]=$182;
 HEAP32[(($180)>>2)]=$181;
 var $183=(($_0156166+4)|0);
 var $184=((($180)-(4))|0);
 var $185=($183>>>0)<($184>>>0);
 if($185){var $_0156166=$183;var $180=$184;label=44;break;}else{label=45;break;}
 case 45: 
 var $186=($__np|0)==($__ne|0);
 if($186){label=46;break;}else{label=47;break;}
 case 46: 
 var $188=HEAP32[(($__oe)>>2)];
 var $storemerge=$188;label=48;break;
 case 47: 
 var $190=$__np;
 var $191=$__nb;
 var $192=((($190)-($191))|0);
 var $193=(($__ob+($192<<2))|0);
 var $storemerge=$193;label=48;break;
 case 48: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $195=HEAP8[($51)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=51;break;}else{label=49;break;}
 case 49: 
 var $199=(($__grouping+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($200|0)==0;
 if($201){label=51;break;}else{label=50;break;}
 case 50: 
 _free($200);
 label=51;break;
 case 51: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s_0,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=($__s_0|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=0;
 label=44;break;
 case 3: 
 var $5=$__oe;
 var $6=$__ob;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=(($__iob+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>($8|0);
 var $12=((($10)-($8))|0);
 var $__ns_0=($11?$12:0);
 var $13=$__op;
 var $14=((($13)-($6))|0);
 var $15=$14>>2;
 var $16=($14|0)>0;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$__s_0;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+48)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=FUNCTION_TABLE[$21]($__s_0,$__ob,$15);
 var $23=($22|0)==($15|0);
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=(($agg_result)|0);
 HEAP32[(($25)>>2)]=0;
 label=44;break;
 case 6: 
 var $27=($__ns_0|0)>0;
 if($27){label=7;break;}else{label=40;break;}
 case 7: 
 var $29=($__ns_0>>>0)>1073741807;
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 9: 
 var $32=($__ns_0>>>0)<2;
 if($32){label=10;break;}else{label=11;break;}
 case 10: 
 var $33=$__ns_0<<1;
 var $34=(($33)&255);
 var $35=$__sp;
 HEAP8[($35)]=$34;
 var $36=(($__sp+4)|0);
 var $__p_0_i1_ph=$36;label=23;break;
 case 11: 
 var $37=((($__ns_0)+(4))|0);
 var $38=$37&-4;
 var $39=$38<<2;
 var $40=($39|0)==0;
 var $_size_i=($40?1:$39);
 label=12;break;
 case 12: 
 var $42=_malloc($_size_i);
 var $43=($42|0)==0;
 if($43){label=13;break;}else{label=22;break;}
 case 13: 
 var $45=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $46=($45|0)==0;
 if($46){label=19;break;}else{label=14;break;}
 case 14: 
 var $48=$45;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 15: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=17;break;
 case 17: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $50=$lpad_phi_i$1;
 var $51=($50|0)<0;
 if($51){label=18;break;}else{label=20;break;}
 case 18: 
 var $53=$lpad_phi_i$0;
 ___cxa_call_unexpected($53);
 throw "Reached an unreachable!";
 case 19: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 HEAP32[(($56)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 20: 
 ___resumeException($lpad_phi_i$0)
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $60=$42;
 var $61=(($__sp+8)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=$38|1;
 var $63=(($__sp)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=(($__sp+4)|0);
 HEAP32[(($64)>>2)]=$__ns_0;
 var $65=($__ns_0|0)==0;
 if($65){var $__p_0_i2=$60;label=25;break;}else{var $__p_0_i1_ph=$60;label=23;break;}
 case 23: 
 var $__p_0_i1_ph;
 var $_045_i_i=$__ns_0;var $_06_i_i=$__p_0_i1_ph;label=24;break;
 case 24: 
 var $_06_i_i;
 var $_045_i_i;
 var $66=((($_045_i_i)-(1))|0);
 var $67=(($_06_i_i+4)|0);
 HEAP32[(($_06_i_i)>>2)]=$__fl;
 var $68=($66|0)==0;
 if($68){var $__p_0_i2=$__p_0_i1_ph;label=25;break;}else{var $_045_i_i=$66;var $_06_i_i=$67;label=24;break;}
 case 25: 
 var $__p_0_i2;
 var $69=(($__p_0_i2+($__ns_0<<2))|0);
 HEAP32[(($69)>>2)]=0;
 var $70=$__sp;
 var $71=HEAP8[($70)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=27;break;}else{label=26;break;}
 case 26: 
 var $75=(($__sp+8)|0);
 var $76=HEAP32[(($75)>>2)];
 var $79=$76;label=28;break;
 case 27: 
 var $78=(($__sp+4)|0);
 var $79=$78;label=28;break;
 case 28: 
 var $79;
 var $80=$__s_0;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+48)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($__s_0,$79,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=33;break; }
 case 29: 
 var $85=($84|0)==($__ns_0|0);
 if($85){label=37;break;}else{label=30;break;}
 case 30: 
 var $86=(($agg_result)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=HEAP8[($70)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=44;break;}else{label=31;break;}
 case 31: 
 var $91=(($__sp+8)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=44;break;}else{label=32;break;}
 case 32: 
 var $95=$92;
 _free($95);
 label=44;break;
 case 33: 
 var $97$0 = ___cxa_find_matching_catch(-1, -1); var $97$1 = tempRet0;
 var $98=HEAP8[($70)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=36;break;}else{label=34;break;}
 case 34: 
 var $102=(($__sp+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=36;break;}else{label=35;break;}
 case 35: 
 var $106=$103;
 _free($106);
 label=36;break;
 case 36: 
 ___resumeException($97$0)
 case 37: 
 var $108=HEAP8[($70)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){label=40;break;}else{label=38;break;}
 case 38: 
 var $112=(($__sp+8)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)==0;
 if($114){label=40;break;}else{label=39;break;}
 case 39: 
 var $116=$113;
 _free($116);
 label=40;break;
 case 40: 
 var $117=((($5)-($13))|0);
 var $118=$117>>2;
 var $119=($117|0)>0;
 if($119){label=41;break;}else{label=43;break;}
 case 41: 
 var $121=$__s_0;
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+48)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=FUNCTION_TABLE[$124]($__s_0,$__op,$118);
 var $126=($125|0)==($118|0);
 if($126){label=43;break;}else{label=42;break;}
 case 42: 
 var $128=(($agg_result)|0);
 HEAP32[(($128)>>2)]=0;
 label=44;break;
 case 43: 
 HEAP32[(($9)>>2)]=0;
 var $130=(($agg_result)|0);
 HEAP32[(($130)>>2)]=$__s_0;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $15=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19864)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19864);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17856)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,22,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5496)];HEAP8[((($2)+(1))|0)]=HEAP8[(5497)];HEAP8[((($2)+(2))|0)]=HEAP8[(5498)];HEAP8[((($2)+(3))|0)]=HEAP8[(5499)];HEAP8[((($2)+(4))|0)]=HEAP8[(5500)];HEAP8[((($2)+(5))|0)]=HEAP8[(5501)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 HEAP8[($_116_i_ph)]=108;
 var $scevgep=(($_116_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19864)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19864);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$30;
 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;
 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17856)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i11=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i11=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i11=$50;label=23;break;
 case 22: 
 var $_0_i11=$23;label=23;break;
 case 23: 
 var $_0_i11;
 var $52=(($__o)|0);
 var $53=(($__iob+28)|0);
 var $54=(($1)|0);
 var $55=HEAP32[(($53)>>2)];
 var $56=$55;
 HEAP32[(($54)>>2)]=$56;
 var $57=(($55+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23,$_0_i11,$36,$52,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $61=HEAP32[(($54)>>2)];
 var $62=(($61+4)|0);
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=26;break;}
 case 25: 
 var $66=(($61)|0);
 var $67=$61;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=26;break;
 case 26: 
 var $71=(($__s)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=HEAP32[(($__op)>>2)];
 var $74=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$72,$52,$73,$74,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($54)>>2)];
 var $78=(($77+4)|0);
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=(($77)|0);
 var $83=$77;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 label=29;break;
 case 29: 
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_116_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_116_i_ph=$14;label=5;break;
 case 5: 
 var $_116_i_ph;
 var $15=(($_116_i_ph+1)|0);
 HEAP8[($_116_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_116_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19864)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19864);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17856)>>2)]=$31;
 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;
 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17856)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,23,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i11=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i11=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i11=$51;label=23;break;
 case 22: 
 var $_0_i11=$24;label=23;break;
 case 23: 
 var $_0_i11;
 var $53=(($__o)|0);
 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i11,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($21)]=70;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 9: 
 HEAP8[($21)]=102;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($21)]=69;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 12: 
 HEAP8[($21)]=101;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 13: 
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i144=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($21)]=71;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 18: 
 HEAP8[($21)]=103;
 var $specify_precision_0_off0_ph_i144=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i144;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19864)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19864);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17856)>>2)]=$49;
 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17856)>>2)];
 if($specify_precision_0_off0_ph_i144){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre151=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $103=$_pre151;label=47;break;
 case 29: 
 var $63=HEAP8[(19864)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i144){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19864);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17856)>>2)]=$70;
 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17856)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1121149=$82;var $_1150=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19864);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17856)>>2)]=$88;
 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17856)>>2)];
 var $94=(($__iob+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$95,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$96;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $98=HEAP32[(($__nb)>>2)];
 var $99=($98|0)==0;
 if($99){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$98;var $103=$98;label=47;break;}
 case 45: 
 var $101=___cxa_allocate_exception(4);
 var $102=$101;
 HEAP32[(($102)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $103;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $104=(($103+$__nc_2)|0);
 var $105=HEAP32[(($5)>>2)];
 var $106=$105&176;
 if(($106|0)==16){ label=48;break;}else if(($106|0)==32){ var $_0_i143=$104;label=54;break;}else{label=53;break;}
 case 48: 
 var $108=HEAP8[($103)];
 if((($108<<24)>>24)==45|(($108<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $110=(($103+1)|0);
 var $_0_i143=$110;label=54;break;
 case 50: 
 var $112=($__nc_2|0)>1;
 var $113=(($108<<24)>>24)==48;
 var $or_cond_i=$112&$113;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $115=(($103+1)|0);
 var $116=HEAP8[($115)];
 if((($116<<24)>>24)==120|(($116<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $118=(($103+2)|0);
 var $_0_i143=$118;label=54;break;
 case 53: 
 var $_0_i143=$103;label=54;break;
 case 54: 
 var $_0_i143;
 var $120=(($__o)|0);
 var $121=($103|0)==($42|0);
 if($121){var $__ob_0=$120;var $__obh_sroa_0_1=0;var $135=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $123=$__nc_2<<3;
 var $124=_malloc($123);
 var $125=$124;
 var $126=($124|0)==0;
 if($126){label=56;break;}else{var $__ob_0=$125;var $__obh_sroa_0_1=$125;var $135=$103;label=59;break;}
 case 56: 
 var $128=___cxa_allocate_exception(4);
 var $129=$128;
 HEAP32[(($129)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($128,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $__obh_sroa_0_0;
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $132=$131$0;
 var $133=$131$1;
 var $_0=$132;var $_0120=$133;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=70;break;
 case 59: 
 var $135;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $136=(($__iob+28)|0);
 var $137=(($1)|0);
 var $138=HEAP32[(($136)>>2)];
 var $139=$138;
 HEAP32[(($137)>>2)]=$139;
 var $140=(($138+4)|0);
 var $141=$140;
 var $142=(tempValue=HEAP32[(($141)>>2)],HEAP32[(($141)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($135,$_0_i143,$104,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $144=HEAP32[(($137)>>2)];
 var $145=(($144+4)|0);
 var $146=(tempValue=HEAP32[(($145)>>2)],HEAP32[(($145)>>2)]=tempValue+-1,tempValue);
 var $147=($146|0)==0;
 if($147){label=61;break;}else{label=62;break;}
 case 61: 
 var $149=(($144)|0);
 var $150=$144;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+8)|0);
 var $153=HEAP32[(($152)>>2)];
 FUNCTION_TABLE[$153]($149);
 label=62;break;
 case 62: 
 var $154=(($__s)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=HEAP32[(($__op)>>2)];
 var $157=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$155,$__ob_0,$156,$157,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 63: 
 var $159=(($2)|0);
 var $160=HEAP32[(($159)>>2)];
 HEAP32[(($154)>>2)]=$160;
 var $161=(($agg_result)|0);
 HEAP32[(($161)>>2)]=$160;
 var $162=($__obh_sroa_0_1|0)==0;
 if($162){label=65;break;}else{label=64;break;}
 case 64: 
 var $164=$__obh_sroa_0_1;
 _free($164);
 label=65;break;
 case 65: 
 var $165=($__nbh_sroa_0_1|0)==0;
 if($165){label=67;break;}else{label=66;break;}
 case 66: 
 _free($__nbh_sroa_0_1);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $168$0 = ___cxa_find_matching_catch(-1, -1); var $168$1 = tempRet0;
 var $169=$168$0;
 var $170=$168$1;
 var $171=HEAP32[(($137)>>2)];
 var $172=(($171+4)|0);
 var $173=(tempValue=HEAP32[(($172)>>2)],HEAP32[(($172)>>2)]=tempValue+-1,tempValue);
 var $174=($173|0)==0;
 if($174){label=69;break;}else{var $_0=$169;var $_0120=$170;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;}
 case 69: 
 var $176=(($171)|0);
 var $177=$171;
 var $178=HEAP32[(($177)>>2)];
 var $179=(($178+8)|0);
 var $180=HEAP32[(($179)>>2)];
 FUNCTION_TABLE[$180]($176);
 var $_0=$169;var $_0120=$170;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;
 case 70: 
 var $__obh_sroa_0_2;
 var $_0120;
 var $_0;
 var $181=($__obh_sroa_0_2|0)==0;
 if($181){label=72;break;}else{label=71;break;}
 case 71: 
 var $183=$__obh_sroa_0_2;
 _free($183);
 label=72;break;
 case 72: 
 var $184=($__nbh_sroa_0_1|0)==0;
 if($184){var $_1121149=$_0120;var $_1150=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($__nbh_sroa_0_1);
 var $_1121149=$_0120;var $_1150=$_0;label=74;break;
 case 74: 
 var $_1150;
 var $_1121149;
 var $186$0=$_1150;
 var $186$1=0;
 var $187$0=$186$0;
 var $187$1=$_1121149;
 ___resumeException($187$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i191=sp;
 var $__p_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i;
 var $4=HEAP32[((19280)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$3);
 label=3;break;
 case 3: 
 var $7=HEAP32[((19284)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($2+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 HEAP32[(($22)>>2)]=5880;
 ___cxa_throw($21,13520,(594));
 throw "Reached an unreachable!";
 case 6: 
 var $23=$19;
 var $24=HEAP32[(($1)>>2)];
 var $25=$__p_i_i_i191;
 var $26=HEAP32[((18896)>>2)];
 var $27=($26|0)==-1;
 if($27){label=8;break;}else{label=7;break;}
 case 7: 
 var $_sroa_016_0__idx_i_i192=(($__p_i_i_i191)|0);
 HEAP32[(($_sroa_016_0__idx_i_i192)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i193=(($__p_i_i_i191+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i193)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i194=(($__p_i_i_i191+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i194)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$25);
 label=8;break;
 case 8: 
 var $29=HEAP32[((18900)>>2)];
 var $30=((($29)-(1))|0);
 var $31=(($24+12)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($24+8)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$32;
 var $36=$34;
 var $37=((($35)-($36))|0);
 var $38=$37>>2;
 var $39=($38>>>0)>($30>>>0);
 if($39){label=9;break;}else{label=10;break;}
 case 9: 
 var $40=(($34+($30<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=10;break;}else{label=11;break;}
 case 10: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 HEAP32[(($44)>>2)]=5880;
 ___cxa_throw($43,13520,(594));
 throw "Reached an unreachable!";
 case 11: 
 var $45=$41;
 var $46=$41;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+20)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($__grouping,$45);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $50=HEAP8[($__nb)];
 if((($50<<24)>>24)==45|(($50<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 12: 
 var $52=$19;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+44)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$55]($23,$50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $57=(($__nb+1)|0);
 var $58=HEAP32[(($__oe)>>2)];
 var $59=(($58+4)|0);
 HEAP32[(($__oe)>>2)]=$59;
 HEAP32[(($58)>>2)]=$56;
 var $__nf_0=$57;label=23;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit208$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit208$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit208$1;var $eh_lpad_body$0=$lpad_loopexit208$0;label=19;break;
 case 16: 
 var $lpad_loopexit220$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit220$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit220$1;var $eh_lpad_body$0=$lpad_loopexit220$0;label=19;break;
 case 17: 
 var $lpad_loopexit225$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit225$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit225$1;var $eh_lpad_body$0=$lpad_loopexit225$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit226$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit226$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit226$1;var $eh_lpad_body$0=$lpad_nonloopexit226$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $60=$__grouping;
 var $61=HEAP8[($60)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=22;break;}else{label=20;break;}
 case 20: 
 var $65=(($__grouping+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)==0;
 if($67){label=22;break;}else{label=21;break;}
 case 21: 
 _free($66);
 label=22;break;
 case 22: 
 ___resumeException($eh_lpad_body$0)
 case 23: 
 var $__nf_0;
 var $70=$__ne;
 var $71=$__nf_0;
 var $72=((($70)-($71))|0);
 var $73=($72|0)>1;
 if($73){label=24;break;}else{var $__ns_1=$__nf_0;label=37;break;}
 case 24: 
 var $75=HEAP8[($__nf_0)];
 var $76=(($75<<24)>>24)==48;
 if($76){label=25;break;}else{var $__ns_1=$__nf_0;label=37;break;}
 case 25: 
 var $78=(($__nf_0+1)|0);
 var $79=HEAP8[($78)];
 if((($79<<24)>>24)==120|(($79<<24)>>24)==88){ label=26;break;}else{var $__ns_1=$__nf_0;label=37;break;}
 case 26: 
 var $81=$19;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+44)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$84]($23,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=18;break; }
 case 27: 
 var $86=HEAP32[(($__oe)>>2)];
 var $87=(($86+4)|0);
 HEAP32[(($__oe)>>2)]=$87;
 HEAP32[(($86)>>2)]=$85;
 var $88=(($__nf_0+2)|0);
 var $89=HEAP8[($78)];
 var $90=HEAP32[(($81)>>2)];
 var $91=(($90+44)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($23,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $94=HEAP32[(($__oe)>>2)];
 var $95=(($94+4)|0);
 HEAP32[(($__oe)>>2)]=$95;
 HEAP32[(($94)>>2)]=$93;
 var $__ns_0=$88;label=29;break;
 case 29: 
 var $__ns_0;
 var $97=($__ns_0>>>0)<($__ne>>>0);
 if($97){label=30;break;}else{var $__ns_2=$__ns_0;var $__nf_1=$88;label=45;break;}
 case 30: 
 var $99=HEAP8[($__ns_0)];
 var $100=HEAP8[(19864)];
 var $101=(($100<<24)>>24)==0;
 if($101){label=31;break;}else{label=35;break;}
 case 31: 
 var $103=___cxa_guard_acquire(19864);
 var $104=($103|0)==0;
 if($104){label=35;break;}else{label=32;break;}
 case 32: 
 var $106=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17856)>>2)]=$106;
 label=35;break;
 case 34: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1); var $109$1 = tempRet0;
 var $eh_lpad_body$1=$109$1;var $eh_lpad_body$0=$109$0;label=19;break;
 case 35: 
 var $111=HEAP32[((17856)>>2)];
 var $112=(($99<<24)>>24);
 var $113=(function() { try { __THREW__ = 0; return _isxdigit($112,$111) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=17;break; }
 case 36: 
 var $115=($113|0)==0;
 var $116=(($__ns_0+1)|0);
 if($115){var $__ns_2=$__ns_0;var $__nf_1=$88;label=45;break;}else{var $__ns_0=$116;label=29;break;}
 case 37: 
 var $__ns_1;
 var $117=($__ns_1>>>0)<($__ne>>>0);
 if($117){label=38;break;}else{var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=45;break;}
 case 38: 
 var $119=HEAP8[($__ns_1)];
 var $120=HEAP8[(19864)];
 var $121=(($120<<24)>>24)==0;
 if($121){label=39;break;}else{label=43;break;}
 case 39: 
 var $123=___cxa_guard_acquire(19864);
 var $124=($123|0)==0;
 if($124){label=43;break;}else{label=40;break;}
 case 40: 
 var $126=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17856)>>2)]=$126;
 label=43;break;
 case 42: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $eh_lpad_body$1=$129$1;var $eh_lpad_body$0=$129$0;label=19;break;
 case 43: 
 var $131=HEAP32[((17856)>>2)];
 var $132=(($119<<24)>>24);
 var $133=(function() { try { __THREW__ = 0; return _isdigit($132,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=16;break; }
 case 44: 
 var $135=($133|0)==0;
 var $136=(($__ns_1+1)|0);
 if($135){var $__ns_2=$__ns_1;var $__nf_1=$__nf_0;label=45;break;}else{var $__ns_1=$136;label=37;break;}
 case 45: 
 var $__nf_1;
 var $__ns_2;
 var $137=$__grouping;
 var $138=$__grouping;
 var $139=HEAP8[($138)];
 var $140=($139&255);
 var $141=$140&1;
 var $142=($141|0)==0;
 if($142){label=47;break;}else{label=46;break;}
 case 46: 
 var $144=(($__grouping+4)|0);
 var $145=HEAP32[(($144)>>2)];
 var $148=$145;label=48;break;
 case 47: 
 var $147=$140>>>1;
 var $148=$147;label=48;break;
 case 48: 
 var $148;
 var $149=($148|0)==0;
 if($149){label=49;break;}else{label=53;break;}
 case 49: 
 var $151=HEAP32[(($__oe)>>2)];
 var $152=$19;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+48)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($23,$__nf_1,$__ns_2,$151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=18;break; }
 case 50: 
 var $157=$__ns_2;
 var $158=$__nf_1;
 var $159=((($157)-($158))|0);
 var $160=HEAP32[(($__oe)>>2)];
 var $161=(($160+($159<<2))|0);
 HEAP32[(($__oe)>>2)]=$161;
 label=51;break;
 case 51: 
 var $162=($__ns_2>>>0)<($__ne>>>0);
 if($162){label=52;break;}else{var $__nf_3=$__ns_2;label=71;break;}
 case 52: 
 var $163=$19;
 var $__nf_2205=$__ns_2;label=66;break;
 case 53: 
 var $165=($__nf_1|0)==($__ns_2|0);
 if($165){label=56;break;}else{label=54;break;}
 case 54: 
 var $166=((($__ns_2)-(1))|0);
 var $167=($__nf_1>>>0)<($166>>>0);
 if($167){var $_0189216=$__nf_1;var $168=$166;label=55;break;}else{label=56;break;}
 case 55: 
 var $168;
 var $_0189216;
 var $169=HEAP8[($_0189216)];
 var $170=HEAP8[($168)];
 HEAP8[($_0189216)]=$170;
 HEAP8[($168)]=$169;
 var $171=(($_0189216+1)|0);
 var $172=((($168)-(1))|0);
 var $173=($171>>>0)<($172>>>0);
 if($173){var $_0189216=$171;var $168=$172;label=55;break;}else{label=56;break;}
 case 56: 
 var $174=$41;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+16)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$177]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=18;break; }
 case 57: 
 var $179=($__nf_1>>>0)<($__ns_2>>>0);
 if($179){label=58;break;}else{label=63;break;}
 case 58: 
 var $180=(($137+1)|0);
 var $181=(($__grouping+4)|0);
 var $182=(($__grouping+8)|0);
 var $183=$19;
 var $__dc_0211=0;var $__dg_0212=0;var $__p_0213=$__nf_1;label=59;break;
 case 59: 
 var $__p_0213;
 var $__dg_0212;
 var $__dc_0211;
 var $184=HEAP8[($138)];
 var $185=$184&1;
 var $186=(($185<<24)>>24)==0;
 var $187=HEAP32[(($182)>>2)];
 var $_=($186?$180:$187);
 var $188=(($_+$__dg_0212)|0);
 var $189=HEAP8[($188)];
 var $190=(($189<<24)>>24)>0;
 var $191=(($189<<24)>>24);
 var $192=($__dc_0211|0)==($191|0);
 var $or_cond=$190&$192;
 if($or_cond){label=60;break;}else{var $__dg_1=$__dg_0212;var $__dc_1=$__dc_0211;label=61;break;}
 case 60: 
 var $193=HEAP32[(($__oe)>>2)];
 var $194=(($193+4)|0);
 HEAP32[(($__oe)>>2)]=$194;
 HEAP32[(($193)>>2)]=$178;
 var $195=HEAP8[($138)];
 var $196=($195&255);
 var $197=$196&1;
 var $198=($197|0)==0;
 var $199=HEAP32[(($181)>>2)];
 var $200=$196>>>1;
 var $201=($198?$200:$199);
 var $202=((($201)-(1))|0);
 var $203=($__dg_0212>>>0)<($202>>>0);
 var $204=($203&1);
 var $___dg_0=((($204)+($__dg_0212))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=61;break;
 case 61: 
 var $__dc_1;
 var $__dg_1;
 var $206=HEAP8[($__p_0213)];
 var $207=HEAP32[(($183)>>2)];
 var $208=(($207+44)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$209]($23,$206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=15;break; }
 case 62: 
 var $211=HEAP32[(($__oe)>>2)];
 var $212=(($211+4)|0);
 HEAP32[(($__oe)>>2)]=$212;
 HEAP32[(($211)>>2)]=$210;
 var $213=((($__dc_1)+(1))|0);
 var $214=(($__p_0213+1)|0);
 var $215=($214>>>0)<($__ns_2>>>0);
 if($215){var $__dc_0211=$213;var $__dg_0212=$__dg_1;var $__p_0213=$214;label=59;break;}else{label=63;break;}
 case 63: 
 var $216=$__nf_1;
 var $217=$__nb;
 var $218=((($216)-($217))|0);
 var $219=(($__ob+($218<<2))|0);
 var $220=HEAP32[(($__oe)>>2)];
 var $221=($219|0)==($220|0);
 if($221){label=51;break;}else{label=64;break;}
 case 64: 
 var $222=((($220)-(4))|0);
 var $223=($219>>>0)<($222>>>0);
 if($223){var $_0206=$219;var $224=$222;label=65;break;}else{label=51;break;}
 case 65: 
 var $224;
 var $_0206;
 var $225=HEAP32[(($_0206)>>2)];
 var $226=HEAP32[(($224)>>2)];
 HEAP32[(($_0206)>>2)]=$226;
 HEAP32[(($224)>>2)]=$225;
 var $227=(($_0206+4)|0);
 var $228=((($224)-(4))|0);
 var $229=($227>>>0)<($228>>>0);
 if($229){var $_0206=$227;var $224=$228;label=65;break;}else{label=51;break;}
 case 66: 
 var $__nf_2205;
 var $231=HEAP8[($__nf_2205)];
 var $232=(($231<<24)>>24)==46;
 if($232){label=67;break;}else{label=69;break;}
 case 67: 
 var $234=$41;
 var $235=HEAP32[(($234)>>2)];
 var $236=(($235+12)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$237]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=18;break; }
 case 68: 
 var $239=HEAP32[(($__oe)>>2)];
 var $240=(($239+4)|0);
 HEAP32[(($__oe)>>2)]=$240;
 HEAP32[(($239)>>2)]=$238;
 var $241=(($__nf_2205+1)|0);
 var $__nf_3=$241;label=71;break;
 case 69: 
 var $243=HEAP32[(($163)>>2)];
 var $244=(($243+44)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$245]($23,$231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=14;break; }
 case 70: 
 var $247=HEAP32[(($__oe)>>2)];
 var $248=(($247+4)|0);
 HEAP32[(($__oe)>>2)]=$248;
 HEAP32[(($247)>>2)]=$246;
 var $249=(($__nf_2205+1)|0);
 var $250=($249>>>0)<($__ne>>>0);
 if($250){var $__nf_2205=$249;label=66;break;}else{var $__nf_3=$249;label=71;break;}
 case 71: 
 var $__nf_3;
 var $251=HEAP32[(($__oe)>>2)];
 var $252=$19;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+48)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($23,$__nf_3,$__ne,$251) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=18;break; }
 case 72: 
 var $257=$__nf_3;
 var $258=((($70)-($257))|0);
 var $259=HEAP32[(($__oe)>>2)];
 var $260=(($259+($258<<2))|0);
 HEAP32[(($__oe)>>2)]=$260;
 var $261=($__np|0)==($__ne|0);
 if($261){var $storemerge=$260;label=74;break;}else{label=73;break;}
 case 73: 
 var $263=$__np;
 var $264=$__nb;
 var $265=((($263)-($264))|0);
 var $266=(($__ob+($265<<2))|0);
 var $storemerge=$266;label=74;break;
 case 74: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $268=HEAP8[($138)];
 var $269=$268&1;
 var $270=(($269<<24)>>24)==0;
 if($270){label=77;break;}else{label=75;break;}
 case 75: 
 var $272=(($__grouping+8)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=77;break;}else{label=76;break;}
 case 76: 
 _free($273);
 label=77;break;
 case 77: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 HEAP8[($21)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep146=(($_1_i+1)|0);
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep146)]=65;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 15: 
 HEAP8[($scevgep146)]=97;
 var $specify_precision_0_off0_ph_i147=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i147=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i147;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19864)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19864);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17856)>>2)]=$49;
 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;
 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17856)>>2)];
 if($specify_precision_0_off0_ph_i147){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre144=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $__nbh_sroa_0_1=0;var $101=$_pre144;label=47;break;
 case 29: 
 var $63=HEAP8[(19864)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i147){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19864);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17856)>>2)]=$70;
 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17856)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1119142=$82;var $_1143=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19864);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17856)>>2)]=$88;
 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;
 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17856)>>2)];
 var $94=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$94;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $96=HEAP32[(($__nb)>>2)];
 var $97=($96|0)==0;
 if($97){label=45;break;}else{var $__nc_2=$__nc_1;var $__nbh_sroa_0_1=$96;var $101=$96;label=47;break;}
 case 45: 
 var $99=___cxa_allocate_exception(4);
 var $100=$99;
 HEAP32[(($100)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $101;
 var $__nbh_sroa_0_1;
 var $__nc_2;
 var $102=(($101+$__nc_2)|0);
 var $103=HEAP32[(($5)>>2)];
 var $104=$103&176;
 if(($104|0)==16){ label=48;break;}else if(($104|0)==32){ var $_0_i141=$102;label=54;break;}else{label=53;break;}
 case 48: 
 var $106=HEAP8[($101)];
 if((($106<<24)>>24)==45|(($106<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $108=(($101+1)|0);
 var $_0_i141=$108;label=54;break;
 case 50: 
 var $110=($__nc_2|0)>1;
 var $111=(($106<<24)>>24)==48;
 var $or_cond_i=$110&$111;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $113=(($101+1)|0);
 var $114=HEAP8[($113)];
 if((($114<<24)>>24)==120|(($114<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $116=(($101+2)|0);
 var $_0_i141=$116;label=54;break;
 case 53: 
 var $_0_i141=$101;label=54;break;
 case 54: 
 var $_0_i141;
 var $118=(($__o)|0);
 var $119=($101|0)==($42|0);
 if($119){var $__ob_0=$118;var $__obh_sroa_0_1=0;var $133=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $121=$__nc_2<<3;
 var $122=_malloc($121);
 var $123=$122;
 var $124=($122|0)==0;
 if($124){label=56;break;}else{var $__ob_0=$123;var $__obh_sroa_0_1=$123;var $133=$101;label=59;break;}
 case 56: 
 var $126=___cxa_allocate_exception(4);
 var $127=$126;
 HEAP32[(($127)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($126,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $__obh_sroa_0_0=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $__obh_sroa_0_0;
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $130=$129$0;
 var $131=$129$1;
 var $_0=$130;var $_0118=$131;var $__obh_sroa_0_2=$__obh_sroa_0_0;label=70;break;
 case 59: 
 var $133;
 var $__obh_sroa_0_1;
 var $__ob_0;
 var $134=(($__iob+28)|0);
 var $135=(($1)|0);
 var $136=HEAP32[(($134)>>2)];
 var $137=$136;
 HEAP32[(($135)>>2)]=$137;
 var $138=(($136+4)|0);
 var $139=$138;
 var $140=(tempValue=HEAP32[(($139)>>2)],HEAP32[(($139)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($133,$_0_i141,$102,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $142=HEAP32[(($135)>>2)];
 var $143=(($142+4)|0);
 var $144=(tempValue=HEAP32[(($143)>>2)],HEAP32[(($143)>>2)]=tempValue+-1,tempValue);
 var $145=($144|0)==0;
 if($145){label=61;break;}else{label=62;break;}
 case 61: 
 var $147=(($142)|0);
 var $148=$142;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+8)|0);
 var $151=HEAP32[(($150)>>2)];
 FUNCTION_TABLE[$151]($147);
 label=62;break;
 case 62: 
 var $152=(($__s)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=HEAP32[(($__op)>>2)];
 var $155=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$153,$__ob_0,$154,$155,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $__obh_sroa_0_0=$__obh_sroa_0_1;label=58;break; }
 case 63: 
 var $157=(($2)|0);
 var $158=HEAP32[(($157)>>2)];
 HEAP32[(($152)>>2)]=$158;
 var $159=(($agg_result)|0);
 HEAP32[(($159)>>2)]=$158;
 var $160=($__obh_sroa_0_1|0)==0;
 if($160){label=65;break;}else{label=64;break;}
 case 64: 
 var $162=$__obh_sroa_0_1;
 _free($162);
 label=65;break;
 case 65: 
 var $163=($__nbh_sroa_0_1|0)==0;
 if($163){label=67;break;}else{label=66;break;}
 case 66: 
 _free($__nbh_sroa_0_1);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $166$0 = ___cxa_find_matching_catch(-1, -1); var $166$1 = tempRet0;
 var $167=$166$0;
 var $168=$166$1;
 var $169=HEAP32[(($135)>>2)];
 var $170=(($169+4)|0);
 var $171=(tempValue=HEAP32[(($170)>>2)],HEAP32[(($170)>>2)]=tempValue+-1,tempValue);
 var $172=($171|0)==0;
 if($172){label=69;break;}else{var $_0=$167;var $_0118=$168;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;}
 case 69: 
 var $174=(($169)|0);
 var $175=$169;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+8)|0);
 var $178=HEAP32[(($177)>>2)];
 FUNCTION_TABLE[$178]($174);
 var $_0=$167;var $_0118=$168;var $__obh_sroa_0_2=$__obh_sroa_0_1;label=70;break;
 case 70: 
 var $__obh_sroa_0_2;
 var $_0118;
 var $_0;
 var $179=($__obh_sroa_0_2|0)==0;
 if($179){label=72;break;}else{label=71;break;}
 case 71: 
 var $181=$__obh_sroa_0_2;
 _free($181);
 label=72;break;
 case 72: 
 var $182=($__nbh_sroa_0_1|0)==0;
 if($182){var $_1119142=$_0118;var $_1143=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($__nbh_sroa_0_1);
 var $_1119142=$_0118;var $_1143=$_0;label=74;break;
 case 74: 
 var $_1143;
 var $_1119142;
 var $184$0=$_1143;
 var $184$1=0;
 var $185$0=$184$0;
 var $185$1=$_1119142;
 ___resumeException($185$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($1)]=HEAP8[(5504)];HEAP8[((($1)+(1))|0)]=HEAP8[(5505)];HEAP8[((($1)+(2))|0)]=HEAP8[(5506)];HEAP8[((($1)+(3))|0)]=HEAP8[(5507)];HEAP8[((($1)+(4))|0)]=HEAP8[(5508)];HEAP8[((($1)+(5))|0)]=HEAP8[(5509)];
 var $2=(($__nar)|0);
 var $3=HEAP8[(19864)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19864);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;
 ___resumeException($12$0)
 case 6: 
 var $13=HEAP32[((17856)>>2)];
 var $14=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$13,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=(($__nar+$14)|0);
 var $16=(($__iob+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&176;
 if(($18|0)==32){ var $_0_i=$15;label=13;break;}else if(($18|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $20=HEAP8[($2)];
 if((($20<<24)>>24)==45|(($20<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $22=(($__nar+1)|0);
 var $_0_i=$22;label=13;break;
 case 9: 
 var $24=($14|0)>1;
 var $25=(($20<<24)>>24)==48;
 var $or_cond_i=$24&$25;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $27=(($__nar+1)|0);
 var $28=HEAP8[($27)];
 if((($28<<24)>>24)==120|(($28<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $30=(($__nar+2)|0);
 var $_0_i=$30;label=13;break;
 case 12: 
 var $_0_i=$2;label=13;break;
 case 13: 
 var $_0_i;
 var $32=(($__iob+28)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33+4)|0);
 var $35=$34;
 var $36=(tempValue=HEAP32[(($35)>>2)],HEAP32[(($35)>>2)]=tempValue+1,tempValue);
 var $37=$__p_i_i_i;
 var $38=HEAP32[((19280)>>2)];
 var $39=($38|0)==-1;
 if($39){label=15;break;}else{label=14;break;}
 case 14: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $41=HEAP32[((19284)>>2)];
 var $42=((($41)-(1))|0);
 var $43=(($33+12)|0);
 var $44=$43;
 var $45=HEAP32[(($44)>>2)];
 var $46=(($33+8)|0);
 var $47=$46;
 var $48=HEAP32[(($47)>>2)];
 var $49=$45;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($42>>>0);
 if($53){label=16;break;}else{label=17;break;}
 case 16: 
 var $54=(($48+($42<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=17;break;}else{label=19;break;}
 case 17: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $59=$55;
 var $60=(($33+4)|0);
 var $61=$60;
 var $62=(tempValue=HEAP32[(($61)>>2)],HEAP32[(($61)>>2)]=tempValue+-1,tempValue);
 var $63=($62|0)==0;
 if($63){label=20;break;}else{label=21;break;}
 case 20: 
 var $65=$33;
 var $66=$33;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($65);
 label=21;break;
 case 21: 
 var $70=(($__o)|0);
 var $71=$55;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+48)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=FUNCTION_TABLE[$74]($59,$2,$15,$70);
 var $76=(($__o+($14<<2))|0);
 var $77=($_0_i|0)==($15|0);
 if($77){var $__op_0=$76;label=26;break;}else{label=25;break;}
 case 22: 
 var $79$0 = ___cxa_find_matching_catch(-1, -1); var $79$1 = tempRet0;
 var $80=(($33+4)|0);
 var $81=$80;
 var $82=(tempValue=HEAP32[(($81)>>2)],HEAP32[(($81)>>2)]=tempValue+-1,tempValue);
 var $83=($82|0)==0;
 if($83){label=23;break;}else{label=24;break;}
 case 23: 
 var $85=$33;
 var $86=$33;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 FUNCTION_TABLE[$89]($85);
 label=24;break;
 case 24: 
 ___resumeException($79$0)
 case 25: 
 var $91=$__nar;
 var $92=$_0_i;
 var $93=((($92)-($91))|0);
 var $94=(($__o+($93<<2))|0);
 var $__op_0=$94;label=26;break;
 case 26: 
 var $__op_0;
 var $96=(($__s)|0);
 var $97=HEAP32[(($96)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$97,$70,$__op_0,$76,$__iob,$__fl);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=$__p_i_i_i;
 var $10=HEAP32[((19288)>>2)];
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $13=HEAP32[((19292)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($5+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($5+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$27;
 var $32=(($5+4)|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$5;
 var $38=$5;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=9;break;
 case 9: 
 HEAP32[(($__err)>>2)]=0;
 var $42=($__fmtb|0)==($__fmte|0);
 if($42){var $__e_sroa_0_10=$__e_0;var $__b_sroa_0_7=$__b_0;label=67;break;}else{label=10;break;}
 case 10: 
 var $43=$27;
 var $44=$27;
 var $45=(($27+8)|0);
 var $46=$45;
 var $47=$this;
 var $48=(($2)|0);
 var $49=(($3)|0);
 var $50=(($1)|0);
 var $_0140_ph167=$__fmtb;var $_pre168=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=11;break;
 case 11: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre168;
 var $_0140_ph167;
 var $52=$_pre168;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=12;break;
 case 12: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $52;
 var $53=($52|0)==0;
 if($53){label=13;break;}else{var $__e_sroa_0_10=$__e_sroa_0_1;var $__b_sroa_0_7=$__b_sroa_0_1;label=67;break;}
 case 13: 
 var $55=($__b_sroa_0_1|0)==0;
 if($55){var $__b_sroa_0_2=0;label=16;break;}else{label=14;break;}
 case 14: 
 var $57=(($__b_sroa_0_1+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($__b_sroa_0_1+16)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($58|0)==($60|0);
 if($61){label=15;break;}else{var $__b_sroa_0_2=$__b_sroa_0_1;label=16;break;}
 case 15: 
 var $62=$__b_sroa_0_1;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=FUNCTION_TABLE[$65]($__b_sroa_0_1);
 var $67=($66|0)==-1;
 var $___b_sroa_0_1=($67?0:$__b_sroa_0_1);
 var $__b_sroa_0_2=$___b_sroa_0_1;label=16;break;
 case 16: 
 var $__b_sroa_0_2;
 var $68=($__b_sroa_0_2|0)==0;
 var $69=($__e_sroa_0_1|0)==0;
 if($69){label=20;break;}else{label=17;break;}
 case 17: 
 var $71=(($__e_sroa_0_1+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($__e_sroa_0_1+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=18;break;}else{label=19;break;}
 case 18: 
 var $76=$__e_sroa_0_1;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+36)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=FUNCTION_TABLE[$79]($__e_sroa_0_1);
 var $81=($80|0)==-1;
 if($81){label=20;break;}else{label=19;break;}
 case 19: 
 if($68){var $__e_sroa_0_4=$__e_sroa_0_1;label=25;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=21;break;}
 case 20: 
 if($68){var $__e_sroa_0_3=0;label=21;break;}else{var $__e_sroa_0_4=0;label=25;break;}
 case 21: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $__e_sroa_0_10=$__e_sroa_0_3;var $__b_sroa_0_7=$__b_sroa_0_2;label=67;break;
 case 22: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1); var $84$1 = tempRet0;
 var $85=(($5+4)|0);
 var $86=$85;
 var $87=(tempValue=HEAP32[(($86)>>2)],HEAP32[(($86)>>2)]=tempValue+-1,tempValue);
 var $88=($87|0)==0;
 if($88){label=23;break;}else{label=24;break;}
 case 23: 
 var $90=$5;
 var $91=$5;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+8)|0);
 var $94=HEAP32[(($93)>>2)];
 FUNCTION_TABLE[$94]($90);
 label=24;break;
 case 24: 
 ___resumeException($84$0)
 case 25: 
 var $__e_sroa_0_4;
 var $95=HEAP8[($_0140_ph167)];
 var $96=HEAP32[(($43)>>2)];
 var $97=(($96+36)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=FUNCTION_TABLE[$98]($31,$95,0);
 var $100=(($99<<24)>>24)==37;
 if($100){label=26;break;}else{label=35;break;}
 case 26: 
 var $102=(($_0140_ph167+1)|0);
 var $103=($102|0)==($__fmte|0);
 if($103){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($__err)>>2)]=4;
 var $__e_sroa_0_10=$__e_sroa_0_4;var $__b_sroa_0_7=$__b_sroa_0_2;label=67;break;
 case 28: 
 var $106=HEAP8[($102)];
 var $107=HEAP32[(($43)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($31,$106,0);
 if((($110<<24)>>24)==69|(($110<<24)>>24)==48){ label=29;break;}else{var $__opt_0=0;var $__cmd_0=$110;var $_1=$102;label=32;break;}
 case 29: 
 var $112=(($_0140_ph167+2)|0);
 var $113=($112|0)==($__fmte|0);
 if($113){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($__err)>>2)]=4;
 var $__e_sroa_0_10=$__e_sroa_0_4;var $__b_sroa_0_7=$__b_sroa_0_2;label=67;break;
 case 31: 
 var $116=HEAP8[($112)];
 var $117=HEAP32[(($43)>>2)];
 var $118=(($117+36)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=FUNCTION_TABLE[$119]($31,$116,0);
 var $__opt_0=$110;var $__cmd_0=$120;var $_1=$112;label=32;break;
 case 32: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $122=HEAP32[(($47)>>2)];
 var $123=(($122+36)|0);
 var $124=HEAP32[(($123)>>2)];
 HEAP32[(($48)>>2)]=$__b_sroa_0_2;
 HEAP32[(($49)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$124]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $125=HEAP32[(($50)>>2)];
 var $126=(($_1+1)|0);
 var $_0140_ph_be=$126;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$125;label=33;break;
 case 33: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0140_ph_be;
 var $127=($_0140_ph_be|0)==($__fmte|0);
 if($127){var $__e_sroa_0_10=$__e_sroa_0_5;var $__b_sroa_0_7=$__b_sroa_0_3;label=67;break;}else{label=34;break;}
 case 34: 
 var $_pre168_pre=HEAP32[(($__err)>>2)];
 var $_0140_ph167=$_0140_ph_be;var $_pre168=$_pre168_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=11;break;
 case 35: 
 var $129=HEAP8[($_0140_ph167)];
 var $130=(($129<<24)>>24)<0;
 if($130){label=58;break;}else{label=36;break;}
 case 36: 
 var $131=(($129<<24)>>24);
 var $132=HEAP32[(($46)>>2)];
 var $133=(($132+($131<<1))|0);
 var $134=HEAP16[(($133)>>1)];
 var $135=$134&8192;
 var $136=(($135<<16)>>16)==0;
 if($136){label=58;break;}else{var $_0140_pn=$_0140_ph167;label=37;break;}
 case 37: 
 var $_0140_pn;
 var $_2=(($_0140_pn+1)|0);
 var $137=($_2|0)==($__fmte|0);
 if($137){var $_2_lcssa=$__fmte;label=40;break;}else{label=38;break;}
 case 38: 
 var $139=HEAP8[($_2)];
 var $140=(($139<<24)>>24)<0;
 if($140){var $_2_lcssa=$_2;label=40;break;}else{label=39;break;}
 case 39: 
 var $141=(($139<<24)>>24);
 var $142=(($132+($141<<1))|0);
 var $143=HEAP16[(($142)>>1)];
 var $144=$143&8192;
 var $145=(($144<<16)>>16)==0;
 if($145){var $_2_lcssa=$_2;label=40;break;}else{var $_0140_pn=$_2;label=37;break;}
 case 40: 
 var $_2_lcssa;
 var $147=$__b_sroa_0_2;var $146=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=41;break;
 case 41: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $146;
 var $147;
 var $148=($147|0)==0;
 if($148){var $161=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=44;break;}else{label=42;break;}
 case 42: 
 var $150=(($147+12)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($147+16)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($151|0)==($153|0);
 if($154){label=43;break;}else{var $161=$147;var $__b_sroa_0_5=$__b_sroa_0_4;label=44;break;}
 case 43: 
 var $155=$147;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+36)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=FUNCTION_TABLE[$158]($147);
 var $160=($159|0)==-1;
 var $___b_sroa_0_4=($160?0:$__b_sroa_0_4);
 var $_=($160?0:$147);
 var $161=$_;var $__b_sroa_0_5=$___b_sroa_0_4;label=44;break;
 case 44: 
 var $__b_sroa_0_5;
 var $161;
 var $162=($161|0)==0;
 var $163=($146|0)==0;
 if($163){var $__e_sroa_0_7=$__e_sroa_0_6;label=48;break;}else{label=45;break;}
 case 45: 
 var $165=(($146+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($146+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=47;break;}else{label=46;break;}
 case 46: 
 if($162){var $176=$146;var $__e_sroa_0_8=$__e_sroa_0_6;label=50;break;}else{var $_0140_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 47: 
 var $170=$146;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=FUNCTION_TABLE[$173]($146);
 var $175=($174|0)==-1;
 if($175){var $__e_sroa_0_7=0;label=48;break;}else{label=49;break;}
 case 48: 
 var $__e_sroa_0_7;
 if($162){var $_0140_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{var $176=0;var $__e_sroa_0_8=$__e_sroa_0_7;label=50;break;}
 case 49: 
 if($162){var $176=$146;var $__e_sroa_0_8=$__e_sroa_0_6;label=50;break;}else{var $_0140_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 50: 
 var $__e_sroa_0_8;
 var $176;
 var $177=(($161+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($161+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=51;break;}else{label=52;break;}
 case 51: 
 var $183=$161;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=FUNCTION_TABLE[$186]($161);
 var $extract_t150=(($187)&255);
 var $_0142_off0=$extract_t150;label=53;break;
 case 52: 
 var $189=HEAP8[($178)];
 var $_0142_off0=$189;label=53;break;
 case 53: 
 var $_0142_off0;
 var $190=(($_0142_off0<<24)>>24)<0;
 if($190){var $_0140_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{label=54;break;}
 case 54: 
 var $191=(($_0142_off0<<24)>>24);
 var $192=HEAP32[(($46)>>2)];
 var $193=(($192+($191<<1))|0);
 var $194=HEAP16[(($193)>>1)];
 var $195=$194&8192;
 var $196=(($195<<16)>>16)==0;
 if($196){var $_0140_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{label=55;break;}
 case 55: 
 var $198=HEAP32[(($177)>>2)];
 var $199=HEAP32[(($179)>>2)];
 var $200=($198|0)==($199|0);
 if($200){label=56;break;}else{label=57;break;}
 case 56: 
 var $202=$161;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+40)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=FUNCTION_TABLE[$205]($161);
 var $147=$161;var $146=$176;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=41;break;
 case 57: 
 var $208=(($198+1)|0);
 HEAP32[(($177)>>2)]=$208;
 var $147=$161;var $146=$176;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=41;break;
 case 58: 
 var $209=(($__b_sroa_0_2+12)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=(($__b_sroa_0_2+16)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($210|0)==($212|0);
 if($213){label=59;break;}else{label=60;break;}
 case 59: 
 var $215=$__b_sroa_0_2;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+36)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=FUNCTION_TABLE[$218]($__b_sroa_0_2);
 var $extract_t=(($219)&255);
 var $_0139_off0=$extract_t;label=61;break;
 case 60: 
 var $221=HEAP8[($210)];
 var $_0139_off0=$221;label=61;break;
 case 61: 
 var $_0139_off0;
 var $222=HEAP32[(($44)>>2)];
 var $223=(($222+12)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=FUNCTION_TABLE[$224]($31,$_0139_off0);
 var $226=HEAP8[($_0140_ph167)];
 var $227=HEAP32[(($44)>>2)];
 var $228=(($227+12)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($31,$226);
 var $231=(($225<<24)>>24)==(($230<<24)>>24);
 if($231){label=62;break;}else{label=66;break;}
 case 62: 
 var $233=HEAP32[(($209)>>2)];
 var $234=HEAP32[(($211)>>2)];
 var $235=($233|0)==($234|0);
 if($235){label=63;break;}else{label=64;break;}
 case 63: 
 var $237=$__b_sroa_0_2;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+40)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=FUNCTION_TABLE[$240]($__b_sroa_0_2);
 label=65;break;
 case 64: 
 var $243=(($233+1)|0);
 HEAP32[(($209)>>2)]=$243;
 label=65;break;
 case 65: 
 var $244=(($_0140_ph167+1)|0);
 var $_0140_ph_be=$244;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=33;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $52=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=12;break;
 case 67: 
 var $__b_sroa_0_7;
 var $__e_sroa_0_10;
 var $245=($__b_sroa_0_7|0)==0;
 if($245){label=70;break;}else{label=68;break;}
 case 68: 
 var $247=(($__b_sroa_0_7+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($__b_sroa_0_7+16)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=69;break;}else{label=70;break;}
 case 69: 
 var $252=$__b_sroa_0_7;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=FUNCTION_TABLE[$255]($__b_sroa_0_7);
 var $257=($256|0)==-1;
 if($257){var $258=0;label=71;break;}else{label=70;break;}
 case 70: 
 var $258=$__b_sroa_0_7;label=71;break;
 case 71: 
 var $258;
 var $259=($258|0)==0;
 var $260=($__e_sroa_0_10|0)==0;
 if($260){label=75;break;}else{label=72;break;}
 case 72: 
 var $262=(($__e_sroa_0_10+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($__e_sroa_0_10+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=73;break;}else{label=74;break;}
 case 73: 
 var $267=$__e_sroa_0_10;
 var $268=HEAP32[(($267)>>2)];
 var $269=(($268+36)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=FUNCTION_TABLE[$270]($__e_sroa_0_10);
 var $272=($271|0)==-1;
 if($272){label=75;break;}else{label=74;break;}
 case 74: 
 if($259){label=77;break;}else{label=76;break;}
 case 75: 
 if($259){label=76;break;}else{label=77;break;}
 case 76: 
 var $273=HEAP32[(($__err)>>2)];
 var $274=$273|2;
 HEAP32[(($__err)>>2)]=$274;
 label=77;break;
 case 77: 
 var $276=(($agg_result)|0);
 HEAP32[(($276)>>2)]=$258;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,5488,5496);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $21=$17;label=4;break;
 case 3: 
 var $19=$6;
 var $20=(($19+1)|0);
 var $21=$20;label=4;break;
 case 4: 
 var $21;
 var $22=($12&255);
 var $23=$22&1;
 var $24=($23|0)==0;
 if($24){label=6;break;}else{label=5;break;}
 case 5: 
 var $26=(($6+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $30=$27;label=7;break;
 case 6: 
 var $29=$22>>>1;
 var $30=$29;label=7;break;
 case 7: 
 var $30;
 var $31=(($21+$30)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$21,$31);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19288)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=HEAP32[((19292)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=9;break;
 case 9: 
 var $39=(($__e)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($this+8)|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($41);
 var $46=(($45+168)|0);
 var $47=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$40,$45,$46,$28,$__err,0);
 var $48=$47;
 var $49=$45;
 var $50=((($48)-($49))|0);
 var $51=($50|0)<168;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=(($__tm+24)|0);
 var $54=(((($50|0))/(12))&-1);
 var $55=(((($54|0))%(7))&-1);
 HEAP32[(($53)>>2)]=$55;
 label=11;break;
 case 11: 
 var $56=(($__b)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($agg_result)|0);
 HEAP32[(($58)>>2)]=$57;
 STACKTOP=sp;return;
 case 12: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=(($2+4)|0);
 var $62=$61;
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=13;break;}else{label=14;break;}
 case 13: 
 var $66=$2;
 var $67=$2;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=14;break;
 case 14: 
 ___resumeException($60$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19288)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=HEAP32[((19292)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=9;break;
 case 9: 
 var $39=(($__e)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($this+8)|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($41);
 var $47=(($46+288)|0);
 var $48=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$40,$46,$47,$28,$__err,0);
 var $49=$48;
 var $50=$46;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<288;
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 var $54=(($__tm+16)|0);
 var $55=(((($51|0))/(12))&-1);
 var $56=(((($55|0))%(12))&-1);
 HEAP32[(($54)>>2)]=$56;
 label=11;break;
 case 11: 
 var $57=(($__b)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($agg_result)|0);
 HEAP32[(($59)>>2)]=$58;
 STACKTOP=sp;return;
 case 12: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=(($2+4)|0);
 var $63=$62;
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 var $67=$2;
 var $68=$2;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=14;break;
 case 14: 
 ___resumeException($61$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19288)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=15;break; }
 case 3: 
 var $10=HEAP32[((19292)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=15;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=9;break;
 case 9: 
 var $39=(($__tm+20)|0);
 var $40=(($__e)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$41,$__err,$28,4);
 var $43=HEAP32[(($__err)>>2)];
 var $44=$43&4;
 var $45=($44|0)==0;
 if($45){label=10;break;}else{label=14;break;}
 case 10: 
 var $47=($42|0)<69;
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 var $49=((($42)+(2000))|0);
 var $__t_0_i=$49;label=13;break;
 case 12: 
 var $_off_i=((($42)-(69))|0);
 var $51=($_off_i>>>0)<31;
 var $52=((($42)+(1900))|0);
 var $__i=($51?$52:$42);
 var $__t_0_i=$__i;label=13;break;
 case 13: 
 var $__t_0_i;
 var $54=((($__t_0_i)-(1900))|0);
 HEAP32[(($39)>>2)]=$54;
 label=14;break;
 case 14: 
 var $55=(($__b)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($agg_result)|0);
 HEAP32[(($57)>>2)]=$56;
 STACKTOP=sp;return;
 case 15: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=(($2+4)|0);
 var $61=$60;
 var $62=(tempValue=HEAP32[(($61)>>2)],HEAP32[(($61)>>2)]=tempValue+-1,tempValue);
 var $63=($62|0)==0;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 var $65=$2;
 var $66=$2;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($65);
 label=17;break;
 case 17: 
 ___resumeException($59$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(sp)+(40);
 var $6=(sp)+(48);
 var $7=(sp)+(56);
 var $8=(sp)+(64);
 var $9=(sp)+(72);
 var $10=(sp)+(80);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=$__p_i_i_i;
 var $17=HEAP32[((19288)>>2)];
 var $18=($17|0)==-1;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $20=HEAP32[((19292)>>2)];
 var $21=((($20)-(1))|0);
 var $22=(($12+12)|0);
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($12+8)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$24;
 var $29=$27;
 var $30=((($28)-($29))|0);
 var $31=$30>>2;
 var $32=($31>>>0)>($21>>>0);
 if($32){label=4;break;}else{label=5;break;}
 case 4: 
 var $33=(($27+($21<<2))|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=5;break;}else{label=7;break;}
 case 5: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $38=$34;
 var $39=(($12+4)|0);
 var $40=$39;
 var $41=(tempValue=HEAP32[(($40)>>2)],HEAP32[(($40)>>2)]=tempValue+-1,tempValue);
 var $42=($41|0)==0;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=$12;
 var $45=$12;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+8)|0);
 var $48=HEAP32[(($47)>>2)];
 FUNCTION_TABLE[$48]($44);
 label=9;break;
 case 9: 
 var $49=(($__fmt<<24)>>24);
 switch(($49|0)){case 120:{ label=100;break;}case 88:{ label=101;break;}case 121:{ label=108;break;}case 89:{ label=113;break;}case 37:{ label=115;break;}case 97:case 65:{ label=13;break;}case 98:case 66:case 104:{ label=15;break;}case 99:{ label=17;break;}case 100:case 101:{ label=24;break;}case 68:{ label=28;break;}case 70:{ label=29;break;}case 72:{ label=30;break;}case 73:{ label=33;break;}case 106:{ label=37;break;}case 109:{ label=40;break;}case 77:{ label=43;break;}case 110:case 116:{ label=46;break;}case 112:{ label=77;break;}case 114:{ label=91;break;}case 82:{ label=92;break;}case 83:{ label=93;break;}case 84:{ label=96;break;}case 119:{ label=97;break;}default:{label=146;break;}}break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=(($12+4)|0);
 var $53=$52;
 var $54=(tempValue=HEAP32[(($53)>>2)],HEAP32[(($53)>>2)]=tempValue+-1,tempValue);
 var $55=($54|0)==0;
 if($55){label=11;break;}else{label=12;break;}
 case 11: 
 var $57=$12;
 var $58=$12;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+8)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$61]($57);
 label=12;break;
 case 12: 
 ___resumeException($51$0)
 case 13: 
 var $63=(($__e)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($this+8)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($65);
 var $70=(($69+168)|0);
 var $71=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$64,$69,$70,$38,$__err,0);
 var $72=$71;
 var $73=$69;
 var $74=((($72)-($73))|0);
 var $75=($74|0)<168;
 if($75){label=14;break;}else{label=147;break;}
 case 14: 
 var $77=(($__tm+24)|0);
 var $78=(((($74|0))/(12))&-1);
 var $79=(((($78|0))%(7))&-1);
 HEAP32[(($77)>>2)]=$79;
 label=147;break;
 case 15: 
 var $81=(($__e)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($this+8)|0);
 var $84=$83;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($83);
 var $89=(($88+288)|0);
 var $90=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$82,$88,$89,$38,$__err,0);
 var $91=$90;
 var $92=$88;
 var $93=((($91)-($92))|0);
 var $94=($93|0)<288;
 if($94){label=16;break;}else{label=147;break;}
 case 16: 
 var $96=(($__tm+16)|0);
 var $97=(((($93|0))/(12))&-1);
 var $98=(((($97|0))%(12))&-1);
 HEAP32[(($96)>>2)]=$98;
 label=147;break;
 case 17: 
 var $100=(($this+8)|0);
 var $101=$100;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($100);
 var $106=(($__b)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($__e)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$105;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=19;break;}else{label=18;break;}
 case 18: 
 var $115=(($105+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $120=$116;label=20;break;
 case 19: 
 var $118=$105;
 var $119=(($118+1)|0);
 var $120=$119;label=20;break;
 case 20: 
 var $120;
 var $121=($111&255);
 var $122=$121&1;
 var $123=($122|0)==0;
 if($123){label=22;break;}else{label=21;break;}
 case 21: 
 var $125=(($105+4)|0);
 var $126=HEAP32[(($125)>>2)];
 var $129=$126;label=23;break;
 case 22: 
 var $128=$121>>>1;
 var $129=$128;label=23;break;
 case 23: 
 var $129;
 var $130=(($120+$129)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$107,$109,$__iob,$__err,$__tm,$120,$130);
 var $131=(($2)|0);
 var $132=HEAP32[(($131)>>2)];
 HEAP32[(($106)>>2)]=$132;
 label=147;break;
 case 24: 
 var $134=(($__tm+12)|0);
 var $135=(($__e)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$136,$__err,$38,2);
 var $138=HEAP32[(($__err)>>2)];
 var $139=$138&4;
 var $140=($139|0)==0;
 if($140){label=25;break;}else{label=27;break;}
 case 25: 
 var $_off_i=((($137)-(1))|0);
 var $142=($_off_i>>>0)<31;
 if($142){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP32[(($134)>>2)]=$137;
 label=147;break;
 case 27: 
 var $145=$138|4;
 HEAP32[(($__err)>>2)]=$145;
 label=147;break;
 case 28: 
 var $147=(($__b)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($__e)|0);
 var $150=HEAP32[(($149)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$148,$150,$__iob,$__err,$__tm,5480,5488);
 var $151=(($3)|0);
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($147)>>2)]=$152;
 label=147;break;
 case 29: 
 var $154=(($__b)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($__e)|0);
 var $157=HEAP32[(($156)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$155,$157,$__iob,$__err,$__tm,5472,5480);
 var $158=(($4)|0);
 var $159=HEAP32[(($158)>>2)];
 HEAP32[(($154)>>2)]=$159;
 label=147;break;
 case 30: 
 var $161=(($__e)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$162,$__err,$38,2);
 var $164=HEAP32[(($__err)>>2)];
 var $165=$164&4;
 var $166=($165|0)==0;
 var $167=($163|0)<24;
 var $or_cond_i=$166&$167;
 if($or_cond_i){label=31;break;}else{label=32;break;}
 case 31: 
 var $169=(($__tm+8)|0);
 HEAP32[(($169)>>2)]=$163;
 label=147;break;
 case 32: 
 var $171=$164|4;
 HEAP32[(($__err)>>2)]=$171;
 label=147;break;
 case 33: 
 var $173=(($__tm+8)|0);
 var $174=(($__e)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$175,$__err,$38,2);
 var $177=HEAP32[(($__err)>>2)];
 var $178=$177&4;
 var $179=($178|0)==0;
 if($179){label=34;break;}else{label=36;break;}
 case 34: 
 var $_off_i164=((($176)-(1))|0);
 var $181=($_off_i164>>>0)<12;
 if($181){label=35;break;}else{label=36;break;}
 case 35: 
 HEAP32[(($173)>>2)]=$176;
 label=147;break;
 case 36: 
 var $184=$177|4;
 HEAP32[(($__err)>>2)]=$184;
 label=147;break;
 case 37: 
 var $186=(($__e)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$187,$__err,$38,3);
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189&4;
 var $191=($190|0)==0;
 var $192=($188|0)<366;
 var $or_cond_i167=$191&$192;
 if($or_cond_i167){label=38;break;}else{label=39;break;}
 case 38: 
 var $194=(($__tm+28)|0);
 HEAP32[(($194)>>2)]=$188;
 label=147;break;
 case 39: 
 var $196=$189|4;
 HEAP32[(($__err)>>2)]=$196;
 label=147;break;
 case 40: 
 var $198=(($__e)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$199,$__err,$38,2);
 var $201=((($200)-(1))|0);
 var $202=HEAP32[(($__err)>>2)];
 var $203=$202&4;
 var $204=($203|0)==0;
 var $205=($201|0)<12;
 var $or_cond_i170=$204&$205;
 if($or_cond_i170){label=41;break;}else{label=42;break;}
 case 41: 
 var $207=(($__tm+16)|0);
 HEAP32[(($207)>>2)]=$201;
 label=147;break;
 case 42: 
 var $209=$202|4;
 HEAP32[(($__err)>>2)]=$209;
 label=147;break;
 case 43: 
 var $211=(($__e)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$212,$__err,$38,2);
 var $214=HEAP32[(($__err)>>2)];
 var $215=$214&4;
 var $216=($215|0)==0;
 var $217=($213|0)<60;
 var $or_cond_i173=$216&$217;
 if($or_cond_i173){label=44;break;}else{label=45;break;}
 case 44: 
 var $219=(($__tm+4)|0);
 HEAP32[(($219)>>2)]=$213;
 label=147;break;
 case 45: 
 var $221=$214|4;
 HEAP32[(($__err)>>2)]=$221;
 label=147;break;
 case 46: 
 var $223=(($__e)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($__b)|0);
 var $226=(($34+8)|0);
 var $227=$226;
 var $_sroa_055_0=$224;label=47;break;
 case 47: 
 var $_sroa_055_0;
 var $228=HEAP32[(($225)>>2)];
 var $229=($228|0)==0;
 if($229){var $243=0;label=52;break;}else{label=48;break;}
 case 48: 
 var $231=(($228+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($228+16)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($232|0)==($234|0);
 if($235){label=49;break;}else{var $243=$228;label=52;break;}
 case 49: 
 var $236=$228;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+36)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=FUNCTION_TABLE[$239]($228);
 var $241=($240|0)==-1;
 if($241){label=51;break;}else{label=50;break;}
 case 50: 
 var $_pre_i7=HEAP32[(($225)>>2)];
 var $243=$_pre_i7;label=52;break;
 case 51: 
 HEAP32[(($225)>>2)]=0;
 var $243=0;label=52;break;
 case 52: 
 var $243;
 var $244=($243|0)==0;
 var $245=($_sroa_055_0|0)==0;
 if($245){label=56;break;}else{label=53;break;}
 case 53: 
 var $247=(($_sroa_055_0+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($_sroa_055_0+16)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=54;break;}else{label=55;break;}
 case 54: 
 var $252=$_sroa_055_0;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=FUNCTION_TABLE[$255]($_sroa_055_0);
 var $257=($256|0)==-1;
 if($257){label=56;break;}else{label=55;break;}
 case 55: 
 if($244){var $258=0;var $_sroa_055_2=$_sroa_055_0;label=57;break;}else{var $296=$_sroa_055_0;var $295=0;label=65;break;}
 case 56: 
 if($244){var $296=0;var $295=1;label=65;break;}else{var $258=1;var $_sroa_055_2=0;label=57;break;}
 case 57: 
 var $_sroa_055_2;
 var $258;
 var $259=HEAP32[(($225)>>2)];
 var $260=(($259+12)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=(($259+16)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=($261|0)==($263|0);
 if($264){label=58;break;}else{label=59;break;}
 case 58: 
 var $266=$259;
 var $267=HEAP32[(($266)>>2)];
 var $268=(($267+36)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=FUNCTION_TABLE[$269]($259);
 var $extract_t_i11=(($270)&255);
 var $_054_off0_i=$extract_t_i11;label=60;break;
 case 59: 
 var $272=HEAP8[($261)];
 var $_054_off0_i=$272;label=60;break;
 case 60: 
 var $_054_off0_i;
 var $273=(($_054_off0_i<<24)>>24)<0;
 if($273){var $296=$_sroa_055_2;var $295=$258;label=65;break;}else{label=61;break;}
 case 61: 
 var $274=(($_054_off0_i<<24)>>24);
 var $275=HEAP32[(($227)>>2)];
 var $276=(($275+($274<<1))|0);
 var $277=HEAP16[(($276)>>1)];
 var $278=$277&8192;
 var $279=(($278<<16)>>16)==0;
 if($279){var $296=$_sroa_055_2;var $295=$258;label=65;break;}else{label=62;break;}
 case 62: 
 var $281=HEAP32[(($225)>>2)];
 var $282=(($281+12)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($281+16)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($283|0)==($285|0);
 if($286){label=63;break;}else{label=64;break;}
 case 63: 
 var $288=$281;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+40)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=FUNCTION_TABLE[$291]($281);
 var $_sroa_055_0=$_sroa_055_2;label=47;break;
 case 64: 
 var $294=(($283+1)|0);
 HEAP32[(($282)>>2)]=$294;
 var $_sroa_055_0=$_sroa_055_2;label=47;break;
 case 65: 
 var $295;
 var $296;
 var $297=HEAP32[(($225)>>2)];
 var $298=($297|0)==0;
 if($298){var $312=0;label=70;break;}else{label=66;break;}
 case 66: 
 var $300=(($297+12)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($297+16)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($301|0)==($303|0);
 if($304){label=67;break;}else{var $312=$297;label=70;break;}
 case 67: 
 var $305=$297;
 var $306=HEAP32[(($305)>>2)];
 var $307=(($306+36)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=FUNCTION_TABLE[$308]($297);
 var $310=($309|0)==-1;
 if($310){label=69;break;}else{label=68;break;}
 case 68: 
 var $_pre61_i=HEAP32[(($225)>>2)];
 var $312=$_pre61_i;label=70;break;
 case 69: 
 HEAP32[(($225)>>2)]=0;
 var $312=0;label=70;break;
 case 70: 
 var $312;
 var $313=($312|0)==0;
 if($295){label=74;break;}else{label=71;break;}
 case 71: 
 var $315=(($296+12)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=(($296+16)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($316|0)==($318|0);
 if($319){label=72;break;}else{label=75;break;}
 case 72: 
 var $320=$296;
 var $321=HEAP32[(($320)>>2)];
 var $322=(($321+36)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=FUNCTION_TABLE[$323]($296);
 var $325=($324|0)==-1;
 if($325){label=74;break;}else{label=73;break;}
 case 73: 
 if($313){label=147;break;}else{label=76;break;}
 case 74: 
 if($313){label=76;break;}else{label=147;break;}
 case 75: 
 var $326=($296|0)==0;
 var $tmp57_i18=$313^$326;
 if($tmp57_i18){label=147;break;}else{label=76;break;}
 case 76: 
 var $328=HEAP32[(($__err)>>2)];
 var $329=$328|2;
 HEAP32[(($__err)>>2)]=$329;
 label=147;break;
 case 77: 
 var $331=(($__tm+8)|0);
 var $332=(($__e)|0);
 var $333=HEAP32[(($332)>>2)];
 var $334=(($this+8)|0);
 var $335=$334;
 var $336=HEAP32[(($335)>>2)];
 var $337=(($336+8)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=FUNCTION_TABLE[$338]($334);
 var $340=$339;
 var $341=HEAP8[($340)];
 var $342=($341&255);
 var $343=$342&1;
 var $344=($343|0)==0;
 if($344){label=79;break;}else{label=78;break;}
 case 78: 
 var $346=(($339+4)|0);
 var $347=HEAP32[(($346)>>2)];
 var $350=$347;label=80;break;
 case 79: 
 var $349=$342>>>1;
 var $350=$349;label=80;break;
 case 80: 
 var $350;
 var $351=(($339+12)|0);
 var $352=$351;
 var $353=HEAP8[($352)];
 var $354=($353&255);
 var $355=$354&1;
 var $356=($355|0)==0;
 if($356){label=82;break;}else{label=81;break;}
 case 81: 
 var $358=(($339+16)|0);
 var $359=HEAP32[(($358)>>2)];
 var $362=$359;label=83;break;
 case 82: 
 var $361=$354>>>1;
 var $362=$361;label=83;break;
 case 83: 
 var $362;
 var $363=(((-$362))|0);
 var $364=($350|0)==($363|0);
 if($364){label=84;break;}else{label=85;break;}
 case 84: 
 var $366=HEAP32[(($__err)>>2)];
 var $367=$366|4;
 HEAP32[(($__err)>>2)]=$367;
 label=147;break;
 case 85: 
 var $369=(($339+24)|0);
 var $370=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$333,$339,$369,$38,$__err,0);
 var $371=$370;
 var $372=$339;
 var $373=((($371)-($372))|0);
 var $374=($370|0)==($339|0);
 if($374){label=86;break;}else{label=88;break;}
 case 86: 
 var $376=HEAP32[(($331)>>2)];
 var $377=($376|0)==12;
 if($377){label=87;break;}else{label=88;break;}
 case 87: 
 HEAP32[(($331)>>2)]=0;
 label=147;break;
 case 88: 
 var $380=($373|0)==12;
 if($380){label=89;break;}else{label=147;break;}
 case 89: 
 var $382=HEAP32[(($331)>>2)];
 var $383=($382|0)<12;
 if($383){label=90;break;}else{label=147;break;}
 case 90: 
 var $385=((($382)+(12))|0);
 HEAP32[(($331)>>2)]=$385;
 label=147;break;
 case 91: 
 var $387=(($__b)|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=(($__e)|0);
 var $390=HEAP32[(($389)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$388,$390,$__iob,$__err,$__tm,5456,5467);
 var $391=(($5)|0);
 var $392=HEAP32[(($391)>>2)];
 HEAP32[(($387)>>2)]=$392;
 label=147;break;
 case 92: 
 var $394=(($__b)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=(($__e)|0);
 var $397=HEAP32[(($396)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$395,$397,$__iob,$__err,$__tm,5448,5453);
 var $398=(($6)|0);
 var $399=HEAP32[(($398)>>2)];
 HEAP32[(($394)>>2)]=$399;
 label=147;break;
 case 93: 
 var $401=(($__e)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$402,$__err,$38,2);
 var $404=HEAP32[(($__err)>>2)];
 var $405=$404&4;
 var $406=($405|0)==0;
 var $407=($403|0)<61;
 var $or_cond_i176=$406&$407;
 if($or_cond_i176){label=94;break;}else{label=95;break;}
 case 94: 
 var $409=(($__tm)|0);
 HEAP32[(($409)>>2)]=$403;
 label=147;break;
 case 95: 
 var $411=$404|4;
 HEAP32[(($__err)>>2)]=$411;
 label=147;break;
 case 96: 
 var $413=(($__b)|0);
 var $414=HEAP32[(($413)>>2)];
 var $415=(($__e)|0);
 var $416=HEAP32[(($415)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($7,$this,$414,$416,$__iob,$__err,$__tm,5440,5448);
 var $417=(($7)|0);
 var $418=HEAP32[(($417)>>2)];
 HEAP32[(($413)>>2)]=$418;
 label=147;break;
 case 97: 
 var $420=(($__e)|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$421,$__err,$38,1);
 var $423=HEAP32[(($__err)>>2)];
 var $424=$423&4;
 var $425=($424|0)==0;
 var $426=($422|0)<7;
 var $or_cond_i179=$425&$426;
 if($or_cond_i179){label=98;break;}else{label=99;break;}
 case 98: 
 var $428=(($__tm+24)|0);
 HEAP32[(($428)>>2)]=$422;
 label=147;break;
 case 99: 
 var $430=$423|4;
 HEAP32[(($__err)>>2)]=$430;
 label=147;break;
 case 100: 
 var $432=$this;
 var $433=HEAP32[(($432)>>2)];
 var $434=(($433+20)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=(($__b)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=(($8)|0);
 HEAP32[(($438)>>2)]=$437;
 var $439=(($__e)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($9)|0);
 HEAP32[(($441)>>2)]=$440;
 FUNCTION_TABLE[$435]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=148;break;
 case 101: 
 var $443=(($this+8)|0);
 var $444=$443;
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445+24)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=FUNCTION_TABLE[$447]($443);
 var $449=(($__b)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=(($__e)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=$448;
 var $454=HEAP8[($453)];
 var $455=$454&1;
 var $456=(($455<<24)>>24)==0;
 if($456){label=103;break;}else{label=102;break;}
 case 102: 
 var $458=(($448+8)|0);
 var $459=HEAP32[(($458)>>2)];
 var $463=$459;label=104;break;
 case 103: 
 var $461=$448;
 var $462=(($461+1)|0);
 var $463=$462;label=104;break;
 case 104: 
 var $463;
 var $464=($454&255);
 var $465=$464&1;
 var $466=($465|0)==0;
 if($466){label=106;break;}else{label=105;break;}
 case 105: 
 var $468=(($448+4)|0);
 var $469=HEAP32[(($468)>>2)];
 var $472=$469;label=107;break;
 case 106: 
 var $471=$464>>>1;
 var $472=$471;label=107;break;
 case 107: 
 var $472;
 var $473=(($463+$472)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($10,$this,$450,$452,$__iob,$__err,$__tm,$463,$473);
 var $474=(($10)|0);
 var $475=HEAP32[(($474)>>2)];
 HEAP32[(($449)>>2)]=$475;
 label=147;break;
 case 108: 
 var $477=(($__tm+20)|0);
 var $478=(($__e)|0);
 var $479=HEAP32[(($478)>>2)];
 var $480=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$479,$__err,$38,4);
 var $481=HEAP32[(($__err)>>2)];
 var $482=$481&4;
 var $483=($482|0)==0;
 if($483){label=109;break;}else{label=147;break;}
 case 109: 
 var $485=($480|0)<69;
 if($485){label=110;break;}else{label=111;break;}
 case 110: 
 var $487=((($480)+(2000))|0);
 var $__t_0_i=$487;label=112;break;
 case 111: 
 var $_off_i182=((($480)-(69))|0);
 var $489=($_off_i182>>>0)<31;
 var $490=((($480)+(1900))|0);
 var $__i=($489?$490:$480);
 var $__t_0_i=$__i;label=112;break;
 case 112: 
 var $__t_0_i;
 var $492=((($__t_0_i)-(1900))|0);
 HEAP32[(($477)>>2)]=$492;
 label=147;break;
 case 113: 
 var $494=(($__e)|0);
 var $495=HEAP32[(($494)>>2)];
 var $496=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$495,$__err,$38,4);
 var $497=HEAP32[(($__err)>>2)];
 var $498=$497&4;
 var $499=($498|0)==0;
 if($499){label=114;break;}else{label=147;break;}
 case 114: 
 var $501=(($__tm+20)|0);
 var $502=((($496)-(1900))|0);
 HEAP32[(($501)>>2)]=$502;
 label=147;break;
 case 115: 
 var $504=(($__e)|0);
 var $505=HEAP32[(($504)>>2)];
 var $506=(($__b)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=($507|0)==0;
 if($508){var $522=0;label=120;break;}else{label=116;break;}
 case 116: 
 var $510=(($507+12)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=(($507+16)|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=($511|0)==($513|0);
 if($514){label=117;break;}else{var $522=$507;label=120;break;}
 case 117: 
 var $515=$507;
 var $516=HEAP32[(($515)>>2)];
 var $517=(($516+36)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=FUNCTION_TABLE[$518]($507);
 var $520=($519|0)==-1;
 if($520){label=119;break;}else{label=118;break;}
 case 118: 
 var $_pre_i=HEAP32[(($506)>>2)];
 var $522=$_pre_i;label=120;break;
 case 119: 
 HEAP32[(($506)>>2)]=0;
 var $522=0;label=120;break;
 case 120: 
 var $522;
 var $523=($522|0)==0;
 var $524=($505|0)==0;
 if($524){label=124;break;}else{label=121;break;}
 case 121: 
 var $526=(($505+12)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=(($505+16)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=($527|0)==($529|0);
 if($530){label=122;break;}else{label=123;break;}
 case 122: 
 var $531=$505;
 var $532=HEAP32[(($531)>>2)];
 var $533=(($532+36)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=FUNCTION_TABLE[$534]($505);
 var $536=($535|0)==-1;
 if($536){label=124;break;}else{label=123;break;}
 case 123: 
 if($523){var $541=$505;var $540=0;label=126;break;}else{label=125;break;}
 case 124: 
 if($523){label=125;break;}else{var $541=0;var $540=1;label=126;break;}
 case 125: 
 var $538=HEAP32[(($__err)>>2)];
 var $539=$538|6;
 HEAP32[(($__err)>>2)]=$539;
 label=147;break;
 case 126: 
 var $540;
 var $541;
 var $542=HEAP32[(($506)>>2)];
 var $543=(($542+12)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=(($542+16)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=($544|0)==($546|0);
 if($547){label=127;break;}else{label=128;break;}
 case 127: 
 var $549=$542;
 var $550=HEAP32[(($549)>>2)];
 var $551=(($550+36)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=FUNCTION_TABLE[$552]($542);
 var $extract_t_i=(($553)&255);
 var $_053_off0_i=$extract_t_i;label=129;break;
 case 128: 
 var $555=HEAP8[($544)];
 var $_053_off0_i=$555;label=129;break;
 case 129: 
 var $_053_off0_i;
 var $556=$34;
 var $557=HEAP32[(($556)>>2)];
 var $558=(($557+36)|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=FUNCTION_TABLE[$559]($38,$_053_off0_i,0);
 var $561=(($560<<24)>>24)==37;
 if($561){label=131;break;}else{label=130;break;}
 case 130: 
 var $563=HEAP32[(($__err)>>2)];
 var $564=$563|4;
 HEAP32[(($__err)>>2)]=$564;
 label=147;break;
 case 131: 
 var $566=HEAP32[(($506)>>2)];
 var $567=(($566+12)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=(($566+16)|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=($568|0)==($570|0);
 if($571){label=132;break;}else{label=133;break;}
 case 132: 
 var $573=$566;
 var $574=HEAP32[(($573)>>2)];
 var $575=(($574+40)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=FUNCTION_TABLE[$576]($566);
 label=134;break;
 case 133: 
 var $579=(($568+1)|0);
 HEAP32[(($567)>>2)]=$579;
 label=134;break;
 case 134: 
 var $580=HEAP32[(($506)>>2)];
 var $581=($580|0)==0;
 if($581){var $595=0;label=139;break;}else{label=135;break;}
 case 135: 
 var $583=(($580+12)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($580+16)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=($584|0)==($586|0);
 if($587){label=136;break;}else{var $595=$580;label=139;break;}
 case 136: 
 var $588=$580;
 var $589=HEAP32[(($588)>>2)];
 var $590=(($589+36)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=FUNCTION_TABLE[$591]($580);
 var $593=($592|0)==-1;
 if($593){label=138;break;}else{label=137;break;}
 case 137: 
 var $_pre58_i=HEAP32[(($506)>>2)];
 var $595=$_pre58_i;label=139;break;
 case 138: 
 HEAP32[(($506)>>2)]=0;
 var $595=0;label=139;break;
 case 139: 
 var $595;
 var $596=($595|0)==0;
 if($540){label=143;break;}else{label=140;break;}
 case 140: 
 var $598=(($541+12)|0);
 var $599=HEAP32[(($598)>>2)];
 var $600=(($541+16)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=($599|0)==($601|0);
 if($602){label=141;break;}else{label=144;break;}
 case 141: 
 var $603=$541;
 var $604=HEAP32[(($603)>>2)];
 var $605=(($604+36)|0);
 var $606=HEAP32[(($605)>>2)];
 var $607=FUNCTION_TABLE[$606]($541);
 var $608=($607|0)==-1;
 if($608){label=143;break;}else{label=142;break;}
 case 142: 
 if($596){label=147;break;}else{label=145;break;}
 case 143: 
 if($596){label=145;break;}else{label=147;break;}
 case 144: 
 var $609=($541|0)==0;
 var $tmp57_i=$596^$609;
 if($tmp57_i){label=147;break;}else{label=145;break;}
 case 145: 
 var $611=HEAP32[(($__err)>>2)];
 var $612=$611|2;
 HEAP32[(($__err)>>2)]=$612;
 label=147;break;
 case 146: 
 var $614=HEAP32[(($__err)>>2)];
 var $615=$614|4;
 HEAP32[(($__err)>>2)]=$615;
 label=147;break;
 case 147: 
 var $616=(($__b)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=(($agg_result)|0);
 HEAP32[(($618)>>2)]=$617;
 label=148;break;
 case 148: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre=HEAP32[(($1)>>2)];
 var $17=$_pre;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=($__e_0|0)==0;
 if($19){label=10;break;}else{label=7;break;}
 case 7: 
 var $21=(($__e_0+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($__e_0+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $26=$__e_0;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=FUNCTION_TABLE[$29]($__e_0);
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 if($18){var $35=$__e_0;label=12;break;}else{label=11;break;}
 case 10: 
 if($18){label=11;break;}else{var $35=0;label=12;break;}
 case 11: 
 var $33=HEAP32[(($__err)>>2)];
 var $34=$33|6;
 HEAP32[(($__err)>>2)]=$34;
 var $_0102=0;label=50;break;
 case 12: 
 var $35;
 var $36=HEAP32[(($1)>>2)];
 var $37=(($36+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($36+16)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($38|0)==($40|0);
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 var $43=$36;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=FUNCTION_TABLE[$46]($36);
 var $extract_t=(($47)&255);
 var $_0107_off0=$extract_t;label=15;break;
 case 14: 
 var $49=HEAP8[($38)];
 var $_0107_off0=$49;label=15;break;
 case 15: 
 var $_0107_off0;
 var $50=(($_0107_off0<<24)>>24)<0;
 if($50){label=17;break;}else{label=16;break;}
 case 16: 
 var $51=(($_0107_off0<<24)>>24);
 var $52=(($__ct+8)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+($51<<1))|0);
 var $55=HEAP16[(($54)>>1)];
 var $56=$55&2048;
 var $57=(($56<<16)>>16)==0;
 if($57){label=17;break;}else{label=18;break;}
 case 17: 
 var $58=HEAP32[(($__err)>>2)];
 var $59=$58|4;
 HEAP32[(($__err)>>2)]=$59;
 var $_0102=0;label=50;break;
 case 18: 
 var $61=$__ct;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+36)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=FUNCTION_TABLE[$64]($__ct,$_0107_off0,0);
 var $66=(($65<<24)>>24);
 var $67=HEAP32[(($1)>>2)];
 var $68=(($67+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($67+16)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($69|0)==($71|0);
 if($72){label=19;break;}else{label=20;break;}
 case 19: 
 var $74=$67;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+40)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=FUNCTION_TABLE[$77]($67);
 var $__r_0_in=$66;var $_0_in=$__n;var $81=$35;label=21;break;
 case 20: 
 var $80=(($69+1)|0);
 HEAP32[(($68)>>2)]=$80;
 var $__r_0_in=$66;var $_0_in=$__n;var $81=$35;label=21;break;
 case 21: 
 var $81;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $82=HEAP32[(($1)>>2)];
 var $83=($82|0)==0;
 if($83){var $97=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $85=(($82+12)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($82+16)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($86|0)==($88|0);
 if($89){label=23;break;}else{var $97=$82;label=26;break;}
 case 23: 
 var $90=$82;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+36)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($82);
 var $95=($94|0)==-1;
 if($95){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre123=HEAP32[(($1)>>2)];
 var $97=$_pre123;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $97=0;label=26;break;
 case 26: 
 var $97;
 var $98=($97|0)==0;
 var $99=($81|0)==0;
 if($99){var $114=$97;var $113=0;label=30;break;}else{label=27;break;}
 case 27: 
 var $101=(($81+12)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=(($81+16)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($102|0)==($104|0);
 if($105){label=28;break;}else{var $112=$81;label=29;break;}
 case 28: 
 var $106=$81;
 var $107=HEAP32[(($106)>>2)];
 var $108=(($107+36)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($81);
 var $111=($110|0)==-1;
 var $_2=($111?0:$81);
 var $112=$_2;label=29;break;
 case 29: 
 var $112;
 var $_pr=HEAP32[(($1)>>2)];
 var $114=$_pr;var $113=$112;label=30;break;
 case 30: 
 var $113;
 var $114;
 var $115=($113|0)==0;
 var $116=$98^$115;
 var $117=($_0|0)>0;
 var $_=$116&$117;
 if($_){label=31;break;}else{label=39;break;}
 case 31: 
 var $119=(($114+12)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($114+16)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($120|0)==($122|0);
 if($123){label=32;break;}else{label=33;break;}
 case 32: 
 var $125=$114;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+36)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=FUNCTION_TABLE[$128]($114);
 var $extract_t113=(($129)&255);
 var $_0103_off0=$extract_t113;label=34;break;
 case 33: 
 var $131=HEAP8[($120)];
 var $_0103_off0=$131;label=34;break;
 case 34: 
 var $_0103_off0;
 var $132=(($_0103_off0<<24)>>24)<0;
 if($132){var $_0102=$__r_0;label=50;break;}else{label=35;break;}
 case 35: 
 var $133=(($_0103_off0<<24)>>24);
 var $134=HEAP32[(($52)>>2)];
 var $135=(($134+($133<<1))|0);
 var $136=HEAP16[(($135)>>1)];
 var $137=$136&2048;
 var $138=(($137<<16)>>16)==0;
 if($138){var $_0102=$__r_0;label=50;break;}else{label=36;break;}
 case 36: 
 var $140=((($__r_0)*(10))&-1);
 var $141=HEAP32[(($61)>>2)];
 var $142=(($141+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=FUNCTION_TABLE[$143]($__ct,$_0103_off0,0);
 var $145=(($144<<24)>>24);
 var $146=((($145)+($140))|0);
 var $147=HEAP32[(($1)>>2)];
 var $148=(($147+12)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($147+16)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=($149|0)==($151|0);
 if($152){label=37;break;}else{label=38;break;}
 case 37: 
 var $154=$147;
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+40)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=FUNCTION_TABLE[$157]($147);
 var $__r_0_in=$146;var $_0_in=$_0;var $81=$113;label=21;break;
 case 38: 
 var $160=(($149+1)|0);
 HEAP32[(($148)>>2)]=$160;
 var $__r_0_in=$146;var $_0_in=$_0;var $81=$113;label=21;break;
 case 39: 
 var $162=($114|0)==0;
 if($162){var $176=0;label=44;break;}else{label=40;break;}
 case 40: 
 var $164=(($114+12)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($114+16)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($165|0)==($167|0);
 if($168){label=41;break;}else{var $176=$114;label=44;break;}
 case 41: 
 var $169=$114;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+36)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=FUNCTION_TABLE[$172]($114);
 var $174=($173|0)==-1;
 if($174){label=43;break;}else{label=42;break;}
 case 42: 
 var $_pre124=HEAP32[(($1)>>2)];
 var $176=$_pre124;label=44;break;
 case 43: 
 HEAP32[(($1)>>2)]=0;
 var $176=0;label=44;break;
 case 44: 
 var $176;
 var $177=($176|0)==0;
 if($115){label=48;break;}else{label=45;break;}
 case 45: 
 var $179=(($113+12)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=(($113+16)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=($180|0)==($182|0);
 if($183){label=46;break;}else{label=47;break;}
 case 46: 
 var $184=$113;
 var $185=HEAP32[(($184)>>2)];
 var $186=(($185+36)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=FUNCTION_TABLE[$187]($113);
 var $189=($188|0)==-1;
 if($189){label=48;break;}else{label=47;break;}
 case 47: 
 if($177){var $_0102=$__r_0;label=50;break;}else{label=49;break;}
 case 48: 
 if($177){label=49;break;}else{var $_0102=$__r_0;label=50;break;}
 case 49: 
 var $191=HEAP32[(($__err)>>2)];
 var $192=$191|2;
 HEAP32[(($__err)>>2)]=$192;
 var $_0102=$__r_0;label=50;break;
 case 50: 
 var $_0102;
 return $_0102;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=$__p_i_i_i;
 var $10=HEAP32[((19280)>>2)];
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $13=HEAP32[((19284)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($5+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($5+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$27;
 var $32=(($5+4)|0);
 var $33=$32;
 var $34=(tempValue=HEAP32[(($33)>>2)],HEAP32[(($33)>>2)]=tempValue+-1,tempValue);
 var $35=($34|0)==0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$5;
 var $38=$5;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+8)|0);
 var $41=HEAP32[(($40)>>2)];
 FUNCTION_TABLE[$41]($37);
 label=9;break;
 case 9: 
 HEAP32[(($__err)>>2)]=0;
 var $42=($__fmtb|0)==($__fmte|0);
 if($42){var $__e_sroa_0_10=$__e_0;var $__b_sroa_0_7=$__b_0;label=71;break;}else{label=10;break;}
 case 10: 
 var $43=$27;
 var $44=$27;
 var $45=$27;
 var $46=$this;
 var $47=(($2)|0);
 var $48=(($3)|0);
 var $49=(($1)|0);
 var $_0134_ph154=$__fmtb;var $_pre155=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=11;break;
 case 11: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre155;
 var $_0134_ph154;
 var $51=$_pre155;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=12;break;
 case 12: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $51;
 var $52=($51|0)==0;
 if($52){label=13;break;}else{var $__e_sroa_0_10=$__e_sroa_0_1;var $__b_sroa_0_7=$__b_sroa_0_1;label=71;break;}
 case 13: 
 var $54=($__b_sroa_0_1|0)==0;
 if($54){var $__b_sroa_0_2=0;label=18;break;}else{label=14;break;}
 case 14: 
 var $56=(($__b_sroa_0_1+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($__b_sroa_0_1+16)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($57|0)==($59|0);
 if($60){label=15;break;}else{label=16;break;}
 case 15: 
 var $62=$__b_sroa_0_1;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+36)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=FUNCTION_TABLE[$65]($__b_sroa_0_1);
 var $_0140=$66;label=17;break;
 case 16: 
 var $68=HEAP32[(($57)>>2)];
 var $_0140=$68;label=17;break;
 case 17: 
 var $_0140;
 var $69=($_0140|0)==-1;
 var $___b_sroa_0_1=($69?0:$__b_sroa_0_1);
 var $__b_sroa_0_2=$___b_sroa_0_1;label=18;break;
 case 18: 
 var $__b_sroa_0_2;
 var $70=($__b_sroa_0_2|0)==0;
 var $71=($__e_sroa_0_1|0)==0;
 if($71){label=23;break;}else{label=19;break;}
 case 19: 
 var $73=(($__e_sroa_0_1+12)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=(($__e_sroa_0_1+16)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=($74|0)==($76|0);
 if($77){label=20;break;}else{label=21;break;}
 case 20: 
 var $79=$__e_sroa_0_1;
 var $80=HEAP32[(($79)>>2)];
 var $81=(($80+36)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=FUNCTION_TABLE[$82]($__e_sroa_0_1);
 var $_0139=$83;label=22;break;
 case 21: 
 var $85=HEAP32[(($74)>>2)];
 var $_0139=$85;label=22;break;
 case 22: 
 var $_0139;
 var $86=($_0139|0)==-1;
 if($86){label=23;break;}else{label=24;break;}
 case 23: 
 if($70){var $__e_sroa_0_3=0;label=25;break;}else{var $__e_sroa_0_4=0;label=29;break;}
 case 24: 
 if($70){var $__e_sroa_0_4=$__e_sroa_0_1;label=29;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=25;break;}
 case 25: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $__e_sroa_0_10=$__e_sroa_0_3;var $__b_sroa_0_7=$__b_sroa_0_2;label=71;break;
 case 26: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;
 var $90=(($5+4)|0);
 var $91=$90;
 var $92=(tempValue=HEAP32[(($91)>>2)],HEAP32[(($91)>>2)]=tempValue+-1,tempValue);
 var $93=($92|0)==0;
 if($93){label=27;break;}else{label=28;break;}
 case 27: 
 var $95=$5;
 var $96=$5;
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+8)|0);
 var $99=HEAP32[(($98)>>2)];
 FUNCTION_TABLE[$99]($95);
 label=28;break;
 case 28: 
 ___resumeException($89$0)
 case 29: 
 var $__e_sroa_0_4;
 var $101=HEAP32[(($_0134_ph154)>>2)];
 var $102=HEAP32[(($43)>>2)];
 var $103=(($102+52)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($31,$101,0);
 var $106=(($105<<24)>>24)==37;
 if($106){label=30;break;}else{label=39;break;}
 case 30: 
 var $108=(($_0134_ph154+4)|0);
 var $109=($108|0)==($__fmte|0);
 if($109){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($__err)>>2)]=4;
 var $__e_sroa_0_10=$__e_sroa_0_4;var $__b_sroa_0_7=$__b_sroa_0_2;label=71;break;
 case 32: 
 var $112=HEAP32[(($108)>>2)];
 var $113=HEAP32[(($43)>>2)];
 var $114=(($113+52)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=FUNCTION_TABLE[$115]($31,$112,0);
 if((($116<<24)>>24)==69|(($116<<24)>>24)==48){ label=33;break;}else{var $__opt_0=0;var $__cmd_0=$116;var $_1=$108;label=36;break;}
 case 33: 
 var $118=(($_0134_ph154+8)|0);
 var $119=($118|0)==($__fmte|0);
 if($119){label=34;break;}else{label=35;break;}
 case 34: 
 HEAP32[(($__err)>>2)]=4;
 var $__e_sroa_0_10=$__e_sroa_0_4;var $__b_sroa_0_7=$__b_sroa_0_2;label=71;break;
 case 35: 
 var $122=HEAP32[(($118)>>2)];
 var $123=HEAP32[(($43)>>2)];
 var $124=(($123+52)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=FUNCTION_TABLE[$125]($31,$122,0);
 var $__opt_0=$116;var $__cmd_0=$126;var $_1=$118;label=36;break;
 case 36: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $128=HEAP32[(($46)>>2)];
 var $129=(($128+36)|0);
 var $130=HEAP32[(($129)>>2)];
 HEAP32[(($47)>>2)]=$__b_sroa_0_2;
 HEAP32[(($48)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$130]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $131=HEAP32[(($49)>>2)];
 var $132=(($_1+4)|0);
 var $_0134_ph_be=$132;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$131;label=37;break;
 case 37: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0134_ph_be;
 var $133=($_0134_ph_be|0)==($__fmte|0);
 if($133){var $__e_sroa_0_10=$__e_sroa_0_5;var $__b_sroa_0_7=$__b_sroa_0_3;label=71;break;}else{label=38;break;}
 case 38: 
 var $_pre155_pre=HEAP32[(($__err)>>2)];
 var $_0134_ph154=$_0134_ph_be;var $_pre155=$_pre155_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=11;break;
 case 39: 
 var $135=HEAP32[(($_0134_ph154)>>2)];
 var $136=HEAP32[(($44)>>2)];
 var $137=(($136+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=FUNCTION_TABLE[$138]($31,8192,$135);
 if($139){var $_0134_pn=$_0134_ph154;label=40;break;}else{label=62;break;}
 case 40: 
 var $_0134_pn;
 var $_2=(($_0134_pn+4)|0);
 var $140=($_2|0)==($__fmte|0);
 if($140){var $_2_lcssa=$__fmte;label=42;break;}else{label=41;break;}
 case 41: 
 var $142=HEAP32[(($_2)>>2)];
 var $143=HEAP32[(($44)>>2)];
 var $144=(($143+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=FUNCTION_TABLE[$145]($31,8192,$142);
 if($146){var $_0134_pn=$_2;label=40;break;}else{var $_2_lcssa=$_2;label=42;break;}
 case 42: 
 var $_2_lcssa;
 var $148=$__b_sroa_0_2;var $147=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=43;break;
 case 43: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $147;
 var $148;
 var $149=($148|0)==0;
 if($149){var $165=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=48;break;}else{label=44;break;}
 case 44: 
 var $151=(($148+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($148+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=45;break;}else{label=46;break;}
 case 45: 
 var $157=$148;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($148);
 var $_0138=$161;label=47;break;
 case 46: 
 var $163=HEAP32[(($152)>>2)];
 var $_0138=$163;label=47;break;
 case 47: 
 var $_0138;
 var $164=($_0138|0)==-1;
 var $___b_sroa_0_4=($164?0:$__b_sroa_0_4);
 var $_=($164?0:$148);
 var $165=$_;var $__b_sroa_0_5=$___b_sroa_0_4;label=48;break;
 case 48: 
 var $__b_sroa_0_5;
 var $165;
 var $166=($165|0)==0;
 var $167=($147|0)==0;
 if($167){var $__e_sroa_0_7=$__e_sroa_0_6;label=53;break;}else{label=49;break;}
 case 49: 
 var $169=(($147+12)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($147+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=($170|0)==($172|0);
 if($173){label=50;break;}else{label=51;break;}
 case 50: 
 var $175=$147;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=FUNCTION_TABLE[$178]($147);
 var $_0137=$179;label=52;break;
 case 51: 
 var $181=HEAP32[(($170)>>2)];
 var $_0137=$181;label=52;break;
 case 52: 
 var $_0137;
 var $182=($_0137|0)==-1;
 if($182){var $__e_sroa_0_7=0;label=53;break;}else{label=54;break;}
 case 53: 
 var $__e_sroa_0_7;
 if($166){var $_0134_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=37;break;}else{var $183=0;var $__e_sroa_0_8=$__e_sroa_0_7;label=55;break;}
 case 54: 
 if($166){var $183=$147;var $__e_sroa_0_8=$__e_sroa_0_6;label=55;break;}else{var $_0134_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=37;break;}
 case 55: 
 var $__e_sroa_0_8;
 var $183;
 var $184=(($165+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($165+16)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=($185|0)==($187|0);
 if($188){label=56;break;}else{label=57;break;}
 case 56: 
 var $190=$165;
 var $191=HEAP32[(($190)>>2)];
 var $192=(($191+36)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=FUNCTION_TABLE[$193]($165);
 var $_0136=$194;label=58;break;
 case 57: 
 var $196=HEAP32[(($185)>>2)];
 var $_0136=$196;label=58;break;
 case 58: 
 var $_0136;
 var $197=HEAP32[(($44)>>2)];
 var $198=(($197+12)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=FUNCTION_TABLE[$199]($31,8192,$_0136);
 if($200){label=59;break;}else{var $_0134_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=37;break;}
 case 59: 
 var $202=HEAP32[(($184)>>2)];
 var $203=HEAP32[(($186)>>2)];
 var $204=($202|0)==($203|0);
 if($204){label=60;break;}else{label=61;break;}
 case 60: 
 var $206=$165;
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+40)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=FUNCTION_TABLE[$209]($165);
 var $148=$165;var $147=$183;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=43;break;
 case 61: 
 var $212=(($202+4)|0);
 HEAP32[(($184)>>2)]=$212;
 var $148=$165;var $147=$183;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=43;break;
 case 62: 
 var $214=(($__b_sroa_0_2+12)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($__b_sroa_0_2+16)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=($215|0)==($217|0);
 if($218){label=63;break;}else{label=64;break;}
 case 63: 
 var $220=$__b_sroa_0_2;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+36)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=FUNCTION_TABLE[$223]($__b_sroa_0_2);
 var $_0133=$224;label=65;break;
 case 64: 
 var $226=HEAP32[(($215)>>2)];
 var $_0133=$226;label=65;break;
 case 65: 
 var $_0133;
 var $227=HEAP32[(($45)>>2)];
 var $228=(($227+28)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=FUNCTION_TABLE[$229]($31,$_0133);
 var $231=HEAP32[(($_0134_ph154)>>2)];
 var $232=HEAP32[(($45)>>2)];
 var $233=(($232+28)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=FUNCTION_TABLE[$234]($31,$231);
 var $236=($230|0)==($235|0);
 if($236){label=66;break;}else{label=70;break;}
 case 66: 
 var $238=HEAP32[(($214)>>2)];
 var $239=HEAP32[(($216)>>2)];
 var $240=($238|0)==($239|0);
 if($240){label=67;break;}else{label=68;break;}
 case 67: 
 var $242=$__b_sroa_0_2;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243+40)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=FUNCTION_TABLE[$245]($__b_sroa_0_2);
 label=69;break;
 case 68: 
 var $248=(($238+4)|0);
 HEAP32[(($214)>>2)]=$248;
 label=69;break;
 case 69: 
 var $249=(($_0134_ph154+4)|0);
 var $_0134_ph_be=$249;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=37;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $51=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=12;break;
 case 71: 
 var $__b_sroa_0_7;
 var $__e_sroa_0_10;
 var $250=($__b_sroa_0_7|0)==0;
 if($250){label=76;break;}else{label=72;break;}
 case 72: 
 var $252=(($__b_sroa_0_7+12)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($__b_sroa_0_7+16)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=($253|0)==($255|0);
 if($256){label=73;break;}else{label=74;break;}
 case 73: 
 var $258=$__b_sroa_0_7;
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259+36)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=FUNCTION_TABLE[$261]($__b_sroa_0_7);
 var $_0131=$262;label=75;break;
 case 74: 
 var $264=HEAP32[(($253)>>2)];
 var $_0131=$264;label=75;break;
 case 75: 
 var $_0131;
 var $265=($_0131|0)==-1;
 if($265){var $266=0;label=77;break;}else{label=76;break;}
 case 76: 
 var $266=$__b_sroa_0_7;label=77;break;
 case 77: 
 var $266;
 var $267=($266|0)==0;
 var $268=($__e_sroa_0_10|0)==0;
 if($268){label=82;break;}else{label=78;break;}
 case 78: 
 var $270=(($__e_sroa_0_10+12)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($__e_sroa_0_10+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($271|0)==($273|0);
 if($274){label=79;break;}else{label=80;break;}
 case 79: 
 var $276=$__e_sroa_0_10;
 var $277=HEAP32[(($276)>>2)];
 var $278=(($277+36)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=FUNCTION_TABLE[$279]($__e_sroa_0_10);
 var $_0=$280;label=81;break;
 case 80: 
 var $282=HEAP32[(($271)>>2)];
 var $_0=$282;label=81;break;
 case 81: 
 var $_0;
 var $283=($_0|0)==-1;
 if($283){label=82;break;}else{label=83;break;}
 case 82: 
 if($267){label=84;break;}else{label=85;break;}
 case 83: 
 if($267){label=85;break;}else{label=84;break;}
 case 84: 
 var $284=HEAP32[(($__err)>>2)];
 var $285=$284|2;
 HEAP32[(($__err)>>2)]=$285;
 label=85;break;
 case 85: 
 var $287=(($agg_result)|0);
 HEAP32[(($287)>>2)]=$266;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,5408,5440);
 STACKTOP=sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $20=$17;label=4;break;
 case 3: 
 var $19=(($6+4)|0);
 var $20=$19;label=4;break;
 case 4: 
 var $20;
 var $21=($12&255);
 var $22=$21&1;
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=(($6+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=7;break;
 case 6: 
 var $28=$21>>>1;
 var $29=$28;label=7;break;
 case 7: 
 var $29;
 var $30=(($20+($29<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$20,$30);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19280)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=HEAP32[((19284)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=9;break;
 case 9: 
 var $39=(($__e)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($this+8)|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($41);
 var $46=(($45+168)|0);
 var $47=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$40,$45,$46,$28,$__err,0);
 var $48=$47;
 var $49=$45;
 var $50=((($48)-($49))|0);
 var $51=($50|0)<168;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=(($__tm+24)|0);
 var $54=(((($50|0))/(12))&-1);
 var $55=(((($54|0))%(7))&-1);
 HEAP32[(($53)>>2)]=$55;
 label=11;break;
 case 11: 
 var $56=(($__b)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(($agg_result)|0);
 HEAP32[(($58)>>2)]=$57;
 STACKTOP=sp;return;
 case 12: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1); var $60$1 = tempRet0;
 var $61=(($2+4)|0);
 var $62=$61;
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=13;break;}else{label=14;break;}
 case 13: 
 var $66=$2;
 var $67=$2;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=14;break;
 case 14: 
 ___resumeException($60$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19280)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $10=HEAP32[((19284)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=9;break;
 case 9: 
 var $39=(($__e)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($this+8)|0);
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+4)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($41);
 var $47=(($46+288)|0);
 var $48=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$40,$46,$47,$28,$__err,0);
 var $49=$48;
 var $50=$46;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<288;
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 var $54=(($__tm+16)|0);
 var $55=(((($51|0))/(12))&-1);
 var $56=(((($55|0))%(12))&-1);
 HEAP32[(($54)>>2)]=$56;
 label=11;break;
 case 11: 
 var $57=(($__b)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($agg_result)|0);
 HEAP32[(($59)>>2)]=$58;
 STACKTOP=sp;return;
 case 12: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=(($2+4)|0);
 var $63=$62;
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=13;break;}else{label=14;break;}
 case 13: 
 var $67=$2;
 var $68=$2;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=14;break;
 case 14: 
 ___resumeException($61$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i;
 var $7=HEAP32[((19280)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=15;break; }
 case 3: 
 var $10=HEAP32[((19284)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=$14;
 var $19=$17;
 var $20=((($18)-($19))|0);
 var $21=$20>>2;
 var $22=($21>>>0)>($11>>>0);
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=(($17+($11<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=5;break;}else{label=7;break;}
 case 5: 
 var $26=___cxa_allocate_exception(4);
 var $27=$26;
 HEAP32[(($27)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($26,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=15;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $28=$24;
 var $29=(($2+4)|0);
 var $30=$29;
 var $31=(tempValue=HEAP32[(($30)>>2)],HEAP32[(($30)>>2)]=tempValue+-1,tempValue);
 var $32=($31|0)==0;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$2;
 var $35=$2;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+8)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($34);
 label=9;break;
 case 9: 
 var $39=(($__tm+20)|0);
 var $40=(($__e)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$41,$__err,$28,4);
 var $43=HEAP32[(($__err)>>2)];
 var $44=$43&4;
 var $45=($44|0)==0;
 if($45){label=10;break;}else{label=14;break;}
 case 10: 
 var $47=($42|0)<69;
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 var $49=((($42)+(2000))|0);
 var $__t_0_i=$49;label=13;break;
 case 12: 
 var $_off_i=((($42)-(69))|0);
 var $51=($_off_i>>>0)<31;
 var $52=((($42)+(1900))|0);
 var $__i=($51?$52:$42);
 var $__t_0_i=$__i;label=13;break;
 case 13: 
 var $__t_0_i;
 var $54=((($__t_0_i)-(1900))|0);
 HEAP32[(($39)>>2)]=$54;
 label=14;break;
 case 14: 
 var $55=(($__b)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($agg_result)|0);
 HEAP32[(($57)>>2)]=$56;
 STACKTOP=sp;return;
 case 15: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1); var $59$1 = tempRet0;
 var $60=(($2+4)|0);
 var $61=$60;
 var $62=(tempValue=HEAP32[(($61)>>2)],HEAP32[(($61)>>2)]=tempValue+-1,tempValue);
 var $63=($62|0)==0;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 var $65=$2;
 var $66=$2;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($65);
 label=17;break;
 case 17: 
 ___resumeException($59$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(sp)+(40);
 var $6=(sp)+(48);
 var $7=(sp)+(56);
 var $8=(sp)+(64);
 var $9=(sp)+(72);
 var $10=(sp)+(80);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=$__p_i_i_i;
 var $17=HEAP32[((19280)>>2)];
 var $18=($17|0)==-1;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $20=HEAP32[((19284)>>2)];
 var $21=((($20)-(1))|0);
 var $22=(($12+12)|0);
 var $23=$22;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($12+8)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$24;
 var $29=$27;
 var $30=((($28)-($29))|0);
 var $31=$30>>2;
 var $32=($31>>>0)>($21>>>0);
 if($32){label=4;break;}else{label=5;break;}
 case 4: 
 var $33=(($27+($21<<2))|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($34|0)==0;
 if($35){label=5;break;}else{label=7;break;}
 case 5: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $38=$34;
 var $39=(($12+4)|0);
 var $40=$39;
 var $41=(tempValue=HEAP32[(($40)>>2)],HEAP32[(($40)>>2)]=tempValue+-1,tempValue);
 var $42=($41|0)==0;
 if($42){label=8;break;}else{label=9;break;}
 case 8: 
 var $44=$12;
 var $45=$12;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+8)|0);
 var $48=HEAP32[(($47)>>2)];
 FUNCTION_TABLE[$48]($44);
 label=9;break;
 case 9: 
 var $49=(($__fmt<<24)>>24);
 switch(($49|0)){case 84:{ label=102;break;}case 119:{ label=103;break;}case 120:{ label=106;break;}case 88:{ label=107;break;}case 121:{ label=114;break;}case 89:{ label=119;break;}case 37:{ label=121;break;}case 97:case 65:{ label=13;break;}case 98:case 66:case 104:{ label=15;break;}case 99:{ label=17;break;}case 100:case 101:{ label=24;break;}case 68:{ label=28;break;}case 70:{ label=29;break;}case 72:{ label=30;break;}case 73:{ label=33;break;}case 106:{ label=37;break;}case 109:{ label=40;break;}case 77:{ label=43;break;}case 110:case 116:{ label=46;break;}case 112:{ label=83;break;}case 114:{ label=97;break;}case 82:{ label=98;break;}case 83:{ label=99;break;}default:{label=159;break;}}break;
 case 10: 
 var $51$0 = ___cxa_find_matching_catch(-1, -1); var $51$1 = tempRet0;
 var $52=(($12+4)|0);
 var $53=$52;
 var $54=(tempValue=HEAP32[(($53)>>2)],HEAP32[(($53)>>2)]=tempValue+-1,tempValue);
 var $55=($54|0)==0;
 if($55){label=11;break;}else{label=12;break;}
 case 11: 
 var $57=$12;
 var $58=$12;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+8)|0);
 var $61=HEAP32[(($60)>>2)];
 FUNCTION_TABLE[$61]($57);
 label=12;break;
 case 12: 
 ___resumeException($51$0)
 case 13: 
 var $63=(($__e)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($this+8)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$68]($65);
 var $70=(($69+168)|0);
 var $71=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$64,$69,$70,$38,$__err,0);
 var $72=$71;
 var $73=$69;
 var $74=((($72)-($73))|0);
 var $75=($74|0)<168;
 if($75){label=14;break;}else{label=160;break;}
 case 14: 
 var $77=(($__tm+24)|0);
 var $78=(((($74|0))/(12))&-1);
 var $79=(((($78|0))%(7))&-1);
 HEAP32[(($77)>>2)]=$79;
 label=160;break;
 case 15: 
 var $81=(($__e)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=(($this+8)|0);
 var $84=$83;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($83);
 var $89=(($88+288)|0);
 var $90=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$82,$88,$89,$38,$__err,0);
 var $91=$90;
 var $92=$88;
 var $93=((($91)-($92))|0);
 var $94=($93|0)<288;
 if($94){label=16;break;}else{label=160;break;}
 case 16: 
 var $96=(($__tm+16)|0);
 var $97=(((($93|0))/(12))&-1);
 var $98=(((($97|0))%(12))&-1);
 HEAP32[(($96)>>2)]=$98;
 label=160;break;
 case 17: 
 var $100=(($this+8)|0);
 var $101=$100;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=FUNCTION_TABLE[$104]($100);
 var $106=(($__b)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($__e)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=$105;
 var $111=HEAP8[($110)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=19;break;}else{label=18;break;}
 case 18: 
 var $115=(($105+8)|0);
 var $116=HEAP32[(($115)>>2)];
 var $119=$116;label=20;break;
 case 19: 
 var $118=(($105+4)|0);
 var $119=$118;label=20;break;
 case 20: 
 var $119;
 var $120=($111&255);
 var $121=$120&1;
 var $122=($121|0)==0;
 if($122){label=22;break;}else{label=21;break;}
 case 21: 
 var $124=(($105+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $128=$125;label=23;break;
 case 22: 
 var $127=$120>>>1;
 var $128=$127;label=23;break;
 case 23: 
 var $128;
 var $129=(($119+($128<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$107,$109,$__iob,$__err,$__tm,$119,$129);
 var $130=(($2)|0);
 var $131=HEAP32[(($130)>>2)];
 HEAP32[(($106)>>2)]=$131;
 label=160;break;
 case 24: 
 var $133=(($__tm+12)|0);
 var $134=(($__e)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$135,$__err,$38,2);
 var $137=HEAP32[(($__err)>>2)];
 var $138=$137&4;
 var $139=($138|0)==0;
 if($139){label=25;break;}else{label=27;break;}
 case 25: 
 var $_off_i=((($136)-(1))|0);
 var $141=($_off_i>>>0)<31;
 if($141){label=26;break;}else{label=27;break;}
 case 26: 
 HEAP32[(($133)>>2)]=$136;
 label=160;break;
 case 27: 
 var $144=$137|4;
 HEAP32[(($__err)>>2)]=$144;
 label=160;break;
 case 28: 
 var $146=(($__b)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($__e)|0);
 var $149=HEAP32[(($148)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$147,$149,$__iob,$__err,$__tm,5376,5408);
 var $150=(($3)|0);
 var $151=HEAP32[(($150)>>2)];
 HEAP32[(($146)>>2)]=$151;
 label=160;break;
 case 29: 
 var $153=(($__b)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($__e)|0);
 var $156=HEAP32[(($155)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$154,$156,$__iob,$__err,$__tm,5240,5272);
 var $157=(($4)|0);
 var $158=HEAP32[(($157)>>2)];
 HEAP32[(($153)>>2)]=$158;
 label=160;break;
 case 30: 
 var $160=(($__e)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$161,$__err,$38,2);
 var $163=HEAP32[(($__err)>>2)];
 var $164=$163&4;
 var $165=($164|0)==0;
 var $166=($162|0)<24;
 var $or_cond_i=$165&$166;
 if($or_cond_i){label=31;break;}else{label=32;break;}
 case 31: 
 var $168=(($__tm+8)|0);
 HEAP32[(($168)>>2)]=$162;
 label=160;break;
 case 32: 
 var $170=$163|4;
 HEAP32[(($__err)>>2)]=$170;
 label=160;break;
 case 33: 
 var $172=(($__tm+8)|0);
 var $173=(($__e)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$174,$__err,$38,2);
 var $176=HEAP32[(($__err)>>2)];
 var $177=$176&4;
 var $178=($177|0)==0;
 if($178){label=34;break;}else{label=36;break;}
 case 34: 
 var $_off_i164=((($175)-(1))|0);
 var $180=($_off_i164>>>0)<12;
 if($180){label=35;break;}else{label=36;break;}
 case 35: 
 HEAP32[(($172)>>2)]=$175;
 label=160;break;
 case 36: 
 var $183=$176|4;
 HEAP32[(($__err)>>2)]=$183;
 label=160;break;
 case 37: 
 var $185=(($__e)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$186,$__err,$38,3);
 var $188=HEAP32[(($__err)>>2)];
 var $189=$188&4;
 var $190=($189|0)==0;
 var $191=($187|0)<366;
 var $or_cond_i167=$190&$191;
 if($or_cond_i167){label=38;break;}else{label=39;break;}
 case 38: 
 var $193=(($__tm+28)|0);
 HEAP32[(($193)>>2)]=$187;
 label=160;break;
 case 39: 
 var $195=$188|4;
 HEAP32[(($__err)>>2)]=$195;
 label=160;break;
 case 40: 
 var $197=(($__e)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$198,$__err,$38,2);
 var $200=((($199)-(1))|0);
 var $201=HEAP32[(($__err)>>2)];
 var $202=$201&4;
 var $203=($202|0)==0;
 var $204=($200|0)<12;
 var $or_cond_i170=$203&$204;
 if($or_cond_i170){label=41;break;}else{label=42;break;}
 case 41: 
 var $206=(($__tm+16)|0);
 HEAP32[(($206)>>2)]=$200;
 label=160;break;
 case 42: 
 var $208=$201|4;
 HEAP32[(($__err)>>2)]=$208;
 label=160;break;
 case 43: 
 var $210=(($__e)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$211,$__err,$38,2);
 var $213=HEAP32[(($__err)>>2)];
 var $214=$213&4;
 var $215=($214|0)==0;
 var $216=($212|0)<60;
 var $or_cond_i173=$215&$216;
 if($or_cond_i173){label=44;break;}else{label=45;break;}
 case 44: 
 var $218=(($__tm+4)|0);
 HEAP32[(($218)>>2)]=$212;
 label=160;break;
 case 45: 
 var $220=$213|4;
 HEAP32[(($__err)>>2)]=$220;
 label=160;break;
 case 46: 
 var $222=(($__e)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($__b)|0);
 var $225=$34;
 var $_sroa_059_0=$223;label=47;break;
 case 47: 
 var $_sroa_059_0;
 var $226=HEAP32[(($224)>>2)];
 var $227=($226|0)==0;
 if($227){var $244=1;label=54;break;}else{label=48;break;}
 case 48: 
 var $229=(($226+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($226+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($230|0)==($232|0);
 if($233){label=49;break;}else{label=50;break;}
 case 49: 
 var $235=$226;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+36)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=FUNCTION_TABLE[$238]($226);
 var $_054_i6=$239;label=51;break;
 case 50: 
 var $241=HEAP32[(($230)>>2)];
 var $_054_i6=$241;label=51;break;
 case 51: 
 var $_054_i6;
 var $242=($_054_i6|0)==-1;
 if($242){label=53;break;}else{label=52;break;}
 case 52: 
 var $_pre_i8=HEAP32[(($224)>>2)];
 var $phitmp_i9=($_pre_i8|0)==0;
 var $244=$phitmp_i9;label=54;break;
 case 53: 
 HEAP32[(($224)>>2)]=0;
 var $244=1;label=54;break;
 case 54: 
 var $244;
 var $245=($_sroa_059_0|0)==0;
 if($245){label=59;break;}else{label=55;break;}
 case 55: 
 var $247=(($_sroa_059_0+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($_sroa_059_0+16)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=56;break;}else{label=57;break;}
 case 56: 
 var $253=$_sroa_059_0;
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+36)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=FUNCTION_TABLE[$256]($_sroa_059_0);
 var $_053_i12=$257;label=58;break;
 case 57: 
 var $259=HEAP32[(($248)>>2)];
 var $_053_i12=$259;label=58;break;
 case 58: 
 var $_053_i12;
 var $260=($_053_i12|0)==-1;
 if($260){label=59;break;}else{label=60;break;}
 case 59: 
 if($244){var $296=0;var $295=1;label=68;break;}else{var $261=1;var $_sroa_059_2=0;label=61;break;}
 case 60: 
 if($244){var $261=0;var $_sroa_059_2=$_sroa_059_0;label=61;break;}else{var $296=$_sroa_059_0;var $295=0;label=68;break;}
 case 61: 
 var $_sroa_059_2;
 var $261;
 var $262=HEAP32[(($224)>>2)];
 var $263=(($262+12)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($262+16)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($264|0)==($266|0);
 if($267){label=62;break;}else{label=63;break;}
 case 62: 
 var $269=$262;
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+36)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=FUNCTION_TABLE[$272]($262);
 var $_052_i=$273;label=64;break;
 case 63: 
 var $275=HEAP32[(($264)>>2)];
 var $_052_i=$275;label=64;break;
 case 64: 
 var $_052_i;
 var $276=HEAP32[(($225)>>2)];
 var $277=(($276+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=FUNCTION_TABLE[$278]($38,8192,$_052_i);
 if($279){label=65;break;}else{var $296=$_sroa_059_2;var $295=$261;label=68;break;}
 case 65: 
 var $281=HEAP32[(($224)>>2)];
 var $282=(($281+12)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=(($281+16)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($283|0)==($285|0);
 if($286){label=66;break;}else{label=67;break;}
 case 66: 
 var $288=$281;
 var $289=HEAP32[(($288)>>2)];
 var $290=(($289+40)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=FUNCTION_TABLE[$291]($281);
 var $_sroa_059_0=$_sroa_059_2;label=47;break;
 case 67: 
 var $294=(($283+4)|0);
 HEAP32[(($282)>>2)]=$294;
 var $_sroa_059_0=$_sroa_059_2;label=47;break;
 case 68: 
 var $295;
 var $296;
 var $297=HEAP32[(($224)>>2)];
 var $298=($297|0)==0;
 if($298){var $315=1;label=75;break;}else{label=69;break;}
 case 69: 
 var $300=(($297+12)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(($297+16)|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($301|0)==($303|0);
 if($304){label=70;break;}else{label=71;break;}
 case 70: 
 var $306=$297;
 var $307=HEAP32[(($306)>>2)];
 var $308=(($307+36)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=FUNCTION_TABLE[$309]($297);
 var $_050_i=$310;label=72;break;
 case 71: 
 var $312=HEAP32[(($301)>>2)];
 var $_050_i=$312;label=72;break;
 case 72: 
 var $_050_i;
 var $313=($_050_i|0)==-1;
 if($313){label=74;break;}else{label=73;break;}
 case 73: 
 var $_pre57_i16=HEAP32[(($224)>>2)];
 var $phitmp58_i17=($_pre57_i16|0)==0;
 var $315=$phitmp58_i17;label=75;break;
 case 74: 
 HEAP32[(($224)>>2)]=0;
 var $315=1;label=75;break;
 case 75: 
 var $315;
 if($295){label=80;break;}else{label=76;break;}
 case 76: 
 var $317=(($296+12)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=(($296+16)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=($318|0)==($320|0);
 if($321){label=77;break;}else{label=78;break;}
 case 77: 
 var $323=$296;
 var $324=HEAP32[(($323)>>2)];
 var $325=(($324+36)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=FUNCTION_TABLE[$326]($296);
 var $_0_i20=$327;label=79;break;
 case 78: 
 var $329=HEAP32[(($318)>>2)];
 var $_0_i20=$329;label=79;break;
 case 79: 
 var $_0_i20;
 var $330=($_0_i20|0)==-1;
 if($330){label=80;break;}else{label=81;break;}
 case 80: 
 if($315){label=82;break;}else{label=160;break;}
 case 81: 
 var $331=($296|0)==0;
 var $tmp55_i=$315^$331;
 if($tmp55_i){label=160;break;}else{label=82;break;}
 case 82: 
 var $333=HEAP32[(($__err)>>2)];
 var $334=$333|2;
 HEAP32[(($__err)>>2)]=$334;
 label=160;break;
 case 83: 
 var $336=(($__tm+8)|0);
 var $337=(($__e)|0);
 var $338=HEAP32[(($337)>>2)];
 var $339=(($this+8)|0);
 var $340=$339;
 var $341=HEAP32[(($340)>>2)];
 var $342=(($341+8)|0);
 var $343=HEAP32[(($342)>>2)];
 var $344=FUNCTION_TABLE[$343]($339);
 var $345=$344;
 var $346=HEAP8[($345)];
 var $347=($346&255);
 var $348=$347&1;
 var $349=($348|0)==0;
 if($349){label=85;break;}else{label=84;break;}
 case 84: 
 var $351=(($344+4)|0);
 var $352=HEAP32[(($351)>>2)];
 var $355=$352;label=86;break;
 case 85: 
 var $354=$347>>>1;
 var $355=$354;label=86;break;
 case 86: 
 var $355;
 var $356=(($344+12)|0);
 var $357=$356;
 var $358=HEAP8[($357)];
 var $359=($358&255);
 var $360=$359&1;
 var $361=($360|0)==0;
 if($361){label=88;break;}else{label=87;break;}
 case 87: 
 var $363=(($344+16)|0);
 var $364=HEAP32[(($363)>>2)];
 var $367=$364;label=89;break;
 case 88: 
 var $366=$359>>>1;
 var $367=$366;label=89;break;
 case 89: 
 var $367;
 var $368=(((-$367))|0);
 var $369=($355|0)==($368|0);
 if($369){label=90;break;}else{label=91;break;}
 case 90: 
 var $371=HEAP32[(($__err)>>2)];
 var $372=$371|4;
 HEAP32[(($__err)>>2)]=$372;
 label=160;break;
 case 91: 
 var $374=(($344+24)|0);
 var $375=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$338,$344,$374,$38,$__err,0);
 var $376=$375;
 var $377=$344;
 var $378=((($376)-($377))|0);
 var $379=($375|0)==($344|0);
 if($379){label=92;break;}else{label=94;break;}
 case 92: 
 var $381=HEAP32[(($336)>>2)];
 var $382=($381|0)==12;
 if($382){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($336)>>2)]=0;
 label=160;break;
 case 94: 
 var $385=($378|0)==12;
 if($385){label=95;break;}else{label=160;break;}
 case 95: 
 var $387=HEAP32[(($336)>>2)];
 var $388=($387|0)<12;
 if($388){label=96;break;}else{label=160;break;}
 case 96: 
 var $390=((($387)+(12))|0);
 HEAP32[(($336)>>2)]=$390;
 label=160;break;
 case 97: 
 var $392=(($__b)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=(($__e)|0);
 var $395=HEAP32[(($394)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$393,$395,$__iob,$__err,$__tm,5328,5372);
 var $396=(($5)|0);
 var $397=HEAP32[(($396)>>2)];
 HEAP32[(($392)>>2)]=$397;
 label=160;break;
 case 98: 
 var $399=(($__b)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=(($__e)|0);
 var $402=HEAP32[(($401)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$400,$402,$__iob,$__err,$__tm,5304,5324);
 var $403=(($6)|0);
 var $404=HEAP32[(($403)>>2)];
 HEAP32[(($399)>>2)]=$404;
 label=160;break;
 case 99: 
 var $406=(($__e)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$407,$__err,$38,2);
 var $409=HEAP32[(($__err)>>2)];
 var $410=$409&4;
 var $411=($410|0)==0;
 var $412=($408|0)<61;
 var $or_cond_i176=$411&$412;
 if($or_cond_i176){label=100;break;}else{label=101;break;}
 case 100: 
 var $414=(($__tm)|0);
 HEAP32[(($414)>>2)]=$408;
 label=160;break;
 case 101: 
 var $416=$409|4;
 HEAP32[(($__err)>>2)]=$416;
 label=160;break;
 case 102: 
 var $418=(($__b)|0);
 var $419=HEAP32[(($418)>>2)];
 var $420=(($__e)|0);
 var $421=HEAP32[(($420)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($7,$this,$419,$421,$__iob,$__err,$__tm,5272,5304);
 var $422=(($7)|0);
 var $423=HEAP32[(($422)>>2)];
 HEAP32[(($418)>>2)]=$423;
 label=160;break;
 case 103: 
 var $425=(($__e)|0);
 var $426=HEAP32[(($425)>>2)];
 var $427=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$426,$__err,$38,1);
 var $428=HEAP32[(($__err)>>2)];
 var $429=$428&4;
 var $430=($429|0)==0;
 var $431=($427|0)<7;
 var $or_cond_i179=$430&$431;
 if($or_cond_i179){label=104;break;}else{label=105;break;}
 case 104: 
 var $433=(($__tm+24)|0);
 HEAP32[(($433)>>2)]=$427;
 label=160;break;
 case 105: 
 var $435=$428|4;
 HEAP32[(($__err)>>2)]=$435;
 label=160;break;
 case 106: 
 var $437=$this;
 var $438=HEAP32[(($437)>>2)];
 var $439=(($438+20)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($__b)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=(($8)|0);
 HEAP32[(($443)>>2)]=$442;
 var $444=(($__e)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(($9)|0);
 HEAP32[(($446)>>2)]=$445;
 FUNCTION_TABLE[$440]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=161;break;
 case 107: 
 var $448=(($this+8)|0);
 var $449=$448;
 var $450=HEAP32[(($449)>>2)];
 var $451=(($450+24)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=FUNCTION_TABLE[$452]($448);
 var $454=(($__b)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=(($__e)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=$453;
 var $459=HEAP8[($458)];
 var $460=$459&1;
 var $461=(($460<<24)>>24)==0;
 if($461){label=109;break;}else{label=108;break;}
 case 108: 
 var $463=(($453+8)|0);
 var $464=HEAP32[(($463)>>2)];
 var $467=$464;label=110;break;
 case 109: 
 var $466=(($453+4)|0);
 var $467=$466;label=110;break;
 case 110: 
 var $467;
 var $468=($459&255);
 var $469=$468&1;
 var $470=($469|0)==0;
 if($470){label=112;break;}else{label=111;break;}
 case 111: 
 var $472=(($453+4)|0);
 var $473=HEAP32[(($472)>>2)];
 var $476=$473;label=113;break;
 case 112: 
 var $475=$468>>>1;
 var $476=$475;label=113;break;
 case 113: 
 var $476;
 var $477=(($467+($476<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($10,$this,$455,$457,$__iob,$__err,$__tm,$467,$477);
 var $478=(($10)|0);
 var $479=HEAP32[(($478)>>2)];
 HEAP32[(($454)>>2)]=$479;
 label=160;break;
 case 114: 
 var $481=(($__tm+20)|0);
 var $482=(($__e)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$483,$__err,$38,4);
 var $485=HEAP32[(($__err)>>2)];
 var $486=$485&4;
 var $487=($486|0)==0;
 if($487){label=115;break;}else{label=160;break;}
 case 115: 
 var $489=($484|0)<69;
 if($489){label=116;break;}else{label=117;break;}
 case 116: 
 var $491=((($484)+(2000))|0);
 var $__t_0_i=$491;label=118;break;
 case 117: 
 var $_off_i182=((($484)-(69))|0);
 var $493=($_off_i182>>>0)<31;
 var $494=((($484)+(1900))|0);
 var $__i=($493?$494:$484);
 var $__t_0_i=$__i;label=118;break;
 case 118: 
 var $__t_0_i;
 var $496=((($__t_0_i)-(1900))|0);
 HEAP32[(($481)>>2)]=$496;
 label=160;break;
 case 119: 
 var $498=(($__e)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$499,$__err,$38,4);
 var $501=HEAP32[(($__err)>>2)];
 var $502=$501&4;
 var $503=($502|0)==0;
 if($503){label=120;break;}else{label=160;break;}
 case 120: 
 var $505=(($__tm+20)|0);
 var $506=((($500)-(1900))|0);
 HEAP32[(($505)>>2)]=$506;
 label=160;break;
 case 121: 
 var $508=(($__e)|0);
 var $509=HEAP32[(($508)>>2)];
 var $510=(($__b)|0);
 var $511=HEAP32[(($510)>>2)];
 var $512=($511|0)==0;
 if($512){var $529=1;label=128;break;}else{label=122;break;}
 case 122: 
 var $514=(($511+12)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=(($511+16)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=($515|0)==($517|0);
 if($518){label=123;break;}else{label=124;break;}
 case 123: 
 var $520=$511;
 var $521=HEAP32[(($520)>>2)];
 var $522=(($521+36)|0);
 var $523=HEAP32[(($522)>>2)];
 var $524=FUNCTION_TABLE[$523]($511);
 var $_055_i=$524;label=125;break;
 case 124: 
 var $526=HEAP32[(($515)>>2)];
 var $_055_i=$526;label=125;break;
 case 125: 
 var $_055_i;
 var $527=($_055_i|0)==-1;
 if($527){label=127;break;}else{label=126;break;}
 case 126: 
 var $_pre_i=HEAP32[(($510)>>2)];
 var $phitmp_i=($_pre_i|0)==0;
 var $529=$phitmp_i;label=128;break;
 case 127: 
 HEAP32[(($510)>>2)]=0;
 var $529=1;label=128;break;
 case 128: 
 var $529;
 var $530=($509|0)==0;
 if($530){label=133;break;}else{label=129;break;}
 case 129: 
 var $532=(($509+12)|0);
 var $533=HEAP32[(($532)>>2)];
 var $534=(($509+16)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=($533|0)==($535|0);
 if($536){label=130;break;}else{label=131;break;}
 case 130: 
 var $538=$509;
 var $539=HEAP32[(($538)>>2)];
 var $540=(($539+36)|0);
 var $541=HEAP32[(($540)>>2)];
 var $542=FUNCTION_TABLE[$541]($509);
 var $_054_i=$542;label=132;break;
 case 131: 
 var $544=HEAP32[(($533)>>2)];
 var $_054_i=$544;label=132;break;
 case 132: 
 var $_054_i;
 var $545=($_054_i|0)==-1;
 if($545){label=133;break;}else{label=134;break;}
 case 133: 
 if($529){label=135;break;}else{var $550=0;var $549=1;label=136;break;}
 case 134: 
 if($529){var $550=$509;var $549=0;label=136;break;}else{label=135;break;}
 case 135: 
 var $547=HEAP32[(($__err)>>2)];
 var $548=$547|6;
 HEAP32[(($__err)>>2)]=$548;
 label=160;break;
 case 136: 
 var $549;
 var $550;
 var $551=HEAP32[(($510)>>2)];
 var $552=(($551+12)|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=(($551+16)|0);
 var $555=HEAP32[(($554)>>2)];
 var $556=($553|0)==($555|0);
 if($556){label=137;break;}else{label=138;break;}
 case 137: 
 var $558=$551;
 var $559=HEAP32[(($558)>>2)];
 var $560=(($559+36)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=FUNCTION_TABLE[$561]($551);
 var $_053_i=$562;label=139;break;
 case 138: 
 var $564=HEAP32[(($553)>>2)];
 var $_053_i=$564;label=139;break;
 case 139: 
 var $_053_i;
 var $565=$34;
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566+52)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=FUNCTION_TABLE[$568]($38,$_053_i,0);
 var $570=(($569<<24)>>24)==37;
 if($570){label=141;break;}else{label=140;break;}
 case 140: 
 var $572=HEAP32[(($__err)>>2)];
 var $573=$572|4;
 HEAP32[(($__err)>>2)]=$573;
 label=160;break;
 case 141: 
 var $575=HEAP32[(($510)>>2)];
 var $576=(($575+12)|0);
 var $577=HEAP32[(($576)>>2)];
 var $578=(($575+16)|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=($577|0)==($579|0);
 if($580){label=142;break;}else{label=143;break;}
 case 142: 
 var $582=$575;
 var $583=HEAP32[(($582)>>2)];
 var $584=(($583+40)|0);
 var $585=HEAP32[(($584)>>2)];
 var $586=FUNCTION_TABLE[$585]($575);
 label=144;break;
 case 143: 
 var $588=(($577+4)|0);
 HEAP32[(($576)>>2)]=$588;
 label=144;break;
 case 144: 
 var $589=HEAP32[(($510)>>2)];
 var $590=($589|0)==0;
 if($590){var $607=1;label=151;break;}else{label=145;break;}
 case 145: 
 var $592=(($589+12)|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=(($589+16)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=($593|0)==($595|0);
 if($596){label=146;break;}else{label=147;break;}
 case 146: 
 var $598=$589;
 var $599=HEAP32[(($598)>>2)];
 var $600=(($599+36)|0);
 var $601=HEAP32[(($600)>>2)];
 var $602=FUNCTION_TABLE[$601]($589);
 var $_051_i=$602;label=148;break;
 case 147: 
 var $604=HEAP32[(($593)>>2)];
 var $_051_i=$604;label=148;break;
 case 148: 
 var $_051_i;
 var $605=($_051_i|0)==-1;
 if($605){label=150;break;}else{label=149;break;}
 case 149: 
 var $_pre57_i=HEAP32[(($510)>>2)];
 var $phitmp58_i=($_pre57_i|0)==0;
 var $607=$phitmp58_i;label=151;break;
 case 150: 
 HEAP32[(($510)>>2)]=0;
 var $607=1;label=151;break;
 case 151: 
 var $607;
 if($549){label=156;break;}else{label=152;break;}
 case 152: 
 var $609=(($550+12)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=(($550+16)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=($610|0)==($612|0);
 if($613){label=153;break;}else{label=154;break;}
 case 153: 
 var $615=$550;
 var $616=HEAP32[(($615)>>2)];
 var $617=(($616+36)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=FUNCTION_TABLE[$618]($550);
 var $_0_i=$619;label=155;break;
 case 154: 
 var $621=HEAP32[(($610)>>2)];
 var $_0_i=$621;label=155;break;
 case 155: 
 var $_0_i;
 var $622=($_0_i|0)==-1;
 if($622){label=156;break;}else{label=157;break;}
 case 156: 
 if($607){label=158;break;}else{label=160;break;}
 case 157: 
 var $623=($550|0)==0;
 var $tmp56_i=$607^$623;
 if($tmp56_i){label=160;break;}else{label=158;break;}
 case 158: 
 var $625=HEAP32[(($__err)>>2)];
 var $626=$625|2;
 HEAP32[(($__err)>>2)]=$626;
 label=160;break;
 case 159: 
 var $628=HEAP32[(($__err)>>2)];
 var $629=$628|4;
 HEAP32[(($__err)>>2)]=$629;
 label=160;break;
 case 160: 
 var $630=(($__b)|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=(($agg_result)|0);
 HEAP32[(($632)>>2)]=$631;
 label=161;break;
 case 161: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,$__n){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0107=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0107=$17;label=5;break;
 case 5: 
 var $_0107;
 var $18=($_0107|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($1)>>2)];
 var $phitmp=($_pre|0)==0;
 var $20=$phitmp;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=($__e_0|0)==0;
 if($21){label=13;break;}else{label=9;break;}
 case 9: 
 var $23=(($__e_0+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($__e_0+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=$__e_0;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__e_0);
 var $_0106=$33;label=12;break;
 case 11: 
 var $35=HEAP32[(($24)>>2)];
 var $_0106=$35;label=12;break;
 case 12: 
 var $_0106;
 var $36=($_0106|0)==-1;
 if($36){label=13;break;}else{label=14;break;}
 case 13: 
 if($20){label=15;break;}else{var $40=0;label=16;break;}
 case 14: 
 if($20){var $40=$__e_0;label=16;break;}else{label=15;break;}
 case 15: 
 var $38=HEAP32[(($__err)>>2)];
 var $39=$38|6;
 HEAP32[(($__err)>>2)]=$39;
 var $_0100=0;label=59;break;
 case 16: 
 var $40;
 var $41=HEAP32[(($1)>>2)];
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($41+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=$41;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=FUNCTION_TABLE[$51]($41);
 var $_0105=$52;label=19;break;
 case 18: 
 var $54=HEAP32[(($43)>>2)];
 var $_0105=$54;label=19;break;
 case 19: 
 var $_0105;
 var $55=$__ct;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=FUNCTION_TABLE[$58]($__ct,2048,$_0105);
 if($59){label=21;break;}else{label=20;break;}
 case 20: 
 var $61=HEAP32[(($__err)>>2)];
 var $62=$61|4;
 HEAP32[(($__err)>>2)]=$62;
 var $_0100=0;label=59;break;
 case 21: 
 var $64=$__ct;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+52)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($__ct,$_0105,0);
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=22;break;}else{label=23;break;}
 case 22: 
 var $77=$70;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+40)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($70);
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$40;label=24;break;
 case 23: 
 var $83=(($72+4)|0);
 HEAP32[(($71)>>2)]=$83;
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$40;label=24;break;
 case 24: 
 var $84;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $103=0;label=31;break;}else{label=25;break;}
 case 25: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=26;break;}else{label=27;break;}
 case 26: 
 var $94=$85;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($85);
 var $_0103=$98;label=28;break;
 case 27: 
 var $100=HEAP32[(($89)>>2)];
 var $_0103=$100;label=28;break;
 case 28: 
 var $_0103;
 var $101=($_0103|0)==-1;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre114=HEAP32[(($1)>>2)];
 var $103=$_pre114;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $103=0;label=31;break;
 case 31: 
 var $103;
 var $104=($103|0)==0;
 var $105=($84|0)==0;
 if($105){var $122=$103;var $121=0;label=36;break;}else{label=32;break;}
 case 32: 
 var $107=(($84+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($84+16)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=($108|0)==($110|0);
 if($111){label=33;break;}else{label=34;break;}
 case 33: 
 var $113=$84;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+36)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=FUNCTION_TABLE[$116]($84);
 var $_0102=$117;label=35;break;
 case 34: 
 var $119=HEAP32[(($108)>>2)];
 var $_0102=$119;label=35;break;
 case 35: 
 var $_0102;
 var $120=($_0102|0)==-1;
 var $_2=($120?0:$84);
 var $_pr=HEAP32[(($1)>>2)];
 var $122=$_pr;var $121=$_2;label=36;break;
 case 36: 
 var $121;
 var $122;
 var $123=($121|0)==0;
 var $124=$104^$123;
 var $125=($_0|0)>0;
 var $_=$124&$125;
 if($_){label=37;break;}else{label=44;break;}
 case 37: 
 var $127=(($122+12)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($122+16)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($128|0)==($130|0);
 if($131){label=38;break;}else{label=39;break;}
 case 38: 
 var $133=$122;
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134+36)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=FUNCTION_TABLE[$136]($122);
 var $_0101=$137;label=40;break;
 case 39: 
 var $139=HEAP32[(($128)>>2)];
 var $_0101=$139;label=40;break;
 case 40: 
 var $_0101;
 var $140=HEAP32[(($55)>>2)];
 var $141=(($140+12)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=FUNCTION_TABLE[$142]($__ct,2048,$_0101);
 if($143){label=41;break;}else{var $_0100=$__r_0;label=59;break;}
 case 41: 
 var $145=((($__r_0)*(10))&-1);
 var $146=HEAP32[(($64)>>2)];
 var $147=(($146+52)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=FUNCTION_TABLE[$148]($__ct,$_0101,0);
 var $150=(($149<<24)>>24);
 var $151=((($150)+($145))|0);
 var $152=HEAP32[(($1)>>2)];
 var $153=(($152+12)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($152+16)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($154|0)==($156|0);
 if($157){label=42;break;}else{label=43;break;}
 case 42: 
 var $159=$152;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+40)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=FUNCTION_TABLE[$162]($152);
 var $__r_0_in=$151;var $_0_in=$_0;var $84=$121;label=24;break;
 case 43: 
 var $165=(($154+4)|0);
 HEAP32[(($153)>>2)]=$165;
 var $__r_0_in=$151;var $_0_in=$_0;var $84=$121;label=24;break;
 case 44: 
 var $167=($122|0)==0;
 if($167){var $184=1;label=51;break;}else{label=45;break;}
 case 45: 
 var $169=(($122+12)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=(($122+16)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=($170|0)==($172|0);
 if($173){label=46;break;}else{label=47;break;}
 case 46: 
 var $175=$122;
 var $176=HEAP32[(($175)>>2)];
 var $177=(($176+36)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=FUNCTION_TABLE[$178]($122);
 var $_098=$179;label=48;break;
 case 47: 
 var $181=HEAP32[(($170)>>2)];
 var $_098=$181;label=48;break;
 case 48: 
 var $_098;
 var $182=($_098|0)==-1;
 if($182){label=50;break;}else{label=49;break;}
 case 49: 
 var $_pre115=HEAP32[(($1)>>2)];
 var $phitmp116=($_pre115|0)==0;
 var $184=$phitmp116;label=51;break;
 case 50: 
 HEAP32[(($1)>>2)]=0;
 var $184=1;label=51;break;
 case 51: 
 var $184;
 if($123){label=56;break;}else{label=52;break;}
 case 52: 
 var $186=(($121+12)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(($121+16)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($187|0)==($189|0);
 if($190){label=53;break;}else{label=54;break;}
 case 53: 
 var $192=$121;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+36)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=FUNCTION_TABLE[$195]($121);
 var $_097=$196;label=55;break;
 case 54: 
 var $198=HEAP32[(($187)>>2)];
 var $_097=$198;label=55;break;
 case 55: 
 var $_097;
 var $199=($_097|0)==-1;
 if($199){label=56;break;}else{label=57;break;}
 case 56: 
 if($184){label=58;break;}else{var $_0100=$__r_0;label=59;break;}
 case 57: 
 if($184){var $_0100=$__r_0;label=59;break;}else{label=58;break;}
 case 58: 
 var $201=HEAP32[(($__err)>>2)];
 var $202=$201|2;
 HEAP32[(($__err)>>2)]=$202;
 var $_0100=$__r_0;label=59;break;
 case 59: 
 var $_0100;
 return $_0100;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(19864)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(19864);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((17856)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $21=($this|0)==0;
 if($21){label=12;break;}else{label=11;break;}
 case 11: 
 _free($1);
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(19864)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19864);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 label=9;break;
 case 6: 
 var $14=HEAP32[((17856)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $4=(($fmt_i)|0);
 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $_sroa_0_0__idx=(($__s)|0);
 var $_sroa_0_0_copyload1=HEAP32[(($_sroa_0_0__idx)>>2)];
 var $14=($12|0)==0;
 if($14){var $_sroa_0_0_lcssa=$_sroa_0_0_copyload1;label=10;break;}else{var $_sroa_0_037=$_sroa_0_0_copyload1;var $_03338=$3;label=4;break;}
 case 4: 
 var $_03338;
 var $_sroa_0_037;
 var $15=HEAP8[($_03338)];
 var $16=($_sroa_0_037|0)==0;
 if($16){var $_sroa_0_1=0;label=9;break;}else{label=5;break;}
 case 5: 
 var $18=(($_sroa_0_037+24)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($_sroa_0_037+28)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($19|0)==($21|0);
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$_sroa_0_037;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25+52)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($15&255);
 var $29=FUNCTION_TABLE[$27]($_sroa_0_037,$28);
 var $_0=$29;label=8;break;
 case 7: 
 var $31=(($19+1)|0);
 HEAP32[(($18)>>2)]=$31;
 HEAP8[($19)]=$15;
 var $32=($15&255);
 var $_0=$32;label=8;break;
 case 8: 
 var $_0;
 var $33=($_0|0)==-1;
 var $__sroa_0_0=($33?0:$_sroa_0_037);
 var $_sroa_0_1=$__sroa_0_0;label=9;break;
 case 9: 
 var $_sroa_0_1;
 var $34=(($_03338+1)|0);
 var $35=($34|0)==($13|0);
 if($35){var $_sroa_0_0_lcssa=$_sroa_0_1;label=10;break;}else{var $_sroa_0_037=$_sroa_0_1;var $_03338=$34;label=4;break;}
 case 10: 
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35=(($agg_result)|0);
 HEAP32[(($_sroa_0_0__idx35)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(19864)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(19864);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((17856)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $21=($this|0)==0;
 if($21){label=12;break;}else{label=11;break;}
 case 11: 
 _free($1);
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(19864)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19864);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$9;
 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;
 label=9;break;
 case 6: 
 var $14=HEAP32[((17856)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i_i=sp;
 var $__nar_i=(sp)+(8);
 var $mb_i=(sp)+(112);
 var $__nb_i=(sp)+(120);
 var $__nar=(sp)+(128);
 var $3=(($__nar)|0);
 var $4=(($__nar_i)|0);
 var $5=$mb_i;
 var $6=$__nb_i;
 var $tmpcast_i=$mb_i;
 var $7=(($fmt_i_i)|0);
 HEAP8[($7)]=37;
 var $8=(($fmt_i_i+1)|0);
 HEAP8[($8)]=$__fmt;
 var $9=(($fmt_i_i+2)|0);
 HEAP8[($9)]=$__mod;
 var $10=(($fmt_i_i+3)|0);
 HEAP8[($10)]=0;
 var $11=(($__mod<<24)>>24)==0;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($8)]=$__mod;
 HEAP8[($9)]=$__fmt;
 label=3;break;
 case 3: 
 var $13=(($this+8)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=_strftime($4,100,$7,$__tm,$14);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($mb_i)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($mb_i+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 HEAP32[(($__nb_i)>>2)]=$4;
 var $16=HEAP32[(($13)>>2)];
 var $17=_uselocale($16);
 var $18=_mbsrtowcs($3,$__nb_i,100,$tmpcast_i);
 var $19=($17|0)==0;
 if($19){label=6;break;}else{label=4;break;}
 case 4: 
 var $21=(function() { try { __THREW__ = 0; return _uselocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $23$0 = ___cxa_find_matching_catch(-1, -1,0); var $23$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $24=($18|0)==-1;
 if($24){label=7;break;}else{label=8;break;}
 case 7: 
 __ZNSt3__121__throw_runtime_errorEPKc(1248);
 throw "Reached an unreachable!";
 case 8: 
 var $26=(($__nar+($18<<2))|0);
 var $_sroa_0_0__idx=(($__s)|0);
 var $_sroa_0_0_copyload1=HEAP32[(($_sroa_0_0__idx)>>2)];
 var $27=($18|0)==0;
 if($27){var $_sroa_0_0_lcssa=$_sroa_0_0_copyload1;label=15;break;}else{var $_sroa_0_036=$_sroa_0_0_copyload1;var $_03337=$3;label=9;break;}
 case 9: 
 var $_03337;
 var $_sroa_0_036;
 var $28=HEAP32[(($_03337)>>2)];
 var $29=($_sroa_0_036|0)==0;
 if($29){var $_sroa_0_1=0;label=14;break;}else{label=10;break;}
 case 10: 
 var $31=(($_sroa_0_036+24)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($_sroa_0_036+28)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=($32|0)==($34|0);
 if($35){label=11;break;}else{label=12;break;}
 case 11: 
 var $37=$_sroa_0_036;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($38+52)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=FUNCTION_TABLE[$40]($_sroa_0_036,$28);
 var $_0=$41;label=13;break;
 case 12: 
 var $43=(($32+4)|0);
 HEAP32[(($31)>>2)]=$43;
 HEAP32[(($32)>>2)]=$28;
 var $_0=$28;label=13;break;
 case 13: 
 var $_0;
 var $44=($_0|0)==-1;
 var $__sroa_0_0=($44?0:$_sroa_0_036);
 var $_sroa_0_1=$__sroa_0_0;label=14;break;
 case 14: 
 var $_sroa_0_1;
 var $45=(($_03337+4)|0);
 var $46=($45|0)==($26|0);
 if($46){var $_sroa_0_0_lcssa=$_sroa_0_1;label=15;break;}else{var $_sroa_0_036=$_sroa_0_1;var $_03337=$45;label=9;break;}
 case 15: 
 var $_sroa_0_0_lcssa;
 var $_sroa_0_0__idx35=(($agg_result)|0);
 HEAP32[(($_sroa_0_0__idx35)>>2)]=$_sroa_0_0_lcssa;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 var $2=$agg_result;
 HEAP8[($2)]=2;
 var $3=(($1+1)|0);
 HEAP8[($3)]=45;
 var $4=(($1+2)|0);
 HEAP8[($4)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 var $2=$agg_result;
 HEAP8[($2)]=2;
 var $3=(($1+1)|0);
 HEAP8[($3)]=45;
 var $4=(($1+2)|0);
 HEAP8[($4)]=0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[($1)]=2;
 var $2=(($agg_result+4)|0);
 var $_045_i_i=1;var $_06_i_i=$2;label=2;break;
 case 2: 
 var $_06_i_i;
 var $_045_i_i;
 var $3=((($_045_i_i)-(1))|0);
 var $4=(($_06_i_i+4)|0);
 HEAP32[(($_06_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_045_i_i=$3;var $_06_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;
 var $agg_result13=$agg_result;
 HEAP32[(($agg_result13)>>2)]=0; HEAP32[((($agg_result13)+(4))>>2)]=0; HEAP32[((($agg_result13)+(8))>>2)]=0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[($1)]=2;
 var $2=(($agg_result+4)|0);
 var $_045_i_i=1;var $_06_i_i=$2;label=2;break;
 case 2: 
 var $_06_i_i;
 var $_045_i_i;
 var $3=((($_045_i_i)-(1))|0);
 var $4=(($_06_i_i+4)|0);
 HEAP32[(($_06_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_045_i_i=$3;var $_06_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__neg=(sp)+(136);
 var $__atoms=(sp)+(144);
 var $__nbuf=(sp)+(160);
 var $1=(($__wbuf)|0);
 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=480;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=$__p_i_i_i;
 var $12=HEAP32[((19288)>>2)];
 var $13=($12|0)==-1;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=14;break; }
 case 3: 
 var $15=HEAP32[((19292)>>2)];
 var $16=((($15)-(1))|0);
 var $17=(($6+12)|0);
 var $18=$17;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+8)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$19;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($16>>>0);
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=(($22+($16<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$29;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$35,$__intl,$7,$37,$__err,$__neg,$33,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 if($38){label=9;break;}else{label=51;break;}
 case 9: 
 var $41=(($__atoms)|0);
 var $42=$29;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+32)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33,5224,5234,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $47=(($__nbuf)|0);
 var $48=HEAP32[(($__wn)>>2)];
 var $49=HEAP32[(($2)>>2)];
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=($52|0)>98;
 if($53){label=11;break;}else{var $__nc_0=$47;var $__h_sroa_0_1=0;label=18;break;}
 case 11: 
 var $54=((($52)+(2))|0);
 var $55=_malloc($54);
 var $56=($55|0)==0;
 if($56){label=12;break;}else{var $__nc_0=$55;var $__h_sroa_0_1=$55;label=18;break;}
 case 12: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 HEAP32[(($59)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $__h_sroa_0_0=0;label=15;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=$61$0;
 var $63=$61$1;
 var $_0145=$63;var $_0146=$62;label=71;break;
 case 15: 
 var $__h_sroa_0_0;
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $eh_lpad_body$1=$65$1;var $eh_lpad_body$0=$65$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=16;break;
 case 16: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $66=$eh_lpad_body$0;
 var $67=$eh_lpad_body$1;
 var $68=($__h_sroa_0_0_lpad_body|0)==0;
 if($68){var $_0145=$67;var $_0146=$66;label=71;break;}else{label=17;break;}
 case 17: 
 _free($__h_sroa_0_0_lpad_body);
 var $_0145=$67;var $_0146=$66;label=71;break;
 case 18: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $71=HEAP8[($__neg)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){var $__nc_1=$__nc_0;label=20;break;}else{label=19;break;}
 case 19: 
 var $75=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$75;label=20;break;
 case 20: 
 var $__nc_1;
 var $77=($49>>>0)<($48>>>0);
 if($77){label=21;break;}else{var $__nc_2_lcssa=$__nc_1;label=26;break;}
 case 21: 
 var $78=(($__atoms+10)|0);
 var $79=$__atoms;
 var $__nc_2166=$__nc_1;var $__w_0167=$49;label=22;break;
 case 22: 
 var $__w_0167;
 var $__nc_2166;
 var $_0=$41;label=23;break;
 case 23: 
 var $_0;
 var $82=($_0|0)==($78|0);
 if($82){var $_0_lcssa=$78;label=25;break;}else{label=24;break;}
 case 24: 
 var $84=HEAP8[($_0)];
 var $85=HEAP8[($__w_0167)];
 var $86=(($84<<24)>>24)==(($85<<24)>>24);
 var $87=(($_0+1)|0);
 if($86){var $_0_lcssa=$_0;label=25;break;}else{var $_0=$87;label=23;break;}
 case 25: 
 var $_0_lcssa;
 var $88=$_0_lcssa;
 var $89=((($88)-($79))|0);
 var $90=((5224+$89)|0);
 var $91=HEAP8[($90)];
 HEAP8[($__nc_2166)]=$91;
 var $92=(($__w_0167+1)|0);
 var $93=(($__nc_2166+1)|0);
 var $94=HEAP32[(($__wn)>>2)];
 var $95=($92>>>0)<($94>>>0);
 if($95){var $__nc_2166=$93;var $__w_0167=$92;label=22;break;}else{var $__nc_2_lcssa=$93;label=26;break;}
 case 26: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $96=_sscanf($47,2808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $97=($96|0)==1;
 if($97){label=49;break;}else{label=27;break;}
 case 27: 
 var $99=___cxa_allocate_exception(8);
 var $100=$99;
 HEAP32[(($100)>>2)]=5944;
 var $101=(($99+4)|0);
 var $102=$101;
 var $103=($101|0)==0;
 if($103){label=45;break;}else{label=28;break;}
 case 28: 
 var $104=(function() { try { __THREW__ = 0; return _strlen(2712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=47;break; }
 case 29: 
 var $105=((($104)+(1))|0);
 var $106=((($104)+(13))|0);
 var $107=($106|0)==0;
 var $_size_i=($107?1:$106);
 label=30;break;
 case 30: 
 var $109=_malloc($_size_i);
 var $110=($109|0)==0;
 if($110){label=31;break;}else{label=44;break;}
 case 31: 
 var $112=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $113=($112|0)==0;
 if($113){label=38;break;}else{label=32;break;}
 case 32: 
 var $115=$112;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 33: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=35;break;
 case 35: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $117=$lpad_phi_i$1;
 var $118=($117|0)<0;
 if($118){label=36;break;}else{var $eh_lpad_body7$1=$lpad_phi_i$1;var $eh_lpad_body7$0=$lpad_phi_i$0;label=41;break;}
 case 36: 
 var $120=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $122=___cxa_allocate_exception(4);
 var $123=$122;
 HEAP32[(($123)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($122,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 throw "Reached an unreachable!";
 case 40: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $eh_lpad_body7$1=$126$1;var $eh_lpad_body7$0=$126$0;label=41;break;
 case 41: 
 var $eh_lpad_body7$0;
 var $eh_lpad_body7$1;
 var $127=$eh_lpad_body7$1;
 var $128=($127|0)<0;
 if($128){label=42;break;}else{var $eh_lpad_body4$1=$eh_lpad_body7$1;var $eh_lpad_body4$0=$eh_lpad_body7$0;label=48;break;}
 case 42: 
 var $130=$eh_lpad_body7$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($130) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=47;break; }
 case 43: 
 throw "Reached an unreachable!";
 case 44: 
 var $131=$109;
 var $132=(($109+4)|0);
 var $133=$132;
 HEAP32[(($133)>>2)]=$104;
 HEAP32[(($131)>>2)]=$104;
 var $134=(($109+12)|0);
 HEAP32[(($102)>>2)]=$134;
 var $135=(($109+8)|0);
 var $136=$135;
 HEAP32[(($136)>>2)]=0;
 assert($105 % 1 === 0);(_memcpy($134, 2712, $105)|0);
 label=45;break;
 case 45: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,13552,(208)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=15;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $138$0 = ___cxa_find_matching_catch(-1, -1); var $138$1 = tempRet0;
 var $eh_lpad_body4$1=$138$1;var $eh_lpad_body4$0=$138$0;label=48;break;
 case 48: 
 var $eh_lpad_body4$0;
 var $eh_lpad_body4$1;
 ___cxa_free_exception($99);
 var $eh_lpad_body$1=$eh_lpad_body4$1;var $eh_lpad_body$0=$eh_lpad_body4$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=16;break;
 case 49: 
 var $140=($__h_sroa_0_1|0)==0;
 if($140){label=51;break;}else{label=50;break;}
 case 50: 
 _free($__h_sroa_0_1);
 label=51;break;
 case 51: 
 var $142=(($__b)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){var $159=0;label=56;break;}else{label=52;break;}
 case 52: 
 var $146=(($143+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($143+16)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=($147|0)==($149|0);
 if($150){label=53;break;}else{var $159=$143;label=56;break;}
 case 53: 
 var $152=$143;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+36)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$155]($143) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=14;break; }
 case 54: 
 var $157=($156|0)==-1;
 if($157){label=55;break;}else{var $159=$143;label=56;break;}
 case 55: 
 HEAP32[(($142)>>2)]=0;
 var $159=0;label=56;break;
 case 56: 
 var $159;
 var $160=($159|0)==0;
 var $161=HEAP32[(($34)>>2)];
 var $162=($161|0)==0;
 if($162){label=62;break;}else{label=57;break;}
 case 57: 
 var $164=(($161+12)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($161+16)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($165|0)==($167|0);
 if($168){label=59;break;}else{label=58;break;}
 case 58: 
 if($160){label=65;break;}else{label=64;break;}
 case 59: 
 var $170=$161;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($161) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=14;break; }
 case 60: 
 var $175=($174|0)==-1;
 if($175){label=61;break;}else{label=63;break;}
 case 61: 
 HEAP32[(($34)>>2)]=0;
 label=62;break;
 case 62: 
 if($160){label=64;break;}else{label=65;break;}
 case 63: 
 if($160){label=65;break;}else{label=64;break;}
 case 64: 
 var $178=HEAP32[(($__err)>>2)];
 var $179=$178|2;
 HEAP32[(($__err)>>2)]=$179;
 label=65;break;
 case 65: 
 var $181=(($agg_result)|0);
 HEAP32[(($181)>>2)]=$159;
 var $182=(($6+4)|0);
 var $183=$182;
 var $184=(tempValue=HEAP32[(($183)>>2)],HEAP32[(($183)>>2)]=tempValue+-1,tempValue);
 var $185=($184|0)==0;
 if($185){label=66;break;}else{label=67;break;}
 case 66: 
 var $187=$6;
 var $188=$6;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+8)|0);
 var $191=HEAP32[(($190)>>2)];
 FUNCTION_TABLE[$191]($187);
 label=67;break;
 case 67: 
 var $192=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $193=($192|0)==0;
 if($193){label=70;break;}else{label=68;break;}
 case 68: 
 var $195=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=69;break; }
 case 69: 
 var $197$0 = ___cxa_find_matching_catch(-1, -1,0); var $197$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 70: 
 STACKTOP=sp;return;
 case 71: 
 var $_0146;
 var $_0145;
 var $199=(($6+4)|0);
 var $200=$199;
 var $201=(tempValue=HEAP32[(($200)>>2)],HEAP32[(($200)>>2)]=tempValue+-1,tempValue);
 var $202=($201|0)==0;
 if($202){label=72;break;}else{label=73;break;}
 case 72: 
 var $204=$6;
 var $205=$6;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+8)|0);
 var $208=HEAP32[(($207)>>2)];
 FUNCTION_TABLE[$208]($204);
 label=73;break;
 case 73: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $209=($_pre|0)==0;
 if($209){label=76;break;}else{label=74;break;}
 case 74: 
 var $211=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$211]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=75;break; }
 case 75: 
 var $213$0 = ___cxa_find_matching_catch(-1, -1,0); var $213$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 76: 
 var $214$0=$_0146;
 var $214$1=0;
 var $215$0=$214$0;
 var $215$1=$_0145;
 ___resumeException($215$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__112__do_nothingEPv($0){
 var label=0;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+584)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i513_i=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $0=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(56);
 var $3=(sp)+(72);
 var $4=(sp)+(88);
 var $5=(sp)+(104);
 var $6=(sp)+(112);
 var $7=(sp)+(128);
 var $8=(sp)+(144);
 var $9=(sp)+(160);
 var $__gbuf=(sp)+(176);
 var $__pat=(sp)+(576);
 var $tmpcast=$__pat;
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=(($__gbuf)|0);
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 var $12=$__sym;
 var $13=$__psn;
 var $14=$__nsn;
 var $15=$__spaces;
 HEAP32[(($12)>>2)]=0; HEAP32[((($12)+(4))>>2)]=0; HEAP32[((($12)+(8))>>2)]=0;
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 HEAP32[(($15)>>2)]=0; HEAP32[((($15)+(4))>>2)]=0; HEAP32[((($15)+(8))>>2)]=0;
 var $16=$0;
 var $17=$1;
 var $18=$2;
 var $19=$3;
 var $20=$4;
 var $21=$5;
 var $22=$6;
 var $23=$7;
 var $24=$8;
 var $25=$9;
 if($__intl){label=2;break;}else{label=36;break;}
 case 2: 
 var $tmpcast512_i=$0;
 var $27=$__p_i_i_i_i;
 var $28=HEAP32[((19760)>>2)];
 var $29=($28|0)==-1;
 if($29){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i_i=(($__p_i_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i_i)>>2)]=19760;
 var $_sroa_117_4__idx18_i_i_i=(($__p_i_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i_i=(($__p_i_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19760,$27) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=95;break; }
 case 4: 
 var $31=HEAP32[((19764)>>2)];
 var $32=((($31)-(1))|0);
 var $33=(($__loc_0_0_val+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($__loc_0_0_val+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$34;
 var $38=$36;
 var $39=((($37)-($38))|0);
 var $40=$39>>2;
 var $41=($40>>>0)>($32>>>0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $42=(($36+($32<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=6;break;}else{label=8;break;}
 case 6: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 HEAP32[(($46)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($45,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=95;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $47=$43;
 var $48=$43;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+44)|0);
 var $51=HEAP32[(($50)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($tmpcast512_i,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=95;break; }
 case 9: 
 var $52=HEAP32[(($0)>>2)];
 HEAP32[(($__pat)>>2)]=$52;
 var $53=$43;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+32)|0);
 var $56=HEAP32[(($55)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($1,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=95;break; }
 case 10: 
 var $57=HEAP8[($14)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=12;break;}else{label=11;break;}
 case 11: 
 var $61=(($__nsn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP8[($62)]=0;
 var $63=(($__nsn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=13;break;
 case 12: 
 var $65=$__nsn;
 var $66=(($65+1)|0);
 HEAP8[($66)]=0;
 HEAP8[($14)]=0;
 label=13;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 15: 
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0; HEAP32[((($17)+(8))>>2)]=0;
 var $69=HEAP32[(($53)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($2,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=95;break; }
 case 16: 
 var $72=HEAP8[($13)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=18;break;}else{label=17;break;}
 case 17: 
 var $76=(($__psn+8)|0);
 var $77=HEAP32[(($76)>>2)];
 HEAP8[($77)]=0;
 var $78=(($__psn+4)|0);
 HEAP32[(($78)>>2)]=0;
 label=19;break;
 case 18: 
 var $80=$__psn;
 var $81=(($80+1)|0);
 HEAP8[($81)]=0;
 HEAP8[($13)]=0;
 label=19;break;
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 21: 
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $84=$43;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+12)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$87]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=95;break; }
 case 22: 
 var $89=HEAP32[(($84)>>2)];
 var $90=(($89+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=95;break; }
 case 23: 
 var $93=HEAP32[(($53)>>2)];
 var $94=(($93+20)|0);
 var $95=HEAP32[(($94)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($3,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=95;break; }
 case 24: 
 var $96=HEAP8[($10)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=26;break;}else{label=25;break;}
 case 25: 
 var $100=(($__grp+8)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP8[($101)]=0;
 var $102=(($__grp+4)|0);
 HEAP32[(($102)>>2)]=0;
 label=27;break;
 case 26: 
 var $104=$__grp;
 var $105=(($104+1)|0);
 HEAP8[($105)]=0;
 HEAP8[($10)]=0;
 label=27;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=28;break; }
 case 28: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1,0); var $107$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 29: 
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0; HEAP32[((($19)+(8))>>2)]=0;
 var $108=HEAP32[(($53)>>2)];
 var $109=(($108+24)|0);
 var $110=HEAP32[(($109)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$110]($4,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=95;break; }
 case 30: 
 var $111=HEAP8[($12)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=32;break;}else{label=31;break;}
 case 31: 
 var $115=(($__sym+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP8[($116)]=0;
 var $117=(($__sym+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=33;break;
 case 32: 
 var $119=$__sym;
 var $120=(($119+1)|0);
 HEAP8[($120)]=0;
 HEAP8[($12)]=0;
 label=33;break;
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=34;break; }
 case 34: 
 var $122$0 = ___cxa_find_matching_catch(-1, -1,0); var $122$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 35: 
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $123=$43;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+36)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$126]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$127;var $__ts_0=$92;var $__dp_0=$88;label=70;break; } else { label=95;break; }
 case 36: 
 var $tmpcast_i=$5;
 var $129=$__p_i_i_i513_i;
 var $130=HEAP32[((19768)>>2)];
 var $131=($130|0)==-1;
 if($131){label=38;break;}else{label=37;break;}
 case 37: 
 var $_sroa_016_0__idx_i_i514_i=(($__p_i_i_i513_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i514_i)>>2)]=19768;
 var $_sroa_117_4__idx18_i_i515_i=(($__p_i_i_i513_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i515_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i516_i=(($__p_i_i_i513_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i516_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19768,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=95;break; }
 case 38: 
 var $133=HEAP32[((19772)>>2)];
 var $134=((($133)-(1))|0);
 var $135=(($__loc_0_0_val+12)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($__loc_0_0_val+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$136;
 var $140=$138;
 var $141=((($139)-($140))|0);
 var $142=$141>>2;
 var $143=($142>>>0)>($134>>>0);
 if($143){label=39;break;}else{label=40;break;}
 case 39: 
 var $144=(($138+($134<<2))|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145|0)==0;
 if($146){label=40;break;}else{label=42;break;}
 case 40: 
 var $147=___cxa_allocate_exception(4);
 var $148=$147;
 HEAP32[(($148)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($147,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=95;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $149=$145;
 var $150=$145;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+44)|0);
 var $153=HEAP32[(($152)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]($tmpcast_i,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=95;break; }
 case 43: 
 var $154=HEAP32[(($5)>>2)];
 HEAP32[(($__pat)>>2)]=$154;
 var $155=$145;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+32)|0);
 var $158=HEAP32[(($157)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($6,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=95;break; }
 case 44: 
 var $159=HEAP8[($14)];
 var $160=$159&1;
 var $161=(($160<<24)>>24)==0;
 if($161){label=46;break;}else{label=45;break;}
 case 45: 
 var $163=(($__nsn+8)|0);
 var $164=HEAP32[(($163)>>2)];
 HEAP8[($164)]=0;
 var $165=(($__nsn+4)|0);
 HEAP32[(($165)>>2)]=0;
 label=47;break;
 case 46: 
 var $167=$__nsn;
 var $168=(($167+1)|0);
 HEAP8[($168)]=0;
 HEAP8[($14)]=0;
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=48;break; }
 case 48: 
 var $170$0 = ___cxa_find_matching_catch(-1, -1,0); var $170$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 49: 
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0;
 var $171=HEAP32[(($155)>>2)];
 var $172=(($171+28)|0);
 var $173=HEAP32[(($172)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($7,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=95;break; }
 case 50: 
 var $174=HEAP8[($13)];
 var $175=$174&1;
 var $176=(($175<<24)>>24)==0;
 if($176){label=52;break;}else{label=51;break;}
 case 51: 
 var $178=(($__psn+8)|0);
 var $179=HEAP32[(($178)>>2)];
 HEAP8[($179)]=0;
 var $180=(($__psn+4)|0);
 HEAP32[(($180)>>2)]=0;
 label=53;break;
 case 52: 
 var $182=$__psn;
 var $183=(($182+1)|0);
 HEAP8[($183)]=0;
 HEAP8[($13)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $185$0 = ___cxa_find_matching_catch(-1, -1,0); var $185$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0;
 var $186=$145;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=95;break; }
 case 56: 
 var $191=HEAP32[(($186)>>2)];
 var $192=(($191+16)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$193]($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=95;break; }
 case 57: 
 var $195=HEAP32[(($155)>>2)];
 var $196=(($195+20)|0);
 var $197=HEAP32[(($196)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$197]($8,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=95;break; }
 case 58: 
 var $198=HEAP8[($10)];
 var $199=$198&1;
 var $200=(($199<<24)>>24)==0;
 if($200){label=60;break;}else{label=59;break;}
 case 59: 
 var $202=(($__grp+8)|0);
 var $203=HEAP32[(($202)>>2)];
 HEAP8[($203)]=0;
 var $204=(($__grp+4)|0);
 HEAP32[(($204)>>2)]=0;
 label=61;break;
 case 60: 
 var $206=$__grp;
 var $207=(($206+1)|0);
 HEAP8[($207)]=0;
 HEAP8[($10)]=0;
 label=61;break;
 case 61: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=62;break; }
 case 62: 
 var $209$0 = ___cxa_find_matching_catch(-1, -1,0); var $209$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 63: 
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 HEAP32[(($24)>>2)]=0; HEAP32[((($24)+(4))>>2)]=0; HEAP32[((($24)+(8))>>2)]=0;
 var $210=HEAP32[(($155)>>2)];
 var $211=(($210+24)|0);
 var $212=HEAP32[(($211)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$212]($9,$149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=95;break; }
 case 64: 
 var $213=HEAP8[($12)];
 var $214=$213&1;
 var $215=(($214<<24)>>24)==0;
 if($215){label=66;break;}else{label=65;break;}
 case 65: 
 var $217=(($__sym+8)|0);
 var $218=HEAP32[(($217)>>2)];
 HEAP8[($218)]=0;
 var $219=(($__sym+4)|0);
 HEAP32[(($219)>>2)]=0;
 label=67;break;
 case 66: 
 var $221=$__sym;
 var $222=(($221+1)|0);
 HEAP8[($222)]=0;
 HEAP8[($12)]=0;
 label=67;break;
 case 67: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=68;break; }
 case 68: 
 var $224$0 = ___cxa_find_matching_catch(-1, -1,0); var $224$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 69: 
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 HEAP32[(($25)>>2)]=0; HEAP32[((($25)+(4))>>2)]=0; HEAP32[((($25)+(8))>>2)]=0;
 var $225=$145;
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+36)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$228]($149) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$229;var $__ts_0=$194;var $__dp_0=$190;label=70;break; } else { label=95;break; }
 case 70: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $231=(($__gbuf+400)|0);
 var $232=(($__wb)|0);
 var $233=HEAP32[(($232)>>2)];
 HEAP32[(($__wn)>>2)]=$233;
 var $234=(($__b)|0);
 var $235=(($__ct+8)|0);
 var $236=$__psn;
 var $237=$__nsn;
 var $238=(($237+1)|0);
 var $239=(($__nsn+4)|0);
 var $240=(($__nsn+8)|0);
 var $241=(($236+1)|0);
 var $242=(($__psn+4)|0);
 var $243=(($__psn+8)|0);
 var $244=$__flags&512;
 var $245=($244|0)!=0;
 var $246=$__sym;
 var $247=(($246+1)|0);
 var $248=(($__sym+4)|0);
 var $249=(($__sym+8)|0);
 var $250=$__spaces;
 var $251=(($250+1)|0);
 var $252=(($__spaces+4)|0);
 var $253=(($__spaces+8)|0);
 var $254=(($tmpcast+3)|0);
 var $255=(($__grp+4)|0);
 var $256=(($__wb+4)|0);
 var $257=(($__spaces)|0);
 var $__we10821215=$__we;var $__gb_sroa_1_4_load105710761218=480;var $259=$11;var $__gb_sroa_0_0_load104710611221=$11;var $258=$231;var $__trailing_sign_01224=0;var $__p_01226=0;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=71;break;
 case 71: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $__p_01226;
 var $__trailing_sign_01224;
 var $258;
 var $__gb_sroa_0_0_load104710611221;
 var $259;
 var $__gb_sroa_1_4_load105710761218;
 var $__we10821215;
 var $260=HEAP32[(($234)>>2)];
 var $261=($260|0)==0;
 if($261){var $276=0;label=77;break;}else{label=72;break;}
 case 72: 
 var $263=(($260+12)|0);
 var $264=HEAP32[(($263)>>2)];
 var $265=(($260+16)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($264|0)==($266|0);
 if($267){label=73;break;}else{var $276=$260;label=77;break;}
 case 73: 
 var $269=$260;
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+36)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$272]($260) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 74: 
 var $274=($273|0)==-1;
 if($274){label=76;break;}else{label=75;break;}
 case 75: 
 var $_pre1306=HEAP32[(($234)>>2)];
 var $276=$_pre1306;label=77;break;
 case 76: 
 HEAP32[(($234)>>2)]=0;
 var $276=0;label=77;break;
 case 77: 
 var $276;
 var $277=($276|0)==0;
 var $278=($__e_sroa_0_0|0)==0;
 if($278){label=82;break;}else{label=78;break;}
 case 78: 
 var $280=(($__e_sroa_0_0+12)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($__e_sroa_0_0+16)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($281|0)==($283|0);
 if($284){label=80;break;}else{label=79;break;}
 case 79: 
 if($277){var $__e_sroa_0_2=$__e_sroa_0_0;label=84;break;}else{var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$259;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;var $__e_sroa_0_21=$__e_sroa_0_0;label=375;break;}
 case 80: 
 var $286=$__e_sroa_0_0;
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+36)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$289]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 81: 
 var $291=($290|0)==-1;
 if($291){label=82;break;}else{label=83;break;}
 case 82: 
 if($277){var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$259;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;var $__e_sroa_0_21=0;label=375;break;}else{var $__e_sroa_0_2=0;label=84;break;}
 case 83: 
 if($277){var $__e_sroa_0_2=$__e_sroa_0_0;label=84;break;}else{var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$259;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;var $__e_sroa_0_21=$__e_sroa_0_0;label=375;break;}
 case 84: 
 var $__e_sroa_0_2;
 var $293=(($tmpcast+$__p_01226)|0);
 var $294=HEAP8[($293)];
 var $295=(($294<<24)>>24);
 switch(($295|0)){case 1:{ label=114;break;}case 0:{ label=137;break;}case 3:{ label=172;break;}case 2:{ label=213;break;}case 4:{ var $__ng_0=0;var $863=$258;var $__gb_sroa_0_0_load10471064=$__gb_sroa_0_0_load104710611221;var $862=$259;var $__gb_sroa_1_4_load10571074=$__gb_sroa_1_4_load105710761218;var $__we1087=$__we10821215;var $__e_sroa_0_10=$__e_sroa_0_2;label=256;break;}default:{var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;}}break;
 case 85: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $296=$_lcssa;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571076_lcssa;label=96;break;
 case 86: 
 var $__gb_sroa_1_4_load10571069_ph_ph_ph;
 var $_ph_ph_ph;
 var $lpad_loopexit5$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit5$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit5$1;var $lpad_phi$0=$lpad_loopexit5$0;var $296=$_ph_ph_ph;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571069_ph_ph_ph;label=96;break;
 case 87: 
 var $lpad_nonloopexit6$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit6$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit6$1;var $lpad_phi$0=$lpad_nonloopexit6$0;var $296=$862;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571074;label=96;break;
 case 88: 
 var $lpad_loopexit8$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit8$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit8$1;var $lpad_phi$0=$lpad_loopexit8$0;var $296=$1034;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571071;label=96;break;
 case 89: 
 var $lpad_nonloopexit9$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit9$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit9$1;var $lpad_phi$0=$lpad_nonloopexit9$0;var $296=$1034;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571071;label=96;break;
 case 90: 
 var $lpad_loopexit1124$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1124$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1124$1;var $lpad_phi$0=$lpad_loopexit1124$0;var $296=$259;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load105710761218;label=96;break;
 case 91: 
 var $lpad_loopexit1131$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1131$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1131$1;var $lpad_phi$0=$lpad_loopexit1131$0;var $296=$259;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load105710761218;label=96;break;
 case 92: 
 var $lpad_loopexit1135$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1135$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1135$1;var $lpad_phi$0=$lpad_loopexit1135$0;var $296=$259;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load105710761218;label=96;break;
 case 93: 
 var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph;
 var $_ph_ph1095_ph_ph_ph_ph_ph_ph;
 var $lpad_loopexit11$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit11$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit11$1;var $lpad_phi$0=$lpad_loopexit11$0;var $296=$_ph_ph1095_ph_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph;label=96;break;
 case 94: 
 var $lpad_nonloopexit12$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit12$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit12$1;var $lpad_phi$0=$lpad_nonloopexit12$0;var $296=$862;var $__gb_sroa_1_4_load10571069=$__gb_sroa_1_4_load10571074;label=96;break;
 case 95: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $296=$11;var $__gb_sroa_1_4_load10571069=480;label=96;break;
 case 96: 
 var $__gb_sroa_1_4_load10571069;
 var $296;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $297=HEAP8[($15)];
 var $298=$297&1;
 var $299=(($298<<24)>>24)==0;
 if($299){label=99;break;}else{label=97;break;}
 case 97: 
 var $301=(($__spaces+8)|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($302|0)==0;
 if($303){label=99;break;}else{label=98;break;}
 case 98: 
 _free($302);
 label=99;break;
 case 99: 
 var $305=HEAP8[($14)];
 var $306=$305&1;
 var $307=(($306<<24)>>24)==0;
 if($307){label=102;break;}else{label=100;break;}
 case 100: 
 var $309=(($__nsn+8)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=($310|0)==0;
 if($311){label=102;break;}else{label=101;break;}
 case 101: 
 _free($310);
 label=102;break;
 case 102: 
 var $313=HEAP8[($13)];
 var $314=$313&1;
 var $315=(($314<<24)>>24)==0;
 if($315){label=105;break;}else{label=103;break;}
 case 103: 
 var $317=(($__psn+8)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($318|0)==0;
 if($319){label=105;break;}else{label=104;break;}
 case 104: 
 _free($318);
 label=105;break;
 case 105: 
 var $321=HEAP8[($12)];
 var $322=$321&1;
 var $323=(($322<<24)>>24)==0;
 if($323){label=108;break;}else{label=106;break;}
 case 106: 
 var $325=(($__sym+8)|0);
 var $326=HEAP32[(($325)>>2)];
 var $327=($326|0)==0;
 if($327){label=108;break;}else{label=107;break;}
 case 107: 
 _free($326);
 label=108;break;
 case 108: 
 var $329=HEAP8[($10)];
 var $330=$329&1;
 var $331=(($330<<24)>>24)==0;
 if($331){label=111;break;}else{label=109;break;}
 case 109: 
 var $333=(($__grp+8)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=($334|0)==0;
 if($335){label=111;break;}else{label=110;break;}
 case 110: 
 _free($334);
 label=111;break;
 case 111: 
 var $337=($296|0)==0;
 if($337){label=427;break;}else{label=112;break;}
 case 112: 
 var $339=$296;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10571069]($339) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=427;break; } else { label=113;break; }
 case 113: 
 var $341$0 = ___cxa_find_matching_catch(-1, -1,0); var $341$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 114: 
 var $cond=($__p_01226|0)==3;
 if($cond){var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$259;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;var $__e_sroa_0_21=$__e_sroa_0_2;label=375;break;}else{label=115;break;}
 case 115: 
 var $344=HEAP32[(($234)>>2)];
 var $345=(($344+12)|0);
 var $346=HEAP32[(($345)>>2)];
 var $347=(($344+16)|0);
 var $348=HEAP32[(($347)>>2)];
 var $349=($346|0)==($348|0);
 if($349){label=116;break;}else{label=118;break;}
 case 116: 
 var $351=$344;
 var $352=HEAP32[(($351)>>2)];
 var $353=(($352+36)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$354]($344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 117: 
 var $extract_t1003=(($355)&255);
 var $_0934_off0=$extract_t1003;label=119;break;
 case 118: 
 var $357=HEAP8[($346)];
 var $_0934_off0=$357;label=119;break;
 case 119: 
 var $_0934_off0;
 var $358=(($_0934_off0<<24)>>24);
 var $359=(function() { try { __THREW__ = 0; return _isascii($358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 120: 
 var $360=($359|0)==0;
 if($360){label=136;break;}else{label=121;break;}
 case 121: 
 var $361=HEAP32[(($235)>>2)];
 var $362=(($361+($358<<1))|0);
 var $363=HEAP16[(($362)>>1)];
 var $364=$363&8192;
 var $365=(($364<<16)>>16)==0;
 if($365){label=136;break;}else{label=122;break;}
 case 122: 
 var $367=HEAP32[(($234)>>2)];
 var $368=(($367+12)|0);
 var $369=HEAP32[(($368)>>2)];
 var $370=(($367+16)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=($369|0)==($371|0);
 if($372){label=123;break;}else{label=125;break;}
 case 123: 
 var $374=$367;
 var $375=HEAP32[(($374)>>2)];
 var $376=(($375+40)|0);
 var $377=HEAP32[(($376)>>2)];
 var $378=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$377]($367) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=124;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 124: 
 var $extract_t1005=(($378)&255);
 var $_0933_off0=$extract_t1005;label=126;break;
 case 125: 
 var $380=(($369+1)|0);
 HEAP32[(($368)>>2)]=$380;
 var $381=HEAP8[($369)];
 var $_0933_off0=$381;label=126;break;
 case 126: 
 var $_0933_off0;
 var $382=HEAP8[($15)];
 var $383=$382&1;
 var $384=(($383<<24)>>24)==0;
 if($384){label=127;break;}else{label=128;break;}
 case 127: 
 var $386=($382&255);
 var $387=$386>>>1;
 var $__sz_0_i=$387;var $__cap_0_i=10;label=129;break;
 case 128: 
 var $389=HEAP32[(($257)>>2)];
 var $390=$389&-2;
 var $391=((($390)-(1))|0);
 var $392=HEAP32[(($252)>>2)];
 var $__sz_0_i=$392;var $__cap_0_i=$391;label=129;break;
 case 129: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $394=($__sz_0_i|0)==($__cap_0_i|0);
 if($394){label=130;break;}else{var $__is_short_0_off0_in_in_i=$382;label=132;break;}
 case 130: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=131;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 131: 
 var $396=HEAP8[($15)];
 var $__is_short_0_off0_in_in_i=$396;label=132;break;
 case 132: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=133;break;}else{label=134;break;}
 case 133: 
 var $399=$__sz_0_i<<1;
 var $400=((($399)+(2))|0);
 var $401=(($400)&255);
 HEAP8[($15)]=$401;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$251;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=135;break;
 case 134: 
 var $403=HEAP32[(($253)>>2)];
 var $404=((($__sz_0_i)+(1))|0);
 HEAP32[(($252)>>2)]=$404;
 var $_pn_i=$403;var $__p_0_sum_pre_phi_i=$404;label=135;break;
 case 135: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$_0933_off0;
 var $405=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($405)]=0;
 label=137;break;
 case 136: 
 var $406=HEAP32[(($__err)>>2)];
 var $407=$406|4;
 HEAP32[(($__err)>>2)]=$407;
 var $_0919=0;var $1331=$259;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load105710761218;label=408;break;
 case 137: 
 var $409=($__p_01226|0)==3;
 if($409){var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load105710761218;var $_lcssa=$259;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load104710611221;var $__trailing_sign_0_lcssa=$__trailing_sign_01224;var $__e_sroa_0_21=$__e_sroa_0_2;label=375;break;}else{var $410=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=138;break;}
 case 138: 
 var $__e_sroa_0_3;
 var $410;
 var $411=HEAP32[(($234)>>2)];
 var $412=($411|0)==0;
 if($412){var $427=0;label=144;break;}else{label=139;break;}
 case 139: 
 var $414=(($411+12)|0);
 var $415=HEAP32[(($414)>>2)];
 var $416=(($411+16)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=($415|0)==($417|0);
 if($418){label=140;break;}else{var $427=$411;label=144;break;}
 case 140: 
 var $420=$411;
 var $421=HEAP32[(($420)>>2)];
 var $422=(($421+36)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$423]($411) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=141;break; } else { label=92;break; }
 case 141: 
 var $425=($424|0)==-1;
 if($425){label=143;break;}else{label=142;break;}
 case 142: 
 var $_pre1307=HEAP32[(($234)>>2)];
 var $427=$_pre1307;label=144;break;
 case 143: 
 HEAP32[(($234)>>2)]=0;
 var $427=0;label=144;break;
 case 144: 
 var $427;
 var $428=($427|0)==0;
 var $429=($410|0)==0;
 if($429){var $__e_sroa_0_4=$__e_sroa_0_3;label=149;break;}else{label=145;break;}
 case 145: 
 var $431=(($410+12)|0);
 var $432=HEAP32[(($431)>>2)];
 var $433=(($410+16)|0);
 var $434=HEAP32[(($433)>>2)];
 var $435=($432|0)==($434|0);
 if($435){label=147;break;}else{label=146;break;}
 case 146: 
 if($428){var $443=$410;var $__e_sroa_0_5=$__e_sroa_0_3;label=151;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=374;break;}
 case 147: 
 var $437=$410;
 var $438=HEAP32[(($437)>>2)];
 var $439=(($438+36)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$440]($410) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=148;break; } else { label=92;break; }
 case 148: 
 var $442=($441|0)==-1;
 if($442){var $__e_sroa_0_4=0;label=149;break;}else{label=150;break;}
 case 149: 
 var $__e_sroa_0_4;
 if($428){var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=374;break;}else{var $443=0;var $__e_sroa_0_5=$__e_sroa_0_4;label=151;break;}
 case 150: 
 if($428){var $443=$410;var $__e_sroa_0_5=$__e_sroa_0_3;label=151;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=374;break;}
 case 151: 
 var $__e_sroa_0_5;
 var $443;
 var $444=HEAP32[(($234)>>2)];
 var $445=(($444+12)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=(($444+16)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=($446|0)==($448|0);
 if($449){label=152;break;}else{label=154;break;}
 case 152: 
 var $451=$444;
 var $452=HEAP32[(($451)>>2)];
 var $453=(($452+36)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$454]($444) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=153;break; } else { label=92;break; }
 case 153: 
 var $extract_t999=(($455)&255);
 var $_0930_off0=$extract_t999;label=155;break;
 case 154: 
 var $457=HEAP8[($446)];
 var $_0930_off0=$457;label=155;break;
 case 155: 
 var $_0930_off0;
 var $458=(($_0930_off0<<24)>>24);
 var $459=(function() { try { __THREW__ = 0; return _isascii($458) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=156;break; } else { label=92;break; }
 case 156: 
 var $460=($459|0)==0;
 if($460){var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=374;break;}else{label=157;break;}
 case 157: 
 var $461=HEAP32[(($235)>>2)];
 var $462=(($461+($458<<1))|0);
 var $463=HEAP16[(($462)>>1)];
 var $464=$463&8192;
 var $465=(($464<<16)>>16)==0;
 if($465){var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=374;break;}else{label=158;break;}
 case 158: 
 var $467=HEAP32[(($234)>>2)];
 var $468=(($467+12)|0);
 var $469=HEAP32[(($468)>>2)];
 var $470=(($467+16)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=($469|0)==($471|0);
 if($472){label=159;break;}else{label=161;break;}
 case 159: 
 var $474=$467;
 var $475=HEAP32[(($474)>>2)];
 var $476=(($475+40)|0);
 var $477=HEAP32[(($476)>>2)];
 var $478=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$477]($467) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=160;break; } else { label=92;break; }
 case 160: 
 var $extract_t1001=(($478)&255);
 var $_0929_off0=$extract_t1001;label=162;break;
 case 161: 
 var $480=(($469+1)|0);
 HEAP32[(($468)>>2)]=$480;
 var $481=HEAP8[($469)];
 var $_0929_off0=$481;label=162;break;
 case 162: 
 var $_0929_off0;
 var $482=HEAP8[($15)];
 var $483=$482&1;
 var $484=(($483<<24)>>24)==0;
 if($484){label=163;break;}else{label=164;break;}
 case 163: 
 var $486=($482&255);
 var $487=$486>>>1;
 var $__sz_0_i32=$487;var $__cap_0_i31=10;label=165;break;
 case 164: 
 var $489=HEAP32[(($257)>>2)];
 var $490=$489&-2;
 var $491=((($490)-(1))|0);
 var $492=HEAP32[(($252)>>2)];
 var $__sz_0_i32=$492;var $__cap_0_i31=$491;label=165;break;
 case 165: 
 var $__cap_0_i31;
 var $__sz_0_i32;
 var $494=($__sz_0_i32|0)==($__cap_0_i31|0);
 if($494){label=166;break;}else{var $__is_short_0_off0_in_in_i33=$482;label=168;break;}
 case 166: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i31,1,$__cap_0_i31,$__cap_0_i31,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=167;break; } else { label=92;break; }
 case 167: 
 var $496=HEAP8[($15)];
 var $__is_short_0_off0_in_in_i33=$496;label=168;break;
 case 168: 
 var $__is_short_0_off0_in_in_i33;
 var $__is_short_0_off0_in_i34=$__is_short_0_off0_in_in_i33&1;
 var $__is_short_0_off0_i35=(($__is_short_0_off0_in_i34<<24)>>24)==0;
 if($__is_short_0_off0_i35){label=169;break;}else{label=170;break;}
 case 169: 
 var $499=$__sz_0_i32<<1;
 var $500=((($499)+(2))|0);
 var $501=(($500)&255);
 HEAP8[($15)]=$501;
 var $__p_0_sum_pre_i36=((($__sz_0_i32)+(1))|0);
 var $_pn_i38=$251;var $__p_0_sum_pre_phi_i37=$__p_0_sum_pre_i36;label=171;break;
 case 170: 
 var $503=HEAP32[(($253)>>2)];
 var $504=((($__sz_0_i32)+(1))|0);
 HEAP32[(($252)>>2)]=$504;
 var $_pn_i38=$503;var $__p_0_sum_pre_phi_i37=$504;label=171;break;
 case 171: 
 var $__p_0_sum_pre_phi_i37;
 var $_pn_i38;
 var $__p_0_i39=(($_pn_i38+$__sz_0_i32)|0);
 HEAP8[($__p_0_i39)]=$_0929_off0;
 var $505=(($_pn_i38+$__p_0_sum_pre_phi_i37)|0);
 HEAP8[($505)]=0;
 var $410=$443;var $__e_sroa_0_3=$__e_sroa_0_5;label=138;break;
 case 172: 
 var $506=HEAP8[($13)];
 var $507=($506&255);
 var $508=$507&1;
 var $509=($508|0)==0;
 var $510=HEAP32[(($242)>>2)];
 var $511=$507>>>1;
 var $512=($509?$511:$510);
 var $513=HEAP8[($14)];
 var $514=($513&255);
 var $515=$514&1;
 var $516=($515|0)==0;
 var $517=HEAP32[(($239)>>2)];
 var $518=$514>>>1;
 var $519=($516?$518:$517);
 var $520=(((-$519))|0);
 var $521=($512|0)==($520|0);
 if($521){var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;}else{label=173;break;}
 case 173: 
 var $522=($512|0)==0;
 var $523=($519|0)==0;
 var $or_cond1332=$522|$523;
 var $524=HEAP32[(($234)>>2)];
 var $525=(($524+12)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=(($524+16)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=($526|0)==($528|0);
 if($or_cond1332){label=174;break;}else{label=194;break;}
 case 174: 
 if($522){label=185;break;}else{label=175;break;}
 case 175: 
 if($529){label=176;break;}else{label=178;break;}
 case 176: 
 var $532=$524;
 var $533=HEAP32[(($532)>>2)];
 var $534=(($533+36)|0);
 var $535=HEAP32[(($534)>>2)];
 var $536=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$535]($524) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=177;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 177: 
 var $extract_t996=(($536)&255);
 var $_pre1297=HEAP8[($13)];
 var $_0926_off0=$extract_t996;var $539=$_pre1297;label=179;break;
 case 178: 
 var $538=HEAP8[($526)];
 var $_0926_off0=$538;var $539=$506;label=179;break;
 case 179: 
 var $539;
 var $_0926_off0;
 var $540=$539&1;
 var $541=(($540<<24)>>24)==0;
 var $542=HEAP32[(($243)>>2)];
 var $_=($541?$241:$542);
 var $543=HEAP8[($_)];
 var $544=(($_0926_off0<<24)>>24)==(($543<<24)>>24);
 if($544){label=180;break;}else{label=184;break;}
 case 180: 
 var $546=HEAP32[(($234)>>2)];
 var $547=(($546+12)|0);
 var $548=HEAP32[(($547)>>2)];
 var $549=(($546+16)|0);
 var $550=HEAP32[(($549)>>2)];
 var $551=($548|0)==($550|0);
 if($551){label=181;break;}else{label=182;break;}
 case 181: 
 var $553=$546;
 var $554=HEAP32[(($553)>>2)];
 var $555=(($554+40)|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$556]($546) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=183;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 182: 
 var $559=(($548+1)|0);
 HEAP32[(($547)>>2)]=$559;
 label=183;break;
 case 183: 
 var $560=HEAP8[($13)];
 var $561=($560&255);
 var $562=$561&1;
 var $563=($562|0)==0;
 var $564=HEAP32[(($242)>>2)];
 var $565=$561>>>1;
 var $566=($563?$565:$564);
 var $567=($566>>>0)>1;
 var $__psn___trailing_sign_0=($567?$__psn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;
 case 184: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;
 case 185: 
 if($529){label=186;break;}else{label=188;break;}
 case 186: 
 var $571=$524;
 var $572=HEAP32[(($571)>>2)];
 var $573=(($572+36)|0);
 var $574=HEAP32[(($573)>>2)];
 var $575=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$574]($524) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=187;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 187: 
 var $extract_t994=(($575)&255);
 var $_pre=HEAP8[($14)];
 var $_0922_off0=$extract_t994;var $578=$_pre;label=189;break;
 case 188: 
 var $577=HEAP8[($526)];
 var $_0922_off0=$577;var $578=$513;label=189;break;
 case 189: 
 var $578;
 var $_0922_off0;
 var $579=$578&1;
 var $580=(($579<<24)>>24)==0;
 var $581=HEAP32[(($240)>>2)];
 var $_1320=($580?$238:$581);
 var $582=HEAP8[($_1320)];
 var $583=(($_0922_off0<<24)>>24)==(($582<<24)>>24);
 if($583){label=190;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;}
 case 190: 
 var $585=HEAP32[(($234)>>2)];
 var $586=(($585+12)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=(($585+16)|0);
 var $589=HEAP32[(($588)>>2)];
 var $590=($587|0)==($589|0);
 if($590){label=191;break;}else{label=192;break;}
 case 191: 
 var $592=$585;
 var $593=HEAP32[(($592)>>2)];
 var $594=(($593+40)|0);
 var $595=HEAP32[(($594)>>2)];
 var $596=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$595]($585) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=193;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 192: 
 var $598=(($587+1)|0);
 HEAP32[(($586)>>2)]=$598;
 label=193;break;
 case 193: 
 HEAP8[($__neg)]=1;
 var $599=HEAP8[($14)];
 var $600=($599&255);
 var $601=$600&1;
 var $602=($601|0)==0;
 var $603=HEAP32[(($239)>>2)];
 var $604=$600>>>1;
 var $605=($602?$604:$603);
 var $606=($605>>>0)>1;
 var $__nsn___trailing_sign_0=($606?$__nsn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;
 case 194: 
 if($529){label=195;break;}else{label=197;break;}
 case 195: 
 var $609=$524;
 var $610=HEAP32[(($609)>>2)];
 var $611=(($610+36)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$612]($524) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=196;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 196: 
 var $extract_t990=(($613)&255);
 var $_pre1298=HEAP8[($13)];
 var $_pre1452=HEAP32[(($234)>>2)];
 var $_phi_trans_insert=(($_pre1452+12)|0);
 var $_pre1453=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert1454=(($_pre1452+16)|0);
 var $_pre1455=HEAP32[(($_phi_trans_insert1454)>>2)];
 var $_0917_off0=$extract_t990;var $619=$_pre1298;var $618=$_pre1452;var $617=$_pre1453;var $616=$_pre1455;label=198;break;
 case 197: 
 var $615=HEAP8[($526)];
 var $_0917_off0=$615;var $619=$506;var $618=$524;var $617=$526;var $616=$528;label=198;break;
 case 198: 
 var $616;
 var $617;
 var $618;
 var $619;
 var $_0917_off0;
 var $620=$619&1;
 var $621=(($620<<24)>>24)==0;
 var $622=HEAP32[(($243)>>2)];
 var $_1321=($621?$241:$622);
 var $623=HEAP8[($_1321)];
 var $624=(($_0917_off0<<24)>>24)==(($623<<24)>>24);
 var $625=(($618+12)|0);
 var $626=($617|0)==($616|0);
 if($624){label=199;break;}else{label=203;break;}
 case 199: 
 if($626){label=200;break;}else{label=201;break;}
 case 200: 
 var $629=$618;
 var $630=HEAP32[(($629)>>2)];
 var $631=(($630+40)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$632]($618) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=202;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 201: 
 var $635=(($617+1)|0);
 HEAP32[(($625)>>2)]=$635;
 label=202;break;
 case 202: 
 var $636=HEAP8[($13)];
 var $637=($636&255);
 var $638=$637&1;
 var $639=($638|0)==0;
 var $640=HEAP32[(($242)>>2)];
 var $641=$637>>>1;
 var $642=($639?$641:$640);
 var $643=($642>>>0)>1;
 var $__psn___trailing_sign_01007=($643?$__psn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__psn___trailing_sign_01007;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;
 case 203: 
 if($626){label=204;break;}else{label=206;break;}
 case 204: 
 var $646=$618;
 var $647=HEAP32[(($646)>>2)];
 var $648=(($647+36)|0);
 var $649=HEAP32[(($648)>>2)];
 var $650=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$649]($618) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 205: 
 var $extract_t992=(($650)&255);
 var $_0913_off0=$extract_t992;label=207;break;
 case 206: 
 var $652=HEAP8[($617)];
 var $_0913_off0=$652;label=207;break;
 case 207: 
 var $_0913_off0;
 var $653=HEAP8[($14)];
 var $654=$653&1;
 var $655=(($654<<24)>>24)==0;
 var $656=HEAP32[(($240)>>2)];
 var $_1322=($655?$238:$656);
 var $657=HEAP8[($_1322)];
 var $658=(($_0913_off0<<24)>>24)==(($657<<24)>>24);
 if($658){label=208;break;}else{label=212;break;}
 case 208: 
 var $660=HEAP32[(($234)>>2)];
 var $661=(($660+12)|0);
 var $662=HEAP32[(($661)>>2)];
 var $663=(($660+16)|0);
 var $664=HEAP32[(($663)>>2)];
 var $665=($662|0)==($664|0);
 if($665){label=209;break;}else{label=210;break;}
 case 209: 
 var $667=$660;
 var $668=HEAP32[(($667)>>2)];
 var $669=(($668+40)|0);
 var $670=HEAP32[(($669)>>2)];
 var $671=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$670]($660) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=211;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$259;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load105710761218;label=93;break; }
 case 210: 
 var $673=(($662+1)|0);
 HEAP32[(($661)>>2)]=$673;
 label=211;break;
 case 211: 
 HEAP8[($__neg)]=1;
 var $674=HEAP8[($14)];
 var $675=($674&255);
 var $676=$675&1;
 var $677=($676|0)==0;
 var $678=HEAP32[(($239)>>2)];
 var $679=$675>>>1;
 var $680=($677?$679:$678);
 var $681=($680>>>0)>1;
 var $__nsn___trailing_sign_01008=($681?$__nsn:$__trailing_sign_01224);
 var $__trailing_sign_1=$__nsn___trailing_sign_01008;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;
 case 212: 
 var $683=HEAP32[(($__err)>>2)];
 var $684=$683|4;
 HEAP32[(($__err)>>2)]=$684;
 var $_0919=0;var $1331=$259;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load105710761218;label=408;break;
 case 213: 
 var $686=($__trailing_sign_01224|0)!=0;
 var $687=($__p_01226>>>0)<2;
 var $or_cond=$686|$687;
 if($or_cond){label=217;break;}else{label=214;break;}
 case 214: 
 var $689=($__p_01226|0)==2;
 if($689){label=215;break;}else{var $694=0;label=216;break;}
 case 215: 
 var $691=HEAP8[($254)];
 var $692=(($691<<24)>>24)!=0;
 var $694=$692;label=216;break;
 case 216: 
 var $694;
 var $brmerge=$245|$694;
 if($brmerge){label=217;break;}else{var $__trailing_sign_1=0;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=374;break;}
 case 217: 
 var $695=HEAP8[($12)];
 var $696=$695&1;
 var $697=(($696<<24)>>24)==0;
 var $698=HEAP32[(($249)>>2)];
 var $_1323=($697?$247:$698);
 var $699=($__p_01226|0)==0;
 if($699){var $__sym_curr_char_sroa_0_0_ph=$_1323;var $_ph=$695;var $759=$698;label=230;break;}else{label=218;break;}
 case 218: 
 var $701=((($__p_01226)-(1))|0);
 var $702=(($tmpcast+$701)|0);
 var $703=HEAP8[($702)];
 var $switch=($703&255)<2;
 if($switch){label=219;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_1323;var $_ph=$695;var $759=$698;label=230;break;}
 case 219: 
 var $704=($695&255);
 var $705=$704&1;
 var $706=($705|0)==0;
 var $707=HEAP32[(($248)>>2)];
 var $708=$704>>>1;
 var $709=($706?$708:$707);
 var $710=($709|0)==0;
 if($710){var $__sym_space_end_sroa_0_0_lcssa=$_1323;var $733=$695;var $732=$698;label=225;break;}else{var $__sym_space_end_sroa_0_01349=$_1323;label=220;break;}
 case 220: 
 var $__sym_space_end_sroa_0_01349;
 var $711=HEAP8[($__sym_space_end_sroa_0_01349)];
 var $712=(($711<<24)>>24);
 var $713=(function() { try { __THREW__ = 0; return _isascii($712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=221;break; } else { label=90;break; }
 case 221: 
 var $714=($713|0)==0;
 if($714){label=224;break;}else{label=222;break;}
 case 222: 
 var $715=HEAP32[(($235)>>2)];
 var $716=(($715+($712<<1))|0);
 var $717=HEAP16[(($716)>>1)];
 var $718=$717&8192;
 var $719=(($718<<16)>>16)==0;
 if($719){label=224;break;}else{label=223;break;}
 case 223: 
 var $720=(($__sym_space_end_sroa_0_01349+1)|0);
 var $_pre1308=HEAP8[($12)];
 var $721=$_pre1308&1;
 var $722=(($721<<24)>>24)==0;
 var $723=HEAP32[(($249)>>2)];
 var $_1324=($722?$247:$723);
 var $724=($_pre1308&255);
 var $725=$724&1;
 var $726=($725|0)==0;
 var $727=HEAP32[(($248)>>2)];
 var $728=$724>>>1;
 var $729=($726?$728:$727);
 var $730=(($_1324+$729)|0);
 var $731=($720|0)==($730|0);
 if($731){var $__sym_space_end_sroa_0_0_lcssa=$720;var $733=$_pre1308;var $732=$723;label=225;break;}else{var $__sym_space_end_sroa_0_01349=$720;label=220;break;}
 case 224: 
 var $_pre1456=HEAP8[($12)];
 var $_pre1457=HEAP32[(($249)>>2)];
 var $__sym_space_end_sroa_0_0_lcssa=$__sym_space_end_sroa_0_01349;var $733=$_pre1456;var $732=$_pre1457;label=225;break;
 case 225: 
 var $732;
 var $733;
 var $__sym_space_end_sroa_0_0_lcssa;
 var $734=$733&1;
 var $735=(($734<<24)>>24)==0;
 var $_1325=($735?$247:$732);
 var $736=$__sym_space_end_sroa_0_0_lcssa;
 var $737=$_1325;
 var $738=((($736)-($737))|0);
 var $739=HEAP8[($15)];
 var $740=($739&255);
 var $741=$740&1;
 var $742=($741|0)==0;
 var $743=HEAP32[(($252)>>2)];
 var $744=$740>>>1;
 var $745=($742?$744:$743);
 var $746=($738>>>0)>($745>>>0);
 if($746){var $__sym_curr_char_sroa_0_0_ph=$_1325;var $_ph=$733;var $759=$732;label=230;break;}else{label=226;break;}
 case 226: 
 var $747=$739&1;
 var $748=(($747<<24)>>24)==0;
 var $749=HEAP32[(($253)>>2)];
 var $_1326=($748?$251:$749);
 var $750=(($_1326+$745)|0);
 var $751=($__sym_space_end_sroa_0_0_lcssa|0)==($_1325|0);
 if($751){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$733;var $759=$732;label=230;break;}else{label=227;break;}
 case 227: 
 var $_sum=((($745)-($738))|0);
 var $752=(($_1326+$_sum)|0);
 var $_sroa_0946_01128=$752;var $_sroa_0944_01129=$_1325;label=228;break;
 case 228: 
 var $_sroa_0944_01129;
 var $_sroa_0946_01128;
 var $753=HEAP8[($_sroa_0946_01128)];
 var $754=HEAP8[($_sroa_0944_01129)];
 var $755=(($753<<24)>>24)==(($754<<24)>>24);
 if($755){label=229;break;}else{var $__sym_curr_char_sroa_0_0_ph=$_1325;var $_ph=$733;var $759=$732;label=230;break;}
 case 229: 
 var $756=(($_sroa_0946_01128+1)|0);
 var $757=(($_sroa_0944_01129+1)|0);
 var $758=($756|0)==($750|0);
 if($758){var $__sym_curr_char_sroa_0_0_ph=$__sym_space_end_sroa_0_0_lcssa;var $_ph=$733;var $759=$732;label=230;break;}else{var $_sroa_0946_01128=$756;var $_sroa_0944_01129=$757;label=228;break;}
 case 230: 
 var $759;
 var $_ph;
 var $__sym_curr_char_sroa_0_0_ph;
 var $760=$_ph&1;
 var $761=(($760<<24)>>24)==0;
 var $_13301352=($761?$247:$759);
 var $762=($_ph&255);
 var $763=$762&1;
 var $764=($763|0)==0;
 var $765=HEAP32[(($248)>>2)];
 var $766=$762>>>1;
 var $767=($764?$766:$765);
 var $768=(($_13301352+$767)|0);
 var $769=($__sym_curr_char_sroa_0_0_ph|0)==($768|0);
 if($769){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_0_ph;var $__e_sroa_0_9=$__e_sroa_0_2;label=253;break;}else{var $770=$__e_sroa_0_2;var $__sym_curr_char_sroa_0_01353=$__sym_curr_char_sroa_0_0_ph;var $__e_sroa_0_6=$__e_sroa_0_2;label=231;break;}
 case 231: 
 var $__e_sroa_0_6;
 var $__sym_curr_char_sroa_0_01353;
 var $770;
 var $771=HEAP32[(($234)>>2)];
 var $772=($771|0)==0;
 if($772){var $787=0;label=237;break;}else{label=232;break;}
 case 232: 
 var $774=(($771+12)|0);
 var $775=HEAP32[(($774)>>2)];
 var $776=(($771+16)|0);
 var $777=HEAP32[(($776)>>2)];
 var $778=($775|0)==($777|0);
 if($778){label=233;break;}else{var $787=$771;label=237;break;}
 case 233: 
 var $780=$771;
 var $781=HEAP32[(($780)>>2)];
 var $782=(($781+36)|0);
 var $783=HEAP32[(($782)>>2)];
 var $784=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$783]($771) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { label=91;break; }
 case 234: 
 var $785=($784|0)==-1;
 if($785){label=236;break;}else{label=235;break;}
 case 235: 
 var $_pre1309=HEAP32[(($234)>>2)];
 var $787=$_pre1309;label=237;break;
 case 236: 
 HEAP32[(($234)>>2)]=0;
 var $787=0;label=237;break;
 case 237: 
 var $787;
 var $788=($787|0)==0;
 var $789=($770|0)==0;
 if($789){var $__e_sroa_0_7=$__e_sroa_0_6;label=242;break;}else{label=238;break;}
 case 238: 
 var $791=(($770+12)|0);
 var $792=HEAP32[(($791)>>2)];
 var $793=(($770+16)|0);
 var $794=HEAP32[(($793)>>2)];
 var $795=($792|0)==($794|0);
 if($795){label=240;break;}else{label=239;break;}
 case 239: 
 if($788){var $803=$770;var $__e_sroa_0_8=$__e_sroa_0_6;label=244;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;var $__e_sroa_0_9=$__e_sroa_0_6;label=253;break;}
 case 240: 
 var $797=$770;
 var $798=HEAP32[(($797)>>2)];
 var $799=(($798+36)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$800]($770) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=241;break; } else { label=91;break; }
 case 241: 
 var $802=($801|0)==-1;
 if($802){var $__e_sroa_0_7=0;label=242;break;}else{label=243;break;}
 case 242: 
 var $__e_sroa_0_7;
 if($788){var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;var $__e_sroa_0_9=$__e_sroa_0_7;label=253;break;}else{var $803=0;var $__e_sroa_0_8=$__e_sroa_0_7;label=244;break;}
 case 243: 
 if($788){var $803=$770;var $__e_sroa_0_8=$__e_sroa_0_6;label=244;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;var $__e_sroa_0_9=$__e_sroa_0_6;label=253;break;}
 case 244: 
 var $__e_sroa_0_8;
 var $803;
 var $804=HEAP32[(($234)>>2)];
 var $805=(($804+12)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(($804+16)|0);
 var $808=HEAP32[(($807)>>2)];
 var $809=($806|0)==($808|0);
 if($809){label=245;break;}else{label=247;break;}
 case 245: 
 var $811=$804;
 var $812=HEAP32[(($811)>>2)];
 var $813=(($812+36)|0);
 var $814=HEAP32[(($813)>>2)];
 var $815=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$814]($804) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=91;break; }
 case 246: 
 var $extract_t988=(($815)&255);
 var $_0906_off0=$extract_t988;label=248;break;
 case 247: 
 var $817=HEAP8[($806)];
 var $_0906_off0=$817;label=248;break;
 case 248: 
 var $_0906_off0;
 var $818=HEAP8[($__sym_curr_char_sroa_0_01353)];
 var $819=(($_0906_off0<<24)>>24)==(($818<<24)>>24);
 if($819){label=249;break;}else{var $__sym_curr_char_sroa_0_0_lcssa=$__sym_curr_char_sroa_0_01353;var $__e_sroa_0_9=$__e_sroa_0_8;label=253;break;}
 case 249: 
 var $821=HEAP32[(($234)>>2)];
 var $822=(($821+12)|0);
 var $823=HEAP32[(($822)>>2)];
 var $824=(($821+16)|0);
 var $825=HEAP32[(($824)>>2)];
 var $826=($823|0)==($825|0);
 if($826){label=250;break;}else{label=251;break;}
 case 250: 
 var $828=$821;
 var $829=HEAP32[(($828)>>2)];
 var $830=(($829+40)|0);
 var $831=HEAP32[(($830)>>2)];
 var $832=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$831]($821) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=252;break; } else { label=91;break; }
 case 251: 
 var $834=(($823+1)|0);
 HEAP32[(($822)>>2)]=$834;
 label=252;break;
 case 252: 
 var $835=(($__sym_curr_char_sroa_0_01353+1)|0);
 var $_pre1299=HEAP8[($12)];
 var $836=$_pre1299&1;
 var $837=(($836<<24)>>24)==0;
 var $838=HEAP32[(($249)>>2)];
 var $_1330=($837?$247:$838);
 var $839=($_pre1299&255);
 var $840=$839&1;
 var $841=($840|0)==0;
 var $842=HEAP32[(($248)>>2)];
 var $843=$839>>>1;
 var $844=($841?$843:$842);
 var $845=(($_1330+$844)|0);
 var $846=($835|0)==($845|0);
 if($846){var $__sym_curr_char_sroa_0_0_lcssa=$835;var $__e_sroa_0_9=$__e_sroa_0_8;label=253;break;}else{var $770=$803;var $__sym_curr_char_sroa_0_01353=$835;var $__e_sroa_0_6=$__e_sroa_0_8;label=231;break;}
 case 253: 
 var $__e_sroa_0_9;
 var $__sym_curr_char_sroa_0_0_lcssa;
 if($245){label=254;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=374;break;}
 case 254: 
 var $847=HEAP8[($12)];
 var $848=$847&1;
 var $849=(($848<<24)>>24)==0;
 var $850=HEAP32[(($249)>>2)];
 var $_1331=($849?$247:$850);
 var $851=($847&255);
 var $852=$851&1;
 var $853=($852|0)==0;
 var $854=HEAP32[(($248)>>2)];
 var $855=$851>>>1;
 var $856=($853?$855:$854);
 var $857=(($_1331+$856)|0);
 var $858=($__sym_curr_char_sroa_0_0_lcssa|0)==($857|0);
 if($858){var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$258;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load104710611221;var $1229=$259;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load105710761218;var $__we1083=$__we10821215;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=374;break;}else{label=255;break;}
 case 255: 
 var $860=HEAP32[(($__err)>>2)];
 var $861=$860|4;
 HEAP32[(($__err)>>2)]=$861;
 var $_0919=0;var $1331=$259;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load105710761218;label=408;break;
 case 256: 
 var $__e_sroa_0_10;
 var $__we1087;
 var $__gb_sroa_1_4_load10571074;
 var $862;
 var $__gb_sroa_0_0_load10471064;
 var $863;
 var $__ng_0;
 var $864=HEAP32[(($234)>>2)];
 var $865=($864|0)==0;
 if($865){var $880=0;label=262;break;}else{label=257;break;}
 case 257: 
 var $867=(($864+12)|0);
 var $868=HEAP32[(($867)>>2)];
 var $869=(($864+16)|0);
 var $870=HEAP32[(($869)>>2)];
 var $871=($868|0)==($870|0);
 if($871){label=258;break;}else{var $880=$864;label=262;break;}
 case 258: 
 var $873=$864;
 var $874=HEAP32[(($873)>>2)];
 var $875=(($874+36)|0);
 var $876=HEAP32[(($875)>>2)];
 var $877=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$876]($864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=259;break; } else { var $_ph_ph_ph=$862;var $__gb_sroa_1_4_load10571069_ph_ph_ph=$__gb_sroa_1_4_load10571074;label=86;break; }
 case 259: 
 var $878=($877|0)==-1;
 if($878){label=261;break;}else{label=260;break;}
 case 260: 
 var $_pre1310=HEAP32[(($234)>>2)];
 var $880=$_pre1310;label=262;break;
 case 261: 
 HEAP32[(($234)>>2)]=0;
 var $880=0;label=262;break;
 case 262: 
 var $880;
 var $881=($880|0)==0;
 var $882=($__e_sroa_0_10|0)==0;
 if($882){label=267;break;}else{label=263;break;}
 case 263: 
 var $884=(($__e_sroa_0_10+12)|0);
 var $885=HEAP32[(($884)>>2)];
 var $886=(($__e_sroa_0_10+16)|0);
 var $887=HEAP32[(($886)>>2)];
 var $888=($885|0)==($887|0);
 if($888){label=265;break;}else{label=264;break;}
 case 264: 
 if($881){var $__e_sroa_0_12=$__e_sroa_0_10;label=269;break;}else{var $__e_sroa_0_13=$__e_sroa_0_10;label=300;break;}
 case 265: 
 var $890=$__e_sroa_0_10;
 var $891=HEAP32[(($890)>>2)];
 var $892=(($891+36)|0);
 var $893=HEAP32[(($892)>>2)];
 var $894=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$893]($__e_sroa_0_10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=266;break; } else { var $_ph_ph_ph=$862;var $__gb_sroa_1_4_load10571069_ph_ph_ph=$__gb_sroa_1_4_load10571074;label=86;break; }
 case 266: 
 var $895=($894|0)==-1;
 if($895){label=267;break;}else{label=268;break;}
 case 267: 
 if($881){var $__e_sroa_0_13=0;label=300;break;}else{var $__e_sroa_0_12=0;label=269;break;}
 case 268: 
 if($881){var $__e_sroa_0_12=$__e_sroa_0_10;label=269;break;}else{var $__e_sroa_0_13=$__e_sroa_0_10;label=300;break;}
 case 269: 
 var $__e_sroa_0_12;
 var $896=HEAP32[(($234)>>2)];
 var $897=(($896+12)|0);
 var $898=HEAP32[(($897)>>2)];
 var $899=(($896+16)|0);
 var $900=HEAP32[(($899)>>2)];
 var $901=($898|0)==($900|0);
 if($901){label=270;break;}else{label=272;break;}
 case 270: 
 var $903=$896;
 var $904=HEAP32[(($903)>>2)];
 var $905=(($904+36)|0);
 var $906=HEAP32[(($905)>>2)];
 var $907=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$906]($896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=271;break; } else { var $_ph_ph_ph=$862;var $__gb_sroa_1_4_load10571069_ph_ph_ph=$__gb_sroa_1_4_load10571074;label=86;break; }
 case 271: 
 var $extract_t985=(($907)&255);
 var $_0910_off0=$extract_t985;label=273;break;
 case 272: 
 var $909=HEAP8[($898)];
 var $_0910_off0=$909;label=273;break;
 case 273: 
 var $_0910_off0;
 var $910=(($_0910_off0<<24)>>24);
 var $911=(function() { try { __THREW__ = 0; return _isascii($910) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=274;break; } else { var $_ph_ph_ph=$862;var $__gb_sroa_1_4_load10571069_ph_ph_ph=$__gb_sroa_1_4_load10571074;label=86;break; }
 case 274: 
 var $912=($911|0)==0;
 if($912){label=288;break;}else{label=275;break;}
 case 275: 
 var $913=HEAP32[(($235)>>2)];
 var $914=(($913+($910<<1))|0);
 var $915=HEAP16[(($914)>>1)];
 var $916=$915&2048;
 var $917=(($916<<16)>>16)==0;
 if($917){label=288;break;}else{label=276;break;}
 case 276: 
 var $919=HEAP32[(($__wn)>>2)];
 var $920=($919|0)==($__we1087|0);
 if($920){label=277;break;}else{var $__we1089=$__we1087;var $947=$919;label=287;break;}
 case 277: 
 var $922=HEAP32[(($256)>>2)];
 var $923=($922|0)!=((480)|0);
 var $924=HEAP32[(($232)>>2)];
 var $925=$__we1087;
 var $926=$924;
 var $927=((($925)-($926))|0);
 var $928=($927>>>0)<2147483647;
 var $929=$927<<1;
 var $930=($928?$929:-1);
 var $__i=($923?$924:0);
 var $931=_realloc($__i,$930);
 var $932=($931|0)==0;
 if($932){label=278;break;}else{label=280;break;}
 case 278: 
 var $934=___cxa_allocate_exception(4);
 var $935=$934;
 HEAP32[(($935)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($934,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=279;break; } else { label=87;break; }
 case 279: 
 throw "Reached an unreachable!";
 case 280: 
 if($923){label=281;break;}else{label=282;break;}
 case 281: 
 HEAP32[(($232)>>2)]=$931;
 var $942=$931;label=286;break;
 case 282: 
 var $_pr_i=HEAP32[(($232)>>2)];
 HEAP32[(($232)>>2)]=$931;
 var $937=($_pr_i|0)==0;
 if($937){var $942=$931;label=286;break;}else{label=283;break;}
 case 283: 
 var $939=HEAP32[(($256)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$939]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=284;break; } else { label=285;break; }
 case 284: 
 var $_pre_i=HEAP32[(($232)>>2)];
 var $942=$_pre_i;label=286;break;
 case 285: 
 var $941$0 = ___cxa_find_matching_catch(-1, -1,0); var $941$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 286: 
 var $942;
 HEAP32[(($256)>>2)]=244;
 var $943=(($942+$927)|0);
 HEAP32[(($__wn)>>2)]=$943;
 var $944=HEAP32[(($232)>>2)];
 var $945=(($944+$930)|0);
 var $__we1089=$945;var $947=$943;label=287;break;
 case 287: 
 var $947;
 var $__we1089;
 var $948=(($947+1)|0);
 HEAP32[(($__wn)>>2)]=$948;
 HEAP8[($947)]=$_0910_off0;
 var $949=((($__ng_0)+(1))|0);
 var $__ng_1=$949;var $989=$863;var $__gb_sroa_0_0_load10471065=$__gb_sroa_0_0_load10471064;var $988=$862;var $__gb_sroa_1_4_load10571072=$__gb_sroa_1_4_load10571074;var $__we1088=$__we1089;label=297;break;
 case 288: 
 var $950=HEAP8[($10)];
 var $951=($950&255);
 var $952=$951&1;
 var $953=($952|0)==0;
 var $954=HEAP32[(($255)>>2)];
 var $955=$951>>>1;
 var $956=($953?$955:$954);
 var $957=($956|0)==0;
 var $958=($__ng_0|0)==0;
 var $or_cond1010=$957|$958;
 var $or_cond1010_not=$or_cond1010^1;
 var $959=(($_0910_off0<<24)>>24)==(($__ts_0<<24)>>24);
 var $or_cond17=$or_cond1010_not&$959;
 if($or_cond17){label=289;break;}else{var $__e_sroa_0_13=$__e_sroa_0_12;label=300;break;}
 case 289: 
 var $961=($__gb_sroa_0_0_load10471064|0)==($863|0);
 if($961){label=290;break;}else{var $985=$863;var $__gb_sroa_0_0_load10471066=$__gb_sroa_0_0_load10471064;var $984=$862;var $__gb_sroa_1_4_load10571073=$__gb_sroa_1_4_load10571074;label=296;break;}
 case 290: 
 var $963=($__gb_sroa_1_4_load10571074|0)==((480)|0);
 var $964=$__gb_sroa_0_0_load10471064;
 var $965=$862;
 var $966=((($964)-($965))|0);
 var $967=($966>>>0)<2147483647;
 var $968=$966<<1;
 var $969=($967?$968:-1);
 var $970=$966>>2;
 if($963){var $973=0;label=292;break;}else{label=291;break;}
 case 291: 
 var $phitmp_i=$862;
 var $973=$phitmp_i;label=292;break;
 case 292: 
 var $973;
 var $974=_realloc($973,$969);
 var $975=$974;
 var $976=($974|0)==0;
 if($976){label=293;break;}else{label=295;break;}
 case 293: 
 var $978=___cxa_allocate_exception(4);
 var $979=$978;
 HEAP32[(($979)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($978,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { label=87;break; }
 case 294: 
 throw "Reached an unreachable!";
 case 295: 
 var $980=$969>>>2;
 var $981=(($975+($970<<2))|0);
 var $982=(($975+($980<<2))|0);
 var $985=$982;var $__gb_sroa_0_0_load10471066=$981;var $984=$975;var $__gb_sroa_1_4_load10571073=244;label=296;break;
 case 296: 
 var $__gb_sroa_1_4_load10571073;
 var $984;
 var $__gb_sroa_0_0_load10471066;
 var $985;
 var $986=(($__gb_sroa_0_0_load10471066+4)|0);
 HEAP32[(($__gb_sroa_0_0_load10471066)>>2)]=$__ng_0;
 var $__ng_1=0;var $989=$985;var $__gb_sroa_0_0_load10471065=$986;var $988=$984;var $__gb_sroa_1_4_load10571072=$__gb_sroa_1_4_load10571073;var $__we1088=$__we1087;label=297;break;
 case 297: 
 var $__we1088;
 var $__gb_sroa_1_4_load10571072;
 var $988;
 var $__gb_sroa_0_0_load10471065;
 var $989;
 var $__ng_1;
 var $990=HEAP32[(($234)>>2)];
 var $991=(($990+12)|0);
 var $992=HEAP32[(($991)>>2)];
 var $993=(($990+16)|0);
 var $994=HEAP32[(($993)>>2)];
 var $995=($992|0)==($994|0);
 if($995){label=298;break;}else{label=299;break;}
 case 298: 
 var $997=$990;
 var $998=HEAP32[(($997)>>2)];
 var $999=(($998+40)|0);
 var $1000=HEAP32[(($999)>>2)];
 var $1001=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1000]($990) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $863=$989;var $__gb_sroa_0_0_load10471064=$__gb_sroa_0_0_load10471065;var $862=$988;var $__gb_sroa_1_4_load10571074=$__gb_sroa_1_4_load10571072;var $__we1087=$__we1088;var $__e_sroa_0_10=$__e_sroa_0_12;label=256;break; } else { var $_ph_ph_ph=$988;var $__gb_sroa_1_4_load10571069_ph_ph_ph=$__gb_sroa_1_4_load10571072;label=86;break; }
 case 299: 
 var $1003=(($992+1)|0);
 HEAP32[(($991)>>2)]=$1003;
 var $__ng_0=$__ng_1;var $863=$989;var $__gb_sroa_0_0_load10471064=$__gb_sroa_0_0_load10471065;var $862=$988;var $__gb_sroa_1_4_load10571074=$__gb_sroa_1_4_load10571072;var $__we1087=$__we1088;var $__e_sroa_0_10=$__e_sroa_0_12;label=256;break;
 case 300: 
 var $__e_sroa_0_13;
 var $1005=($862|0)==($__gb_sroa_0_0_load10471064|0);
 var $1006=($__ng_0|0)==0;
 var $or_cond1011=$1005|$1006;
 if($or_cond1011){var $1035=$863;var $__gb_sroa_0_0_load10471063=$__gb_sroa_0_0_load10471064;var $1034=$862;var $__gb_sroa_1_4_load10571071=$__gb_sroa_1_4_load10571074;label=309;break;}else{label=301;break;}
 case 301: 
 var $1008=($__gb_sroa_0_0_load10471064|0)==($863|0);
 if($1008){label=302;break;}else{var $1032=$863;var $__gb_sroa_0_0_load10471067=$__gb_sroa_0_0_load10471064;var $1031=$862;var $__gb_sroa_1_4_load10571070=$__gb_sroa_1_4_load10571074;label=308;break;}
 case 302: 
 var $1010=($__gb_sroa_1_4_load10571074|0)==((480)|0);
 var $1011=$__gb_sroa_0_0_load10471064;
 var $1012=$862;
 var $1013=((($1011)-($1012))|0);
 var $1014=($1013>>>0)<2147483647;
 var $1015=$1013<<1;
 var $1016=($1014?$1015:-1);
 var $1017=$1013>>2;
 if($1010){var $1020=0;label=304;break;}else{label=303;break;}
 case 303: 
 var $phitmp_i1016=$862;
 var $1020=$phitmp_i1016;label=304;break;
 case 304: 
 var $1020;
 var $1021=_realloc($1020,$1016);
 var $1022=$1021;
 var $1023=($1021|0)==0;
 if($1023){label=305;break;}else{label=307;break;}
 case 305: 
 var $1025=___cxa_allocate_exception(4);
 var $1026=$1025;
 HEAP32[(($1026)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1025,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { label=94;break; }
 case 306: 
 throw "Reached an unreachable!";
 case 307: 
 var $1027=$1016>>>2;
 var $1028=(($1022+($1017<<2))|0);
 var $1029=(($1022+($1027<<2))|0);
 var $1032=$1029;var $__gb_sroa_0_0_load10471067=$1028;var $1031=$1022;var $__gb_sroa_1_4_load10571070=244;label=308;break;
 case 308: 
 var $__gb_sroa_1_4_load10571070;
 var $1031;
 var $__gb_sroa_0_0_load10471067;
 var $1032;
 var $1033=(($__gb_sroa_0_0_load10471067+4)|0);
 HEAP32[(($__gb_sroa_0_0_load10471067)>>2)]=$__ng_0;
 var $1035=$1032;var $__gb_sroa_0_0_load10471063=$1033;var $1034=$1031;var $__gb_sroa_1_4_load10571071=$__gb_sroa_1_4_load10571070;label=309;break;
 case 309: 
 var $__gb_sroa_1_4_load10571071;
 var $1034;
 var $__gb_sroa_0_0_load10471063;
 var $1035;
 var $1036=($__fd_0|0)>0;
 if($1036){label=310;break;}else{var $__we1084=$__we1087;var $__fd_2=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=372;break;}
 case 310: 
 var $1038=HEAP32[(($234)>>2)];
 var $1039=($1038|0)==0;
 if($1039){var $1054=0;label=316;break;}else{label=311;break;}
 case 311: 
 var $1041=(($1038+12)|0);
 var $1042=HEAP32[(($1041)>>2)];
 var $1043=(($1038+16)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=($1042|0)==($1044|0);
 if($1045){label=312;break;}else{var $1054=$1038;label=316;break;}
 case 312: 
 var $1047=$1038;
 var $1048=HEAP32[(($1047)>>2)];
 var $1049=(($1048+36)|0);
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1050]($1038) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=313;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$1034;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=93;break; }
 case 313: 
 var $1052=($1051|0)==-1;
 if($1052){label=315;break;}else{label=314;break;}
 case 314: 
 var $_pre1311=HEAP32[(($234)>>2)];
 var $1054=$_pre1311;label=316;break;
 case 315: 
 HEAP32[(($234)>>2)]=0;
 var $1054=0;label=316;break;
 case 316: 
 var $1054;
 var $1055=($1054|0)==0;
 var $1056=($__e_sroa_0_13|0)==0;
 if($1056){label=321;break;}else{label=317;break;}
 case 317: 
 var $1058=(($__e_sroa_0_13+12)|0);
 var $1059=HEAP32[(($1058)>>2)];
 var $1060=(($__e_sroa_0_13+16)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1059|0)==($1061|0);
 if($1062){label=319;break;}else{label=318;break;}
 case 318: 
 if($1055){var $__e_sroa_0_15=$__e_sroa_0_13;label=323;break;}else{label=328;break;}
 case 319: 
 var $1064=$__e_sroa_0_13;
 var $1065=HEAP32[(($1064)>>2)];
 var $1066=(($1065+36)|0);
 var $1067=HEAP32[(($1066)>>2)];
 var $1068=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1067]($__e_sroa_0_13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=320;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$1034;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=93;break; }
 case 320: 
 var $1069=($1068|0)==-1;
 if($1069){label=321;break;}else{label=322;break;}
 case 321: 
 if($1055){label=328;break;}else{var $__e_sroa_0_15=0;label=323;break;}
 case 322: 
 if($1055){var $__e_sroa_0_15=$__e_sroa_0_13;label=323;break;}else{label=328;break;}
 case 323: 
 var $__e_sroa_0_15;
 var $1070=HEAP32[(($234)>>2)];
 var $1071=(($1070+12)|0);
 var $1072=HEAP32[(($1071)>>2)];
 var $1073=(($1070+16)|0);
 var $1074=HEAP32[(($1073)>>2)];
 var $1075=($1072|0)==($1074|0);
 if($1075){label=324;break;}else{label=326;break;}
 case 324: 
 var $1077=$1070;
 var $1078=HEAP32[(($1077)>>2)];
 var $1079=(($1078+36)|0);
 var $1080=HEAP32[(($1079)>>2)];
 var $1081=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1080]($1070) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=325;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$1034;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=93;break; }
 case 325: 
 var $extract_t978=(($1081)&255);
 var $_0918_off0=$extract_t978;label=327;break;
 case 326: 
 var $1083=HEAP8[($1072)];
 var $_0918_off0=$1083;label=327;break;
 case 327: 
 var $_0918_off0;
 var $1084=(($_0918_off0<<24)>>24)==(($__dp_0<<24)>>24);
 if($1084){label=329;break;}else{label=328;break;}
 case 328: 
 var $1086=HEAP32[(($__err)>>2)];
 var $1087=$1086|4;
 HEAP32[(($__err)>>2)]=$1087;
 var $_0919=0;var $1331=$1034;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571071;label=408;break;
 case 329: 
 var $1089=HEAP32[(($234)>>2)];
 var $1090=(($1089+12)|0);
 var $1091=HEAP32[(($1090)>>2)];
 var $1092=(($1089+16)|0);
 var $1093=HEAP32[(($1092)>>2)];
 var $1094=($1091|0)==($1093|0);
 if($1094){label=330;break;}else{label=331;break;}
 case 330: 
 var $1096=$1089;
 var $1097=HEAP32[(($1096)>>2)];
 var $1098=(($1097+40)|0);
 var $1099=HEAP32[(($1098)>>2)];
 var $1100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1099]($1089) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__we10861123=$__we1087;var $1103=$__e_sroa_0_15;var $__fd_1=$__fd_0;var $__e_sroa_0_16=$__e_sroa_0_15;label=332;break; } else { var $_ph_ph1095_ph_ph_ph_ph_ph_ph=$1034;var $__gb_sroa_1_4_load10571069_ph_ph1094_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10571071;label=93;break; }
 case 331: 
 var $1102=(($1091+1)|0);
 HEAP32[(($1090)>>2)]=$1102;
 var $__we10861123=$__we1087;var $1103=$__e_sroa_0_15;var $__fd_1=$__fd_0;var $__e_sroa_0_16=$__e_sroa_0_15;label=332;break;
 case 332: 
 var $__e_sroa_0_16;
 var $__fd_1;
 var $1103;
 var $__we10861123;
 var $1104=HEAP32[(($234)>>2)];
 var $1105=($1104|0)==0;
 if($1105){var $1120=0;label=338;break;}else{label=333;break;}
 case 333: 
 var $1107=(($1104+12)|0);
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=(($1104+16)|0);
 var $1110=HEAP32[(($1109)>>2)];
 var $1111=($1108|0)==($1110|0);
 if($1111){label=334;break;}else{var $1120=$1104;label=338;break;}
 case 334: 
 var $1113=$1104;
 var $1114=HEAP32[(($1113)>>2)];
 var $1115=(($1114+36)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1116]($1104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=335;break; } else { label=88;break; }
 case 335: 
 var $1118=($1117|0)==-1;
 if($1118){label=337;break;}else{label=336;break;}
 case 336: 
 var $_pre1312=HEAP32[(($234)>>2)];
 var $1120=$_pre1312;label=338;break;
 case 337: 
 HEAP32[(($234)>>2)]=0;
 var $1120=0;label=338;break;
 case 338: 
 var $1120;
 var $1121=($1120|0)==0;
 var $1122=($1103|0)==0;
 if($1122){var $__e_sroa_0_17=$__e_sroa_0_16;label=343;break;}else{label=339;break;}
 case 339: 
 var $1124=(($1103+12)|0);
 var $1125=HEAP32[(($1124)>>2)];
 var $1126=(($1103+16)|0);
 var $1127=HEAP32[(($1126)>>2)];
 var $1128=($1125|0)==($1127|0);
 if($1128){label=341;break;}else{label=340;break;}
 case 340: 
 if($1121){var $1136=$1103;var $__e_sroa_0_18=$__e_sroa_0_16;label=345;break;}else{label=352;break;}
 case 341: 
 var $1130=$1103;
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=(($1131+36)|0);
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1133]($1103) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=342;break; } else { label=88;break; }
 case 342: 
 var $1135=($1134|0)==-1;
 if($1135){var $__e_sroa_0_17=0;label=343;break;}else{label=344;break;}
 case 343: 
 var $__e_sroa_0_17;
 if($1121){label=352;break;}else{var $1136=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=345;break;}
 case 344: 
 if($1121){var $1136=$1103;var $__e_sroa_0_18=$__e_sroa_0_16;label=345;break;}else{label=352;break;}
 case 345: 
 var $__e_sroa_0_18;
 var $1136;
 var $1137=HEAP32[(($234)>>2)];
 var $1138=(($1137+12)|0);
 var $1139=HEAP32[(($1138)>>2)];
 var $1140=(($1137+16)|0);
 var $1141=HEAP32[(($1140)>>2)];
 var $1142=($1139|0)==($1141|0);
 if($1142){label=346;break;}else{label=348;break;}
 case 346: 
 var $1144=$1137;
 var $1145=HEAP32[(($1144)>>2)];
 var $1146=(($1145+36)|0);
 var $1147=HEAP32[(($1146)>>2)];
 var $1148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1147]($1137) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=347;break; } else { label=88;break; }
 case 347: 
 var $extract_t981=(($1148)&255);
 var $_0927_off0=$extract_t981;label=349;break;
 case 348: 
 var $1150=HEAP8[($1139)];
 var $_0927_off0=$1150;label=349;break;
 case 349: 
 var $_0927_off0;
 var $1151=(($_0927_off0<<24)>>24);
 var $1152=(function() { try { __THREW__ = 0; return _isascii($1151) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { label=88;break; }
 case 350: 
 var $1153=($1152|0)==0;
 if($1153){label=352;break;}else{label=351;break;}
 case 351: 
 var $1154=HEAP32[(($235)>>2)];
 var $1155=(($1154+($1151<<1))|0);
 var $1156=HEAP16[(($1155)>>1)];
 var $1157=$1156&2048;
 var $1158=(($1157<<16)>>16)==0;
 if($1158){label=352;break;}else{label=353;break;}
 case 352: 
 var $1159=HEAP32[(($__err)>>2)];
 var $1160=$1159|4;
 HEAP32[(($__err)>>2)]=$1160;
 var $_0919=0;var $1331=$1034;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571071;label=408;break;
 case 353: 
 var $1162=HEAP32[(($__wn)>>2)];
 var $1163=($1162|0)==($__we10861123|0);
 if($1163){label=354;break;}else{var $__we1085=$__we10861123;var $1190=$1162;label=364;break;}
 case 354: 
 var $1165=HEAP32[(($256)>>2)];
 var $1166=($1165|0)!=((480)|0);
 var $1167=HEAP32[(($232)>>2)];
 var $1168=$__we10861123;
 var $1169=$1167;
 var $1170=((($1168)-($1169))|0);
 var $1171=($1170>>>0)<2147483647;
 var $1172=$1170<<1;
 var $1173=($1171?$1172:-1);
 var $__i1023=($1166?$1167:0);
 var $1174=_realloc($__i1023,$1173);
 var $1175=($1174|0)==0;
 if($1175){label=355;break;}else{label=357;break;}
 case 355: 
 var $1177=___cxa_allocate_exception(4);
 var $1178=$1177;
 HEAP32[(($1178)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1177,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=356;break; } else { label=89;break; }
 case 356: 
 throw "Reached an unreachable!";
 case 357: 
 if($1166){label=358;break;}else{label=359;break;}
 case 358: 
 HEAP32[(($232)>>2)]=$1174;
 var $1185=$1174;label=363;break;
 case 359: 
 var $_pr_i1025=HEAP32[(($232)>>2)];
 HEAP32[(($232)>>2)]=$1174;
 var $1180=($_pr_i1025|0)==0;
 if($1180){var $1185=$1174;label=363;break;}else{label=360;break;}
 case 360: 
 var $1182=HEAP32[(($256)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1182]($_pr_i1025) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=361;break; } else { label=362;break; }
 case 361: 
 var $_pre_i1026=HEAP32[(($232)>>2)];
 var $1185=$_pre_i1026;label=363;break;
 case 362: 
 var $1184$0 = ___cxa_find_matching_catch(-1, -1,0); var $1184$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 363: 
 var $1185;
 HEAP32[(($256)>>2)]=244;
 var $1186=(($1185+$1170)|0);
 HEAP32[(($__wn)>>2)]=$1186;
 var $1187=HEAP32[(($232)>>2)];
 var $1188=(($1187+$1173)|0);
 var $__we1085=$1188;var $1190=$1186;label=364;break;
 case 364: 
 var $1190;
 var $__we1085;
 var $1191=HEAP32[(($234)>>2)];
 var $1192=(($1191+12)|0);
 var $1193=HEAP32[(($1192)>>2)];
 var $1194=(($1191+16)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=($1193|0)==($1195|0);
 if($1196){label=365;break;}else{label=367;break;}
 case 365: 
 var $1198=$1191;
 var $1199=HEAP32[(($1198)>>2)];
 var $1200=(($1199+36)|0);
 var $1201=HEAP32[(($1200)>>2)];
 var $1202=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1201]($1191) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=366;break; } else { label=88;break; }
 case 366: 
 var $extract_t983=(($1202)&255);
 var $_pre1300=HEAP32[(($__wn)>>2)];
 var $_0928_off0=$extract_t983;var $1205=$_pre1300;label=368;break;
 case 367: 
 var $1204=HEAP8[($1193)];
 var $_0928_off0=$1204;var $1205=$1190;label=368;break;
 case 368: 
 var $1205;
 var $_0928_off0;
 var $1206=(($1205+1)|0);
 HEAP32[(($__wn)>>2)]=$1206;
 HEAP8[($1205)]=$_0928_off0;
 var $1207=((($__fd_1)-(1))|0);
 var $1208=HEAP32[(($234)>>2)];
 var $1209=(($1208+12)|0);
 var $1210=HEAP32[(($1209)>>2)];
 var $1211=(($1208+16)|0);
 var $1212=HEAP32[(($1211)>>2)];
 var $1213=($1210|0)==($1212|0);
 if($1213){label=369;break;}else{label=371;break;}
 case 369: 
 var $1215=$1208;
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=(($1216+40)|0);
 var $1218=HEAP32[(($1217)>>2)];
 var $1219=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1218]($1208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=370;break; } else { label=88;break; }
 case 370: 
 var $1220=($1207|0)>0;
 if($1220){var $__we10861123=$__we1085;var $1103=$1136;var $__fd_1=$1207;var $__e_sroa_0_16=$__e_sroa_0_18;label=332;break;}else{var $__we1084=$__we1085;var $__fd_2=$1207;var $__e_sroa_0_19=$__e_sroa_0_18;label=372;break;}
 case 371: 
 var $1222=(($1210+1)|0);
 HEAP32[(($1209)>>2)]=$1222;
 label=370;break;
 case 372: 
 var $__e_sroa_0_19;
 var $__fd_2;
 var $__we1084;
 var $1223=HEAP32[(($__wn)>>2)];
 var $1224=HEAP32[(($232)>>2)];
 var $1225=($1223|0)==($1224|0);
 if($1225){label=373;break;}else{var $__trailing_sign_1=$__trailing_sign_01224;var $1230=$1035;var $__gb_sroa_0_0_load10471062=$__gb_sroa_0_0_load10471063;var $1229=$1034;var $__gb_sroa_1_4_load10571075=$__gb_sroa_1_4_load10571071;var $__we1083=$__we1084;var $__fd_3=$__fd_2;var $__e_sroa_0_20=$__e_sroa_0_19;label=374;break;}
 case 373: 
 var $1227=HEAP32[(($__err)>>2)];
 var $1228=$1227|4;
 HEAP32[(($__err)>>2)]=$1228;
 var $_0919=0;var $1331=$1034;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571071;label=408;break;
 case 374: 
 var $__e_sroa_0_20;
 var $__fd_3;
 var $__we1083;
 var $__gb_sroa_1_4_load10571075;
 var $1229;
 var $__gb_sroa_0_0_load10471062;
 var $1230;
 var $__trailing_sign_1;
 var $1231=((($__p_01226)+(1))|0);
 var $1232=($1231>>>0)<4;
 if($1232){var $__we10821215=$__we1083;var $__gb_sroa_1_4_load105710761218=$__gb_sroa_1_4_load10571075;var $259=$1229;var $__gb_sroa_0_0_load104710611221=$__gb_sroa_0_0_load10471062;var $258=$1230;var $__trailing_sign_01224=$__trailing_sign_1;var $__p_01226=$1231;var $__fd_0=$__fd_3;var $__e_sroa_0_0=$__e_sroa_0_20;label=71;break;}else{var $__gb_sroa_1_4_load10571076_lcssa=$__gb_sroa_1_4_load10571075;var $_lcssa=$1229;var $__gb_sroa_0_0_load10471061_lcssa=$__gb_sroa_0_0_load10471062;var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $__e_sroa_0_21=$__e_sroa_0_20;label=375;break;}
 case 375: 
 var $__e_sroa_0_21;
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load10471061_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load10571076_lcssa;
 var $1233=($__trailing_sign_0_lcssa|0)==0;
 if($1233){label=405;break;}else{label=376;break;}
 case 376: 
 var $1234=$__trailing_sign_0_lcssa;
 var $1235=$__trailing_sign_0_lcssa;
 var $1236=(($1234+1)|0);
 var $1237=(($__trailing_sign_0_lcssa+8)|0);
 var $1238=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;var $__e_sroa_0_22=$__e_sroa_0_21;label=377;break;
 case 377: 
 var $__e_sroa_0_22;
 var $__i_0;
 var $1239=HEAP8[($1235)];
 var $1240=($1239&255);
 var $1241=$1240&1;
 var $1242=($1241|0)==0;
 if($1242){label=379;break;}else{label=378;break;}
 case 378: 
 var $1244=HEAP32[(($1238)>>2)];
 var $1247=$1244;label=380;break;
 case 379: 
 var $1246=$1240>>>1;
 var $1247=$1246;label=380;break;
 case 380: 
 var $1247;
 var $1248=($__i_0>>>0)<($1247>>>0);
 if($1248){label=381;break;}else{label=405;break;}
 case 381: 
 var $1250=HEAP32[(($234)>>2)];
 var $1251=($1250|0)==0;
 if($1251){var $1266=0;label=387;break;}else{label=382;break;}
 case 382: 
 var $1253=(($1250+12)|0);
 var $1254=HEAP32[(($1253)>>2)];
 var $1255=(($1250+16)|0);
 var $1256=HEAP32[(($1255)>>2)];
 var $1257=($1254|0)==($1256|0);
 if($1257){label=383;break;}else{var $1266=$1250;label=387;break;}
 case 383: 
 var $1259=$1250;
 var $1260=HEAP32[(($1259)>>2)];
 var $1261=(($1260+36)|0);
 var $1262=HEAP32[(($1261)>>2)];
 var $1263=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1262]($1250) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=384;break; } else { label=85;break; }
 case 384: 
 var $1264=($1263|0)==-1;
 if($1264){label=386;break;}else{label=385;break;}
 case 385: 
 var $_pre1313=HEAP32[(($234)>>2)];
 var $1266=$_pre1313;label=387;break;
 case 386: 
 HEAP32[(($234)>>2)]=0;
 var $1266=0;label=387;break;
 case 387: 
 var $1266;
 var $1267=($1266|0)==0;
 var $1268=($__e_sroa_0_22|0)==0;
 if($1268){label=392;break;}else{label=388;break;}
 case 388: 
 var $1270=(($__e_sroa_0_22+12)|0);
 var $1271=HEAP32[(($1270)>>2)];
 var $1272=(($__e_sroa_0_22+16)|0);
 var $1273=HEAP32[(($1272)>>2)];
 var $1274=($1271|0)==($1273|0);
 if($1274){label=390;break;}else{label=389;break;}
 case 389: 
 if($1267){var $__e_sroa_0_24=$__e_sroa_0_22;label=394;break;}else{label=401;break;}
 case 390: 
 var $1276=$__e_sroa_0_22;
 var $1277=HEAP32[(($1276)>>2)];
 var $1278=(($1277+36)|0);
 var $1279=HEAP32[(($1278)>>2)];
 var $1280=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1279]($__e_sroa_0_22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=391;break; } else { label=85;break; }
 case 391: 
 var $1281=($1280|0)==-1;
 if($1281){label=392;break;}else{label=393;break;}
 case 392: 
 if($1267){label=401;break;}else{var $__e_sroa_0_24=0;label=394;break;}
 case 393: 
 if($1267){var $__e_sroa_0_24=$__e_sroa_0_22;label=394;break;}else{label=401;break;}
 case 394: 
 var $__e_sroa_0_24;
 var $1282=HEAP32[(($234)>>2)];
 var $1283=(($1282+12)|0);
 var $1284=HEAP32[(($1283)>>2)];
 var $1285=(($1282+16)|0);
 var $1286=HEAP32[(($1285)>>2)];
 var $1287=($1284|0)==($1286|0);
 if($1287){label=395;break;}else{label=397;break;}
 case 395: 
 var $1289=$1282;
 var $1290=HEAP32[(($1289)>>2)];
 var $1291=(($1290+36)|0);
 var $1292=HEAP32[(($1291)>>2)];
 var $1293=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1292]($1282) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=396;break; } else { label=85;break; }
 case 396: 
 var $extract_t=(($1293)&255);
 var $_0940_off0=$extract_t;label=398;break;
 case 397: 
 var $1295=HEAP8[($1284)];
 var $_0940_off0=$1295;label=398;break;
 case 398: 
 var $_0940_off0;
 var $1296=HEAP8[($1235)];
 var $1297=$1296&1;
 var $1298=(($1297<<24)>>24)==0;
 if($1298){var $1301=$1236;label=400;break;}else{label=399;break;}
 case 399: 
 var $1300=HEAP32[(($1237)>>2)];
 var $1301=$1300;label=400;break;
 case 400: 
 var $1301;
 var $1302=(($1301+$__i_0)|0);
 var $1303=HEAP8[($1302)];
 var $1304=(($_0940_off0<<24)>>24)==(($1303<<24)>>24);
 if($1304){label=402;break;}else{label=401;break;}
 case 401: 
 var $1306=HEAP32[(($__err)>>2)];
 var $1307=$1306|4;
 HEAP32[(($__err)>>2)]=$1307;
 var $_0919=0;var $1331=$_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=408;break;
 case 402: 
 var $1309=((($__i_0)+(1))|0);
 var $1310=HEAP32[(($234)>>2)];
 var $1311=(($1310+12)|0);
 var $1312=HEAP32[(($1311)>>2)];
 var $1313=(($1310+16)|0);
 var $1314=HEAP32[(($1313)>>2)];
 var $1315=($1312|0)==($1314|0);
 if($1315){label=403;break;}else{label=404;break;}
 case 403: 
 var $1317=$1310;
 var $1318=HEAP32[(($1317)>>2)];
 var $1319=(($1318+40)|0);
 var $1320=HEAP32[(($1319)>>2)];
 var $1321=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1320]($1310) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1309;var $__e_sroa_0_22=$__e_sroa_0_24;label=377;break; } else { label=85;break; }
 case 404: 
 var $1323=(($1312+1)|0);
 HEAP32[(($1311)>>2)]=$1323;
 var $__i_0=$1309;var $__e_sroa_0_22=$__e_sroa_0_24;label=377;break;
 case 405: 
 var $1324=($_lcssa|0)==($__gb_sroa_0_0_load10471061_lcssa|0);
 if($1324){var $_0919=1;var $1331=$__gb_sroa_0_0_load10471061_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=408;break;}else{label=406;break;}
 case 406: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load10471061_lcssa,$__et);
 var $1326=HEAP32[(($__et)>>2)];
 var $1327=($1326|0)==0;
 if($1327){var $_0919=1;var $1331=$_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=408;break;}else{label=407;break;}
 case 407: 
 var $1329=HEAP32[(($__err)>>2)];
 var $1330=$1329|4;
 HEAP32[(($__err)>>2)]=$1330;
 var $_0919=0;var $1331=$_lcssa;var $__gb_sroa_1_4_load10571077=$__gb_sroa_1_4_load10571076_lcssa;label=408;break;
 case 408: 
 var $__gb_sroa_1_4_load10571077;
 var $1331;
 var $_0919;
 var $1332=HEAP8[($15)];
 var $1333=$1332&1;
 var $1334=(($1333<<24)>>24)==0;
 if($1334){label=411;break;}else{label=409;break;}
 case 409: 
 var $1336=HEAP32[(($253)>>2)];
 var $1337=($1336|0)==0;
 if($1337){label=411;break;}else{label=410;break;}
 case 410: 
 _free($1336);
 label=411;break;
 case 411: 
 var $1339=HEAP8[($14)];
 var $1340=$1339&1;
 var $1341=(($1340<<24)>>24)==0;
 if($1341){label=414;break;}else{label=412;break;}
 case 412: 
 var $1343=HEAP32[(($240)>>2)];
 var $1344=($1343|0)==0;
 if($1344){label=414;break;}else{label=413;break;}
 case 413: 
 _free($1343);
 label=414;break;
 case 414: 
 var $1346=HEAP8[($13)];
 var $1347=$1346&1;
 var $1348=(($1347<<24)>>24)==0;
 if($1348){label=417;break;}else{label=415;break;}
 case 415: 
 var $1350=HEAP32[(($243)>>2)];
 var $1351=($1350|0)==0;
 if($1351){label=417;break;}else{label=416;break;}
 case 416: 
 _free($1350);
 label=417;break;
 case 417: 
 var $1353=HEAP8[($12)];
 var $1354=$1353&1;
 var $1355=(($1354<<24)>>24)==0;
 if($1355){label=420;break;}else{label=418;break;}
 case 418: 
 var $1357=HEAP32[(($249)>>2)];
 var $1358=($1357|0)==0;
 if($1358){label=420;break;}else{label=419;break;}
 case 419: 
 _free($1357);
 label=420;break;
 case 420: 
 var $1360=HEAP8[($10)];
 var $1361=$1360&1;
 var $1362=(($1361<<24)>>24)==0;
 if($1362){label=423;break;}else{label=421;break;}
 case 421: 
 var $1364=(($__grp+8)|0);
 var $1365=HEAP32[(($1364)>>2)];
 var $1366=($1365|0)==0;
 if($1366){label=423;break;}else{label=422;break;}
 case 422: 
 _free($1365);
 label=423;break;
 case 423: 
 var $1368=($1331|0)==0;
 if($1368){label=426;break;}else{label=424;break;}
 case 424: 
 var $1370=$1331;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10571077]($1370) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=426;break; } else { label=425;break; }
 case 425: 
 var $1372$0 = ___cxa_find_matching_catch(-1, -1,0); var $1372$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 426: 
 STACKTOP=sp;return $_0919;
 case 427: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 HEAP32[(($2)>>2)]=5944;
 var $3=(($1+4)|0);
 var $4=$3;
 var $5=($3|0)==0;
 if($5){label=19;break;}else{label=2;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return _strlen($msg) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $7=((($6)+(1))|0);
 var $8=((($6)+(13))|0);
 var $9=($8|0)==0;
 var $_size_i=($9?1:$8);
 label=4;break;
 case 4: 
 var $11=_malloc($_size_i);
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=18;break;}
 case 5: 
 var $14=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $15=($14|0)==0;
 if($15){label=12;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$17]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 7: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=9;break;
 case 9: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $19=$lpad_phi_i$1;
 var $20=($19|0)<0;
 if($20){label=10;break;}else{var $eh_lpad_body4$1=$lpad_phi_i$1;var $eh_lpad_body4$0=$lpad_phi_i$0;label=15;break;}
 case 10: 
 var $22=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body4$1=$28$1;var $eh_lpad_body4$0=$28$0;label=15;break;
 case 15: 
 var $eh_lpad_body4$0;
 var $eh_lpad_body4$1;
 var $29=$eh_lpad_body4$1;
 var $30=($29|0)<0;
 if($30){label=16;break;}else{var $eh_lpad_body$1=$eh_lpad_body4$1;var $eh_lpad_body$0=$eh_lpad_body4$0;label=21;break;}
 case 16: 
 var $32=$eh_lpad_body4$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($32) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $33=$11;
 var $34=(($11+4)|0);
 var $35=$34;
 HEAP32[(($35)>>2)]=$6;
 HEAP32[(($33)>>2)]=$6;
 var $36=(($11+12)|0);
 HEAP32[(($4)>>2)]=$36;
 var $37=(($11+8)|0);
 var $38=$37;
 HEAP32[(($38)>>2)]=0;
 assert($7 % 1 === 0);(_memcpy($36, $msg, $7)|0);
 label=19;break;
 case 19: 
 ___cxa_throw($1,13552,(208));
 throw "Reached an unreachable!";
 case 20: 
 var $40$0 = ___cxa_find_matching_catch(-1, -1); var $40$1 = tempRet0;
 var $eh_lpad_body$1=$40$1;var $eh_lpad_body$0=$40$0;label=21;break;
 case 21: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___cxa_free_exception($1);
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__neg=(sp)+(136);
 var $1=(($__wbuf)|0);
 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=480;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=$__p_i_i_i;
 var $12=HEAP32[((19288)>>2)];
 var $13=($12|0)==-1;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=66;break; }
 case 3: 
 var $15=HEAP32[((19292)>>2)];
 var $16=((($15)-(1))|0);
 var $17=(($6+12)|0);
 var $18=$17;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+8)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$19;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($16>>>0);
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=(($22+($16<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=66;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$29;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$35,$__intl,$7,$37,$__err,$__neg,$33,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=66;break; }
 case 8: 
 if($38){label=9;break;}else{label=46;break;}
 case 9: 
 var $41=$__v;
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=11;break;}else{label=10;break;}
 case 10: 
 var $46=(($__v+8)|0);
 var $47=HEAP32[(($46)>>2)];
 HEAP8[($47)]=0;
 var $48=(($__v+4)|0);
 HEAP32[(($48)>>2)]=0;
 label=12;break;
 case 11: 
 var $50=$__v;
 var $51=(($50+1)|0);
 HEAP8[($51)]=0;
 HEAP8[($41)]=0;
 label=12;break;
 case 12: 
 var $52=HEAP8[($__neg)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 var $_pre114=$29;
 if($54){label=24;break;}else{label=13;break;}
 case 13: 
 var $56=HEAP32[(($_pre114)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($33,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=66;break; }
 case 14: 
 var $60=$__v;
 var $61=HEAP8[($41)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=15;break;}else{label=16;break;}
 case 15: 
 var $65=($61&255);
 var $66=$65>>>1;
 var $__sz_0_i=$66;var $__cap_0_i=10;label=17;break;
 case 16: 
 var $68=(($__v)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=$69&-2;
 var $71=((($70)-(1))|0);
 var $72=(($__v+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $__sz_0_i=$73;var $__cap_0_i=$71;label=17;break;
 case 17: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $75=($__sz_0_i|0)==($__cap_0_i|0);
 if($75){label=18;break;}else{var $__is_short_0_off0_in_in_i=$61;label=20;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=66;break; }
 case 19: 
 var $77=HEAP8[($41)];
 var $__is_short_0_off0_in_in_i=$77;label=20;break;
 case 20: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=21;break;}else{label=22;break;}
 case 21: 
 var $80=(($60+1)|0);
 var $81=$__sz_0_i<<1;
 var $82=((($81)+(2))|0);
 var $83=(($82)&255);
 HEAP8[($41)]=$83;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$80;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=23;break;
 case 22: 
 var $85=(($__v+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=((($__sz_0_i)+(1))|0);
 var $88=(($__v+4)|0);
 HEAP32[(($88)>>2)]=$87;
 var $_pn_i=$86;var $__p_0_sum_pre_phi_i=$87;label=23;break;
 case 23: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$59;
 var $89=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($89)]=0;
 label=24;break;
 case 24: 
 var $90=HEAP32[(($_pre114)>>2)];
 var $91=(($90+28)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($33,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=66;break; }
 case 25: 
 var $94=HEAP32[(($2)>>2)];
 var $95=HEAP32[(($__wn)>>2)];
 var $96=((($95)-(1))|0);
 var $__w_0=$94;label=26;break;
 case 26: 
 var $__w_0;
 var $98=($__w_0>>>0)<($96>>>0);
 if($98){label=27;break;}else{label=28;break;}
 case 27: 
 var $100=HEAP8[($__w_0)];
 var $101=(($100<<24)>>24)==(($93<<24)>>24);
 var $102=(($__w_0+1)|0);
 if($101){var $__w_0=$102;label=26;break;}else{label=28;break;}
 case 28: 
 var $104=$__v;
 var $105=$__w_0;
 var $106=HEAP8[($41)];
 var $107=($106&255);
 var $108=$107&1;
 var $109=($108|0)==0;
 if($109){label=30;break;}else{label=29;break;}
 case 29: 
 var $111=(($__v+4)|0);
 var $112=HEAP32[(($111)>>2)];
 var $115=$112;label=31;break;
 case 30: 
 var $114=$107>>>1;
 var $115=$114;label=31;break;
 case 31: 
 var $115;
 var $116=$106&1;
 var $117=(($116<<24)>>24)==0;
 if($117){var $124=10;var $123=$106;label=33;break;}else{label=32;break;}
 case 32: 
 var $119=(($__v)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$120&-2;
 var $phitmp_i=((($121)-(1))|0);
 var $122=(($120)&255);
 var $124=$phitmp_i;var $123=$122;label=33;break;
 case 33: 
 var $123;
 var $124;
 var $125=$95;
 var $126=((($125)-($105))|0);
 var $127=($95|0)==($__w_0|0);
 if($127){label=46;break;}else{label=34;break;}
 case 34: 
 var $129=((($124)-($115))|0);
 var $130=($129>>>0)<($126>>>0);
 if($130){label=35;break;}else{var $135=$123;label=37;break;}
 case 35: 
 var $132=((($115)+($126))|0);
 var $133=((($132)-($124))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v,$124,$133,$115,$115,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=66;break; }
 case 36: 
 var $_pre_i=HEAP8[($41)];
 var $135=$_pre_i;label=37;break;
 case 37: 
 var $135;
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=39;break;}else{label=38;break;}
 case 38: 
 var $139=(($__v+8)|0);
 var $140=HEAP32[(($139)>>2)];
 var $143=$140;label=40;break;
 case 39: 
 var $142=(($104+1)|0);
 var $143=$142;label=40;break;
 case 40: 
 var $143;
 var $144=(($143+$115)|0);
 var $145=((($115)-($105))|0);
 var $scevgep_i=(($95+$145)|0);
 var $scevgep71_i=$scevgep_i;
 var $_069_i=$__w_0;var $__p_070_i=$144;label=41;break;
 case 41: 
 var $__p_070_i;
 var $_069_i;
 var $147=HEAP8[($_069_i)];
 HEAP8[($__p_070_i)]=$147;
 var $148=(($_069_i+1)|0);
 var $149=($148|0)==($95|0);
 if($149){label=43;break;}else{label=42;break;}
 case 42: 
 var $150=(($__p_070_i+1)|0);
 var $_069_i=$148;var $__p_070_i=$150;label=41;break;
 case 43: 
 var $scevgep72_i=(($143+$scevgep71_i)|0);
 HEAP8[($scevgep72_i)]=0;
 var $152=((($115)+($126))|0);
 var $153=HEAP8[($41)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=45;break;}else{label=44;break;}
 case 44: 
 var $157=(($__v+4)|0);
 HEAP32[(($157)>>2)]=$152;
 label=46;break;
 case 45: 
 var $159=$152<<1;
 var $160=(($159)&255);
 HEAP8[($41)]=$160;
 label=46;break;
 case 46: 
 var $161=(($__b)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){var $178=0;label=51;break;}else{label=47;break;}
 case 47: 
 var $165=(($162+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($162+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=48;break;}else{var $178=$162;label=51;break;}
 case 48: 
 var $171=$162;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+36)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=66;break; }
 case 49: 
 var $176=($175|0)==-1;
 if($176){label=50;break;}else{var $178=$162;label=51;break;}
 case 50: 
 HEAP32[(($161)>>2)]=0;
 var $178=0;label=51;break;
 case 51: 
 var $178;
 var $179=($178|0)==0;
 var $180=($35|0)==0;
 if($180){label=57;break;}else{label=52;break;}
 case 52: 
 var $182=(($35+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($35+16)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=($183|0)==($185|0);
 if($186){label=54;break;}else{label=53;break;}
 case 53: 
 if($179){label=60;break;}else{label=59;break;}
 case 54: 
 var $188=$35;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=66;break; }
 case 55: 
 var $193=($192|0)==-1;
 if($193){label=56;break;}else{label=58;break;}
 case 56: 
 HEAP32[(($34)>>2)]=0;
 label=57;break;
 case 57: 
 if($179){label=59;break;}else{label=60;break;}
 case 58: 
 if($179){label=60;break;}else{label=59;break;}
 case 59: 
 var $196=HEAP32[(($__err)>>2)];
 var $197=$196|2;
 HEAP32[(($__err)>>2)]=$197;
 label=60;break;
 case 60: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$178;
 var $199=(($6+4)|0);
 var $200=$199;
 var $201=(tempValue=HEAP32[(($200)>>2)],HEAP32[(($200)>>2)]=tempValue+-1,tempValue);
 var $202=($201|0)==0;
 if($202){label=61;break;}else{label=62;break;}
 case 61: 
 var $204=$6;
 var $205=$6;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+8)|0);
 var $208=HEAP32[(($207)>>2)];
 FUNCTION_TABLE[$208]($204);
 label=62;break;
 case 62: 
 var $209=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $210=($209|0)==0;
 if($210){label=65;break;}else{label=63;break;}
 case 63: 
 var $212=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$212]($209) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=64;break; }
 case 64: 
 var $214$0 = ___cxa_find_matching_catch(-1, -1,0); var $214$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 65: 
 STACKTOP=sp;return;
 case 66: 
 var $216$0 = ___cxa_find_matching_catch(-1, -1); var $216$1 = tempRet0;
 var $217=(($6+4)|0);
 var $218=$217;
 var $219=(tempValue=HEAP32[(($218)>>2)],HEAP32[(($218)>>2)]=tempValue+-1,tempValue);
 var $220=($219|0)==0;
 if($220){label=67;break;}else{label=68;break;}
 case 67: 
 var $222=$6;
 var $223=$6;
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+8)|0);
 var $226=HEAP32[(($225)>>2)];
 FUNCTION_TABLE[$226]($222);
 label=68;break;
 case 68: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $227=($_pre|0)==0;
 if($227){label=71;break;}else{label=69;break;}
 case 69: 
 var $229=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$229]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=70;break; }
 case 70: 
 var $231$0 = ___cxa_find_matching_catch(-1, -1,0); var $231$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 71: 
 ___resumeException($216$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=$__grouping;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=$4&1;
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($__grouping+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $12=$9;label=4;break;
 case 3: 
 var $11=$4>>>1;
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=($12|0)==0;
 if($13){label=24;break;}else{label=5;break;}
 case 5: 
 var $15=($__g|0)==($__g_end|0);
 if($15){var $24=$3;label=9;break;}else{label=6;break;}
 case 6: 
 var $16=((($__g_end)-(4))|0);
 var $17=($16>>>0)>($__g>>>0);
 if($17){var $_086=$__g;var $18=$16;label=7;break;}else{var $24=$3;label=9;break;}
 case 7: 
 var $18;
 var $_086;
 var $19=HEAP32[(($_086)>>2)];
 var $20=HEAP32[(($18)>>2)];
 HEAP32[(($_086)>>2)]=$20;
 HEAP32[(($18)>>2)]=$19;
 var $21=(($_086+4)|0);
 var $22=((($18)-(4))|0);
 var $23=($21>>>0)<($22>>>0);
 if($23){var $_086=$21;var $18=$22;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre_pre=HEAP8[($2)];
 var $24=$_pre_pre;label=9;break;
 case 9: 
 var $24;
 var $25=$24&1;
 var $26=(($25<<24)>>24)==0;
 if($26){label=11;break;}else{label=10;break;}
 case 10: 
 var $28=(($__grouping+8)|0);
 var $29=HEAP32[(($28)>>2)];
 var $32=$29;label=12;break;
 case 11: 
 var $31=(($1+1)|0);
 var $32=$31;label=12;break;
 case 12: 
 var $32;
 var $33=($24&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $41=$38;label=15;break;
 case 14: 
 var $40=$33>>>1;
 var $41=$40;label=15;break;
 case 15: 
 var $41;
 var $42=((($__g_end)-(4))|0);
 var $43=($42>>>0)>($__g>>>0);
 var $44=HEAP8[($32)];
 var $45=(($44<<24)>>24);
 var $_not79=(($44<<24)>>24)<1;
 var $46=(($44<<24)>>24)==127;
 var $or_cond80=$_not79|$46;
 if($43){label=16;break;}else{var $_lcssa76=$45;var $or_cond_lcssa=$or_cond80;label=21;break;}
 case 16: 
 var $47=(($32+$41)|0);
 var $48=$47;
 var $__ig_081=$32;var $__r_082=$__g;var $50=$45;var $or_cond83=$or_cond80;label=17;break;
 case 17: 
 var $or_cond83;
 var $50;
 var $__r_082;
 var $__ig_081;
 if($or_cond83){label=20;break;}else{label=18;break;}
 case 18: 
 var $52=HEAP32[(($__r_082)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 20: 
 var $56=$__ig_081;
 var $57=((($48)-($56))|0);
 var $58=($57|0)>1;
 var $59=(($__ig_081+1)|0);
 var $___ig_0=($58?$59:$__ig_081);
 var $60=(($__r_082+4)|0);
 var $61=($60>>>0)<($42>>>0);
 var $62=HEAP8[($___ig_0)];
 var $63=(($62<<24)>>24);
 var $_not=(($62<<24)>>24)<1;
 var $64=(($62<<24)>>24)==127;
 var $or_cond=$_not|$64;
 if($61){var $__ig_081=$___ig_0;var $__r_082=$60;var $50=$63;var $or_cond83=$or_cond;label=17;break;}else{var $_lcssa76=$63;var $or_cond_lcssa=$or_cond;label=21;break;}
 case 21: 
 var $or_cond_lcssa;
 var $_lcssa76;
 if($or_cond_lcssa){label=24;break;}else{label=22;break;}
 case 22: 
 var $66=HEAP32[(($42)>>2)];
 var $67=($_lcssa76>>>0)<($66>>>0);
 var $68=($66|0)==0;
 var $or_cond74=$67|$68;
 if($or_cond74){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($__err)>>2)]=4;
 label=24;break;
 case 24: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+584)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__neg=(sp)+(432);
 var $__atoms=(sp)+(440);
 var $__nbuf=(sp)+(480);
 var $1=(($__wbuf)|0);
 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=480;
 var $4=(($__wbuf+400)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=$__p_i_i_i;
 var $12=HEAP32[((19280)>>2)];
 var $13=($12|0)==-1;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=14;break; }
 case 3: 
 var $15=HEAP32[((19284)>>2)];
 var $16=((($15)-(1))|0);
 var $17=(($6+12)|0);
 var $18=$17;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+8)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$19;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($16>>>0);
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=(($22+($16<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$29;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$35,$__intl,$7,$37,$__err,$__neg,$33,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 if($38){label=9;break;}else{label=51;break;}
 case 9: 
 var $41=(($__atoms)|0);
 var $42=$29;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+48)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($33,5208,5218,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $47=(($__nbuf)|0);
 var $48=HEAP32[(($__wn)>>2)];
 var $49=HEAP32[(($2)>>2)];
 var $50=$48;
 var $51=$49;
 var $52=((($50)-($51))|0);
 var $53=($52|0)>392;
 if($53){label=11;break;}else{var $__nc_0=$47;var $__h_sroa_0_1=0;label=18;break;}
 case 11: 
 var $54=$52>>2;
 var $55=((($54)+(2))|0);
 var $56=_malloc($55);
 var $57=($56|0)==0;
 if($57){label=12;break;}else{var $__nc_0=$56;var $__h_sroa_0_1=$56;label=18;break;}
 case 12: 
 var $59=___cxa_allocate_exception(4);
 var $60=$59;
 HEAP32[(($60)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($59,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $__h_sroa_0_0=0;label=15;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $62$0 = ___cxa_find_matching_catch(-1, -1); var $62$1 = tempRet0;
 var $63=$62$0;
 var $64=$62$1;
 var $_0145=$64;var $_0146=$63;label=72;break;
 case 15: 
 var $__h_sroa_0_0;
 var $66$0 = ___cxa_find_matching_catch(-1, -1); var $66$1 = tempRet0;
 var $eh_lpad_body$1=$66$1;var $eh_lpad_body$0=$66$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_0;label=16;break;
 case 16: 
 var $__h_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $67=$eh_lpad_body$0;
 var $68=$eh_lpad_body$1;
 var $69=($__h_sroa_0_0_lpad_body|0)==0;
 if($69){var $_0145=$68;var $_0146=$67;label=72;break;}else{label=17;break;}
 case 17: 
 _free($__h_sroa_0_0_lpad_body);
 var $_0145=$68;var $_0146=$67;label=72;break;
 case 18: 
 var $__h_sroa_0_1;
 var $__nc_0;
 var $72=HEAP8[($__neg)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){var $__nc_1=$__nc_0;label=20;break;}else{label=19;break;}
 case 19: 
 var $76=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$76;label=20;break;
 case 20: 
 var $__nc_1;
 var $78=($49>>>0)<($48>>>0);
 if($78){label=21;break;}else{var $__nc_2_lcssa=$__nc_1;label=26;break;}
 case 21: 
 var $79=(($__atoms+40)|0);
 var $80=$__atoms;
 var $__nc_2166=$__nc_1;var $__w_0167=$49;label=22;break;
 case 22: 
 var $__w_0167;
 var $__nc_2166;
 var $_0=$41;label=23;break;
 case 23: 
 var $_0;
 var $83=($_0|0)==($79|0);
 if($83){var $_0_lcssa=$79;label=25;break;}else{label=24;break;}
 case 24: 
 var $85=HEAP32[(($_0)>>2)];
 var $86=HEAP32[(($__w_0167)>>2)];
 var $87=($85|0)==($86|0);
 var $88=(($_0+4)|0);
 if($87){var $_0_lcssa=$_0;label=25;break;}else{var $_0=$88;label=23;break;}
 case 25: 
 var $_0_lcssa;
 var $89=$_0_lcssa;
 var $90=((($89)-($80))|0);
 var $91=$90>>2;
 var $92=((5208+$91)|0);
 var $93=HEAP8[($92)];
 HEAP8[($__nc_2166)]=$93;
 var $94=(($__w_0167+4)|0);
 var $95=(($__nc_2166+1)|0);
 var $96=HEAP32[(($__wn)>>2)];
 var $97=($94>>>0)<($96>>>0);
 if($97){var $__nc_2166=$95;var $__w_0167=$94;label=22;break;}else{var $__nc_2_lcssa=$95;label=26;break;}
 case 26: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $98=_sscanf($47,2808,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $99=($98|0)==1;
 if($99){label=49;break;}else{label=27;break;}
 case 27: 
 var $101=___cxa_allocate_exception(8);
 var $102=$101;
 HEAP32[(($102)>>2)]=5944;
 var $103=(($101+4)|0);
 var $104=$103;
 var $105=($103|0)==0;
 if($105){label=45;break;}else{label=28;break;}
 case 28: 
 var $106=(function() { try { __THREW__ = 0; return _strlen(2712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=47;break; }
 case 29: 
 var $107=((($106)+(1))|0);
 var $108=((($106)+(13))|0);
 var $109=($108|0)==0;
 var $_size_i=($109?1:$108);
 label=30;break;
 case 30: 
 var $111=_malloc($_size_i);
 var $112=($111|0)==0;
 if($112){label=31;break;}else{label=44;break;}
 case 31: 
 var $114=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $115=($114|0)==0;
 if($115){label=38;break;}else{label=32;break;}
 case 32: 
 var $117=$114;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$117]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=33;break; }
 case 33: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=35;break;
 case 35: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $119=$lpad_phi_i$1;
 var $120=($119|0)<0;
 if($120){label=36;break;}else{var $eh_lpad_body7$1=$lpad_phi_i$1;var $eh_lpad_body7$0=$lpad_phi_i$0;label=41;break;}
 case 36: 
 var $122=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=40;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $124=___cxa_allocate_exception(4);
 var $125=$124;
 HEAP32[(($125)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($124,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=34;break; }
 case 39: 
 throw "Reached an unreachable!";
 case 40: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $eh_lpad_body7$1=$128$1;var $eh_lpad_body7$0=$128$0;label=41;break;
 case 41: 
 var $eh_lpad_body7$0;
 var $eh_lpad_body7$1;
 var $129=$eh_lpad_body7$1;
 var $130=($129|0)<0;
 if($130){label=42;break;}else{var $eh_lpad_body4$1=$eh_lpad_body7$1;var $eh_lpad_body4$0=$eh_lpad_body7$0;label=48;break;}
 case 42: 
 var $132=$eh_lpad_body7$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=47;break; }
 case 43: 
 throw "Reached an unreachable!";
 case 44: 
 var $133=$111;
 var $134=(($111+4)|0);
 var $135=$134;
 HEAP32[(($135)>>2)]=$106;
 HEAP32[(($133)>>2)]=$106;
 var $136=(($111+12)|0);
 HEAP32[(($104)>>2)]=$136;
 var $137=(($111+8)|0);
 var $138=$137;
 HEAP32[(($138)>>2)]=0;
 assert($107 % 1 === 0);(_memcpy($136, 2712, $107)|0);
 label=45;break;
 case 45: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,13552,(208)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=15;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $eh_lpad_body4$1=$140$1;var $eh_lpad_body4$0=$140$0;label=48;break;
 case 48: 
 var $eh_lpad_body4$0;
 var $eh_lpad_body4$1;
 ___cxa_free_exception($101);
 var $eh_lpad_body$1=$eh_lpad_body4$1;var $eh_lpad_body$0=$eh_lpad_body4$0;var $__h_sroa_0_0_lpad_body=$__h_sroa_0_1;label=16;break;
 case 49: 
 var $142=($__h_sroa_0_1|0)==0;
 if($142){label=51;break;}else{label=50;break;}
 case 50: 
 _free($__h_sroa_0_1);
 label=51;break;
 case 51: 
 var $144=(($__b)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145|0)==0;
 if($146){var $163=0;label=57;break;}else{label=52;break;}
 case 52: 
 var $148=(($145+12)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(($145+16)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=($149|0)==($151|0);
 if($152){label=53;break;}else{label=54;break;}
 case 53: 
 var $154=$145;
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+36)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$157]($145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0148=$158;label=55;break; } else { label=14;break; }
 case 54: 
 var $160=HEAP32[(($149)>>2)];
 var $_0148=$160;label=55;break;
 case 55: 
 var $_0148;
 var $161=($_0148|0)==-1;
 if($161){label=56;break;}else{var $163=$145;label=57;break;}
 case 56: 
 HEAP32[(($144)>>2)]=0;
 var $163=0;label=57;break;
 case 57: 
 var $163;
 var $164=($163|0)==0;
 var $165=HEAP32[(($34)>>2)];
 var $166=($165|0)==0;
 if($166){label=63;break;}else{label=58;break;}
 case 58: 
 var $168=(($165+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($165+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=59;break;}else{label=60;break;}
 case 59: 
 var $174=$165;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+36)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$177]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0144=$178;label=61;break; } else { label=14;break; }
 case 60: 
 var $180=HEAP32[(($169)>>2)];
 var $_0144=$180;label=61;break;
 case 61: 
 var $_0144;
 var $181=($_0144|0)==-1;
 if($181){label=62;break;}else{label=64;break;}
 case 62: 
 HEAP32[(($34)>>2)]=0;
 label=63;break;
 case 63: 
 if($164){label=65;break;}else{label=66;break;}
 case 64: 
 if($164){label=66;break;}else{label=65;break;}
 case 65: 
 var $184=HEAP32[(($__err)>>2)];
 var $185=$184|2;
 HEAP32[(($__err)>>2)]=$185;
 label=66;break;
 case 66: 
 var $187=(($agg_result)|0);
 HEAP32[(($187)>>2)]=$163;
 var $188=(($6+4)|0);
 var $189=$188;
 var $190=(tempValue=HEAP32[(($189)>>2)],HEAP32[(($189)>>2)]=tempValue+-1,tempValue);
 var $191=($190|0)==0;
 if($191){label=67;break;}else{label=68;break;}
 case 67: 
 var $193=$6;
 var $194=$6;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+8)|0);
 var $197=HEAP32[(($196)>>2)];
 FUNCTION_TABLE[$197]($193);
 label=68;break;
 case 68: 
 var $198=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $199=($198|0)==0;
 if($199){label=71;break;}else{label=69;break;}
 case 69: 
 var $201=HEAP32[(($3)>>2)];
 var $202=$198;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$201]($202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=70;break; }
 case 70: 
 var $204$0 = ___cxa_find_matching_catch(-1, -1,0); var $204$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 71: 
 STACKTOP=sp;return;
 case 72: 
 var $_0146;
 var $_0145;
 var $206=(($6+4)|0);
 var $207=$206;
 var $208=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+-1,tempValue);
 var $209=($208|0)==0;
 if($209){label=73;break;}else{label=74;break;}
 case 73: 
 var $211=$6;
 var $212=$6;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+8)|0);
 var $215=HEAP32[(($214)>>2)];
 FUNCTION_TABLE[$215]($211);
 label=74;break;
 case 74: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $216=($_pre|0)==0;
 if($216){label=77;break;}else{label=75;break;}
 case 75: 
 var $218=HEAP32[(($3)>>2)];
 var $219=$_pre;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$218]($219) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=76;break; }
 case 76: 
 var $221$0 = ___cxa_find_matching_catch(-1, -1,0); var $221$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 77: 
 var $222$0=$_0146;
 var $222$1=0;
 var $223$0=$222$0;
 var $223$1=$_0145;
 ___resumeException($223$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+592)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i513_i=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $0=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(56);
 var $3=(sp)+(72);
 var $4=(sp)+(88);
 var $5=(sp)+(104);
 var $6=(sp)+(112);
 var $7=(sp)+(128);
 var $8=(sp)+(144);
 var $9=(sp)+(160);
 var $10=(sp)+(176);
 var $__gbuf=(sp)+(184);
 var $__pat=(sp)+(584);
 var $tmpcast=$__pat;
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__psn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__nsn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__spaces=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__et=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($10)>>2)]=$__we;
 var $12=(($__gbuf)|0);
 HEAP32[(($11)>>2)]=0; HEAP32[((($11)+(4))>>2)]=0; HEAP32[((($11)+(8))>>2)]=0;
 var $13=$__sym;
 var $14=$__psn;
 var $15=$__nsn;
 var $16=$__spaces;
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 HEAP32[(($15)>>2)]=0; HEAP32[((($15)+(4))>>2)]=0; HEAP32[((($15)+(8))>>2)]=0;
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 var $17=$0;
 var $18=$1;
 var $19=$2;
 var $20=$3;
 var $21=$4;
 var $22=$5;
 var $23=$6;
 var $24=$7;
 var $25=$8;
 var $26=$9;
 if($__intl){label=2;break;}else{label=36;break;}
 case 2: 
 var $tmpcast512_i=$0;
 var $28=$__p_i_i_i_i;
 var $29=HEAP32[((19744)>>2)];
 var $30=($29|0)==-1;
 if($30){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i_i=(($__p_i_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i_i)>>2)]=19744;
 var $_sroa_117_4__idx18_i_i_i=(($__p_i_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i_i=(($__p_i_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19744,$28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=95;break; }
 case 4: 
 var $32=HEAP32[((19748)>>2)];
 var $33=((($32)-(1))|0);
 var $34=(($__loc_0_0_val+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($__loc_0_0_val+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$35;
 var $39=$37;
 var $40=((($38)-($39))|0);
 var $41=$40>>2;
 var $42=($41>>>0)>($33>>>0);
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=(($37+($33<<2))|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)==0;
 if($45){label=6;break;}else{label=8;break;}
 case 6: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=95;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $48=$44;
 var $49=$44;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+44)|0);
 var $52=HEAP32[(($51)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($tmpcast512_i,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=95;break; }
 case 9: 
 var $53=HEAP32[(($0)>>2)];
 HEAP32[(($__pat)>>2)]=$53;
 var $54=$44;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+32)|0);
 var $57=HEAP32[(($56)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($1,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=95;break; }
 case 10: 
 var $58=HEAP8[($15)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=12;break;}else{label=11;break;}
 case 11: 
 var $62=(($__nsn+8)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($63)>>2)]=0;
 var $64=(($__nsn+4)|0);
 HEAP32[(($64)>>2)]=0;
 label=13;break;
 case 12: 
 var $66=(($__nsn+4)|0);
 HEAP32[(($66)>>2)]=0;
 HEAP8[($15)]=0;
 label=13;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 15: 
 assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $69=HEAP32[(($54)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($2,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=95;break; }
 case 16: 
 var $72=HEAP8[($14)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=18;break;}else{label=17;break;}
 case 17: 
 var $76=(($__psn+8)|0);
 var $77=HEAP32[(($76)>>2)];
 HEAP32[(($77)>>2)]=0;
 var $78=(($__psn+4)|0);
 HEAP32[(($78)>>2)]=0;
 label=19;break;
 case 18: 
 var $80=(($__psn+4)|0);
 HEAP32[(($80)>>2)]=0;
 HEAP8[($14)]=0;
 label=19;break;
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $82$0 = ___cxa_find_matching_catch(-1, -1,0); var $82$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 21: 
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0; HEAP32[((($19)+(8))>>2)]=0;
 var $83=$44;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+12)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=95;break; }
 case 22: 
 var $88=HEAP32[(($83)>>2)];
 var $89=(($88+16)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=95;break; }
 case 23: 
 var $92=$44;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+20)|0);
 var $95=HEAP32[(($94)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$95]($3,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=95;break; }
 case 24: 
 var $96=HEAP8[($11)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=26;break;}else{label=25;break;}
 case 25: 
 var $100=(($__grp+8)|0);
 var $101=HEAP32[(($100)>>2)];
 HEAP8[($101)]=0;
 var $102=(($__grp+4)|0);
 HEAP32[(($102)>>2)]=0;
 label=27;break;
 case 26: 
 var $104=$__grp;
 var $105=(($104+1)|0);
 HEAP8[($105)]=0;
 HEAP8[($11)]=0;
 label=27;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=28;break; }
 case 28: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1,0); var $107$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 29: 
 assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $108=HEAP32[(($54)>>2)];
 var $109=(($108+24)|0);
 var $110=HEAP32[(($109)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$110]($4,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=95;break; }
 case 30: 
 var $111=HEAP8[($13)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=32;break;}else{label=31;break;}
 case 31: 
 var $115=(($__sym+8)|0);
 var $116=HEAP32[(($115)>>2)];
 HEAP32[(($116)>>2)]=0;
 var $117=(($__sym+4)|0);
 HEAP32[(($117)>>2)]=0;
 label=33;break;
 case 32: 
 var $119=(($__sym+4)|0);
 HEAP32[(($119)>>2)]=0;
 HEAP8[($13)]=0;
 label=33;break;
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=34;break; }
 case 34: 
 var $121$0 = ___cxa_find_matching_catch(-1, -1,0); var $121$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 35: 
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 HEAP32[(($21)>>2)]=0; HEAP32[((($21)+(4))>>2)]=0; HEAP32[((($21)+(8))>>2)]=0;
 var $122=HEAP32[(($83)>>2)];
 var $123=(($122+36)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$124]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$125;var $__ts_0=$91;var $__dp_0=$87;label=70;break; } else { label=95;break; }
 case 36: 
 var $tmpcast_i=$5;
 var $127=$__p_i_i_i513_i;
 var $128=HEAP32[((19752)>>2)];
 var $129=($128|0)==-1;
 if($129){label=38;break;}else{label=37;break;}
 case 37: 
 var $_sroa_016_0__idx_i_i514_i=(($__p_i_i_i513_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i514_i)>>2)]=19752;
 var $_sroa_117_4__idx18_i_i515_i=(($__p_i_i_i513_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i515_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i516_i=(($__p_i_i_i513_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i516_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19752,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=95;break; }
 case 38: 
 var $131=HEAP32[((19756)>>2)];
 var $132=((($131)-(1))|0);
 var $133=(($__loc_0_0_val+12)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($__loc_0_0_val+8)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=$134;
 var $138=$136;
 var $139=((($137)-($138))|0);
 var $140=$139>>2;
 var $141=($140>>>0)>($132>>>0);
 if($141){label=39;break;}else{label=40;break;}
 case 39: 
 var $142=(($136+($132<<2))|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){label=40;break;}else{label=42;break;}
 case 40: 
 var $145=___cxa_allocate_exception(4);
 var $146=$145;
 HEAP32[(($146)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($145,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=95;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $147=$143;
 var $148=$143;
 var $149=HEAP32[(($148)>>2)];
 var $150=(($149+44)|0);
 var $151=HEAP32[(($150)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$151]($tmpcast_i,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=95;break; }
 case 43: 
 var $152=HEAP32[(($5)>>2)];
 HEAP32[(($__pat)>>2)]=$152;
 var $153=$143;
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+32)|0);
 var $156=HEAP32[(($155)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$156]($6,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=95;break; }
 case 44: 
 var $157=HEAP8[($15)];
 var $158=$157&1;
 var $159=(($158<<24)>>24)==0;
 if($159){label=46;break;}else{label=45;break;}
 case 45: 
 var $161=(($__nsn+8)|0);
 var $162=HEAP32[(($161)>>2)];
 HEAP32[(($162)>>2)]=0;
 var $163=(($__nsn+4)|0);
 HEAP32[(($163)>>2)]=0;
 label=47;break;
 case 46: 
 var $165=(($__nsn+4)|0);
 HEAP32[(($165)>>2)]=0;
 HEAP8[($15)]=0;
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=48;break; }
 case 48: 
 var $167$0 = ___cxa_find_matching_catch(-1, -1,0); var $167$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 49: 
 assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0;
 var $168=HEAP32[(($153)>>2)];
 var $169=(($168+28)|0);
 var $170=HEAP32[(($169)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$170]($7,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=95;break; }
 case 50: 
 var $171=HEAP8[($14)];
 var $172=$171&1;
 var $173=(($172<<24)>>24)==0;
 if($173){label=52;break;}else{label=51;break;}
 case 51: 
 var $175=(($__psn+8)|0);
 var $176=HEAP32[(($175)>>2)];
 HEAP32[(($176)>>2)]=0;
 var $177=(($__psn+4)|0);
 HEAP32[(($177)>>2)]=0;
 label=53;break;
 case 52: 
 var $179=(($__psn+4)|0);
 HEAP32[(($179)>>2)]=0;
 HEAP8[($14)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $181$0 = ___cxa_find_matching_catch(-1, -1,0); var $181$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 HEAP32[(($24)>>2)]=0; HEAP32[((($24)+(4))>>2)]=0; HEAP32[((($24)+(8))>>2)]=0;
 var $182=$143;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+12)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=95;break; }
 case 56: 
 var $187=HEAP32[(($182)>>2)];
 var $188=(($187+16)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=95;break; }
 case 57: 
 var $191=$143;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+20)|0);
 var $194=HEAP32[(($193)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($8,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=95;break; }
 case 58: 
 var $195=HEAP8[($11)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=60;break;}else{label=59;break;}
 case 59: 
 var $199=(($__grp+8)|0);
 var $200=HEAP32[(($199)>>2)];
 HEAP8[($200)]=0;
 var $201=(($__grp+4)|0);
 HEAP32[(($201)>>2)]=0;
 label=61;break;
 case 60: 
 var $203=$__grp;
 var $204=(($203+1)|0);
 HEAP8[($204)]=0;
 HEAP8[($11)]=0;
 label=61;break;
 case 61: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=62;break; }
 case 62: 
 var $206$0 = ___cxa_find_matching_catch(-1, -1,0); var $206$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 63: 
 assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 HEAP32[(($25)>>2)]=0; HEAP32[((($25)+(4))>>2)]=0; HEAP32[((($25)+(8))>>2)]=0;
 var $207=HEAP32[(($153)>>2)];
 var $208=(($207+24)|0);
 var $209=HEAP32[(($208)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$209]($9,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=95;break; }
 case 64: 
 var $210=HEAP8[($13)];
 var $211=$210&1;
 var $212=(($211<<24)>>24)==0;
 if($212){label=66;break;}else{label=65;break;}
 case 65: 
 var $214=(($__sym+8)|0);
 var $215=HEAP32[(($214)>>2)];
 HEAP32[(($215)>>2)]=0;
 var $216=(($__sym+4)|0);
 HEAP32[(($216)>>2)]=0;
 label=67;break;
 case 66: 
 var $218=(($__sym+4)|0);
 HEAP32[(($218)>>2)]=0;
 HEAP8[($13)]=0;
 label=67;break;
 case 67: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=68;break; }
 case 68: 
 var $220$0 = ___cxa_find_matching_catch(-1, -1,0); var $220$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 69: 
 assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
 HEAP32[(($26)>>2)]=0; HEAP32[((($26)+(4))>>2)]=0; HEAP32[((($26)+(8))>>2)]=0;
 var $221=HEAP32[(($182)>>2)];
 var $222=(($221+36)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]($147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$224;var $__ts_0=$190;var $__dp_0=$186;label=70;break; } else { label=95;break; }
 case 70: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $226=(($__gbuf+400)|0);
 var $227=(($__wb)|0);
 var $228=HEAP32[(($227)>>2)];
 HEAP32[(($__wn)>>2)]=$228;
 var $229=(($__b)|0);
 var $230=$__ct;
 var $231=(($__nsn+4)|0);
 var $232=(($__nsn+8)|0);
 var $233=(($__psn+4)|0);
 var $234=(($__psn+8)|0);
 var $235=$__flags&512;
 var $236=($235|0)!=0;
 var $237=(($__sym+4)|0);
 var $238=(($__sym+8)|0);
 var $239=(($__spaces+4)|0);
 var $240=(($__spaces+8)|0);
 var $241=(($tmpcast+3)|0);
 var $242=(($__grp+4)|0);
 var $243=(($__spaces)|0);
 var $__gb_sroa_1_4_load100910251134=480;var $245=$12;var $__gb_sroa_0_0_load99910101137=$12;var $244=$226;var $__trailing_sign_01140=0;var $__p_01142=0;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=71;break;
 case 71: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $__p_01142;
 var $__trailing_sign_01140;
 var $244;
 var $__gb_sroa_0_0_load99910101137;
 var $245;
 var $__gb_sroa_1_4_load100910251134;
 var $246=HEAP32[(($229)>>2)];
 var $247=($246|0)==0;
 if($247){var $264=1;label=78;break;}else{label=72;break;}
 case 72: 
 var $249=(($246+12)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($246+16)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($250|0)==($252|0);
 if($253){label=73;break;}else{label=74;break;}
 case 73: 
 var $255=$246;
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+36)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$258]($246) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0926=$259;label=75;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 74: 
 var $261=HEAP32[(($250)>>2)];
 var $_0926=$261;label=75;break;
 case 75: 
 var $_0926;
 var $262=($_0926|0)==-1;
 if($262){label=77;break;}else{label=76;break;}
 case 76: 
 var $_pre1202=HEAP32[(($229)>>2)];
 var $phitmp=($_pre1202|0)==0;
 var $264=$phitmp;label=78;break;
 case 77: 
 HEAP32[(($229)>>2)]=0;
 var $264=1;label=78;break;
 case 78: 
 var $264;
 var $265=($__e_sroa_0_0|0)==0;
 if($265){label=83;break;}else{label=79;break;}
 case 79: 
 var $267=(($__e_sroa_0_0+12)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=(($__e_sroa_0_0+16)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($268|0)==($270|0);
 if($271){label=80;break;}else{label=81;break;}
 case 80: 
 var $273=$__e_sroa_0_0;
 var $274=HEAP32[(($273)>>2)];
 var $275=(($274+36)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$276]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0925=$277;label=82;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 81: 
 var $279=HEAP32[(($268)>>2)];
 var $_0925=$279;label=82;break;
 case 82: 
 var $_0925;
 var $280=($_0925|0)==-1;
 if($280){label=83;break;}else{label=84;break;}
 case 83: 
 if($264){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$245;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;var $__e_sroa_0_21=0;label=349;break;}else{var $__e_sroa_0_2=0;label=85;break;}
 case 84: 
 if($264){var $__e_sroa_0_2=$__e_sroa_0_0;label=85;break;}else{var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$245;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;var $__e_sroa_0_21=$__e_sroa_0_0;label=349;break;}
 case 85: 
 var $__e_sroa_0_2;
 var $282=(($tmpcast+$__p_01142)|0);
 var $283=HEAP8[($282)];
 var $284=(($283<<24)>>24);
 switch(($284|0)){case 1:{ label=114;break;}case 0:{ label=134;break;}case 3:{ label=167;break;}case 2:{ label=207;break;}case 4:{ var $__ng_0=0;var $844=$244;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load99910101137;var $843=$245;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load100910251134;var $__e_sroa_0_10=$__e_sroa_0_2;label=250;break;}default:{var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;}}break;
 case 86: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $285=$_lcssa;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091025_lcssa;label=96;break;
 case 87: 
 var $__gb_sroa_1_4_load10091018_ph_ph_ph;
 var $_ph_ph_ph;
 var $lpad_loopexit4$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit4$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit4$1;var $lpad_phi$0=$lpad_loopexit4$0;var $285=$_ph_ph_ph;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091018_ph_ph_ph;label=96;break;
 case 88: 
 var $lpad_nonloopexit5$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit5$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit5$1;var $lpad_phi$0=$lpad_nonloopexit5$0;var $285=$843;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091023;label=96;break;
 case 89: 
 var $lpad_loopexit1051$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1051$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1051$1;var $lpad_phi$0=$lpad_loopexit1051$0;var $285=$991;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091020;label=96;break;
 case 90: 
 var $lpad_loopexit1053$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1053$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1053$1;var $lpad_phi$0=$lpad_loopexit1053$0;var $285=$245;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=96;break;
 case 91: 
 var $lpad_loopexit1060$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1060$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1060$1;var $lpad_phi$0=$lpad_loopexit1060$0;var $285=$245;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=96;break;
 case 92: 
 var $lpad_loopexit1064$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit1064$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit1064$1;var $lpad_phi$0=$lpad_loopexit1064$0;var $285=$245;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load100910251134;label=96;break;
 case 93: 
 var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph;
 var $_ph_ph1036_ph_ph_ph_ph_ph_ph;
 var $lpad_loopexit7$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit7$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit7$1;var $lpad_phi$0=$lpad_loopexit7$0;var $285=$_ph_ph1036_ph_ph_ph_ph_ph_ph;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph;label=96;break;
 case 94: 
 var $lpad_nonloopexit8$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit8$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit8$1;var $lpad_phi$0=$lpad_nonloopexit8$0;var $285=$843;var $__gb_sroa_1_4_load10091018=$__gb_sroa_1_4_load10091023;label=96;break;
 case 95: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $285=$12;var $__gb_sroa_1_4_load10091018=480;label=96;break;
 case 96: 
 var $__gb_sroa_1_4_load10091018;
 var $285;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $286=HEAP8[($16)];
 var $287=$286&1;
 var $288=(($287<<24)>>24)==0;
 if($288){label=99;break;}else{label=97;break;}
 case 97: 
 var $290=(($__spaces+8)|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=($291|0)==0;
 if($292){label=99;break;}else{label=98;break;}
 case 98: 
 var $294=$291;
 _free($294);
 label=99;break;
 case 99: 
 var $295=HEAP8[($15)];
 var $296=$295&1;
 var $297=(($296<<24)>>24)==0;
 if($297){label=102;break;}else{label=100;break;}
 case 100: 
 var $299=(($__nsn+8)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==0;
 if($301){label=102;break;}else{label=101;break;}
 case 101: 
 var $303=$300;
 _free($303);
 label=102;break;
 case 102: 
 var $304=HEAP8[($14)];
 var $305=$304&1;
 var $306=(($305<<24)>>24)==0;
 if($306){label=105;break;}else{label=103;break;}
 case 103: 
 var $308=(($__psn+8)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=($309|0)==0;
 if($310){label=105;break;}else{label=104;break;}
 case 104: 
 var $312=$309;
 _free($312);
 label=105;break;
 case 105: 
 var $313=HEAP8[($13)];
 var $314=$313&1;
 var $315=(($314<<24)>>24)==0;
 if($315){label=108;break;}else{label=106;break;}
 case 106: 
 var $317=(($__sym+8)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($318|0)==0;
 if($319){label=108;break;}else{label=107;break;}
 case 107: 
 var $321=$318;
 _free($321);
 label=108;break;
 case 108: 
 var $322=HEAP8[($11)];
 var $323=$322&1;
 var $324=(($323<<24)>>24)==0;
 if($324){label=111;break;}else{label=109;break;}
 case 109: 
 var $326=(($__grp+8)|0);
 var $327=HEAP32[(($326)>>2)];
 var $328=($327|0)==0;
 if($328){label=111;break;}else{label=110;break;}
 case 110: 
 _free($327);
 label=111;break;
 case 111: 
 var $330=($285|0)==0;
 if($330){label=401;break;}else{label=112;break;}
 case 112: 
 var $332=$285;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10091018]($332) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=401;break; } else { label=113;break; }
 case 113: 
 var $334$0 = ___cxa_find_matching_catch(-1, -1,0); var $334$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 114: 
 var $cond=($__p_01142|0)==3;
 if($cond){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$245;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;var $__e_sroa_0_21=$__e_sroa_0_2;label=349;break;}else{label=115;break;}
 case 115: 
 var $337=HEAP32[(($229)>>2)];
 var $338=(($337+12)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=(($337+16)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($339|0)==($341|0);
 if($342){label=116;break;}else{label=117;break;}
 case 116: 
 var $344=$337;
 var $345=HEAP32[(($344)>>2)];
 var $346=(($345+36)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$347]($337) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0924=$348;label=118;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 117: 
 var $350=HEAP32[(($339)>>2)];
 var $_0924=$350;label=118;break;
 case 118: 
 var $_0924;
 var $351=HEAP32[(($230)>>2)];
 var $352=(($351+12)|0);
 var $353=HEAP32[(($352)>>2)];
 var $354=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$353]($__ct,8192,$_0924) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=119;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 119: 
 if($354){label=120;break;}else{label=133;break;}
 case 120: 
 var $356=HEAP32[(($229)>>2)];
 var $357=(($356+12)|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=(($356+16)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=($358|0)==($360|0);
 if($361){label=121;break;}else{label=122;break;}
 case 121: 
 var $363=$356;
 var $364=HEAP32[(($363)>>2)];
 var $365=(($364+40)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$366]($356) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0923=$367;label=123;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 122: 
 var $369=(($358+4)|0);
 HEAP32[(($357)>>2)]=$369;
 var $370=HEAP32[(($358)>>2)];
 var $_0923=$370;label=123;break;
 case 123: 
 var $_0923;
 var $371=HEAP8[($16)];
 var $372=$371&1;
 var $373=(($372<<24)>>24)==0;
 if($373){label=124;break;}else{label=125;break;}
 case 124: 
 var $375=($371&255);
 var $376=$375>>>1;
 var $__sz_0_i=$376;var $__cap_0_i=1;label=126;break;
 case 125: 
 var $378=HEAP32[(($243)>>2)];
 var $379=$378&-2;
 var $380=((($379)-(1))|0);
 var $381=HEAP32[(($239)>>2)];
 var $__sz_0_i=$381;var $__cap_0_i=$380;label=126;break;
 case 126: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $383=($__sz_0_i|0)==($__cap_0_i|0);
 if($383){label=127;break;}else{var $__is_short_0_off0_in_in_i=$371;label=129;break;}
 case 127: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=128;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 128: 
 var $385=HEAP8[($16)];
 var $__is_short_0_off0_in_in_i=$385;label=129;break;
 case 129: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=130;break;}else{label=131;break;}
 case 130: 
 var $388=$__sz_0_i<<1;
 var $389=((($388)+(2))|0);
 var $390=(($389)&255);
 HEAP8[($16)]=$390;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$239;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=132;break;
 case 131: 
 var $392=HEAP32[(($240)>>2)];
 var $393=((($__sz_0_i)+(1))|0);
 HEAP32[(($239)>>2)]=$393;
 var $_pn_i=$392;var $__p_0_sum_pre_phi_i=$393;label=132;break;
 case 132: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+($__sz_0_i<<2))|0);
 HEAP32[(($__p_0_i)>>2)]=$_0923;
 var $394=(($_pn_i+($__p_0_sum_pre_phi_i<<2))|0);
 HEAP32[(($394)>>2)]=0;
 label=134;break;
 case 133: 
 var $396=HEAP32[(($__err)>>2)];
 var $397=$396|4;
 HEAP32[(($__err)>>2)]=$397;
 var $_0909=0;var $1269=$245;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=382;break;
 case 134: 
 var $399=($__p_01142|0)==3;
 if($399){var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load100910251134;var $_lcssa=$245;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load99910101137;var $__trailing_sign_0_lcssa=$__trailing_sign_01140;var $__e_sroa_0_21=$__e_sroa_0_2;label=349;break;}else{var $400=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=135;break;}
 case 135: 
 var $__e_sroa_0_3;
 var $400;
 var $401=HEAP32[(($229)>>2)];
 var $402=($401|0)==0;
 if($402){var $419=1;label=142;break;}else{label=136;break;}
 case 136: 
 var $404=(($401+12)|0);
 var $405=HEAP32[(($404)>>2)];
 var $406=(($401+16)|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=($405|0)==($407|0);
 if($408){label=137;break;}else{label=138;break;}
 case 137: 
 var $410=$401;
 var $411=HEAP32[(($410)>>2)];
 var $412=(($411+36)|0);
 var $413=HEAP32[(($412)>>2)];
 var $414=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$413]($401) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0922=$414;label=139;break; } else { label=92;break; }
 case 138: 
 var $416=HEAP32[(($405)>>2)];
 var $_0922=$416;label=139;break;
 case 139: 
 var $_0922;
 var $417=($_0922|0)==-1;
 if($417){label=141;break;}else{label=140;break;}
 case 140: 
 var $_pre1203=HEAP32[(($229)>>2)];
 var $phitmp1220=($_pre1203|0)==0;
 var $419=$phitmp1220;label=142;break;
 case 141: 
 HEAP32[(($229)>>2)]=0;
 var $419=1;label=142;break;
 case 142: 
 var $419;
 var $420=($400|0)==0;
 if($420){var $__e_sroa_0_4=$__e_sroa_0_3;label=147;break;}else{label=143;break;}
 case 143: 
 var $422=(($400+12)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=(($400+16)|0);
 var $425=HEAP32[(($424)>>2)];
 var $426=($423|0)==($425|0);
 if($426){label=144;break;}else{label=145;break;}
 case 144: 
 var $428=$400;
 var $429=HEAP32[(($428)>>2)];
 var $430=(($429+36)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$431]($400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0921=$432;label=146;break; } else { label=92;break; }
 case 145: 
 var $434=HEAP32[(($423)>>2)];
 var $_0921=$434;label=146;break;
 case 146: 
 var $_0921;
 var $435=($_0921|0)==-1;
 if($435){var $__e_sroa_0_4=0;label=147;break;}else{label=148;break;}
 case 147: 
 var $__e_sroa_0_4;
 if($419){var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=348;break;}else{var $436=0;var $__e_sroa_0_5=$__e_sroa_0_4;label=149;break;}
 case 148: 
 if($419){var $436=$400;var $__e_sroa_0_5=$__e_sroa_0_3;label=149;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=348;break;}
 case 149: 
 var $__e_sroa_0_5;
 var $436;
 var $437=HEAP32[(($229)>>2)];
 var $438=(($437+12)|0);
 var $439=HEAP32[(($438)>>2)];
 var $440=(($437+16)|0);
 var $441=HEAP32[(($440)>>2)];
 var $442=($439|0)==($441|0);
 if($442){label=150;break;}else{label=151;break;}
 case 150: 
 var $444=$437;
 var $445=HEAP32[(($444)>>2)];
 var $446=(($445+36)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$447]($437) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0920=$448;label=152;break; } else { label=92;break; }
 case 151: 
 var $450=HEAP32[(($439)>>2)];
 var $_0920=$450;label=152;break;
 case 152: 
 var $_0920;
 var $451=HEAP32[(($230)>>2)];
 var $452=(($451+12)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$453]($__ct,8192,$_0920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=153;break; } else { label=92;break; }
 case 153: 
 if($454){label=154;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=348;break;}
 case 154: 
 var $456=HEAP32[(($229)>>2)];
 var $457=(($456+12)|0);
 var $458=HEAP32[(($457)>>2)];
 var $459=(($456+16)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=($458|0)==($460|0);
 if($461){label=155;break;}else{label=156;break;}
 case 155: 
 var $463=$456;
 var $464=HEAP32[(($463)>>2)];
 var $465=(($464+40)|0);
 var $466=HEAP32[(($465)>>2)];
 var $467=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$466]($456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0919=$467;label=157;break; } else { label=92;break; }
 case 156: 
 var $469=(($458+4)|0);
 HEAP32[(($457)>>2)]=$469;
 var $470=HEAP32[(($458)>>2)];
 var $_0919=$470;label=157;break;
 case 157: 
 var $_0919;
 var $471=HEAP8[($16)];
 var $472=$471&1;
 var $473=(($472<<24)>>24)==0;
 if($473){label=158;break;}else{label=159;break;}
 case 158: 
 var $475=($471&255);
 var $476=$475>>>1;
 var $__sz_0_i30=$476;var $__cap_0_i29=1;label=160;break;
 case 159: 
 var $478=HEAP32[(($243)>>2)];
 var $479=$478&-2;
 var $480=((($479)-(1))|0);
 var $481=HEAP32[(($239)>>2)];
 var $__sz_0_i30=$481;var $__cap_0_i29=$480;label=160;break;
 case 160: 
 var $__cap_0_i29;
 var $__sz_0_i30;
 var $483=($__sz_0_i30|0)==($__cap_0_i29|0);
 if($483){label=161;break;}else{var $__is_short_0_off0_in_in_i31=$471;label=163;break;}
 case 161: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i29,1,$__cap_0_i29,$__cap_0_i29,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=162;break; } else { label=92;break; }
 case 162: 
 var $485=HEAP8[($16)];
 var $__is_short_0_off0_in_in_i31=$485;label=163;break;
 case 163: 
 var $__is_short_0_off0_in_in_i31;
 var $__is_short_0_off0_in_i32=$__is_short_0_off0_in_in_i31&1;
 var $__is_short_0_off0_i33=(($__is_short_0_off0_in_i32<<24)>>24)==0;
 if($__is_short_0_off0_i33){label=164;break;}else{label=165;break;}
 case 164: 
 var $488=$__sz_0_i30<<1;
 var $489=((($488)+(2))|0);
 var $490=(($489)&255);
 HEAP8[($16)]=$490;
 var $__p_0_sum_pre_i34=((($__sz_0_i30)+(1))|0);
 var $_pn_i36=$239;var $__p_0_sum_pre_phi_i35=$__p_0_sum_pre_i34;label=166;break;
 case 165: 
 var $492=HEAP32[(($240)>>2)];
 var $493=((($__sz_0_i30)+(1))|0);
 HEAP32[(($239)>>2)]=$493;
 var $_pn_i36=$492;var $__p_0_sum_pre_phi_i35=$493;label=166;break;
 case 166: 
 var $__p_0_sum_pre_phi_i35;
 var $_pn_i36;
 var $__p_0_i37=(($_pn_i36+($__sz_0_i30<<2))|0);
 HEAP32[(($__p_0_i37)>>2)]=$_0919;
 var $494=(($_pn_i36+($__p_0_sum_pre_phi_i35<<2))|0);
 HEAP32[(($494)>>2)]=0;
 var $400=$436;var $__e_sroa_0_3=$__e_sroa_0_5;label=135;break;
 case 167: 
 var $495=HEAP8[($14)];
 var $496=($495&255);
 var $497=$496&1;
 var $498=($497|0)==0;
 var $499=HEAP32[(($233)>>2)];
 var $500=$496>>>1;
 var $501=($498?$500:$499);
 var $502=HEAP8[($15)];
 var $503=($502&255);
 var $504=$503&1;
 var $505=($504|0)==0;
 var $506=HEAP32[(($231)>>2)];
 var $507=$503>>>1;
 var $508=($505?$507:$506);
 var $509=(((-$508))|0);
 var $510=($501|0)==($509|0);
 if($510){var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;}else{label=168;break;}
 case 168: 
 var $511=($501|0)==0;
 if($511){label=180;break;}else{label=169;break;}
 case 169: 
 var $512=($508|0)==0;
 var $513=HEAP32[(($229)>>2)];
 var $514=(($513+12)|0);
 var $515=HEAP32[(($514)>>2)];
 var $516=(($513+16)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=($515|0)==($517|0);
 if($512){label=170;break;}else{label=189;break;}
 case 170: 
 if($518){label=171;break;}else{label=173;break;}
 case 171: 
 var $521=$513;
 var $522=HEAP32[(($521)>>2)];
 var $523=(($522+36)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$524]($513) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=172;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 172: 
 var $_pre1205=HEAP8[($14)];
 var $_0916=$525;var $528=$_pre1205;label=174;break;
 case 173: 
 var $527=HEAP32[(($515)>>2)];
 var $_0916=$527;var $528=$495;label=174;break;
 case 174: 
 var $528;
 var $_0916;
 var $529=$528&1;
 var $530=(($529<<24)>>24)==0;
 var $531=HEAP32[(($234)>>2)];
 var $_=($530?$233:$531);
 var $532=HEAP32[(($_)>>2)];
 var $533=($_0916|0)==($532|0);
 if($533){label=175;break;}else{label=179;break;}
 case 175: 
 var $535=HEAP32[(($229)>>2)];
 var $536=(($535+12)|0);
 var $537=HEAP32[(($536)>>2)];
 var $538=(($535+16)|0);
 var $539=HEAP32[(($538)>>2)];
 var $540=($537|0)==($539|0);
 if($540){label=176;break;}else{label=177;break;}
 case 176: 
 var $542=$535;
 var $543=HEAP32[(($542)>>2)];
 var $544=(($543+40)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$545]($535) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=178;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 177: 
 var $548=(($537+4)|0);
 HEAP32[(($536)>>2)]=$548;
 label=178;break;
 case 178: 
 var $549=HEAP8[($14)];
 var $550=($549&255);
 var $551=$550&1;
 var $552=($551|0)==0;
 var $553=HEAP32[(($233)>>2)];
 var $554=$550>>>1;
 var $555=($552?$554:$553);
 var $556=($555>>>0)>1;
 var $__psn___trailing_sign_0=($556?$__psn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;
 case 179: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;
 case 180: 
 var $559=HEAP32[(($229)>>2)];
 var $560=(($559+12)|0);
 var $561=HEAP32[(($560)>>2)];
 var $562=(($559+16)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=($561|0)==($563|0);
 if($564){label=181;break;}else{label=183;break;}
 case 181: 
 var $566=$559;
 var $567=HEAP32[(($566)>>2)];
 var $568=(($567+36)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$569]($559) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=182;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 182: 
 var $_pre1204=HEAP8[($15)];
 var $_0912=$570;var $573=$_pre1204;label=184;break;
 case 183: 
 var $572=HEAP32[(($561)>>2)];
 var $_0912=$572;var $573=$502;label=184;break;
 case 184: 
 var $573;
 var $_0912;
 var $574=$573&1;
 var $575=(($574<<24)>>24)==0;
 var $576=HEAP32[(($232)>>2)];
 var $_1224=($575?$231:$576);
 var $577=HEAP32[(($_1224)>>2)];
 var $578=($_0912|0)==($577|0);
 if($578){label=185;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;}
 case 185: 
 var $580=HEAP32[(($229)>>2)];
 var $581=(($580+12)|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(($580+16)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=($582|0)==($584|0);
 if($585){label=186;break;}else{label=187;break;}
 case 186: 
 var $587=$580;
 var $588=HEAP32[(($587)>>2)];
 var $589=(($588+40)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$590]($580) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=188;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 187: 
 var $593=(($582+4)|0);
 HEAP32[(($581)>>2)]=$593;
 label=188;break;
 case 188: 
 HEAP8[($__neg)]=1;
 var $594=HEAP8[($15)];
 var $595=($594&255);
 var $596=$595&1;
 var $597=($596|0)==0;
 var $598=HEAP32[(($231)>>2)];
 var $599=$595>>>1;
 var $600=($597?$599:$598);
 var $601=($600>>>0)>1;
 var $__nsn___trailing_sign_0=($601?$__nsn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;
 case 189: 
 if($518){label=190;break;}else{label=192;break;}
 case 190: 
 var $604=$513;
 var $605=HEAP32[(($604)>>2)];
 var $606=(($605+36)|0);
 var $607=HEAP32[(($606)>>2)];
 var $608=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$607]($513) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=191;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 191: 
 var $_pre1206=HEAP8[($14)];
 var $_pre10=HEAP32[(($229)>>2)];
 var $_phi_trans_insert=(($_pre10+12)|0);
 var $_pre11=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert12=(($_pre10+16)|0);
 var $_pre13=HEAP32[(($_phi_trans_insert12)>>2)];
 var $_0907=$608;var $614=$_pre1206;var $613=$_pre10;var $612=$_pre11;var $611=$_pre13;label=193;break;
 case 192: 
 var $610=HEAP32[(($515)>>2)];
 var $_0907=$610;var $614=$495;var $613=$513;var $612=$515;var $611=$517;label=193;break;
 case 193: 
 var $611;
 var $612;
 var $613;
 var $614;
 var $_0907;
 var $615=$614&1;
 var $616=(($615<<24)>>24)==0;
 var $617=HEAP32[(($234)>>2)];
 var $_1225=($616?$233:$617);
 var $618=HEAP32[(($_1225)>>2)];
 var $619=($_0907|0)==($618|0);
 var $620=(($613+12)|0);
 var $621=($612|0)==($611|0);
 if($619){label=194;break;}else{label=198;break;}
 case 194: 
 if($621){label=195;break;}else{label=196;break;}
 case 195: 
 var $624=$613;
 var $625=HEAP32[(($624)>>2)];
 var $626=(($625+40)|0);
 var $627=HEAP32[(($626)>>2)];
 var $628=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$627]($613) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=197;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 196: 
 var $630=(($612+4)|0);
 HEAP32[(($620)>>2)]=$630;
 label=197;break;
 case 197: 
 var $631=HEAP8[($14)];
 var $632=($631&255);
 var $633=$632&1;
 var $634=($633|0)==0;
 var $635=HEAP32[(($233)>>2)];
 var $636=$632>>>1;
 var $637=($634?$636:$635);
 var $638=($637>>>0)>1;
 var $__psn___trailing_sign_0970=($638?$__psn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__psn___trailing_sign_0970;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;
 case 198: 
 if($621){label=199;break;}else{label=200;break;}
 case 199: 
 var $641=$613;
 var $642=HEAP32[(($641)>>2)];
 var $643=(($642+36)|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$644]($613) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0903=$645;label=201;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 200: 
 var $647=HEAP32[(($612)>>2)];
 var $_0903=$647;label=201;break;
 case 201: 
 var $_0903;
 var $648=HEAP8[($15)];
 var $649=$648&1;
 var $650=(($649<<24)>>24)==0;
 var $651=HEAP32[(($232)>>2)];
 var $_1226=($650?$231:$651);
 var $652=HEAP32[(($_1226)>>2)];
 var $653=($_0903|0)==($652|0);
 if($653){label=202;break;}else{label=206;break;}
 case 202: 
 var $655=HEAP32[(($229)>>2)];
 var $656=(($655+12)|0);
 var $657=HEAP32[(($656)>>2)];
 var $658=(($655+16)|0);
 var $659=HEAP32[(($658)>>2)];
 var $660=($657|0)==($659|0);
 if($660){label=203;break;}else{label=204;break;}
 case 203: 
 var $662=$655;
 var $663=HEAP32[(($662)>>2)];
 var $664=(($663+40)|0);
 var $665=HEAP32[(($664)>>2)];
 var $666=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$665]($655) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=205;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$245;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load100910251134;label=93;break; }
 case 204: 
 var $668=(($657+4)|0);
 HEAP32[(($656)>>2)]=$668;
 label=205;break;
 case 205: 
 HEAP8[($__neg)]=1;
 var $669=HEAP8[($15)];
 var $670=($669&255);
 var $671=$670&1;
 var $672=($671|0)==0;
 var $673=HEAP32[(($231)>>2)];
 var $674=$670>>>1;
 var $675=($672?$674:$673);
 var $676=($675>>>0)>1;
 var $__nsn___trailing_sign_0971=($676?$__nsn:$__trailing_sign_01140);
 var $__trailing_sign_1=$__nsn___trailing_sign_0971;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;
 case 206: 
 var $678=HEAP32[(($__err)>>2)];
 var $679=$678|4;
 HEAP32[(($__err)>>2)]=$679;
 var $_0909=0;var $1269=$245;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=382;break;
 case 207: 
 var $681=($__trailing_sign_01140|0)!=0;
 var $682=($__p_01142>>>0)<2;
 var $or_cond=$681|$682;
 if($or_cond){label=211;break;}else{label=208;break;}
 case 208: 
 var $684=($__p_01142|0)==2;
 if($684){label=209;break;}else{var $689=0;label=210;break;}
 case 209: 
 var $686=HEAP8[($241)];
 var $687=(($686<<24)>>24)!=0;
 var $689=$687;label=210;break;
 case 210: 
 var $689;
 var $brmerge=$236|$689;
 if($brmerge){label=211;break;}else{var $__trailing_sign_1=0;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=348;break;}
 case 211: 
 var $690=HEAP8[($13)];
 var $691=$690&1;
 var $692=(($691<<24)>>24)==0;
 var $693=HEAP32[(($238)>>2)];
 var $_1227=($692?$237:$693);
 var $694=($__p_01142|0)==0;
 if($694){var $__sym_curr_char_sroa_0_0=$_1227;var $748=$690;var $747=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;var $746=$693;label=224;break;}else{label=212;break;}
 case 212: 
 var $696=((($__p_01142)-(1))|0);
 var $697=(($tmpcast+$696)|0);
 var $698=HEAP8[($697)];
 var $switch=($698&255)<2;
 if($switch){var $__sym_space_end_sroa_0_0=$_1227;var $700=$690;var $699=$693;label=213;break;}else{var $__sym_curr_char_sroa_0_0=$_1227;var $748=$690;var $747=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;var $746=$693;label=224;break;}
 case 213: 
 var $699;
 var $700;
 var $__sym_space_end_sroa_0_0;
 var $701=$700&1;
 var $702=(($701<<24)>>24)==0;
 var $_1228=($702?$237:$699);
 var $703=($700&255);
 var $704=$703&1;
 var $705=($704|0)==0;
 var $706=HEAP32[(($237)>>2)];
 var $707=$703>>>1;
 var $708=($705?$707:$706);
 var $709=(($_1228+($708<<2))|0);
 var $710=($__sym_space_end_sroa_0_0|0)==($709|0);
 if($710){var $719=$700;var $718=$699;label=218;break;}else{label=214;break;}
 case 214: 
 var $712=HEAP32[(($__sym_space_end_sroa_0_0)>>2)];
 var $713=HEAP32[(($230)>>2)];
 var $714=(($713+12)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$715]($__ct,8192,$712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=215;break; } else { label=90;break; }
 case 215: 
 if($716){label=216;break;}else{label=217;break;}
 case 216: 
 var $717=(($__sym_space_end_sroa_0_0+4)|0);
 var $_pre1207=HEAP8[($13)];
 var $_pre14=HEAP32[(($238)>>2)];
 var $__sym_space_end_sroa_0_0=$717;var $700=$_pre1207;var $699=$_pre14;label=213;break;
 case 217: 
 var $_pre1208=HEAP8[($13)];
 var $_pre15=HEAP32[(($238)>>2)];
 var $719=$_pre1208;var $718=$_pre15;label=218;break;
 case 218: 
 var $718;
 var $719;
 var $720=$719&1;
 var $721=(($720<<24)>>24)==0;
 var $_1229=($721?$237:$718);
 var $722=$__sym_space_end_sroa_0_0;
 var $723=$_1229;
 var $724=((($722)-($723))|0);
 var $725=$724>>2;
 var $726=HEAP8[($16)];
 var $727=($726&255);
 var $728=$727&1;
 var $729=($728|0)==0;
 var $730=HEAP32[(($239)>>2)];
 var $731=$727>>>1;
 var $732=($729?$731:$730);
 var $733=($725>>>0)>($732>>>0);
 if($733){var $__sym_curr_char_sroa_0_0=$_1229;var $748=$719;var $747=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;var $746=$718;label=224;break;}else{label=219;break;}
 case 219: 
 var $734=$726&1;
 var $735=(($734<<24)>>24)==0;
 var $736=HEAP32[(($240)>>2)];
 var $_1230=($735?$239:$736);
 var $737=(($_1230+($732<<2))|0);
 var $738=($725|0)==0;
 if($738){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $748=$719;var $747=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;var $746=$718;label=224;break;}else{label=220;break;}
 case 220: 
 var $_sum=((($732)-($725))|0);
 var $739=(($_1230+($_sum<<2))|0);
 var $_sroa_0936_01057=$739;var $_sroa_0934_01058=$_1229;label=221;break;
 case 221: 
 var $_sroa_0934_01058;
 var $_sroa_0936_01057;
 var $740=HEAP32[(($_sroa_0936_01057)>>2)];
 var $741=HEAP32[(($_sroa_0934_01058)>>2)];
 var $742=($740|0)==($741|0);
 if($742){label=222;break;}else{var $__sym_curr_char_sroa_0_0=$_1229;var $748=$719;var $747=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;var $746=$718;label=224;break;}
 case 222: 
 var $743=(($_sroa_0936_01057+4)|0);
 var $744=($743|0)==($737|0);
 if($744){var $__sym_curr_char_sroa_0_0=$__sym_space_end_sroa_0_0;var $748=$719;var $747=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;var $746=$718;label=224;break;}else{label=223;break;}
 case 223: 
 var $745=(($_sroa_0934_01058+4)|0);
 var $_sroa_0936_01057=$743;var $_sroa_0934_01058=$745;label=221;break;
 case 224: 
 var $746;
 var $__e_sroa_0_6;
 var $747;
 var $748;
 var $__sym_curr_char_sroa_0_0;
 var $749=$748&1;
 var $750=(($749<<24)>>24)==0;
 var $_1234=($750?$237:$746);
 var $751=($748&255);
 var $752=$751&1;
 var $753=($752|0)==0;
 var $754=HEAP32[(($237)>>2)];
 var $755=$751>>>1;
 var $756=($753?$755:$754);
 var $757=(($_1234+($756<<2))|0);
 var $758=($__sym_curr_char_sroa_0_0|0)==($757|0);
 if($758){var $__e_sroa_0_9=$__e_sroa_0_6;label=247;break;}else{label=225;break;}
 case 225: 
 var $760=HEAP32[(($229)>>2)];
 var $761=($760|0)==0;
 if($761){var $778=1;label=232;break;}else{label=226;break;}
 case 226: 
 var $763=(($760+12)|0);
 var $764=HEAP32[(($763)>>2)];
 var $765=(($760+16)|0);
 var $766=HEAP32[(($765)>>2)];
 var $767=($764|0)==($766|0);
 if($767){label=227;break;}else{label=228;break;}
 case 227: 
 var $769=$760;
 var $770=HEAP32[(($769)>>2)];
 var $771=(($770+36)|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$772]($760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0895=$773;label=229;break; } else { label=91;break; }
 case 228: 
 var $775=HEAP32[(($764)>>2)];
 var $_0895=$775;label=229;break;
 case 229: 
 var $_0895;
 var $776=($_0895|0)==-1;
 if($776){label=231;break;}else{label=230;break;}
 case 230: 
 var $_pre1209=HEAP32[(($229)>>2)];
 var $phitmp1219=($_pre1209|0)==0;
 var $778=$phitmp1219;label=232;break;
 case 231: 
 HEAP32[(($229)>>2)]=0;
 var $778=1;label=232;break;
 case 232: 
 var $778;
 var $779=($747|0)==0;
 if($779){var $__e_sroa_0_7=$__e_sroa_0_6;label=237;break;}else{label=233;break;}
 case 233: 
 var $781=(($747+12)|0);
 var $782=HEAP32[(($781)>>2)];
 var $783=(($747+16)|0);
 var $784=HEAP32[(($783)>>2)];
 var $785=($782|0)==($784|0);
 if($785){label=234;break;}else{label=235;break;}
 case 234: 
 var $787=$747;
 var $788=HEAP32[(($787)>>2)];
 var $789=(($788+36)|0);
 var $790=HEAP32[(($789)>>2)];
 var $791=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$790]($747) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0894=$791;label=236;break; } else { label=91;break; }
 case 235: 
 var $793=HEAP32[(($782)>>2)];
 var $_0894=$793;label=236;break;
 case 236: 
 var $_0894;
 var $794=($_0894|0)==-1;
 if($794){var $__e_sroa_0_7=0;label=237;break;}else{label=238;break;}
 case 237: 
 var $__e_sroa_0_7;
 if($778){var $__e_sroa_0_9=$__e_sroa_0_7;label=247;break;}else{var $795=0;var $__e_sroa_0_8=$__e_sroa_0_7;label=239;break;}
 case 238: 
 if($778){var $795=$747;var $__e_sroa_0_8=$__e_sroa_0_6;label=239;break;}else{var $__e_sroa_0_9=$__e_sroa_0_6;label=247;break;}
 case 239: 
 var $__e_sroa_0_8;
 var $795;
 var $796=HEAP32[(($229)>>2)];
 var $797=(($796+12)|0);
 var $798=HEAP32[(($797)>>2)];
 var $799=(($796+16)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=($798|0)==($800|0);
 if($801){label=240;break;}else{label=241;break;}
 case 240: 
 var $803=$796;
 var $804=HEAP32[(($803)>>2)];
 var $805=(($804+36)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$806]($796) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0896=$807;label=242;break; } else { label=91;break; }
 case 241: 
 var $809=HEAP32[(($798)>>2)];
 var $_0896=$809;label=242;break;
 case 242: 
 var $_0896;
 var $810=HEAP32[(($__sym_curr_char_sroa_0_0)>>2)];
 var $811=($_0896|0)==($810|0);
 if($811){label=243;break;}else{var $__e_sroa_0_9=$__e_sroa_0_8;label=247;break;}
 case 243: 
 var $813=HEAP32[(($229)>>2)];
 var $814=(($813+12)|0);
 var $815=HEAP32[(($814)>>2)];
 var $816=(($813+16)|0);
 var $817=HEAP32[(($816)>>2)];
 var $818=($815|0)==($817|0);
 if($818){label=244;break;}else{label=245;break;}
 case 244: 
 var $820=$813;
 var $821=HEAP32[(($820)>>2)];
 var $822=(($821+40)|0);
 var $823=HEAP32[(($822)>>2)];
 var $824=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$823]($813) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=246;break; } else { label=91;break; }
 case 245: 
 var $826=(($815+4)|0);
 HEAP32[(($814)>>2)]=$826;
 label=246;break;
 case 246: 
 var $827=(($__sym_curr_char_sroa_0_0+4)|0);
 var $_pre=HEAP8[($13)];
 var $_pre16=HEAP32[(($238)>>2)];
 var $__sym_curr_char_sroa_0_0=$827;var $748=$_pre;var $747=$795;var $__e_sroa_0_6=$__e_sroa_0_8;var $746=$_pre16;label=224;break;
 case 247: 
 var $__e_sroa_0_9;
 if($236){label=248;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=348;break;}
 case 248: 
 var $828=HEAP8[($13)];
 var $829=$828&1;
 var $830=(($829<<24)>>24)==0;
 var $831=HEAP32[(($238)>>2)];
 var $_1235=($830?$237:$831);
 var $832=($828&255);
 var $833=$832&1;
 var $834=($833|0)==0;
 var $835=HEAP32[(($237)>>2)];
 var $836=$832>>>1;
 var $837=($834?$836:$835);
 var $838=(($_1235+($837<<2))|0);
 var $839=($__sym_curr_char_sroa_0_0|0)==($838|0);
 if($839){var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$244;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load99910101137;var $1166=$245;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load100910251134;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=348;break;}else{label=249;break;}
 case 249: 
 var $841=HEAP32[(($__err)>>2)];
 var $842=$841|4;
 HEAP32[(($__err)>>2)]=$842;
 var $_0909=0;var $1269=$245;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load100910251134;label=382;break;
 case 250: 
 var $__e_sroa_0_10;
 var $__gb_sroa_1_4_load10091023;
 var $843;
 var $__gb_sroa_0_0_load9991013;
 var $844;
 var $__ng_0;
 var $845=HEAP32[(($229)>>2)];
 var $846=($845|0)==0;
 if($846){var $863=1;label=257;break;}else{label=251;break;}
 case 251: 
 var $848=(($845+12)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850=(($845+16)|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=($849|0)==($851|0);
 if($852){label=252;break;}else{label=253;break;}
 case 252: 
 var $854=$845;
 var $855=HEAP32[(($854)>>2)];
 var $856=(($855+36)|0);
 var $857=HEAP32[(($856)>>2)];
 var $858=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$857]($845) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0899=$858;label=254;break; } else { var $_ph_ph_ph=$843;var $__gb_sroa_1_4_load10091018_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=87;break; }
 case 253: 
 var $860=HEAP32[(($849)>>2)];
 var $_0899=$860;label=254;break;
 case 254: 
 var $_0899;
 var $861=($_0899|0)==-1;
 if($861){label=256;break;}else{label=255;break;}
 case 255: 
 var $_pre1210=HEAP32[(($229)>>2)];
 var $phitmp1216=($_pre1210|0)==0;
 var $863=$phitmp1216;label=257;break;
 case 256: 
 HEAP32[(($229)>>2)]=0;
 var $863=1;label=257;break;
 case 257: 
 var $863;
 var $864=($__e_sroa_0_10|0)==0;
 if($864){label=262;break;}else{label=258;break;}
 case 258: 
 var $866=(($__e_sroa_0_10+12)|0);
 var $867=HEAP32[(($866)>>2)];
 var $868=(($__e_sroa_0_10+16)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=($867|0)==($869|0);
 if($870){label=259;break;}else{label=260;break;}
 case 259: 
 var $872=$__e_sroa_0_10;
 var $873=HEAP32[(($872)>>2)];
 var $874=(($873+36)|0);
 var $875=HEAP32[(($874)>>2)];
 var $876=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$875]($__e_sroa_0_10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0898=$876;label=261;break; } else { var $_ph_ph_ph=$843;var $__gb_sroa_1_4_load10091018_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=87;break; }
 case 260: 
 var $878=HEAP32[(($867)>>2)];
 var $_0898=$878;label=261;break;
 case 261: 
 var $_0898;
 var $879=($_0898|0)==-1;
 if($879){label=262;break;}else{label=263;break;}
 case 262: 
 if($863){var $__e_sroa_0_13=0;label=285;break;}else{var $__e_sroa_0_12=0;label=264;break;}
 case 263: 
 if($863){var $__e_sroa_0_12=$__e_sroa_0_10;label=264;break;}else{var $__e_sroa_0_13=$__e_sroa_0_10;label=285;break;}
 case 264: 
 var $__e_sroa_0_12;
 var $880=HEAP32[(($229)>>2)];
 var $881=(($880+12)|0);
 var $882=HEAP32[(($881)>>2)];
 var $883=(($880+16)|0);
 var $884=HEAP32[(($883)>>2)];
 var $885=($882|0)==($884|0);
 if($885){label=265;break;}else{label=266;break;}
 case 265: 
 var $887=$880;
 var $888=HEAP32[(($887)>>2)];
 var $889=(($888+36)|0);
 var $890=HEAP32[(($889)>>2)];
 var $891=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$890]($880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0900=$891;label=267;break; } else { var $_ph_ph_ph=$843;var $__gb_sroa_1_4_load10091018_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=87;break; }
 case 266: 
 var $893=HEAP32[(($882)>>2)];
 var $_0900=$893;label=267;break;
 case 267: 
 var $_0900;
 var $894=HEAP32[(($230)>>2)];
 var $895=(($894+12)|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$896]($__ct,2048,$_0900) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=268;break; } else { var $_ph_ph_ph=$843;var $__gb_sroa_1_4_load10091018_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=87;break; }
 case 268: 
 if($897){label=269;break;}else{label=273;break;}
 case 269: 
 var $899=HEAP32[(($__wn)>>2)];
 var $900=HEAP32[(($10)>>2)];
 var $901=($899|0)==($900|0);
 if($901){label=270;break;}else{var $904=$899;label=272;break;}
 case 270: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=271;break; } else { var $_ph_ph_ph=$843;var $__gb_sroa_1_4_load10091018_ph_ph_ph=$__gb_sroa_1_4_load10091023;label=87;break; }
 case 271: 
 var $_pre1211=HEAP32[(($__wn)>>2)];
 var $904=$_pre1211;label=272;break;
 case 272: 
 var $904;
 var $905=(($904+4)|0);
 HEAP32[(($__wn)>>2)]=$905;
 HEAP32[(($904)>>2)]=$_0900;
 var $906=((($__ng_0)+(1))|0);
 var $__ng_1=$906;var $946=$844;var $__gb_sroa_0_0_load9991014=$__gb_sroa_0_0_load9991013;var $945=$843;var $__gb_sroa_1_4_load10091021=$__gb_sroa_1_4_load10091023;label=282;break;
 case 273: 
 var $907=HEAP8[($11)];
 var $908=($907&255);
 var $909=$908&1;
 var $910=($909|0)==0;
 var $911=HEAP32[(($242)>>2)];
 var $912=$908>>>1;
 var $913=($910?$912:$911);
 var $914=($913|0)==0;
 var $915=($__ng_0|0)==0;
 var $or_cond973=$914|$915;
 var $or_cond973_not=$or_cond973^1;
 var $916=($_0900|0)==($__ts_0|0);
 var $or_cond21=$or_cond973_not&$916;
 if($or_cond21){label=274;break;}else{var $__e_sroa_0_13=$__e_sroa_0_12;label=285;break;}
 case 274: 
 var $918=($__gb_sroa_0_0_load9991013|0)==($844|0);
 if($918){label=275;break;}else{var $942=$844;var $__gb_sroa_0_0_load9991015=$__gb_sroa_0_0_load9991013;var $941=$843;var $__gb_sroa_1_4_load10091022=$__gb_sroa_1_4_load10091023;label=281;break;}
 case 275: 
 var $920=($__gb_sroa_1_4_load10091023|0)==((480)|0);
 var $921=$__gb_sroa_0_0_load9991013;
 var $922=$843;
 var $923=((($921)-($922))|0);
 var $924=($923>>>0)<2147483647;
 var $925=$923<<1;
 var $926=($924?$925:-1);
 var $927=$923>>2;
 if($920){var $930=0;label=277;break;}else{label=276;break;}
 case 276: 
 var $phitmp_i=$843;
 var $930=$phitmp_i;label=277;break;
 case 277: 
 var $930;
 var $931=_realloc($930,$926);
 var $932=$931;
 var $933=($931|0)==0;
 if($933){label=278;break;}else{label=280;break;}
 case 278: 
 var $935=___cxa_allocate_exception(4);
 var $936=$935;
 HEAP32[(($936)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($935,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=279;break; } else { label=88;break; }
 case 279: 
 throw "Reached an unreachable!";
 case 280: 
 var $937=$926>>>2;
 var $938=(($932+($927<<2))|0);
 var $939=(($932+($937<<2))|0);
 var $942=$939;var $__gb_sroa_0_0_load9991015=$938;var $941=$932;var $__gb_sroa_1_4_load10091022=244;label=281;break;
 case 281: 
 var $__gb_sroa_1_4_load10091022;
 var $941;
 var $__gb_sroa_0_0_load9991015;
 var $942;
 var $943=(($__gb_sroa_0_0_load9991015+4)|0);
 HEAP32[(($__gb_sroa_0_0_load9991015)>>2)]=$__ng_0;
 var $__ng_1=0;var $946=$942;var $__gb_sroa_0_0_load9991014=$943;var $945=$941;var $__gb_sroa_1_4_load10091021=$__gb_sroa_1_4_load10091022;label=282;break;
 case 282: 
 var $__gb_sroa_1_4_load10091021;
 var $945;
 var $__gb_sroa_0_0_load9991014;
 var $946;
 var $__ng_1;
 var $947=HEAP32[(($229)>>2)];
 var $948=(($947+12)|0);
 var $949=HEAP32[(($948)>>2)];
 var $950=(($947+16)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=($949|0)==($951|0);
 if($952){label=283;break;}else{label=284;break;}
 case 283: 
 var $954=$947;
 var $955=HEAP32[(($954)>>2)];
 var $956=(($955+40)|0);
 var $957=HEAP32[(($956)>>2)];
 var $958=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$957]($947) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $844=$946;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load9991014;var $843=$945;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load10091021;var $__e_sroa_0_10=$__e_sroa_0_12;label=250;break; } else { var $_ph_ph_ph=$945;var $__gb_sroa_1_4_load10091018_ph_ph_ph=$__gb_sroa_1_4_load10091021;label=87;break; }
 case 284: 
 var $960=(($949+4)|0);
 HEAP32[(($948)>>2)]=$960;
 var $__ng_0=$__ng_1;var $844=$946;var $__gb_sroa_0_0_load9991013=$__gb_sroa_0_0_load9991014;var $843=$945;var $__gb_sroa_1_4_load10091023=$__gb_sroa_1_4_load10091021;var $__e_sroa_0_10=$__e_sroa_0_12;label=250;break;
 case 285: 
 var $__e_sroa_0_13;
 var $962=($843|0)==($__gb_sroa_0_0_load9991013|0);
 var $963=($__ng_0|0)==0;
 var $or_cond974=$962|$963;
 if($or_cond974){var $992=$844;var $__gb_sroa_0_0_load9991012=$__gb_sroa_0_0_load9991013;var $991=$843;var $__gb_sroa_1_4_load10091020=$__gb_sroa_1_4_load10091023;label=294;break;}else{label=286;break;}
 case 286: 
 var $965=($__gb_sroa_0_0_load9991013|0)==($844|0);
 if($965){label=287;break;}else{var $989=$844;var $__gb_sroa_0_0_load9991016=$__gb_sroa_0_0_load9991013;var $988=$843;var $__gb_sroa_1_4_load10091019=$__gb_sroa_1_4_load10091023;label=293;break;}
 case 287: 
 var $967=($__gb_sroa_1_4_load10091023|0)==((480)|0);
 var $968=$__gb_sroa_0_0_load9991013;
 var $969=$843;
 var $970=((($968)-($969))|0);
 var $971=($970>>>0)<2147483647;
 var $972=$970<<1;
 var $973=($971?$972:-1);
 var $974=$970>>2;
 if($967){var $977=0;label=289;break;}else{label=288;break;}
 case 288: 
 var $phitmp_i975=$843;
 var $977=$phitmp_i975;label=289;break;
 case 289: 
 var $977;
 var $978=_realloc($977,$973);
 var $979=$978;
 var $980=($978|0)==0;
 if($980){label=290;break;}else{label=292;break;}
 case 290: 
 var $982=___cxa_allocate_exception(4);
 var $983=$982;
 HEAP32[(($983)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($982,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=291;break; } else { label=94;break; }
 case 291: 
 throw "Reached an unreachable!";
 case 292: 
 var $984=$973>>>2;
 var $985=(($979+($974<<2))|0);
 var $986=(($979+($984<<2))|0);
 var $989=$986;var $__gb_sroa_0_0_load9991016=$985;var $988=$979;var $__gb_sroa_1_4_load10091019=244;label=293;break;
 case 293: 
 var $__gb_sroa_1_4_load10091019;
 var $988;
 var $__gb_sroa_0_0_load9991016;
 var $989;
 var $990=(($__gb_sroa_0_0_load9991016+4)|0);
 HEAP32[(($__gb_sroa_0_0_load9991016)>>2)]=$__ng_0;
 var $992=$989;var $__gb_sroa_0_0_load9991012=$990;var $991=$988;var $__gb_sroa_1_4_load10091020=$__gb_sroa_1_4_load10091019;label=294;break;
 case 294: 
 var $__gb_sroa_1_4_load10091020;
 var $991;
 var $__gb_sroa_0_0_load9991012;
 var $992;
 var $993=($__fd_0|0)>0;
 if($993){label=295;break;}else{var $__fd_1=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=346;break;}
 case 295: 
 var $995=HEAP32[(($229)>>2)];
 var $996=($995|0)==0;
 if($996){var $1013=1;label=302;break;}else{label=296;break;}
 case 296: 
 var $998=(($995+12)|0);
 var $999=HEAP32[(($998)>>2)];
 var $1000=(($995+16)|0);
 var $1001=HEAP32[(($1000)>>2)];
 var $1002=($999|0)==($1001|0);
 if($1002){label=297;break;}else{label=298;break;}
 case 297: 
 var $1004=$995;
 var $1005=HEAP32[(($1004)>>2)];
 var $1006=(($1005+36)|0);
 var $1007=HEAP32[(($1006)>>2)];
 var $1008=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1007]($995) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0906=$1008;label=299;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$991;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=93;break; }
 case 298: 
 var $1010=HEAP32[(($999)>>2)];
 var $_0906=$1010;label=299;break;
 case 299: 
 var $_0906;
 var $1011=($_0906|0)==-1;
 if($1011){label=301;break;}else{label=300;break;}
 case 300: 
 var $_pre1212=HEAP32[(($229)>>2)];
 var $phitmp1217=($_pre1212|0)==0;
 var $1013=$phitmp1217;label=302;break;
 case 301: 
 HEAP32[(($229)>>2)]=0;
 var $1013=1;label=302;break;
 case 302: 
 var $1013;
 var $1014=($__e_sroa_0_13|0)==0;
 if($1014){label=307;break;}else{label=303;break;}
 case 303: 
 var $1016=(($__e_sroa_0_13+12)|0);
 var $1017=HEAP32[(($1016)>>2)];
 var $1018=(($__e_sroa_0_13+16)|0);
 var $1019=HEAP32[(($1018)>>2)];
 var $1020=($1017|0)==($1019|0);
 if($1020){label=304;break;}else{label=305;break;}
 case 304: 
 var $1022=$__e_sroa_0_13;
 var $1023=HEAP32[(($1022)>>2)];
 var $1024=(($1023+36)|0);
 var $1025=HEAP32[(($1024)>>2)];
 var $1026=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1025]($__e_sroa_0_13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0905=$1026;label=306;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$991;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=93;break; }
 case 305: 
 var $1028=HEAP32[(($1017)>>2)];
 var $_0905=$1028;label=306;break;
 case 306: 
 var $_0905;
 var $1029=($_0905|0)==-1;
 if($1029){label=307;break;}else{label=308;break;}
 case 307: 
 if($1013){label=313;break;}else{var $__e_sroa_0_15=0;label=309;break;}
 case 308: 
 if($1013){var $__e_sroa_0_15=$__e_sroa_0_13;label=309;break;}else{label=313;break;}
 case 309: 
 var $__e_sroa_0_15;
 var $1030=HEAP32[(($229)>>2)];
 var $1031=(($1030+12)|0);
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=(($1030+16)|0);
 var $1034=HEAP32[(($1033)>>2)];
 var $1035=($1032|0)==($1034|0);
 if($1035){label=310;break;}else{label=311;break;}
 case 310: 
 var $1037=$1030;
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=(($1038+36)|0);
 var $1040=HEAP32[(($1039)>>2)];
 var $1041=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1040]($1030) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0908=$1041;label=312;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$991;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=93;break; }
 case 311: 
 var $1043=HEAP32[(($1032)>>2)];
 var $_0908=$1043;label=312;break;
 case 312: 
 var $_0908;
 var $1044=($_0908|0)==($__dp_0|0);
 if($1044){label=314;break;}else{label=313;break;}
 case 313: 
 var $1046=HEAP32[(($__err)>>2)];
 var $1047=$1046|4;
 HEAP32[(($__err)>>2)]=$1047;
 var $_0909=0;var $1269=$991;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=382;break;
 case 314: 
 var $1049=HEAP32[(($229)>>2)];
 var $1050=(($1049+12)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1052=(($1049+16)|0);
 var $1053=HEAP32[(($1052)>>2)];
 var $1054=($1051|0)==($1053|0);
 if($1054){label=315;break;}else{label=316;break;}
 case 315: 
 var $1056=$1049;
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=(($1057+40)|0);
 var $1059=HEAP32[(($1058)>>2)];
 var $1060=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1059]($1049) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $1064=$__e_sroa_0_15;var $1063=$__fd_0;var $__e_sroa_0_16=$__e_sroa_0_15;label=317;break; } else { var $_ph_ph1036_ph_ph_ph_ph_ph_ph=$991;var $__gb_sroa_1_4_load10091018_ph_ph1035_ph_ph_ph_ph_ph_ph=$__gb_sroa_1_4_load10091020;label=93;break; }
 case 316: 
 var $1062=(($1051+4)|0);
 HEAP32[(($1050)>>2)]=$1062;
 var $1064=$__e_sroa_0_15;var $1063=$__fd_0;var $__e_sroa_0_16=$__e_sroa_0_15;label=317;break;
 case 317: 
 var $__e_sroa_0_16;
 var $1063;
 var $1064;
 var $1065=HEAP32[(($229)>>2)];
 var $1066=($1065|0)==0;
 if($1066){var $1083=1;label=324;break;}else{label=318;break;}
 case 318: 
 var $1068=(($1065+12)|0);
 var $1069=HEAP32[(($1068)>>2)];
 var $1070=(($1065+16)|0);
 var $1071=HEAP32[(($1070)>>2)];
 var $1072=($1069|0)==($1071|0);
 if($1072){label=319;break;}else{label=320;break;}
 case 319: 
 var $1074=$1065;
 var $1075=HEAP32[(($1074)>>2)];
 var $1076=(($1075+36)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1077]($1065) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0915=$1078;label=321;break; } else { label=89;break; }
 case 320: 
 var $1080=HEAP32[(($1069)>>2)];
 var $_0915=$1080;label=321;break;
 case 321: 
 var $_0915;
 var $1081=($_0915|0)==-1;
 if($1081){label=323;break;}else{label=322;break;}
 case 322: 
 var $_pre1213=HEAP32[(($229)>>2)];
 var $phitmp1218=($_pre1213|0)==0;
 var $1083=$phitmp1218;label=324;break;
 case 323: 
 HEAP32[(($229)>>2)]=0;
 var $1083=1;label=324;break;
 case 324: 
 var $1083;
 var $1084=($1064|0)==0;
 if($1084){var $__e_sroa_0_17=$__e_sroa_0_16;label=329;break;}else{label=325;break;}
 case 325: 
 var $1086=(($1064+12)|0);
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=(($1064+16)|0);
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=($1087|0)==($1089|0);
 if($1090){label=326;break;}else{label=327;break;}
 case 326: 
 var $1092=$1064;
 var $1093=HEAP32[(($1092)>>2)];
 var $1094=(($1093+36)|0);
 var $1095=HEAP32[(($1094)>>2)];
 var $1096=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1095]($1064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0914=$1096;label=328;break; } else { label=89;break; }
 case 327: 
 var $1098=HEAP32[(($1087)>>2)];
 var $_0914=$1098;label=328;break;
 case 328: 
 var $_0914;
 var $1099=($_0914|0)==-1;
 if($1099){var $__e_sroa_0_17=0;label=329;break;}else{label=330;break;}
 case 329: 
 var $__e_sroa_0_17;
 if($1083){label=336;break;}else{var $1100=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=331;break;}
 case 330: 
 if($1083){var $1100=$1064;var $__e_sroa_0_18=$__e_sroa_0_16;label=331;break;}else{label=336;break;}
 case 331: 
 var $__e_sroa_0_18;
 var $1100;
 var $1101=HEAP32[(($229)>>2)];
 var $1102=(($1101+12)|0);
 var $1103=HEAP32[(($1102)>>2)];
 var $1104=(($1101+16)|0);
 var $1105=HEAP32[(($1104)>>2)];
 var $1106=($1103|0)==($1105|0);
 if($1106){label=332;break;}else{label=333;break;}
 case 332: 
 var $1108=$1101;
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=(($1109+36)|0);
 var $1111=HEAP32[(($1110)>>2)];
 var $1112=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1111]($1101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0917=$1112;label=334;break; } else { label=89;break; }
 case 333: 
 var $1114=HEAP32[(($1103)>>2)];
 var $_0917=$1114;label=334;break;
 case 334: 
 var $_0917;
 var $1115=HEAP32[(($230)>>2)];
 var $1116=(($1115+12)|0);
 var $1117=HEAP32[(($1116)>>2)];
 var $1118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1117]($__ct,2048,$_0917) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=335;break; } else { label=89;break; }
 case 335: 
 if($1118){label=337;break;}else{label=336;break;}
 case 336: 
 var $1120=HEAP32[(($__err)>>2)];
 var $1121=$1120|4;
 HEAP32[(($__err)>>2)]=$1121;
 var $_0909=0;var $1269=$991;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=382;break;
 case 337: 
 var $1123=HEAP32[(($__wn)>>2)];
 var $1124=HEAP32[(($10)>>2)];
 var $1125=($1123|0)==($1124|0);
 if($1125){label=338;break;}else{label=339;break;}
 case 338: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=339;break; } else { label=89;break; }
 case 339: 
 var $1128=HEAP32[(($229)>>2)];
 var $1129=(($1128+12)|0);
 var $1130=HEAP32[(($1129)>>2)];
 var $1131=(($1128+16)|0);
 var $1132=HEAP32[(($1131)>>2)];
 var $1133=($1130|0)==($1132|0);
 if($1133){label=340;break;}else{label=341;break;}
 case 340: 
 var $1135=$1128;
 var $1136=HEAP32[(($1135)>>2)];
 var $1137=(($1136+36)|0);
 var $1138=HEAP32[(($1137)>>2)];
 var $1139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1138]($1128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0918=$1139;label=342;break; } else { label=89;break; }
 case 341: 
 var $1141=HEAP32[(($1130)>>2)];
 var $_0918=$1141;label=342;break;
 case 342: 
 var $_0918;
 var $1142=HEAP32[(($__wn)>>2)];
 var $1143=(($1142+4)|0);
 HEAP32[(($__wn)>>2)]=$1143;
 HEAP32[(($1142)>>2)]=$_0918;
 var $1144=((($1063)-(1))|0);
 var $1145=HEAP32[(($229)>>2)];
 var $1146=(($1145+12)|0);
 var $1147=HEAP32[(($1146)>>2)];
 var $1148=(($1145+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1147|0)==($1149|0);
 if($1150){label=343;break;}else{label=345;break;}
 case 343: 
 var $1152=$1145;
 var $1153=HEAP32[(($1152)>>2)];
 var $1154=(($1153+40)|0);
 var $1155=HEAP32[(($1154)>>2)];
 var $1156=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1155]($1145) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=344;break; } else { label=89;break; }
 case 344: 
 var $1157=($1144|0)>0;
 if($1157){var $1064=$1100;var $1063=$1144;var $__e_sroa_0_16=$__e_sroa_0_18;label=317;break;}else{var $__fd_1=$1144;var $__e_sroa_0_19=$__e_sroa_0_18;label=346;break;}
 case 345: 
 var $1159=(($1147+4)|0);
 HEAP32[(($1146)>>2)]=$1159;
 label=344;break;
 case 346: 
 var $__e_sroa_0_19;
 var $__fd_1;
 var $1160=HEAP32[(($__wn)>>2)];
 var $1161=HEAP32[(($227)>>2)];
 var $1162=($1160|0)==($1161|0);
 if($1162){label=347;break;}else{var $__trailing_sign_1=$__trailing_sign_01140;var $1167=$992;var $__gb_sroa_0_0_load9991011=$__gb_sroa_0_0_load9991012;var $1166=$991;var $__gb_sroa_1_4_load10091024=$__gb_sroa_1_4_load10091020;var $__fd_2=$__fd_1;var $__e_sroa_0_20=$__e_sroa_0_19;label=348;break;}
 case 347: 
 var $1164=HEAP32[(($__err)>>2)];
 var $1165=$1164|4;
 HEAP32[(($__err)>>2)]=$1165;
 var $_0909=0;var $1269=$991;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091020;label=382;break;
 case 348: 
 var $__e_sroa_0_20;
 var $__fd_2;
 var $__gb_sroa_1_4_load10091024;
 var $1166;
 var $__gb_sroa_0_0_load9991011;
 var $1167;
 var $__trailing_sign_1;
 var $1168=((($__p_01142)+(1))|0);
 var $1169=($1168>>>0)<4;
 if($1169){var $__gb_sroa_1_4_load100910251134=$__gb_sroa_1_4_load10091024;var $245=$1166;var $__gb_sroa_0_0_load99910101137=$__gb_sroa_0_0_load9991011;var $244=$1167;var $__trailing_sign_01140=$__trailing_sign_1;var $__p_01142=$1168;var $__fd_0=$__fd_2;var $__e_sroa_0_0=$__e_sroa_0_20;label=71;break;}else{var $__gb_sroa_1_4_load10091025_lcssa=$__gb_sroa_1_4_load10091024;var $_lcssa=$1166;var $__gb_sroa_0_0_load9991010_lcssa=$__gb_sroa_0_0_load9991011;var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $__e_sroa_0_21=$__e_sroa_0_20;label=349;break;}
 case 349: 
 var $__e_sroa_0_21;
 var $__trailing_sign_0_lcssa;
 var $__gb_sroa_0_0_load9991010_lcssa;
 var $_lcssa;
 var $__gb_sroa_1_4_load10091025_lcssa;
 var $1170=($__trailing_sign_0_lcssa|0)==0;
 if($1170){label=379;break;}else{label=350;break;}
 case 350: 
 var $1171=$__trailing_sign_0_lcssa;
 var $1172=(($__trailing_sign_0_lcssa+4)|0);
 var $1173=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;var $__e_sroa_0_22=$__e_sroa_0_21;label=351;break;
 case 351: 
 var $__e_sroa_0_22;
 var $__i_0;
 var $1174=HEAP8[($1171)];
 var $1175=($1174&255);
 var $1176=$1175&1;
 var $1177=($1176|0)==0;
 if($1177){label=353;break;}else{label=352;break;}
 case 352: 
 var $1179=HEAP32[(($1172)>>2)];
 var $1182=$1179;label=354;break;
 case 353: 
 var $1181=$1175>>>1;
 var $1182=$1181;label=354;break;
 case 354: 
 var $1182;
 var $1183=($__i_0>>>0)<($1182>>>0);
 if($1183){label=355;break;}else{label=379;break;}
 case 355: 
 var $1185=HEAP32[(($229)>>2)];
 var $1186=($1185|0)==0;
 if($1186){var $1203=1;label=362;break;}else{label=356;break;}
 case 356: 
 var $1188=(($1185+12)|0);
 var $1189=HEAP32[(($1188)>>2)];
 var $1190=(($1185+16)|0);
 var $1191=HEAP32[(($1190)>>2)];
 var $1192=($1189|0)==($1191|0);
 if($1192){label=357;break;}else{label=358;break;}
 case 357: 
 var $1194=$1185;
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=(($1195+36)|0);
 var $1197=HEAP32[(($1196)>>2)];
 var $1198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1197]($1185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0929=$1198;label=359;break; } else { label=86;break; }
 case 358: 
 var $1200=HEAP32[(($1189)>>2)];
 var $_0929=$1200;label=359;break;
 case 359: 
 var $_0929;
 var $1201=($_0929|0)==-1;
 if($1201){label=361;break;}else{label=360;break;}
 case 360: 
 var $_pre1214=HEAP32[(($229)>>2)];
 var $phitmp1215=($_pre1214|0)==0;
 var $1203=$phitmp1215;label=362;break;
 case 361: 
 HEAP32[(($229)>>2)]=0;
 var $1203=1;label=362;break;
 case 362: 
 var $1203;
 var $1204=($__e_sroa_0_22|0)==0;
 if($1204){label=367;break;}else{label=363;break;}
 case 363: 
 var $1206=(($__e_sroa_0_22+12)|0);
 var $1207=HEAP32[(($1206)>>2)];
 var $1208=(($__e_sroa_0_22+16)|0);
 var $1209=HEAP32[(($1208)>>2)];
 var $1210=($1207|0)==($1209|0);
 if($1210){label=364;break;}else{label=365;break;}
 case 364: 
 var $1212=$__e_sroa_0_22;
 var $1213=HEAP32[(($1212)>>2)];
 var $1214=(($1213+36)|0);
 var $1215=HEAP32[(($1214)>>2)];
 var $1216=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1215]($__e_sroa_0_22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0928=$1216;label=366;break; } else { label=86;break; }
 case 365: 
 var $1218=HEAP32[(($1207)>>2)];
 var $_0928=$1218;label=366;break;
 case 366: 
 var $_0928;
 var $1219=($_0928|0)==-1;
 if($1219){label=367;break;}else{label=368;break;}
 case 367: 
 if($1203){label=375;break;}else{var $__e_sroa_0_24=0;label=369;break;}
 case 368: 
 if($1203){var $__e_sroa_0_24=$__e_sroa_0_22;label=369;break;}else{label=375;break;}
 case 369: 
 var $__e_sroa_0_24;
 var $1220=HEAP32[(($229)>>2)];
 var $1221=(($1220+12)|0);
 var $1222=HEAP32[(($1221)>>2)];
 var $1223=(($1220+16)|0);
 var $1224=HEAP32[(($1223)>>2)];
 var $1225=($1222|0)==($1224|0);
 if($1225){label=370;break;}else{label=371;break;}
 case 370: 
 var $1227=$1220;
 var $1228=HEAP32[(($1227)>>2)];
 var $1229=(($1228+36)|0);
 var $1230=HEAP32[(($1229)>>2)];
 var $1231=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1230]($1220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0930=$1231;label=372;break; } else { label=86;break; }
 case 371: 
 var $1233=HEAP32[(($1222)>>2)];
 var $_0930=$1233;label=372;break;
 case 372: 
 var $_0930;
 var $1234=HEAP8[($1171)];
 var $1235=$1234&1;
 var $1236=(($1235<<24)>>24)==0;
 if($1236){var $1239=$1172;label=374;break;}else{label=373;break;}
 case 373: 
 var $1238=HEAP32[(($1173)>>2)];
 var $1239=$1238;label=374;break;
 case 374: 
 var $1239;
 var $1240=(($1239+($__i_0<<2))|0);
 var $1241=HEAP32[(($1240)>>2)];
 var $1242=($_0930|0)==($1241|0);
 if($1242){label=376;break;}else{label=375;break;}
 case 375: 
 var $1244=HEAP32[(($__err)>>2)];
 var $1245=$1244|4;
 HEAP32[(($__err)>>2)]=$1245;
 var $_0909=0;var $1269=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=382;break;
 case 376: 
 var $1247=((($__i_0)+(1))|0);
 var $1248=HEAP32[(($229)>>2)];
 var $1249=(($1248+12)|0);
 var $1250=HEAP32[(($1249)>>2)];
 var $1251=(($1248+16)|0);
 var $1252=HEAP32[(($1251)>>2)];
 var $1253=($1250|0)==($1252|0);
 if($1253){label=377;break;}else{label=378;break;}
 case 377: 
 var $1255=$1248;
 var $1256=HEAP32[(($1255)>>2)];
 var $1257=(($1256+40)|0);
 var $1258=HEAP32[(($1257)>>2)];
 var $1259=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1258]($1248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1247;var $__e_sroa_0_22=$__e_sroa_0_24;label=351;break; } else { label=86;break; }
 case 378: 
 var $1261=(($1250+4)|0);
 HEAP32[(($1249)>>2)]=$1261;
 var $__i_0=$1247;var $__e_sroa_0_22=$__e_sroa_0_24;label=351;break;
 case 379: 
 var $1262=($_lcssa|0)==($__gb_sroa_0_0_load9991010_lcssa|0);
 if($1262){var $_0909=1;var $1269=$__gb_sroa_0_0_load9991010_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=382;break;}else{label=380;break;}
 case 380: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa,$__gb_sroa_0_0_load9991010_lcssa,$__et);
 var $1264=HEAP32[(($__et)>>2)];
 var $1265=($1264|0)==0;
 if($1265){var $_0909=1;var $1269=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=382;break;}else{label=381;break;}
 case 381: 
 var $1267=HEAP32[(($__err)>>2)];
 var $1268=$1267|4;
 HEAP32[(($__err)>>2)]=$1268;
 var $_0909=0;var $1269=$_lcssa;var $__gb_sroa_1_4_load10091026=$__gb_sroa_1_4_load10091025_lcssa;label=382;break;
 case 382: 
 var $__gb_sroa_1_4_load10091026;
 var $1269;
 var $_0909;
 var $1270=HEAP8[($16)];
 var $1271=$1270&1;
 var $1272=(($1271<<24)>>24)==0;
 if($1272){label=385;break;}else{label=383;break;}
 case 383: 
 var $1274=HEAP32[(($240)>>2)];
 var $1275=($1274|0)==0;
 if($1275){label=385;break;}else{label=384;break;}
 case 384: 
 var $1277=$1274;
 _free($1277);
 label=385;break;
 case 385: 
 var $1278=HEAP8[($15)];
 var $1279=$1278&1;
 var $1280=(($1279<<24)>>24)==0;
 if($1280){label=388;break;}else{label=386;break;}
 case 386: 
 var $1282=HEAP32[(($232)>>2)];
 var $1283=($1282|0)==0;
 if($1283){label=388;break;}else{label=387;break;}
 case 387: 
 var $1285=$1282;
 _free($1285);
 label=388;break;
 case 388: 
 var $1286=HEAP8[($14)];
 var $1287=$1286&1;
 var $1288=(($1287<<24)>>24)==0;
 if($1288){label=391;break;}else{label=389;break;}
 case 389: 
 var $1290=HEAP32[(($234)>>2)];
 var $1291=($1290|0)==0;
 if($1291){label=391;break;}else{label=390;break;}
 case 390: 
 var $1293=$1290;
 _free($1293);
 label=391;break;
 case 391: 
 var $1294=HEAP8[($13)];
 var $1295=$1294&1;
 var $1296=(($1295<<24)>>24)==0;
 if($1296){label=394;break;}else{label=392;break;}
 case 392: 
 var $1298=HEAP32[(($238)>>2)];
 var $1299=($1298|0)==0;
 if($1299){label=394;break;}else{label=393;break;}
 case 393: 
 var $1301=$1298;
 _free($1301);
 label=394;break;
 case 394: 
 var $1302=HEAP8[($11)];
 var $1303=$1302&1;
 var $1304=(($1303<<24)>>24)==0;
 if($1304){label=397;break;}else{label=395;break;}
 case 395: 
 var $1306=(($__grp+8)|0);
 var $1307=HEAP32[(($1306)>>2)];
 var $1308=($1307|0)==0;
 if($1308){label=397;break;}else{label=396;break;}
 case 396: 
 _free($1307);
 label=397;break;
 case 397: 
 var $1310=($1269|0)==0;
 if($1310){label=400;break;}else{label=398;break;}
 case 398: 
 var $1312=$1269;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$__gb_sroa_1_4_load10091026]($1312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=400;break; } else { label=399;break; }
 case 399: 
 var $1314$0 = ___cxa_find_matching_catch(-1, -1,0); var $1314$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 400: 
 STACKTOP=sp;return $_0909;
 case 401: 
 ___resumeException($lpad_phi$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__neg=(sp)+(432);
 var $1=(($__wbuf)|0);
 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=480;
 var $4=(($__wbuf+400)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=$__p_i_i_i;
 var $12=HEAP32[((19280)>>2)];
 var $13=($12|0)==-1;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=69;break; }
 case 3: 
 var $15=HEAP32[((19284)>>2)];
 var $16=((($15)-(1))|0);
 var $17=(($6+12)|0);
 var $18=$17;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($6+8)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=$19;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25>>2;
 var $27=($26>>>0)>($16>>>0);
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=(($22+($16<<2))|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==0;
 if($30){label=5;break;}else{label=7;break;}
 case 5: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=69;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$29;
 HEAP8[($__neg)]=0;
 var $34=(($__e)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($__iob+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$35,$__intl,$7,$37,$__err,$__neg,$33,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=69;break; }
 case 8: 
 if($38){label=9;break;}else{label=48;break;}
 case 9: 
 var $41=$__v;
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=11;break;}else{label=10;break;}
 case 10: 
 var $46=(($__v+8)|0);
 var $47=HEAP32[(($46)>>2)];
 HEAP32[(($47)>>2)]=0;
 var $48=(($__v+4)|0);
 HEAP32[(($48)>>2)]=0;
 label=12;break;
 case 11: 
 var $50=(($__v+4)|0);
 HEAP32[(($50)>>2)]=0;
 HEAP8[($41)]=0;
 label=12;break;
 case 12: 
 var $51=HEAP8[($__neg)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 var $_pre114=$29;
 if($53){label=24;break;}else{label=13;break;}
 case 13: 
 var $55=HEAP32[(($_pre114)>>2)];
 var $56=(($55+44)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($33,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=69;break; }
 case 14: 
 var $59=HEAP8[($41)];
 var $60=$59&1;
 var $61=(($60<<24)>>24)==0;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=($59&255);
 var $64=$63>>>1;
 var $__sz_0_i=$64;var $__cap_0_i=1;label=17;break;
 case 16: 
 var $66=(($__v)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67&-2;
 var $69=((($68)-(1))|0);
 var $70=(($__v+4)|0);
 var $71=HEAP32[(($70)>>2)];
 var $__sz_0_i=$71;var $__cap_0_i=$69;label=17;break;
 case 17: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $73=($__sz_0_i|0)==($__cap_0_i|0);
 if($73){label=18;break;}else{var $__is_short_0_off0_in_in_i=$59;label=20;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=69;break; }
 case 19: 
 var $75=HEAP8[($41)];
 var $__is_short_0_off0_in_in_i=$75;label=20;break;
 case 20: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=21;break;}else{label=22;break;}
 case 21: 
 var $78=(($__v+4)|0);
 var $79=$__sz_0_i<<1;
 var $80=((($79)+(2))|0);
 var $81=(($80)&255);
 HEAP8[($41)]=$81;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$78;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=23;break;
 case 22: 
 var $83=(($__v+8)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($__sz_0_i)+(1))|0);
 var $86=(($__v+4)|0);
 HEAP32[(($86)>>2)]=$85;
 var $_pn_i=$84;var $__p_0_sum_pre_phi_i=$85;label=23;break;
 case 23: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+($__sz_0_i<<2))|0);
 HEAP32[(($__p_0_i)>>2)]=$58;
 var $87=(($_pn_i+($__p_0_sum_pre_phi_i<<2))|0);
 HEAP32[(($87)>>2)]=0;
 label=24;break;
 case 24: 
 var $88=HEAP32[(($_pre114)>>2)];
 var $89=(($88+44)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$90]($33,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=69;break; }
 case 25: 
 var $92=HEAP32[(($2)>>2)];
 var $93=HEAP32[(($__wn)>>2)];
 var $94=((($93)-(4))|0);
 var $__w_0=$92;label=26;break;
 case 26: 
 var $__w_0;
 var $96=($__w_0>>>0)<($94>>>0);
 if($96){label=27;break;}else{label=28;break;}
 case 27: 
 var $98=HEAP32[(($__w_0)>>2)];
 var $99=($98|0)==($91|0);
 var $100=(($__w_0+4)|0);
 if($99){var $__w_0=$100;label=26;break;}else{label=28;break;}
 case 28: 
 var $102=$__w_0;
 var $103=HEAP8[($41)];
 var $104=($103&255);
 var $105=$104&1;
 var $106=($105|0)==0;
 if($106){label=30;break;}else{label=29;break;}
 case 29: 
 var $108=(($__v+4)|0);
 var $109=HEAP32[(($108)>>2)];
 var $112=$109;label=31;break;
 case 30: 
 var $111=$104>>>1;
 var $112=$111;label=31;break;
 case 31: 
 var $112;
 var $113=$103&1;
 var $114=(($113<<24)>>24)==0;
 if($114){var $121=1;var $120=$103;label=33;break;}else{label=32;break;}
 case 32: 
 var $116=(($__v)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117&-2;
 var $phitmp_i=((($118)-(1))|0);
 var $119=(($117)&255);
 var $121=$phitmp_i;var $120=$119;label=33;break;
 case 33: 
 var $120;
 var $121;
 var $122=$93;
 var $123=((($122)-($102))|0);
 var $124=$123>>2;
 var $125=($124|0)==0;
 if($125){label=48;break;}else{label=34;break;}
 case 34: 
 var $127=((($121)-($112))|0);
 var $128=($127>>>0)<($124>>>0);
 if($128){label=35;break;}else{var $133=$120;label=37;break;}
 case 35: 
 var $130=((($112)+($124))|0);
 var $131=((($130)-($121))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v,$121,$131,$112,$112,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=69;break; }
 case 36: 
 var $_pre_i=HEAP8[($41)];
 var $133=$_pre_i;label=37;break;
 case 37: 
 var $133;
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){label=39;break;}else{label=38;break;}
 case 38: 
 var $137=(($__v+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $141=$138;label=40;break;
 case 39: 
 var $140=(($__v+4)|0);
 var $141=$140;label=40;break;
 case 40: 
 var $141;
 var $142=(($141+($112<<2))|0);
 var $143=($__w_0|0)==($93|0);
 if($143){var $__p_0_lcssa_i=$142;label=45;break;}else{label=41;break;}
 case 41: 
 var $scevgep71_i=$94;
 var $144=(((-$102))|0);
 var $uglygep_i=(($scevgep71_i+$144)|0);
 var $uglygep72_i=$uglygep_i;
 var $145=$uglygep72_i>>>2;
 var $146=((($112)+($145))|0);
 var $147=((($146)+(1))|0);
 var $_069_i=$__w_0;var $__p_070_i=$142;label=42;break;
 case 42: 
 var $__p_070_i;
 var $_069_i;
 var $149=HEAP32[(($_069_i)>>2)];
 HEAP32[(($__p_070_i)>>2)]=$149;
 var $150=(($_069_i+4)|0);
 var $151=($150|0)==($93|0);
 if($151){label=44;break;}else{label=43;break;}
 case 43: 
 var $152=(($__p_070_i+4)|0);
 var $_069_i=$150;var $__p_070_i=$152;label=42;break;
 case 44: 
 var $scevgep73_i=(($141+($147<<2))|0);
 var $__p_0_lcssa_i=$scevgep73_i;label=45;break;
 case 45: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 var $154=((($112)+($124))|0);
 var $155=HEAP8[($41)];
 var $156=$155&1;
 var $157=(($156<<24)>>24)==0;
 if($157){label=47;break;}else{label=46;break;}
 case 46: 
 var $159=(($__v+4)|0);
 HEAP32[(($159)>>2)]=$154;
 label=48;break;
 case 47: 
 var $161=$154<<1;
 var $162=(($161)&255);
 HEAP8[($41)]=$162;
 label=48;break;
 case 48: 
 var $163=(($__b)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $182=0;label=54;break;}else{label=49;break;}
 case 49: 
 var $167=(($164+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($164+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=50;break;}else{label=51;break;}
 case 50: 
 var $173=$164;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0104=$177;label=52;break; } else { label=69;break; }
 case 51: 
 var $179=HEAP32[(($168)>>2)];
 var $_0104=$179;label=52;break;
 case 52: 
 var $_0104;
 var $180=($_0104|0)==-1;
 if($180){label=53;break;}else{var $182=$164;label=54;break;}
 case 53: 
 HEAP32[(($163)>>2)]=0;
 var $182=0;label=54;break;
 case 54: 
 var $182;
 var $183=($182|0)==0;
 var $184=($35|0)==0;
 if($184){label=60;break;}else{label=55;break;}
 case 55: 
 var $186=(($35+12)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=(($35+16)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($187|0)==($189|0);
 if($190){label=56;break;}else{label=57;break;}
 case 56: 
 var $192=$35;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+36)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$195]($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=$196;label=58;break; } else { label=69;break; }
 case 57: 
 var $198=HEAP32[(($187)>>2)];
 var $_0=$198;label=58;break;
 case 58: 
 var $_0;
 var $199=($_0|0)==-1;
 if($199){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($34)>>2)]=0;
 label=60;break;
 case 60: 
 if($183){label=62;break;}else{label=63;break;}
 case 61: 
 if($183){label=63;break;}else{label=62;break;}
 case 62: 
 var $202=HEAP32[(($__err)>>2)];
 var $203=$202|2;
 HEAP32[(($__err)>>2)]=$203;
 label=63;break;
 case 63: 
 var $204=(($agg_result)|0);
 HEAP32[(($204)>>2)]=$182;
 var $205=(($6+4)|0);
 var $206=$205;
 var $207=(tempValue=HEAP32[(($206)>>2)],HEAP32[(($206)>>2)]=tempValue+-1,tempValue);
 var $208=($207|0)==0;
 if($208){label=64;break;}else{label=65;break;}
 case 64: 
 var $210=$6;
 var $211=$6;
 var $212=HEAP32[(($211)>>2)];
 var $213=(($212+8)|0);
 var $214=HEAP32[(($213)>>2)];
 FUNCTION_TABLE[$214]($210);
 label=65;break;
 case 65: 
 var $215=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $216=($215|0)==0;
 if($216){label=68;break;}else{label=66;break;}
 case 66: 
 var $218=HEAP32[(($3)>>2)];
 var $219=$215;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$218]($219) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=67;break; }
 case 67: 
 var $221$0 = ___cxa_find_matching_catch(-1, -1,0); var $221$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 68: 
 STACKTOP=sp;return;
 case 69: 
 var $223$0 = ___cxa_find_matching_catch(-1, -1); var $223$1 = tempRet0;
 var $224=(($6+4)|0);
 var $225=$224;
 var $226=(tempValue=HEAP32[(($225)>>2)],HEAP32[(($225)>>2)]=tempValue+-1,tempValue);
 var $227=($226|0)==0;
 if($227){label=70;break;}else{label=71;break;}
 case 70: 
 var $229=$6;
 var $230=$6;
 var $231=HEAP32[(($230)>>2)];
 var $232=(($231+8)|0);
 var $233=HEAP32[(($232)>>2)];
 FUNCTION_TABLE[$233]($229);
 label=71;break;
 case 71: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $234=($_pre|0)==0;
 if($234){label=74;break;}else{label=72;break;}
 case 72: 
 var $236=HEAP32[(($3)>>2)];
 var $237=$_pre;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$236]($237) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=73;break; }
 case 73: 
 var $239$0 = ___cxa_find_matching_catch(-1, -1,0); var $239$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 74: 
 ___resumeException($223$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((480)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $12=($10?$11:-1);
 var $13=HEAP32[(($__n)>>2)];
 var $14=$13;
 var $15=((($14)-($8))|0);
 var $16=$15>>2;
 if($3){label=2;break;}else{var $19=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $19=$phitmp;label=3;break;
 case 3: 
 var $19;
 var $20=_realloc($19,$12);
 var $21=$20;
 var $22=($20|0)==0;
 if($22){label=4;break;}else{label=5;break;}
 case 4: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5848;
 ___cxa_throw($24,13504,(76));
 throw "Reached an unreachable!";
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$21;
 var $34=$21;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$21;
 var $28=($_pr|0)==0;
 if($28){var $34=$21;label=11;break;}else{label=8;break;}
 case 8: 
 var $30=HEAP32[(($1)>>2)];
 var $31=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]($31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $34=$_pre;label=11;break;
 case 10: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1,0); var $33$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 11: 
 var $34;
 HEAP32[(($1)>>2)]=244;
 var $35=$12>>>2;
 var $36=(($34+($16<<2))|0);
 HEAP32[(($__n)>>2)]=$36;
 var $37=HEAP32[(($5)>>2)];
 var $38=(($37+($35<<2))|0);
 HEAP32[(($__e)>>2)]=$38;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__pat=(sp)+(232);
 var $__dp=(sp)+(240);
 var $__ts=(sp)+(248);
 var $__grp=(sp)+(256);
 var $__grp289=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$3;
 var $4=(($__digits)|0);
 var $5=_snprintf($3,100,2672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($5>>>0)>99;
 if($6){label=2;break;}else{var $__db_0=$4;var $__n_0=$5;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=16;break;}
 case 2: 
 var $8=HEAP8[(19864)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=___cxa_guard_acquire(19864);
 var $12=($11|0)==0;
 if($12){label=7;break;}else{label=4;break;}
 case 4: 
 var $14=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$14;
 label=7;break;
 case 6: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $eh_lpad_body$1=$17$1;var $eh_lpad_body$0=$17$0;var $__hn_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $19=HEAP32[((17856)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$19,2672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;label=11;break; }
 case 8: 
 var $22=HEAP32[(($__bb)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=13;break;}
 case 9: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 HEAP32[(($26)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;label=11;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $__hn_sroa_0_0;
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body$1=$28$1;var $eh_lpad_body$0=$28$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;label=12;break;
 case 12: 
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $29=$eh_lpad_body$0;
 var $30=$eh_lpad_body$1;
 var $__hn_sroa_0_217=$__hn_sroa_0_0_lpad_body;var $_225518=$29;var $_219=$30;label=83;break;
 case 13: 
 var $31=_malloc($20);
 var $32=($31|0)==0;
 if($32){label=14;break;}else{var $__db_0=$31;var $__n_0=$20;var $__hn_sroa_0_1=$22;var $__hd_sroa_0_1=$31;label=16;break;}
 case 14: 
 var $34=___cxa_allocate_exception(4);
 var $35=$34;
 HEAP32[(($35)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($34,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { var $__hn_sroa_0_0=$22;label=11;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 var $37=(($__iob+28)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=$38;
 var $40=(($38+4)|0);
 var $41=$40;
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+1,tempValue);
 var $43=$__p_i_i_i;
 var $44=HEAP32[((19288)>>2)];
 var $45=($44|0)==-1;
 if($45){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=46;break; }
 case 18: 
 var $47=HEAP32[((19292)>>2)];
 var $48=((($47)-(1))|0);
 var $49=(($38+12)|0);
 var $50=$49;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($38+8)|0);
 var $53=$52;
 var $54=HEAP32[(($53)>>2)];
 var $55=$51;
 var $56=$54;
 var $57=((($55)-($56))|0);
 var $58=$57>>2;
 var $59=($58>>>0)>($48>>>0);
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 var $60=(($54+($48<<2))|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)==0;
 if($62){label=20;break;}else{label=22;break;}
 case 20: 
 var $63=___cxa_allocate_exception(4);
 var $64=$63;
 HEAP32[(($64)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($63,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=46;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $65=$61;
 var $66=HEAP32[(($__bb)>>2)];
 var $67=(($66+$__n_0)|0);
 var $68=$61;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+32)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$71]($65,$66,$67,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=46;break; }
 case 23: 
 var $73=($__n_0|0)==0;
 if($73){var $78=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $75=HEAP32[(($__bb)>>2)];
 var $76=HEAP8[($75)];
 var $77=(($76<<24)>>24)==45;
 var $78=$77;label=25;break;
 case 25: 
 var $78;
 HEAP32[(($__grp289)>>2)]=0; HEAP32[((($__grp289)+(4))>>2)]=0; HEAP32[((($__grp289)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$78,$39,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=47;break; }
 case 26: 
 var $80=(($__mbuf)|0);
 var $81=HEAP32[(($__fd)>>2)];
 var $82=($__n_0|0)>($81|0);
 if($82){label=27;break;}else{label=34;break;}
 case 27: 
 var $84=((($__n_0)-($81))|0);
 var $85=$84<<1;
 var $86=HEAP8[($2)];
 var $87=($86&255);
 var $88=$87&1;
 var $89=($88|0)==0;
 if($89){label=29;break;}else{label=28;break;}
 case 28: 
 var $91=(($__sn+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $95=$92;label=30;break;
 case 29: 
 var $94=$87>>>1;
 var $95=$94;label=30;break;
 case 30: 
 var $95;
 var $96=HEAP8[($1)];
 var $97=($96&255);
 var $98=$97&1;
 var $99=($98|0)==0;
 if($99){label=32;break;}else{label=31;break;}
 case 31: 
 var $101=(($__sym+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $105=$102;label=33;break;
 case 32: 
 var $104=$97>>>1;
 var $105=$104;label=33;break;
 case 33: 
 var $105;
 var $106=$85|1;
 var $107=((($106)+($95))|0);
 var $108=((($107)+($105))|0);
 var $_pn=$108;label=41;break;
 case 34: 
 var $110=HEAP8[($2)];
 var $111=($110&255);
 var $112=$111&1;
 var $113=($112|0)==0;
 if($113){label=36;break;}else{label=35;break;}
 case 35: 
 var $115=(($__sn+4)|0);
 var $116=HEAP32[(($115)>>2)];
 var $119=$116;label=37;break;
 case 36: 
 var $118=$111>>>1;
 var $119=$118;label=37;break;
 case 37: 
 var $119;
 var $120=HEAP8[($1)];
 var $121=($120&255);
 var $122=$121&1;
 var $123=($122|0)==0;
 if($123){label=39;break;}else{label=38;break;}
 case 38: 
 var $125=(($__sym+4)|0);
 var $126=HEAP32[(($125)>>2)];
 var $129=$126;label=40;break;
 case 39: 
 var $128=$121>>>1;
 var $129=$128;label=40;break;
 case 40: 
 var $129;
 var $130=((($119)+(2))|0);
 var $131=((($130)+($129))|0);
 var $_pn=$131;label=41;break;
 case 41: 
 var $_pn;
 var $133=((($_pn)+($81))|0);
 var $134=($133>>>0)>100;
 if($134){label=42;break;}else{var $__mb_0=$80;var $__hw_sroa_0_1=0;label=50;break;}
 case 42: 
 var $135=_malloc($133);
 var $136=($135|0)==0;
 if($136){label=43;break;}else{var $__mb_0=$135;var $__hw_sroa_0_1=$135;label=50;break;}
 case 43: 
 var $138=___cxa_allocate_exception(4);
 var $139=$138;
 HEAP32[(($139)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($138,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=45;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $141=$140$0;
 var $142=$140$1;
 var $_0=$142;var $_0253=$141;label=70;break;
 case 46: 
 var $144$0 = ___cxa_find_matching_catch(-1, -1); var $144$1 = tempRet0;
 var $145=$144$0;
 var $146=$144$1;
 var $_1=$146;var $_1254=$145;label=79;break;
 case 47: 
 var $148$0 = ___cxa_find_matching_catch(-1, -1); var $148$1 = tempRet0;
 var $149=$148$0;
 var $150=$148$1;
 var $_0=$150;var $_0253=$149;label=70;break;
 case 48: 
 var $152$0 = ___cxa_find_matching_catch(-1, -1); var $152$1 = tempRet0;
 var $153=$152$0;
 var $154=$152$1;
 var $155=($__hw_sroa_0_1|0)==0;
 if($155){var $_0=$154;var $_0253=$153;label=70;break;}else{label=49;break;}
 case 49: 
 _free($__hw_sroa_0_1);
 var $_0=$154;var $_0253=$153;label=70;break;
 case 50: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $158=(($__iob+4)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=(($__db_0+$__n_0)|0);
 var $161=HEAP8[($__dp)];
 var $162=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$159,$__db_0,$160,$65,$78,$__pat,$161,$162,$__grp,$__sym,$__sn,$81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=48;break; }
 case 51: 
 var $164=(($__s)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=HEAP32[(($__mi)>>2)];
 var $167=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$165,$__mb_0,$166,$167,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=48;break; }
 case 52: 
 var $169=($__hw_sroa_0_1|0)==0;
 if($169){label=54;break;}else{label=53;break;}
 case 53: 
 _free($__hw_sroa_0_1);
 label=54;break;
 case 54: 
 var $171=HEAP8[($2)];
 var $172=$171&1;
 var $173=(($172<<24)>>24)==0;
 if($173){label=57;break;}else{label=55;break;}
 case 55: 
 var $175=(($__sn+8)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($176|0)==0;
 if($177){label=57;break;}else{label=56;break;}
 case 56: 
 _free($176);
 label=57;break;
 case 57: 
 var $179=HEAP8[($1)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=60;break;}else{label=58;break;}
 case 58: 
 var $183=(($__sym+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($184|0)==0;
 if($185){label=60;break;}else{label=59;break;}
 case 59: 
 _free($184);
 label=60;break;
 case 60: 
 var $187=HEAP8[($__grp289)];
 var $188=$187&1;
 var $189=(($188<<24)>>24)==0;
 if($189){label=63;break;}else{label=61;break;}
 case 61: 
 var $191=(($__grp+8)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)==0;
 if($193){label=63;break;}else{label=62;break;}
 case 62: 
 _free($192);
 label=63;break;
 case 63: 
 var $195=(($38+4)|0);
 var $196=$195;
 var $197=(tempValue=HEAP32[(($196)>>2)],HEAP32[(($196)>>2)]=tempValue+-1,tempValue);
 var $198=($197|0)==0;
 if($198){label=64;break;}else{label=65;break;}
 case 64: 
 var $200=$38;
 var $201=$38;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+8)|0);
 var $204=HEAP32[(($203)>>2)];
 FUNCTION_TABLE[$204]($200);
 label=65;break;
 case 65: 
 var $205=($__hd_sroa_0_1|0)==0;
 if($205){label=67;break;}else{label=66;break;}
 case 66: 
 _free($__hd_sroa_0_1);
 label=67;break;
 case 67: 
 var $207=($__hn_sroa_0_1|0)==0;
 if($207){label=69;break;}else{label=68;break;}
 case 68: 
 _free($__hn_sroa_0_1);
 label=69;break;
 case 69: 
 STACKTOP=sp;return;
 case 70: 
 var $_0253;
 var $_0;
 var $209=HEAP8[($2)];
 var $210=$209&1;
 var $211=(($210<<24)>>24)==0;
 if($211){label=73;break;}else{label=71;break;}
 case 71: 
 var $213=(($__sn+8)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($214|0)==0;
 if($215){label=73;break;}else{label=72;break;}
 case 72: 
 _free($214);
 label=73;break;
 case 73: 
 var $217=HEAP8[($1)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=76;break;}else{label=74;break;}
 case 74: 
 var $221=(($__sym+8)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($222|0)==0;
 if($223){label=76;break;}else{label=75;break;}
 case 75: 
 _free($222);
 label=76;break;
 case 76: 
 var $225=HEAP8[($__grp289)];
 var $226=$225&1;
 var $227=(($226<<24)>>24)==0;
 if($227){var $_1=$_0;var $_1254=$_0253;label=79;break;}else{label=77;break;}
 case 77: 
 var $229=(($__grp+8)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)==0;
 if($231){var $_1=$_0;var $_1254=$_0253;label=79;break;}else{label=78;break;}
 case 78: 
 _free($230);
 var $_1=$_0;var $_1254=$_0253;label=79;break;
 case 79: 
 var $_1254;
 var $_1;
 var $233=(($38+4)|0);
 var $234=$233;
 var $235=(tempValue=HEAP32[(($234)>>2)],HEAP32[(($234)>>2)]=tempValue+-1,tempValue);
 var $236=($235|0)==0;
 if($236){label=80;break;}else{label=81;break;}
 case 80: 
 var $238=$38;
 var $239=$38;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+8)|0);
 var $242=HEAP32[(($241)>>2)];
 FUNCTION_TABLE[$242]($238);
 label=81;break;
 case 81: 
 var $243=($__hd_sroa_0_1|0)==0;
 if($243){var $__hn_sroa_0_217=$__hn_sroa_0_1;var $_225518=$_1254;var $_219=$_1;label=83;break;}else{label=82;break;}
 case 82: 
 _free($__hd_sroa_0_1);
 var $__hn_sroa_0_217=$__hn_sroa_0_1;var $_225518=$_1254;var $_219=$_1;label=83;break;
 case 83: 
 var $_219;
 var $_225518;
 var $__hn_sroa_0_217;
 var $245=($__hn_sroa_0_217|0)==0;
 if($245){label=85;break;}else{label=84;break;}
 case 84: 
 _free($__hn_sroa_0_217);
 label=85;break;
 case 85: 
 var $247$0=$_225518;
 var $247$1=0;
 var $248$0=$247$0;
 var $248$1=$_219;
 ___resumeException($248$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc_0_0_val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i519=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast518=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast517=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast516=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $22=$__p_i_i_i;
 var $23=HEAP32[((19760)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19760;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19760,$22);
 label=4;break;
 case 4: 
 var $26=HEAP32[((19764)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($__loc_0_0_val+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($__loc_0_0_val+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5880;
 ___cxa_throw($40,13520,(594));
 throw "Reached an unreachable!";
 case 7: 
 var $42=$38;
 var $43=$38;
 var $44=HEAP32[(($43)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $46=(($44+44)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($tmpcast518,$42);
 var $48=$__pat;
 var $49=HEAP32[(($1)>>2)];
 tempBigInt=$49;HEAP8[($48)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($48)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($48)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($48)+(3))|0)]=tempBigInt&0xff;
 var $50=$38;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+32)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($2,$42);
 var $54=$__sn;
 var $55=HEAP8[($54)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=10;break;}else{label=9;break;}
 case 9: 
 var $59=(($__sn+8)|0);
 var $60=HEAP32[(($59)>>2)];
 HEAP8[($60)]=0;
 var $61=(($__sn+4)|0);
 HEAP32[(($61)>>2)]=0;
 label=11;break;
 case 10: 
 var $63=$__sn;
 var $64=(($63+1)|0);
 HEAP8[($64)]=0;
 HEAP8[($54)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1,0); var $66$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 label=20;break;
 case 14: 
 var $68=(($44+40)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($tmpcast517,$42);
 var $70=$__pat;
 var $71=HEAP32[(($4)>>2)];
 tempBigInt=$71;HEAP8[($70)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($70)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($70)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($70)+(3))|0)]=tempBigInt&0xff;
 var $72=$38;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+28)|0);
 var $75=HEAP32[(($74)>>2)];
 FUNCTION_TABLE[$75]($5,$42);
 var $76=$__sn;
 var $77=HEAP8[($76)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=16;break;}else{label=15;break;}
 case 15: 
 var $81=(($__sn+8)|0);
 var $82=HEAP32[(($81)>>2)];
 HEAP8[($82)]=0;
 var $83=(($__sn+4)|0);
 HEAP32[(($83)>>2)]=0;
 label=17;break;
 case 16: 
 var $85=$__sn;
 var $86=(($85+1)|0);
 HEAP8[($86)]=0;
 HEAP8[($76)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $88$0 = ___cxa_find_matching_catch(-1, -1,0); var $88$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($76)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 label=20;break;
 case 20: 
 var $89=$38;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($42);
 HEAP8[($__dp)]=$93;
 var $94=HEAP32[(($89)>>2)];
 var $95=(($94+16)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=FUNCTION_TABLE[$96]($42);
 HEAP8[($__ts)]=$97;
 var $98=$38;
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+20)|0);
 var $101=HEAP32[(($100)>>2)];
 FUNCTION_TABLE[$101]($7,$42);
 var $102=$__grp;
 var $103=HEAP8[($102)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=22;break;}else{label=21;break;}
 case 21: 
 var $107=(($__grp+8)|0);
 var $108=HEAP32[(($107)>>2)];
 HEAP8[($108)]=0;
 var $109=(($__grp+4)|0);
 HEAP32[(($109)>>2)]=0;
 label=23;break;
 case 22: 
 var $111=$__grp;
 var $112=(($111+1)|0);
 HEAP8[($112)]=0;
 HEAP8[($102)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $114$0 = ___cxa_find_matching_catch(-1, -1,0); var $114$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $115=HEAP32[(($98)>>2)];
 var $116=(($115+24)|0);
 var $117=HEAP32[(($116)>>2)];
 FUNCTION_TABLE[$117]($9,$42);
 var $118=$__sym;
 var $119=HEAP8[($118)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){label=27;break;}else{label=26;break;}
 case 26: 
 var $123=(($__sym+8)|0);
 var $124=HEAP32[(($123)>>2)];
 HEAP8[($124)]=0;
 var $125=(($__sym+4)|0);
 HEAP32[(($125)>>2)]=0;
 label=28;break;
 case 27: 
 var $127=$__sym;
 var $128=(($127+1)|0);
 HEAP8[($128)]=0;
 HEAP8[($118)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $130$0 = ___cxa_find_matching_catch(-1, -1,0); var $130$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($118)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 var $131=$38;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+36)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=FUNCTION_TABLE[$134]($42);
 var $storemerge=$135;label=60;break;
 case 31: 
 var $137=$__p_i_i_i519;
 var $138=HEAP32[((19768)>>2)];
 var $139=($138|0)==-1;
 if($139){label=33;break;}else{label=32;break;}
 case 32: 
 var $_sroa_016_0__idx_i_i520=(($__p_i_i_i519)|0);
 HEAP32[(($_sroa_016_0__idx_i_i520)>>2)]=19768;
 var $_sroa_117_4__idx18_i_i521=(($__p_i_i_i519+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i521)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i522=(($__p_i_i_i519+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i522)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19768,$137);
 label=33;break;
 case 33: 
 var $141=HEAP32[((19772)>>2)];
 var $142=((($141)-(1))|0);
 var $143=(($__loc_0_0_val+12)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=(($__loc_0_0_val+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=$144;
 var $148=$146;
 var $149=((($147)-($148))|0);
 var $150=$149>>2;
 var $151=($150>>>0)>($142>>>0);
 if($151){label=34;break;}else{label=35;break;}
 case 34: 
 var $152=(($146+($142<<2))|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==0;
 if($154){label=35;break;}else{label=36;break;}
 case 35: 
 var $155=___cxa_allocate_exception(4);
 var $156=$155;
 HEAP32[(($156)>>2)]=5880;
 ___cxa_throw($155,13520,(594));
 throw "Reached an unreachable!";
 case 36: 
 var $157=$153;
 var $158=$153;
 var $159=HEAP32[(($158)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $161=(($159+44)|0);
 var $162=HEAP32[(($161)>>2)];
 FUNCTION_TABLE[$162]($tmpcast516,$157);
 var $163=$__pat;
 var $164=HEAP32[(($11)>>2)];
 tempBigInt=$164;HEAP8[($163)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($163)+(3))|0)]=tempBigInt&0xff;
 var $165=$153;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+32)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($12,$157);
 var $169=$__sn;
 var $170=HEAP8[($169)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=39;break;}else{label=38;break;}
 case 38: 
 var $174=(($__sn+8)|0);
 var $175=HEAP32[(($174)>>2)];
 HEAP8[($175)]=0;
 var $176=(($__sn+4)|0);
 HEAP32[(($176)>>2)]=0;
 label=40;break;
 case 39: 
 var $178=$__sn;
 var $179=(($178+1)|0);
 HEAP8[($179)]=0;
 HEAP8[($169)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $181$0 = ___cxa_find_matching_catch(-1, -1,0); var $181$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($169)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($169)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($169)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 label=49;break;
 case 43: 
 var $183=(($159+40)|0);
 var $184=HEAP32[(($183)>>2)];
 FUNCTION_TABLE[$184]($tmpcast,$157);
 var $185=$__pat;
 var $186=HEAP32[(($14)>>2)];
 tempBigInt=$186;HEAP8[($185)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($185)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($185)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($185)+(3))|0)]=tempBigInt&0xff;
 var $187=$153;
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+28)|0);
 var $190=HEAP32[(($189)>>2)];
 FUNCTION_TABLE[$190]($15,$157);
 var $191=$__sn;
 var $192=HEAP8[($191)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=45;break;}else{label=44;break;}
 case 44: 
 var $196=(($__sn+8)|0);
 var $197=HEAP32[(($196)>>2)];
 HEAP8[($197)]=0;
 var $198=(($__sn+4)|0);
 HEAP32[(($198)>>2)]=0;
 label=46;break;
 case 45: 
 var $200=$__sn;
 var $201=(($200+1)|0);
 HEAP8[($201)]=0;
 HEAP8[($191)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $203$0 = ___cxa_find_matching_catch(-1, -1,0); var $203$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($191)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($191)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($191)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 label=49;break;
 case 49: 
 var $204=$153;
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+12)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=FUNCTION_TABLE[$207]($157);
 HEAP8[($__dp)]=$208;
 var $209=HEAP32[(($204)>>2)];
 var $210=(($209+16)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=FUNCTION_TABLE[$211]($157);
 HEAP8[($__ts)]=$212;
 var $213=$153;
 var $214=HEAP32[(($213)>>2)];
 var $215=(($214+20)|0);
 var $216=HEAP32[(($215)>>2)];
 FUNCTION_TABLE[$216]($17,$157);
 var $217=$__grp;
 var $218=HEAP8[($217)];
 var $219=$218&1;
 var $220=(($219<<24)>>24)==0;
 if($220){label=51;break;}else{label=50;break;}
 case 50: 
 var $222=(($__grp+8)|0);
 var $223=HEAP32[(($222)>>2)];
 HEAP8[($223)]=0;
 var $224=(($__grp+4)|0);
 HEAP32[(($224)>>2)]=0;
 label=52;break;
 case 51: 
 var $226=$__grp;
 var $227=(($226+1)|0);
 HEAP8[($227)]=0;
 HEAP8[($217)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $229$0 = ___cxa_find_matching_catch(-1, -1,0); var $229$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($217)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($217)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($217)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $230=HEAP32[(($213)>>2)];
 var $231=(($230+24)|0);
 var $232=HEAP32[(($231)>>2)];
 FUNCTION_TABLE[$232]($19,$157);
 var $233=$__sym;
 var $234=HEAP8[($233)];
 var $235=$234&1;
 var $236=(($235<<24)>>24)==0;
 if($236){label=56;break;}else{label=55;break;}
 case 55: 
 var $238=(($__sym+8)|0);
 var $239=HEAP32[(($238)>>2)];
 HEAP8[($239)]=0;
 var $240=(($__sym+4)|0);
 HEAP32[(($240)>>2)]=0;
 label=57;break;
 case 56: 
 var $242=$__sym;
 var $243=(($242+1)|0);
 HEAP8[($243)]=0;
 HEAP8[($233)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $245$0 = ___cxa_find_matching_catch(-1, -1,0); var $245$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($233)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($233)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($233)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $246=$153;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+36)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($157);
 var $storemerge=$250;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($2+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__sym;
 var $9=$__flags&512;
 var $10=($9|0)==0;
 var $11=(($7+1)|0);
 var $12=(($__sym+4)|0);
 var $13=(($__sym+8)|0);
 var $14=(($__ct+8)|0);
 var $15=($__fd|0)>0;
 var $16=$__grp;
 var $17=$__grp;
 var $18=(($16+1)|0);
 var $19=(($__grp+8)|0);
 var $20=(($__grp+4)|0);
 var $21=(((-$__fd))|0);
 var $_0363405=$__db;var $__p_0406=0;label=2;break;
 case 2: 
 var $__p_0406;
 var $_0363405;
 var $23=(($__pat+$__p_0406)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=24;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_0363405;label=62;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_0363405;label=62;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_0363405;label=62;break;
 case 5: 
 var $37=HEAP8[($3)];
 var $38=($37&255);
 var $39=$38&1;
 var $40=($39|0)==0;
 if($40){label=7;break;}else{label=6;break;}
 case 6: 
 var $42=HEAP32[(($6)>>2)];
 var $45=$42;label=8;break;
 case 7: 
 var $44=$38>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_0363405;label=62;break;}else{label=9;break;}
 case 9: 
 var $48=$37&1;
 var $49=(($48<<24)>>24)==0;
 if($49){var $52=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $51=HEAP32[(($5)>>2)];
 var $52=$51;label=11;break;
 case 11: 
 var $52;
 var $53=HEAP8[($52)];
 var $54=HEAP32[(($__me)>>2)];
 var $55=(($54+1)|0);
 HEAP32[(($__me)>>2)]=$55;
 HEAP8[($54)]=$53;
 var $_2=$_0363405;label=62;break;
 case 12: 
 var $57=HEAP8[($8)];
 var $58=($57&255);
 var $59=$58&1;
 var $60=($59|0)==0;
 if($60){label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($12)>>2)];
 var $65=$62;label=15;break;
 case 14: 
 var $64=$58>>>1;
 var $65=$64;label=15;break;
 case 15: 
 var $65;
 var $66=($65|0)==0;
 var $brmerge=$66|$10;
 if($brmerge){var $_2=$_0363405;label=62;break;}else{label=16;break;}
 case 16: 
 var $68=$57&1;
 var $69=(($68<<24)>>24)==0;
 if($69){var $72=$11;label=18;break;}else{label=17;break;}
 case 17: 
 var $71=HEAP32[(($13)>>2)];
 var $72=$71;label=18;break;
 case 18: 
 var $72;
 if($60){label=20;break;}else{label=19;break;}
 case 19: 
 var $74=HEAP32[(($12)>>2)];
 var $77=$74;label=21;break;
 case 20: 
 var $76=$58>>>1;
 var $77=$76;label=21;break;
 case 21: 
 var $77;
 var $78=(($72+$77)|0);
 var $79=HEAP32[(($__me)>>2)];
 var $80=($72|0)==($78|0);
 if($80){var $_0_lcssa=$79;label=23;break;}else{var $_sroa_0364_0401=$72;var $_0402=$79;label=22;break;}
 case 22: 
 var $_0402;
 var $_sroa_0364_0401;
 var $81=HEAP8[($_sroa_0364_0401)];
 HEAP8[($_0402)]=$81;
 var $82=(($_sroa_0364_0401+1)|0);
 var $83=(($_0402+1)|0);
 var $84=($82|0)==($78|0);
 if($84){var $_0_lcssa=$83;label=23;break;}else{var $_sroa_0364_0401=$82;var $_0402=$83;label=22;break;}
 case 23: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_0363405;label=62;break;
 case 24: 
 var $86=HEAP32[(($__me)>>2)];
 var $87=(($_0363405+1)|0);
 var $__0363=($__neg?$87:$_0363405);
 var $__d_0=$__0363;label=25;break;
 case 25: 
 var $__d_0;
 var $89=($__d_0>>>0)<($__de>>>0);
 if($89){label=26;break;}else{label=28;break;}
 case 26: 
 var $91=HEAP8[($__d_0)];
 var $92=(($91<<24)>>24)<0;
 if($92){label=28;break;}else{label=27;break;}
 case 27: 
 var $93=(($91<<24)>>24);
 var $94=HEAP32[(($14)>>2)];
 var $95=(($94+($93<<1))|0);
 var $96=HEAP16[(($95)>>1)];
 var $97=$96&2048;
 var $98=(($97<<16)>>16)==0;
 var $99=(($__d_0+1)|0);
 if($98){label=28;break;}else{var $__d_0=$99;label=25;break;}
 case 28: 
 var $__d_0_lcssa413=$__d_0;
 if($15){label=29;break;}else{var $__d_2=$__d_0;label=38;break;}
 case 29: 
 var $100=($__d_0>>>0)>($__0363>>>0);
 if($100){label=30;break;}else{var $__f_0_lcssa427=$__fd;var $__d_1_lcssa429=$__d_0;label=34;break;}
 case 30: 
 var $101=(((-$__d_0_lcssa413))|0);
 var $scevgep=(($__0363+$101)|0);
 var $scevgep414=$scevgep;
 var $102=($scevgep414>>>0)<($21>>>0);
 var $umax=($102?$21:$scevgep414);
 var $umax415=$umax;
 var $scevgep416=(($umax415+$__fd)|0);
 var $scevgep416417=$scevgep416;
 var $__d_1382=$__d_0;var $__f_0383=$__fd;var $104=$86;label=31;break;
 case 31: 
 var $104;
 var $__f_0383;
 var $__d_1382;
 var $105=((($__d_1382)-(1))|0);
 var $106=HEAP8[($105)];
 var $107=(($104+1)|0);
 HEAP32[(($__me)>>2)]=$107;
 HEAP8[($104)]=$106;
 var $108=((($__f_0383)-(1))|0);
 var $109=($105>>>0)>($__0363>>>0);
 var $110=($108|0)>0;
 var $or_cond=$109&$110;
 if($or_cond){label=32;break;}else{label=33;break;}
 case 32: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_1382=$105;var $__f_0383=$108;var $104=$_pre;label=31;break;
 case 33: 
 var $scevgep418=(($__d_0+$umax)|0);
 if($110){var $__f_0_lcssa427=$scevgep416417;var $__d_1_lcssa429=$scevgep418;label=34;break;}else{var $115=0;var $__f_0_lcssa426=$scevgep416417;var $__d_1_lcssa428=$scevgep418;label=35;break;}
 case 34: 
 var $__d_1_lcssa429;
 var $__f_0_lcssa427;
 var $111=HEAP32[(($1)>>2)];
 var $112=(($111+28)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=FUNCTION_TABLE[$113]($__ct,48);
 var $115=$114;var $__f_0_lcssa426=$__f_0_lcssa427;var $__d_1_lcssa428=$__d_1_lcssa429;label=35;break;
 case 35: 
 var $__d_1_lcssa428;
 var $__f_0_lcssa426;
 var $115;
 var $116=($__f_0_lcssa426|0)>0;
 var $117=HEAP32[(($__me)>>2)];
 var $118=(($117+1)|0);
 HEAP32[(($__me)>>2)]=$118;
 if($116){var $__f_1389=$__f_0_lcssa426;var $119=$117;label=36;break;}else{var $_lcssa388=$117;label=37;break;}
 case 36: 
 var $119;
 var $__f_1389;
 HEAP8[($119)]=$115;
 var $120=((($__f_1389)-(1))|0);
 var $121=($120|0)>0;
 var $122=HEAP32[(($__me)>>2)];
 var $123=(($122+1)|0);
 HEAP32[(($__me)>>2)]=$123;
 if($121){var $__f_1389=$120;var $119=$122;label=36;break;}else{var $_lcssa388=$122;label=37;break;}
 case 37: 
 var $_lcssa388;
 HEAP8[($_lcssa388)]=$__dp;
 var $__d_2=$__d_1_lcssa428;label=38;break;
 case 38: 
 var $__d_2;
 var $125=($__d_2|0)==($__0363|0);
 if($125){label=39;break;}else{label=40;break;}
 case 39: 
 var $127=HEAP32[(($1)>>2)];
 var $128=(($127+28)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=FUNCTION_TABLE[$129]($__ct,48);
 var $131=HEAP32[(($__me)>>2)];
 var $132=(($131+1)|0);
 HEAP32[(($__me)>>2)]=$132;
 HEAP8[($131)]=$130;
 label=59;break;
 case 40: 
 var $134=HEAP8[($17)];
 var $135=($134&255);
 var $136=$135&1;
 var $137=($136|0)==0;
 if($137){label=42;break;}else{label=41;break;}
 case 41: 
 var $139=HEAP32[(($20)>>2)];
 var $142=$139;label=43;break;
 case 42: 
 var $141=$135>>>1;
 var $142=$141;label=43;break;
 case 43: 
 var $142;
 var $143=($142|0)==0;
 if($143){var $__d_3393=$__d_2;var $__ng_0394=0;var $__ig_0395=0;var $__gl_0396=-1;label=47;break;}else{label=44;break;}
 case 44: 
 var $145=$134&1;
 var $146=(($145<<24)>>24)==0;
 if($146){var $149=$18;label=46;break;}else{label=45;break;}
 case 45: 
 var $148=HEAP32[(($19)>>2)];
 var $149=$148;label=46;break;
 case 46: 
 var $149;
 var $150=HEAP8[($149)];
 var $151=(($150<<24)>>24);
 var $__d_3393=$__d_2;var $__ng_0394=0;var $__ig_0395=0;var $__gl_0396=$151;label=47;break;
 case 47: 
 var $__gl_0396;
 var $__ig_0395;
 var $__ng_0394;
 var $__d_3393;
 var $152=($__ng_0394|0)==($__gl_0396|0);
 if($152){label=48;break;}else{var $__gl_1=$__gl_0396;var $__ig_1=$__ig_0395;var $__ng_1=$__ng_0394;label=58;break;}
 case 48: 
 var $154=HEAP32[(($__me)>>2)];
 var $155=(($154+1)|0);
 HEAP32[(($__me)>>2)]=$155;
 HEAP8[($154)]=$__ts;
 var $156=((($__ig_0395)+(1))|0);
 var $157=HEAP8[($17)];
 var $158=($157&255);
 var $159=$158&1;
 var $160=($159|0)==0;
 if($160){label=50;break;}else{label=49;break;}
 case 49: 
 var $162=HEAP32[(($20)>>2)];
 var $165=$162;label=51;break;
 case 50: 
 var $164=$158>>>1;
 var $165=$164;label=51;break;
 case 51: 
 var $165;
 var $166=($156>>>0)<($165>>>0);
 if($166){label=52;break;}else{var $__gl_1=$__gl_0396;var $__ig_1=$156;var $__ng_1=0;label=58;break;}
 case 52: 
 var $168=$157&1;
 var $169=(($168<<24)>>24)==0;
 if($169){var $172=$18;label=54;break;}else{label=53;break;}
 case 53: 
 var $171=HEAP32[(($19)>>2)];
 var $172=$171;label=54;break;
 case 54: 
 var $172;
 var $173=(($172+$156)|0);
 var $174=HEAP8[($173)];
 var $175=(($174<<24)>>24)==127;
 if($175){var $__gl_1=-1;var $__ig_1=$156;var $__ng_1=0;label=58;break;}else{label=55;break;}
 case 55: 
 if($169){var $179=$18;label=57;break;}else{label=56;break;}
 case 56: 
 var $178=HEAP32[(($19)>>2)];
 var $179=$178;label=57;break;
 case 57: 
 var $179;
 var $180=(($179+$156)|0);
 var $181=HEAP8[($180)];
 var $182=(($181<<24)>>24);
 var $__gl_1=$182;var $__ig_1=$156;var $__ng_1=0;label=58;break;
 case 58: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $183=((($__d_3393)-(1))|0);
 var $184=HEAP8[($183)];
 var $185=HEAP32[(($__me)>>2)];
 var $186=(($185+1)|0);
 HEAP32[(($__me)>>2)]=$186;
 HEAP8[($185)]=$184;
 var $187=((($__ng_1)+(1))|0);
 var $188=($183|0)==($__0363|0);
 if($188){label=59;break;}else{var $__d_3393=$183;var $__ng_0394=$187;var $__ig_0395=$__ig_1;var $__gl_0396=$__gl_1;label=47;break;}
 case 59: 
 var $189=HEAP32[(($__me)>>2)];
 var $190=($86|0)==($189|0);
 if($190){var $_2=$__0363;label=62;break;}else{label=60;break;}
 case 60: 
 var $191=((($189)-(1))|0);
 var $192=($86>>>0)<($191>>>0);
 if($192){var $_0360399=$86;var $193=$191;label=61;break;}else{var $_2=$__0363;label=62;break;}
 case 61: 
 var $193;
 var $_0360399;
 var $194=HEAP8[($_0360399)];
 var $195=HEAP8[($193)];
 HEAP8[($_0360399)]=$195;
 HEAP8[($193)]=$194;
 var $196=(($_0360399+1)|0);
 var $197=((($193)-(1))|0);
 var $198=($196>>>0)<($197>>>0);
 if($198){var $_0360399=$196;var $193=$197;label=61;break;}else{var $_2=$__0363;label=62;break;}
 case 62: 
 var $_2;
 var $199=((($__p_0406)+(1))|0);
 var $200=($199>>>0)<4;
 if($200){var $_0363405=$_2;var $__p_0406=$199;label=2;break;}else{label=63;break;}
 case 63: 
 var $202=HEAP8[($3)];
 var $203=($202&255);
 var $204=$203&1;
 var $205=($204|0)==0;
 if($205){label=65;break;}else{label=64;break;}
 case 64: 
 var $207=HEAP32[(($6)>>2)];
 var $210=$207;label=66;break;
 case 65: 
 var $209=$203>>>1;
 var $210=$209;label=66;break;
 case 66: 
 var $210;
 var $211=($210>>>0)>1;
 if($211){label=67;break;}else{label=75;break;}
 case 67: 
 var $213=$202&1;
 var $214=(($213<<24)>>24)==0;
 if($214){var $217=$4;label=69;break;}else{label=68;break;}
 case 68: 
 var $216=HEAP32[(($5)>>2)];
 var $217=$216;label=69;break;
 case 69: 
 var $217;
 if($205){label=71;break;}else{label=70;break;}
 case 70: 
 var $219=HEAP32[(($6)>>2)];
 var $222=$219;label=72;break;
 case 71: 
 var $221=$203>>>1;
 var $222=$221;label=72;break;
 case 72: 
 var $222;
 var $223=(($217+$222)|0);
 var $224=HEAP32[(($__me)>>2)];
 var $_sroa_0373_0378=(($217+1)|0);
 var $225=($_sroa_0373_0378|0)==($223|0);
 if($225){var $_0362_lcssa=$224;label=74;break;}else{var $_0362379=$224;var $_sroa_0373_0380=$_sroa_0373_0378;label=73;break;}
 case 73: 
 var $_sroa_0373_0380;
 var $_0362379;
 var $226=HEAP8[($_sroa_0373_0380)];
 HEAP8[($_0362379)]=$226;
 var $227=(($_0362379+1)|0);
 var $_sroa_0373_0=(($_sroa_0373_0380+1)|0);
 var $228=($_sroa_0373_0|0)==($223|0);
 if($228){var $_0362_lcssa=$227;label=74;break;}else{var $_0362379=$227;var $_sroa_0373_0380=$_sroa_0373_0;label=73;break;}
 case 74: 
 var $_0362_lcssa;
 HEAP32[(($__me)>>2)]=$_0362_lcssa;
 label=75;break;
 case 75: 
 var $230=$__flags&176;
 if(($230|0)==32){ label=76;break;}else if(($230|0)==16){ label=78;break;}else{label=77;break;}
 case 76: 
 var $232=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$232;
 label=78;break;
 case 77: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=78;break;
 case 78: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__pat=(sp)+(16);
 var $__dp=(sp)+(24);
 var $__ts=(sp)+(32);
 var $__grp=(sp)+(40);
 var $__grp246=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($__iob+28)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($4+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=$__p_i_i_i;
 var $10=HEAP32[((19288)>>2)];
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $13=HEAP32[((19292)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($4+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($4+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$27;
 var $32=$__digits;
 var $33=$__digits;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$35&1;
 var $37=($36|0)==0;
 if($37){label=9;break;}else{label=8;break;}
 case 8: 
 var $39=(($__digits+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $43=$40;label=10;break;
 case 9: 
 var $42=$35>>>1;
 var $43=$42;label=10;break;
 case 10: 
 var $43;
 var $44=($43|0)==0;
 if($44){var $61=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $46=$34&1;
 var $47=(($46<<24)>>24)==0;
 if($47){label=13;break;}else{label=12;break;}
 case 12: 
 var $49=(($__digits+8)|0);
 var $50=HEAP32[(($49)>>2)];
 var $53=$50;label=14;break;
 case 13: 
 var $52=(($32+1)|0);
 var $53=$52;label=14;break;
 case 14: 
 var $53;
 var $54=HEAP8[($53)];
 var $55=$27;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($31,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $60=(($54<<24)>>24)==(($59<<24)>>24);
 var $61=$60;label=16;break;
 case 16: 
 var $61;
 HEAP32[(($__grp246)>>2)]=0; HEAP32[((($__grp246)+(4))>>2)]=0; HEAP32[((($__grp246)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$61,$5,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $63=(($__mbuf)|0);
 var $64=HEAP8[($33)];
 var $65=($64&255);
 var $66=$65&1;
 var $67=($66|0)==0;
 if($67){label=19;break;}else{label=18;break;}
 case 18: 
 var $69=(($__digits+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $73=$70;label=20;break;
 case 19: 
 var $72=$65>>>1;
 var $73=$72;label=20;break;
 case 20: 
 var $73;
 var $74=HEAP32[(($__fd)>>2)];
 var $75=($73|0)>($74|0);
 if($75){label=21;break;}else{label=31;break;}
 case 21: 
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $78=(($__digits+4)|0);
 var $79=HEAP32[(($78)>>2)];
 var $82=$79;label=24;break;
 case 23: 
 var $81=$65>>>1;
 var $82=$81;label=24;break;
 case 24: 
 var $82;
 var $83=((($82)-($74))|0);
 var $84=$83<<1;
 var $85=HEAP8[($2)];
 var $86=($85&255);
 var $87=$86&1;
 var $88=($87|0)==0;
 if($88){label=26;break;}else{label=25;break;}
 case 25: 
 var $90=(($__sn+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $94=$91;label=27;break;
 case 26: 
 var $93=$86>>>1;
 var $94=$93;label=27;break;
 case 27: 
 var $94;
 var $95=HEAP8[($1)];
 var $96=($95&255);
 var $97=$96&1;
 var $98=($97|0)==0;
 if($98){label=29;break;}else{label=28;break;}
 case 28: 
 var $100=(($__sym+4)|0);
 var $101=HEAP32[(($100)>>2)];
 var $104=$101;label=30;break;
 case 29: 
 var $103=$96>>>1;
 var $104=$103;label=30;break;
 case 30: 
 var $104;
 var $105=$84|1;
 var $106=((($105)+($94))|0);
 var $107=((($106)+($104))|0);
 var $_pn=$107;label=38;break;
 case 31: 
 var $109=HEAP8[($2)];
 var $110=($109&255);
 var $111=$110&1;
 var $112=($111|0)==0;
 if($112){label=33;break;}else{label=32;break;}
 case 32: 
 var $114=(($__sn+4)|0);
 var $115=HEAP32[(($114)>>2)];
 var $118=$115;label=34;break;
 case 33: 
 var $117=$110>>>1;
 var $118=$117;label=34;break;
 case 34: 
 var $118;
 var $119=HEAP8[($1)];
 var $120=($119&255);
 var $121=$120&1;
 var $122=($121|0)==0;
 if($122){label=36;break;}else{label=35;break;}
 case 35: 
 var $124=(($__sym+4)|0);
 var $125=HEAP32[(($124)>>2)];
 var $128=$125;label=37;break;
 case 36: 
 var $127=$120>>>1;
 var $128=$127;label=37;break;
 case 37: 
 var $128;
 var $129=((($118)+(2))|0);
 var $130=((($129)+($128))|0);
 var $_pn=$130;label=38;break;
 case 38: 
 var $_pn;
 var $132=((($_pn)+($74))|0);
 var $133=($132>>>0)>100;
 if($133){label=39;break;}else{var $__mb_0=$63;var $__h_sroa_0_1=0;label=47;break;}
 case 39: 
 var $134=_malloc($132);
 var $135=($134|0)==0;
 if($135){label=40;break;}else{var $__mb_0=$134;var $__h_sroa_0_1=$134;label=47;break;}
 case 40: 
 var $137=___cxa_allocate_exception(4);
 var $138=$137;
 HEAP32[(($138)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($137,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $139$0 = ___cxa_find_matching_catch(-1, -1); var $139$1 = tempRet0;
 var $140=$139$0;
 var $141=$139$1;
 var $_0=$141;var $_0231=$140;label=69;break;
 case 43: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $_1=$145;var $_1232=$144;label=78;break;
 case 44: 
 var $147$0 = ___cxa_find_matching_catch(-1, -1); var $147$1 = tempRet0;
 var $148=$147$0;
 var $149=$147$1;
 var $_0=$149;var $_0231=$148;label=69;break;
 case 45: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $154=($__h_sroa_0_1|0)==0;
 if($154){var $_0=$153;var $_0231=$152;label=69;break;}else{label=46;break;}
 case 46: 
 _free($__h_sroa_0_1);
 var $_0=$153;var $_0231=$152;label=69;break;
 case 47: 
 var $__h_sroa_0_1;
 var $__mb_0;
 var $157=(($__iob+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$64&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($__digits+8)|0);
 var $163=HEAP32[(($162)>>2)];
 var $166=$163;label=50;break;
 case 49: 
 var $165=(($32+1)|0);
 var $166=$165;label=50;break;
 case 50: 
 var $166;
 if($67){label=52;break;}else{label=51;break;}
 case 51: 
 var $168=(($__digits+4)|0);
 var $169=HEAP32[(($168)>>2)];
 var $172=$169;label=53;break;
 case 52: 
 var $171=$65>>>1;
 var $172=$171;label=53;break;
 case 53: 
 var $172;
 var $173=(($166+$172)|0);
 var $174=HEAP8[($__dp)];
 var $175=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$158,$166,$173,$31,$61,$__pat,$174,$175,$__grp,$__sym,$__sn,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=45;break; }
 case 54: 
 var $177=(($__s)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=HEAP32[(($__mi)>>2)];
 var $180=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$178,$__mb_0,$179,$180,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=45;break; }
 case 55: 
 var $182=($__h_sroa_0_1|0)==0;
 if($182){label=57;break;}else{label=56;break;}
 case 56: 
 _free($__h_sroa_0_1);
 label=57;break;
 case 57: 
 var $184=HEAP8[($2)];
 var $185=$184&1;
 var $186=(($185<<24)>>24)==0;
 if($186){label=60;break;}else{label=58;break;}
 case 58: 
 var $188=(($__sn+8)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($189|0)==0;
 if($190){label=60;break;}else{label=59;break;}
 case 59: 
 _free($189);
 label=60;break;
 case 60: 
 var $192=HEAP8[($1)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=63;break;}else{label=61;break;}
 case 61: 
 var $196=(($__sym+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($197|0)==0;
 if($198){label=63;break;}else{label=62;break;}
 case 62: 
 _free($197);
 label=63;break;
 case 63: 
 var $200=HEAP8[($__grp246)];
 var $201=$200&1;
 var $202=(($201<<24)>>24)==0;
 if($202){label=66;break;}else{label=64;break;}
 case 64: 
 var $204=(($__grp+8)|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($205|0)==0;
 if($206){label=66;break;}else{label=65;break;}
 case 65: 
 _free($205);
 label=66;break;
 case 66: 
 var $208=(($4+4)|0);
 var $209=$208;
 var $210=(tempValue=HEAP32[(($209)>>2)],HEAP32[(($209)>>2)]=tempValue+-1,tempValue);
 var $211=($210|0)==0;
 if($211){label=67;break;}else{label=68;break;}
 case 67: 
 var $213=$4;
 var $214=$4;
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+8)|0);
 var $217=HEAP32[(($216)>>2)];
 FUNCTION_TABLE[$217]($213);
 label=68;break;
 case 68: 
 STACKTOP=sp;return;
 case 69: 
 var $_0231;
 var $_0;
 var $218=HEAP8[($2)];
 var $219=$218&1;
 var $220=(($219<<24)>>24)==0;
 if($220){label=72;break;}else{label=70;break;}
 case 70: 
 var $222=(($__sn+8)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($223|0)==0;
 if($224){label=72;break;}else{label=71;break;}
 case 71: 
 _free($223);
 label=72;break;
 case 72: 
 var $226=HEAP8[($1)];
 var $227=$226&1;
 var $228=(($227<<24)>>24)==0;
 if($228){label=75;break;}else{label=73;break;}
 case 73: 
 var $230=(($__sym+8)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)==0;
 if($232){label=75;break;}else{label=74;break;}
 case 74: 
 _free($231);
 label=75;break;
 case 75: 
 var $234=HEAP8[($__grp246)];
 var $235=$234&1;
 var $236=(($235<<24)>>24)==0;
 if($236){var $_1=$_0;var $_1232=$_0231;label=78;break;}else{label=76;break;}
 case 76: 
 var $238=(($__grp+8)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){var $_1=$_0;var $_1232=$_0231;label=78;break;}else{label=77;break;}
 case 77: 
 _free($239);
 var $_1=$_0;var $_1232=$_0231;label=78;break;
 case 78: 
 var $_1232;
 var $_1;
 var $242=(($4+4)|0);
 var $243=$242;
 var $244=(tempValue=HEAP32[(($243)>>2)],HEAP32[(($243)>>2)]=tempValue+-1,tempValue);
 var $245=($244|0)==0;
 if($245){label=79;break;}else{label=80;break;}
 case 79: 
 var $247=$4;
 var $248=$4;
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+8)|0);
 var $251=HEAP32[(($250)>>2)];
 FUNCTION_TABLE[$251]($247);
 label=80;break;
 case 80: 
 var $252$0=$_1232;
 var $252$1=0;
 var $253$0=$252$0;
 var $253$1=$_1;
 ___resumeException($253$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+568)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__pat=(sp)+(528);
 var $__dp=(sp)+(536);
 var $__ts=(sp)+(544);
 var $__grp=(sp)+(552);
 var $__grp289=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($__buf)|0);
 HEAP32[(($__bb)>>2)]=$3;
 var $4=(($__digits)|0);
 var $5=_snprintf($3,100,2672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $6=($5>>>0)>99;
 if($6){label=2;break;}else{var $__db_0=$4;var $__n_0=$5;var $__hn_sroa_0_1=0;var $__hd_sroa_0_1=0;label=16;break;}
 case 2: 
 var $8=HEAP8[(19864)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=___cxa_guard_acquire(19864);
 var $12=($11|0)==0;
 if($12){label=7;break;}else{label=4;break;}
 case 4: 
 var $14=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$14;
 label=7;break;
 case 6: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 var $eh_lpad_body$1=$17$1;var $eh_lpad_body$0=$17$0;var $__hn_sroa_0_0_lpad_body=0;var $__hd_sroa_0_0_lpad_body=0;label=12;break;
 case 7: 
 var $19=HEAP32[((17856)>>2)];
 var $20=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$19,2672,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 8: 
 var $22=HEAP32[(($__bb)>>2)];
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=13;break;}
 case 9: 
 var $25=___cxa_allocate_exception(4);
 var $26=$25;
 HEAP32[(($26)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($25,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $__hn_sroa_0_0=0;var $__hd_sroa_0_0=0;label=11;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $__hd_sroa_0_0;
 var $__hn_sroa_0_0;
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body$1=$28$1;var $eh_lpad_body$0=$28$0;var $__hn_sroa_0_0_lpad_body=$__hn_sroa_0_0;var $__hd_sroa_0_0_lpad_body=$__hd_sroa_0_0;label=12;break;
 case 12: 
 var $__hd_sroa_0_0_lpad_body;
 var $__hn_sroa_0_0_lpad_body;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $29=$eh_lpad_body$0;
 var $30=$eh_lpad_body$1;
 var $_2=$30;var $_2255=$29;var $__hn_sroa_0_2=$__hn_sroa_0_0_lpad_body;var $__hd_sroa_0_2=$__hd_sroa_0_0_lpad_body;label=80;break;
 case 13: 
 var $31=$20<<2;
 var $32=_malloc($31);
 var $33=$32;
 var $34=($32|0)==0;
 if($34){label=14;break;}else{var $__db_0=$33;var $__n_0=$20;var $__hn_sroa_0_1=$22;var $__hd_sroa_0_1=$33;label=16;break;}
 case 14: 
 var $36=___cxa_allocate_exception(4);
 var $37=$36;
 HEAP32[(($37)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($36,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { var $__hn_sroa_0_0=$22;var $__hd_sroa_0_0=$33;label=11;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $__hd_sroa_0_1;
 var $__hn_sroa_0_1;
 var $__n_0;
 var $__db_0;
 var $39=(($__iob+28)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=(($40+4)|0);
 var $43=$42;
 var $44=(tempValue=HEAP32[(($43)>>2)],HEAP32[(($43)>>2)]=tempValue+1,tempValue);
 var $45=$__p_i_i_i;
 var $46=HEAP32[((19280)>>2)];
 var $47=($46|0)==-1;
 if($47){label=18;break;}else{label=17;break;}
 case 17: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=45;break; }
 case 18: 
 var $49=HEAP32[((19284)>>2)];
 var $50=((($49)-(1))|0);
 var $51=(($40+12)|0);
 var $52=$51;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($40+8)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$53;
 var $58=$56;
 var $59=((($57)-($58))|0);
 var $60=$59>>2;
 var $61=($60>>>0)>($50>>>0);
 if($61){label=19;break;}else{label=20;break;}
 case 19: 
 var $62=(($56+($50<<2))|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($63|0)==0;
 if($64){label=20;break;}else{label=22;break;}
 case 20: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=45;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $67=$63;
 var $68=HEAP32[(($__bb)>>2)];
 var $69=(($68+$__n_0)|0);
 var $70=$63;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+48)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($67,$68,$69,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=45;break; }
 case 23: 
 var $75=($__n_0|0)==0;
 if($75){var $80=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $77=HEAP32[(($__bb)>>2)];
 var $78=HEAP8[($77)];
 var $79=(($78<<24)>>24)==45;
 var $80=$79;label=25;break;
 case 25: 
 var $80;
 HEAP32[(($__grp289)>>2)]=0; HEAP32[((($__grp289)+(4))>>2)]=0; HEAP32[((($__grp289)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$80,$41,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=46;break; }
 case 26: 
 var $82=(($__mbuf)|0);
 var $83=HEAP32[(($__fd)>>2)];
 var $84=($__n_0|0)>($83|0);
 if($84){label=27;break;}else{label=34;break;}
 case 27: 
 var $86=((($__n_0)-($83))|0);
 var $87=$86<<1;
 var $88=HEAP8[($2)];
 var $89=($88&255);
 var $90=$89&1;
 var $91=($90|0)==0;
 if($91){label=29;break;}else{label=28;break;}
 case 28: 
 var $93=(($__sn+4)|0);
 var $94=HEAP32[(($93)>>2)];
 var $97=$94;label=30;break;
 case 29: 
 var $96=$89>>>1;
 var $97=$96;label=30;break;
 case 30: 
 var $97;
 var $98=HEAP8[($1)];
 var $99=($98&255);
 var $100=$99&1;
 var $101=($100|0)==0;
 if($101){label=32;break;}else{label=31;break;}
 case 31: 
 var $103=(($__sym+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $107=$104;label=33;break;
 case 32: 
 var $106=$99>>>1;
 var $107=$106;label=33;break;
 case 33: 
 var $107;
 var $108=$87|1;
 var $109=((($108)+($97))|0);
 var $110=((($109)+($107))|0);
 var $_pn=$110;label=41;break;
 case 34: 
 var $112=HEAP8[($2)];
 var $113=($112&255);
 var $114=$113&1;
 var $115=($114|0)==0;
 if($115){label=36;break;}else{label=35;break;}
 case 35: 
 var $117=(($__sn+4)|0);
 var $118=HEAP32[(($117)>>2)];
 var $121=$118;label=37;break;
 case 36: 
 var $120=$113>>>1;
 var $121=$120;label=37;break;
 case 37: 
 var $121;
 var $122=HEAP8[($1)];
 var $123=($122&255);
 var $124=$123&1;
 var $125=($124|0)==0;
 if($125){label=39;break;}else{label=38;break;}
 case 38: 
 var $127=(($__sym+4)|0);
 var $128=HEAP32[(($127)>>2)];
 var $131=$128;label=40;break;
 case 39: 
 var $130=$123>>>1;
 var $131=$130;label=40;break;
 case 40: 
 var $131;
 var $132=((($121)+(2))|0);
 var $133=((($132)+($131))|0);
 var $_pn=$133;label=41;break;
 case 41: 
 var $_pn;
 var $135=((($_pn)+($83))|0);
 var $136=($135>>>0)>100;
 if($136){label=42;break;}else{var $__mb_0=$82;var $__hw_sroa_0_1=0;label=49;break;}
 case 42: 
 var $137=$135<<2;
 var $138=_malloc($137);
 var $139=$138;
 var $140=($138|0)==0;
 if($140){label=43;break;}else{var $__mb_0=$139;var $__hw_sroa_0_1=$139;label=49;break;}
 case 43: 
 var $142=___cxa_allocate_exception(4);
 var $143=$142;
 HEAP32[(($143)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($142,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { var $__hw_sroa_0_0=$139;label=47;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $145$0 = ___cxa_find_matching_catch(-1, -1); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=$145$1;
 var $_1=$147;var $_1254=$146;label=78;break;
 case 46: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 var $151=$149$1;
 var $_0=$151;var $_0253=$150;label=69;break;
 case 47: 
 var $__hw_sroa_0_0;
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $154=$153$0;
 var $155=$153$1;
 var $156=($__hw_sroa_0_0|0)==0;
 if($156){var $_0=$155;var $_0253=$154;label=69;break;}else{label=48;break;}
 case 48: 
 var $158=$__hw_sroa_0_0;
 _free($158);
 var $_0=$155;var $_0253=$154;label=69;break;
 case 49: 
 var $__hw_sroa_0_1;
 var $__mb_0;
 var $160=(($__iob+4)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($__db_0+($__n_0<<2))|0);
 var $163=HEAP32[(($__dp)>>2)];
 var $164=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$161,$__db_0,$162,$67,$80,$__pat,$163,$164,$__grp,$__sym,$__sn,$83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=47;break; }
 case 50: 
 var $166=(($__s)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=HEAP32[(($__mi)>>2)];
 var $169=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$167,$__mb_0,$168,$169,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { var $__hw_sroa_0_0=$__hw_sroa_0_1;label=47;break; }
 case 51: 
 var $171=($__hw_sroa_0_1|0)==0;
 if($171){label=53;break;}else{label=52;break;}
 case 52: 
 var $173=$__hw_sroa_0_1;
 _free($173);
 label=53;break;
 case 53: 
 var $174=HEAP8[($2)];
 var $175=$174&1;
 var $176=(($175<<24)>>24)==0;
 if($176){label=56;break;}else{label=54;break;}
 case 54: 
 var $178=(($__sn+8)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=56;break;}else{label=55;break;}
 case 55: 
 var $182=$179;
 _free($182);
 label=56;break;
 case 56: 
 var $183=HEAP8[($1)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=59;break;}else{label=57;break;}
 case 57: 
 var $187=(($__sym+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){label=59;break;}else{label=58;break;}
 case 58: 
 var $191=$188;
 _free($191);
 label=59;break;
 case 59: 
 var $192=HEAP8[($__grp289)];
 var $193=$192&1;
 var $194=(($193<<24)>>24)==0;
 if($194){label=62;break;}else{label=60;break;}
 case 60: 
 var $196=(($__grp+8)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($197|0)==0;
 if($198){label=62;break;}else{label=61;break;}
 case 61: 
 _free($197);
 label=62;break;
 case 62: 
 var $200=(($40+4)|0);
 var $201=$200;
 var $202=(tempValue=HEAP32[(($201)>>2)],HEAP32[(($201)>>2)]=tempValue+-1,tempValue);
 var $203=($202|0)==0;
 if($203){label=63;break;}else{label=64;break;}
 case 63: 
 var $205=$40;
 var $206=$40;
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+8)|0);
 var $209=HEAP32[(($208)>>2)];
 FUNCTION_TABLE[$209]($205);
 label=64;break;
 case 64: 
 var $210=($__hd_sroa_0_1|0)==0;
 if($210){label=66;break;}else{label=65;break;}
 case 65: 
 var $212=$__hd_sroa_0_1;
 _free($212);
 label=66;break;
 case 66: 
 var $213=($__hn_sroa_0_1|0)==0;
 if($213){label=68;break;}else{label=67;break;}
 case 67: 
 _free($__hn_sroa_0_1);
 label=68;break;
 case 68: 
 STACKTOP=sp;return;
 case 69: 
 var $_0253;
 var $_0;
 var $215=HEAP8[($2)];
 var $216=$215&1;
 var $217=(($216<<24)>>24)==0;
 if($217){label=72;break;}else{label=70;break;}
 case 70: 
 var $219=(($__sn+8)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=($220|0)==0;
 if($221){label=72;break;}else{label=71;break;}
 case 71: 
 var $223=$220;
 _free($223);
 label=72;break;
 case 72: 
 var $224=HEAP8[($1)];
 var $225=$224&1;
 var $226=(($225<<24)>>24)==0;
 if($226){label=75;break;}else{label=73;break;}
 case 73: 
 var $228=(($__sym+8)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($229|0)==0;
 if($230){label=75;break;}else{label=74;break;}
 case 74: 
 var $232=$229;
 _free($232);
 label=75;break;
 case 75: 
 var $233=HEAP8[($__grp289)];
 var $234=$233&1;
 var $235=(($234<<24)>>24)==0;
 if($235){var $_1=$_0;var $_1254=$_0253;label=78;break;}else{label=76;break;}
 case 76: 
 var $237=(($__grp+8)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){var $_1=$_0;var $_1254=$_0253;label=78;break;}else{label=77;break;}
 case 77: 
 _free($238);
 var $_1=$_0;var $_1254=$_0253;label=78;break;
 case 78: 
 var $_1254;
 var $_1;
 var $241=(($40+4)|0);
 var $242=$241;
 var $243=(tempValue=HEAP32[(($242)>>2)],HEAP32[(($242)>>2)]=tempValue+-1,tempValue);
 var $244=($243|0)==0;
 if($244){label=79;break;}else{var $_2=$_1;var $_2255=$_1254;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=80;break;}
 case 79: 
 var $246=$40;
 var $247=$40;
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+8)|0);
 var $250=HEAP32[(($249)>>2)];
 FUNCTION_TABLE[$250]($246);
 var $_2=$_1;var $_2255=$_1254;var $__hn_sroa_0_2=$__hn_sroa_0_1;var $__hd_sroa_0_2=$__hd_sroa_0_1;label=80;break;
 case 80: 
 var $__hd_sroa_0_2;
 var $__hn_sroa_0_2;
 var $_2255;
 var $_2;
 var $251=($__hd_sroa_0_2|0)==0;
 if($251){label=82;break;}else{label=81;break;}
 case 81: 
 var $253=$__hd_sroa_0_2;
 _free($253);
 label=82;break;
 case 82: 
 var $254=($__hn_sroa_0_2|0)==0;
 if($254){label=84;break;}else{label=83;break;}
 case 83: 
 _free($__hn_sroa_0_2);
 label=84;break;
 case 84: 
 var $256$0=$_2255;
 var $256$1=0;
 var $257$0=$256$0;
 var $257$1=$_2;
 ___resumeException($257$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc_0_0_val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i519=sp;
 var $__p_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast518=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=$2;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast517=$4;
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=$5;
 var $7=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $8=$7;
 var $9=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $10=$9;
 var $11=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast516=$11;
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=$12;
 var $14=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$14;
 var $15=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $16=$15;
 var $17=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $18=$17;
 var $19=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $20=$19;
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $22=$__p_i_i_i;
 var $23=HEAP32[((19744)>>2)];
 var $24=($23|0)==-1;
 if($24){label=4;break;}else{label=3;break;}
 case 3: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19744;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19744,$22);
 label=4;break;
 case 4: 
 var $26=HEAP32[((19748)>>2)];
 var $27=((($26)-(1))|0);
 var $28=(($__loc_0_0_val+12)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($__loc_0_0_val+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$29;
 var $33=$31;
 var $34=((($32)-($33))|0);
 var $35=$34>>2;
 var $36=($35>>>0)>($27>>>0);
 if($36){label=5;break;}else{label=6;break;}
 case 5: 
 var $37=(($31+($27<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5880;
 ___cxa_throw($40,13520,(594));
 throw "Reached an unreachable!";
 case 7: 
 var $42=$38;
 var $43=$38;
 var $44=HEAP32[(($43)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $46=(($44+44)|0);
 var $47=HEAP32[(($46)>>2)];
 FUNCTION_TABLE[$47]($tmpcast518,$42);
 var $48=$__pat;
 var $49=HEAP32[(($1)>>2)];
 tempBigInt=$49;HEAP8[($48)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($48)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($48)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($48)+(3))|0)]=tempBigInt&0xff;
 var $50=$38;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+32)|0);
 var $53=HEAP32[(($52)>>2)];
 FUNCTION_TABLE[$53]($2,$42);
 var $54=$__sn;
 var $55=HEAP8[($54)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=10;break;}else{label=9;break;}
 case 9: 
 var $59=(($__sn+8)|0);
 var $60=HEAP32[(($59)>>2)];
 HEAP32[(($60)>>2)]=0;
 var $61=(($__sn+4)|0);
 HEAP32[(($61)>>2)]=0;
 label=11;break;
 case 10: 
 var $63=(($__sn+4)|0);
 HEAP32[(($63)>>2)]=0;
 HEAP8[($54)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1,0); var $65$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 13: 
 assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 HEAP32[(($3)>>2)]=0; HEAP32[((($3)+(4))>>2)]=0; HEAP32[((($3)+(8))>>2)]=0;
 label=20;break;
 case 14: 
 var $67=(($44+40)|0);
 var $68=HEAP32[(($67)>>2)];
 FUNCTION_TABLE[$68]($tmpcast517,$42);
 var $69=$__pat;
 var $70=HEAP32[(($4)>>2)];
 tempBigInt=$70;HEAP8[($69)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($69)+(3))|0)]=tempBigInt&0xff;
 var $71=$38;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+28)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($5,$42);
 var $75=$__sn;
 var $76=HEAP8[($75)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=16;break;}else{label=15;break;}
 case 15: 
 var $80=(($__sn+8)|0);
 var $81=HEAP32[(($80)>>2)];
 HEAP32[(($81)>>2)]=0;
 var $82=(($__sn+4)|0);
 HEAP32[(($82)>>2)]=0;
 label=17;break;
 case 16: 
 var $84=(($__sn+4)|0);
 HEAP32[(($84)>>2)]=0;
 HEAP8[($75)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1,0); var $86$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 19: 
 assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0;
 label=20;break;
 case 20: 
 var $87=$38;
 var $88=HEAP32[(($87)>>2)];
 var $89=(($88+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=FUNCTION_TABLE[$90]($42);
 HEAP32[(($__dp)>>2)]=$91;
 var $92=HEAP32[(($87)>>2)];
 var $93=(($92+16)|0);
 var $94=HEAP32[(($93)>>2)];
 var $95=FUNCTION_TABLE[$94]($42);
 HEAP32[(($__ts)>>2)]=$95;
 var $96=$38;
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+20)|0);
 var $99=HEAP32[(($98)>>2)];
 FUNCTION_TABLE[$99]($7,$42);
 var $100=$__grp;
 var $101=HEAP8[($100)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=22;break;}else{label=21;break;}
 case 21: 
 var $105=(($__grp+8)|0);
 var $106=HEAP32[(($105)>>2)];
 HEAP8[($106)]=0;
 var $107=(($__grp+4)|0);
 HEAP32[(($107)>>2)]=0;
 label=23;break;
 case 22: 
 var $109=$__grp;
 var $110=(($109+1)|0);
 HEAP8[($110)]=0;
 HEAP8[($100)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1,0); var $112$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 assert(12 % 1 === 0);HEAP32[(($100)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($100)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($100)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 var $113=$38;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+24)|0);
 var $116=HEAP32[(($115)>>2)];
 FUNCTION_TABLE[$116]($9,$42);
 var $117=$__sym;
 var $118=HEAP8[($117)];
 var $119=$118&1;
 var $120=(($119<<24)>>24)==0;
 if($120){label=27;break;}else{label=26;break;}
 case 26: 
 var $122=(($__sym+8)|0);
 var $123=HEAP32[(($122)>>2)];
 HEAP32[(($123)>>2)]=0;
 var $124=(($__sym+4)|0);
 HEAP32[(($124)>>2)]=0;
 label=28;break;
 case 27: 
 var $126=(($__sym+4)|0);
 HEAP32[(($126)>>2)]=0;
 HEAP8[($117)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1,0); var $128$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 assert(12 % 1 === 0);HEAP32[(($117)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($117)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($117)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 HEAP32[(($10)>>2)]=0; HEAP32[((($10)+(4))>>2)]=0; HEAP32[((($10)+(8))>>2)]=0;
 var $129=HEAP32[(($87)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=FUNCTION_TABLE[$131]($42);
 var $storemerge=$132;label=60;break;
 case 31: 
 var $134=$__p_i_i_i519;
 var $135=HEAP32[((19752)>>2)];
 var $136=($135|0)==-1;
 if($136){label=33;break;}else{label=32;break;}
 case 32: 
 var $_sroa_016_0__idx_i_i520=(($__p_i_i_i519)|0);
 HEAP32[(($_sroa_016_0__idx_i_i520)>>2)]=19752;
 var $_sroa_117_4__idx18_i_i521=(($__p_i_i_i519+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i521)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i522=(($__p_i_i_i519+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i522)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19752,$134);
 label=33;break;
 case 33: 
 var $138=HEAP32[((19756)>>2)];
 var $139=((($138)-(1))|0);
 var $140=(($__loc_0_0_val+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($__loc_0_0_val+8)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$141;
 var $145=$143;
 var $146=((($144)-($145))|0);
 var $147=$146>>2;
 var $148=($147>>>0)>($139>>>0);
 if($148){label=34;break;}else{label=35;break;}
 case 34: 
 var $149=(($143+($139<<2))|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=35;break;}else{label=36;break;}
 case 35: 
 var $152=___cxa_allocate_exception(4);
 var $153=$152;
 HEAP32[(($153)>>2)]=5880;
 ___cxa_throw($152,13520,(594));
 throw "Reached an unreachable!";
 case 36: 
 var $154=$150;
 var $155=$150;
 var $156=HEAP32[(($155)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $158=(($156+44)|0);
 var $159=HEAP32[(($158)>>2)];
 FUNCTION_TABLE[$159]($tmpcast516,$154);
 var $160=$__pat;
 var $161=HEAP32[(($11)>>2)];
 tempBigInt=$161;HEAP8[($160)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($160)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($160)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($160)+(3))|0)]=tempBigInt&0xff;
 var $162=$150;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+32)|0);
 var $165=HEAP32[(($164)>>2)];
 FUNCTION_TABLE[$165]($12,$154);
 var $166=$__sn;
 var $167=HEAP8[($166)];
 var $168=$167&1;
 var $169=(($168<<24)>>24)==0;
 if($169){label=39;break;}else{label=38;break;}
 case 38: 
 var $171=(($__sn+8)|0);
 var $172=HEAP32[(($171)>>2)];
 HEAP32[(($172)>>2)]=0;
 var $173=(($__sn+4)|0);
 HEAP32[(($173)>>2)]=0;
 label=40;break;
 case 39: 
 var $175=(($__sn+4)|0);
 HEAP32[(($175)>>2)]=0;
 HEAP8[($166)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1,0); var $177$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 assert(12 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($166)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 HEAP32[(($13)>>2)]=0; HEAP32[((($13)+(4))>>2)]=0; HEAP32[((($13)+(8))>>2)]=0;
 label=49;break;
 case 43: 
 var $179=(($156+40)|0);
 var $180=HEAP32[(($179)>>2)];
 FUNCTION_TABLE[$180]($tmpcast,$154);
 var $181=$__pat;
 var $182=HEAP32[(($14)>>2)];
 tempBigInt=$182;HEAP8[($181)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($181)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($181)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($181)+(3))|0)]=tempBigInt&0xff;
 var $183=$150;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+28)|0);
 var $186=HEAP32[(($185)>>2)];
 FUNCTION_TABLE[$186]($15,$154);
 var $187=$__sn;
 var $188=HEAP8[($187)];
 var $189=$188&1;
 var $190=(($189<<24)>>24)==0;
 if($190){label=45;break;}else{label=44;break;}
 case 44: 
 var $192=(($__sn+8)|0);
 var $193=HEAP32[(($192)>>2)];
 HEAP32[(($193)>>2)]=0;
 var $194=(($__sn+4)|0);
 HEAP32[(($194)>>2)]=0;
 label=46;break;
 case 45: 
 var $196=(($__sn+4)|0);
 HEAP32[(($196)>>2)]=0;
 HEAP8[($187)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $198$0 = ___cxa_find_matching_catch(-1, -1,0); var $198$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 48: 
 assert(12 % 1 === 0);HEAP32[(($187)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($187)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($187)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 label=49;break;
 case 49: 
 var $199=$150;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+12)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=FUNCTION_TABLE[$202]($154);
 HEAP32[(($__dp)>>2)]=$203;
 var $204=HEAP32[(($199)>>2)];
 var $205=(($204+16)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=FUNCTION_TABLE[$206]($154);
 HEAP32[(($__ts)>>2)]=$207;
 var $208=$150;
 var $209=HEAP32[(($208)>>2)];
 var $210=(($209+20)|0);
 var $211=HEAP32[(($210)>>2)];
 FUNCTION_TABLE[$211]($17,$154);
 var $212=$__grp;
 var $213=HEAP8[($212)];
 var $214=$213&1;
 var $215=(($214<<24)>>24)==0;
 if($215){label=51;break;}else{label=50;break;}
 case 50: 
 var $217=(($__grp+8)|0);
 var $218=HEAP32[(($217)>>2)];
 HEAP8[($218)]=0;
 var $219=(($__grp+4)|0);
 HEAP32[(($219)>>2)]=0;
 label=52;break;
 case 51: 
 var $221=$__grp;
 var $222=(($221+1)|0);
 HEAP8[($222)]=0;
 HEAP8[($212)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $224$0 = ___cxa_find_matching_catch(-1, -1,0); var $224$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 54: 
 assert(12 % 1 === 0);HEAP32[(($212)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($212)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($212)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $225=$150;
 var $226=HEAP32[(($225)>>2)];
 var $227=(($226+24)|0);
 var $228=HEAP32[(($227)>>2)];
 FUNCTION_TABLE[$228]($19,$154);
 var $229=$__sym;
 var $230=HEAP8[($229)];
 var $231=$230&1;
 var $232=(($231<<24)>>24)==0;
 if($232){label=56;break;}else{label=55;break;}
 case 55: 
 var $234=(($__sym+8)|0);
 var $235=HEAP32[(($234)>>2)];
 HEAP32[(($235)>>2)]=0;
 var $236=(($__sym+4)|0);
 HEAP32[(($236)>>2)]=0;
 label=57;break;
 case 56: 
 var $238=(($__sym+4)|0);
 HEAP32[(($238)>>2)]=0;
 HEAP8[($229)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $240$0 = ___cxa_find_matching_catch(-1, -1,0); var $240$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 assert(12 % 1 === 0);HEAP32[(($229)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($229)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($229)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $241=HEAP32[(($199)>>2)];
 var $242=(($241+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=FUNCTION_TABLE[$243]($154);
 var $storemerge=$244;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=$__ct;
 var $11=($__fd|0)>0;
 var $12=$__grp;
 var $13=$__grp;
 var $14=(($12+1)|0);
 var $15=(($__grp+8)|0);
 var $16=(($__grp+4)|0);
 var $_0361402=$__db;var $__p_0403=0;label=2;break;
 case 2: 
 var $__p_0403;
 var $_0361402;
 var $18=(($__pat+$__p_0403)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=27;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_0361402;label=62;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_0361402;label=62;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_0361402;label=62;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=($32&255);
 var $34=$33&1;
 var $35=($34|0)==0;
 if($35){label=7;break;}else{label=6;break;}
 case 6: 
 var $37=HEAP32[(($3)>>2)];
 var $40=$37;label=8;break;
 case 7: 
 var $39=$33>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_0361402;label=62;break;}else{label=9;break;}
 case 9: 
 var $43=$32&1;
 var $44=(($43<<24)>>24)==0;
 if($44){var $47=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $46=HEAP32[(($4)>>2)];
 var $47=$46;label=11;break;
 case 11: 
 var $47;
 var $48=HEAP32[(($47)>>2)];
 var $49=HEAP32[(($__me)>>2)];
 var $50=(($49+4)|0);
 HEAP32[(($__me)>>2)]=$50;
 HEAP32[(($49)>>2)]=$48;
 var $_2=$_0361402;label=62;break;
 case 12: 
 var $52=HEAP8[($5)];
 var $53=($52&255);
 var $54=$53&1;
 var $55=($54|0)==0;
 if($55){label=14;break;}else{label=13;break;}
 case 13: 
 var $57=HEAP32[(($8)>>2)];
 var $60=$57;label=15;break;
 case 14: 
 var $59=$53>>>1;
 var $60=$59;label=15;break;
 case 15: 
 var $60;
 var $61=($60|0)==0;
 var $brmerge=$61|$7;
 if($brmerge){var $_2=$_0361402;label=62;break;}else{label=16;break;}
 case 16: 
 var $63=$52&1;
 var $64=(($63<<24)>>24)==0;
 if($64){var $_in427=$8;label=18;break;}else{label=17;break;}
 case 17: 
 var $66=HEAP32[(($9)>>2)];
 var $_in427=$66;label=18;break;
 case 18: 
 var $_in427;
 var $67=$_in427;
 if($55){label=20;break;}else{label=19;break;}
 case 19: 
 var $69=HEAP32[(($8)>>2)];
 var $72=$69;label=21;break;
 case 20: 
 var $71=$53>>>1;
 var $72=$71;label=21;break;
 case 21: 
 var $72;
 var $73=(($_in427+($72<<2))|0);
 var $74=HEAP32[(($__me)>>2)];
 var $75=($_in427|0)==($73|0);
 if($75){var $_0_lcssa=$74;label=26;break;}else{label=22;break;}
 case 22: 
 var $scevgep414_sum=((($72)-(1))|0);
 var $scevgep415=(($_in427+($scevgep414_sum<<2))|0);
 var $scevgep415416=$scevgep415;
 var $76=(((-$67))|0);
 var $uglygep417=(($scevgep415416+$76)|0);
 var $uglygep417418=$uglygep417;
 var $77=$uglygep417418>>>2;
 var $_sroa_0362_0398=$_in427;var $_0399=$74;label=23;break;
 case 23: 
 var $_0399;
 var $_sroa_0362_0398;
 var $79=HEAP32[(($_sroa_0362_0398)>>2)];
 HEAP32[(($_0399)>>2)]=$79;
 var $80=(($_sroa_0362_0398+4)|0);
 var $81=($80|0)==($73|0);
 if($81){label=25;break;}else{label=24;break;}
 case 24: 
 var $82=(($_0399+4)|0);
 var $_sroa_0362_0398=$80;var $_0399=$82;label=23;break;
 case 25: 
 var $scevgep413_sum=((($77)+(1))|0);
 var $scevgep419=(($74+($scevgep413_sum<<2))|0);
 var $_0_lcssa=$scevgep419;label=26;break;
 case 26: 
 var $_0_lcssa;
 HEAP32[(($__me)>>2)]=$_0_lcssa;
 var $_2=$_0361402;label=62;break;
 case 27: 
 var $84=HEAP32[(($__me)>>2)];
 var $85=(($_0361402+4)|0);
 var $__0361=($__neg?$85:$_0361402);
 var $__d_0=$__0361;label=28;break;
 case 28: 
 var $__d_0;
 var $87=($__d_0>>>0)<($__de>>>0);
 if($87){label=29;break;}else{label=30;break;}
 case 29: 
 var $89=HEAP32[(($__d_0)>>2)];
 var $90=HEAP32[(($10)>>2)];
 var $91=(($90+12)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($__ct,2048,$89);
 var $94=(($__d_0+4)|0);
 if($93){var $__d_0=$94;label=28;break;}else{label=30;break;}
 case 30: 
 if($11){label=31;break;}else{var $__d_2=$__d_0;label=38;break;}
 case 31: 
 var $96=($__d_0>>>0)>($__0361>>>0);
 if($96){var $__d_1379=$__d_0;var $__f_0380=$__fd;label=32;break;}else{var $__f_0_lcssa424=$__fd;var $__d_1_lcssa426=$__d_0;label=35;break;}
 case 32: 
 var $__f_0380;
 var $__d_1379;
 var $97=((($__d_1379)-(4))|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=HEAP32[(($__me)>>2)];
 var $100=(($99+4)|0);
 HEAP32[(($__me)>>2)]=$100;
 HEAP32[(($99)>>2)]=$98;
 var $101=((($__f_0380)-(1))|0);
 var $102=($97>>>0)>($__0361>>>0);
 var $103=($101|0)>0;
 var $or_cond=$102&$103;
 if($or_cond){var $__d_1379=$97;var $__f_0380=$101;label=32;break;}else{label=33;break;}
 case 33: 
 if($103){var $__f_0_lcssa424=$101;var $__d_1_lcssa426=$97;label=35;break;}else{label=34;break;}
 case 34: 
 var $104=HEAP32[(($__me)>>2)];
 var $105=(($104+4)|0);
 HEAP32[(($__me)>>2)]=$105;
 var $_lcssa385=$104;var $__d_1_lcssa4251=$97;label=37;break;
 case 35: 
 var $__d_1_lcssa426;
 var $__f_0_lcssa424;
 var $106=HEAP32[(($1)>>2)];
 var $107=(($106+44)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($__ct,48);
 var $110=($__f_0_lcssa424|0)>0;
 var $111=HEAP32[(($__me)>>2)];
 var $112=(($111+4)|0);
 HEAP32[(($__me)>>2)]=$112;
 if($110){var $__f_1386=$__f_0_lcssa424;var $113=$111;label=36;break;}else{var $_lcssa385=$111;var $__d_1_lcssa4251=$__d_1_lcssa426;label=37;break;}
 case 36: 
 var $113;
 var $__f_1386;
 HEAP32[(($113)>>2)]=$109;
 var $114=((($__f_1386)-(1))|0);
 var $115=($114|0)>0;
 var $116=HEAP32[(($__me)>>2)];
 var $117=(($116+4)|0);
 HEAP32[(($__me)>>2)]=$117;
 if($115){var $__f_1386=$114;var $113=$116;label=36;break;}else{var $_lcssa385=$116;var $__d_1_lcssa4251=$__d_1_lcssa426;label=37;break;}
 case 37: 
 var $__d_1_lcssa4251;
 var $_lcssa385;
 HEAP32[(($_lcssa385)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa4251;label=38;break;
 case 38: 
 var $__d_2;
 var $119=($__d_2|0)==($__0361|0);
 if($119){label=39;break;}else{label=40;break;}
 case 39: 
 var $121=HEAP32[(($1)>>2)];
 var $122=(($121+44)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=FUNCTION_TABLE[$123]($__ct,48);
 var $125=HEAP32[(($__me)>>2)];
 var $126=(($125+4)|0);
 HEAP32[(($__me)>>2)]=$126;
 HEAP32[(($125)>>2)]=$124;
 label=59;break;
 case 40: 
 var $128=HEAP8[($13)];
 var $129=($128&255);
 var $130=$129&1;
 var $131=($130|0)==0;
 if($131){label=42;break;}else{label=41;break;}
 case 41: 
 var $133=HEAP32[(($16)>>2)];
 var $136=$133;label=43;break;
 case 42: 
 var $135=$129>>>1;
 var $136=$135;label=43;break;
 case 43: 
 var $136;
 var $137=($136|0)==0;
 if($137){var $__d_3390=$__d_2;var $__ng_0391=0;var $__ig_0392=0;var $__gl_0393=-1;label=47;break;}else{label=44;break;}
 case 44: 
 var $139=$128&1;
 var $140=(($139<<24)>>24)==0;
 if($140){var $143=$14;label=46;break;}else{label=45;break;}
 case 45: 
 var $142=HEAP32[(($15)>>2)];
 var $143=$142;label=46;break;
 case 46: 
 var $143;
 var $144=HEAP8[($143)];
 var $145=(($144<<24)>>24);
 var $__d_3390=$__d_2;var $__ng_0391=0;var $__ig_0392=0;var $__gl_0393=$145;label=47;break;
 case 47: 
 var $__gl_0393;
 var $__ig_0392;
 var $__ng_0391;
 var $__d_3390;
 var $146=($__ng_0391|0)==($__gl_0393|0);
 if($146){label=48;break;}else{var $__gl_1=$__gl_0393;var $__ig_1=$__ig_0392;var $__ng_1=$__ng_0391;label=58;break;}
 case 48: 
 var $148=HEAP32[(($__me)>>2)];
 var $149=(($148+4)|0);
 HEAP32[(($__me)>>2)]=$149;
 HEAP32[(($148)>>2)]=$__ts;
 var $150=((($__ig_0392)+(1))|0);
 var $151=HEAP8[($13)];
 var $152=($151&255);
 var $153=$152&1;
 var $154=($153|0)==0;
 if($154){label=50;break;}else{label=49;break;}
 case 49: 
 var $156=HEAP32[(($16)>>2)];
 var $159=$156;label=51;break;
 case 50: 
 var $158=$152>>>1;
 var $159=$158;label=51;break;
 case 51: 
 var $159;
 var $160=($150>>>0)<($159>>>0);
 if($160){label=52;break;}else{var $__gl_1=$__gl_0393;var $__ig_1=$150;var $__ng_1=0;label=58;break;}
 case 52: 
 var $162=$151&1;
 var $163=(($162<<24)>>24)==0;
 if($163){var $166=$14;label=54;break;}else{label=53;break;}
 case 53: 
 var $165=HEAP32[(($15)>>2)];
 var $166=$165;label=54;break;
 case 54: 
 var $166;
 var $167=(($166+$150)|0);
 var $168=HEAP8[($167)];
 var $169=(($168<<24)>>24)==127;
 if($169){var $__gl_1=-1;var $__ig_1=$150;var $__ng_1=0;label=58;break;}else{label=55;break;}
 case 55: 
 if($163){var $173=$14;label=57;break;}else{label=56;break;}
 case 56: 
 var $172=HEAP32[(($15)>>2)];
 var $173=$172;label=57;break;
 case 57: 
 var $173;
 var $174=(($173+$150)|0);
 var $175=HEAP8[($174)];
 var $176=(($175<<24)>>24);
 var $__gl_1=$176;var $__ig_1=$150;var $__ng_1=0;label=58;break;
 case 58: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $177=((($__d_3390)-(4))|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=HEAP32[(($__me)>>2)];
 var $180=(($179+4)|0);
 HEAP32[(($__me)>>2)]=$180;
 HEAP32[(($179)>>2)]=$178;
 var $181=((($__ng_1)+(1))|0);
 var $182=($177|0)==($__0361|0);
 if($182){label=59;break;}else{var $__d_3390=$177;var $__ng_0391=$181;var $__ig_0392=$__ig_1;var $__gl_0393=$__gl_1;label=47;break;}
 case 59: 
 var $183=HEAP32[(($__me)>>2)];
 var $184=($84|0)==($183|0);
 if($184){var $_2=$__0361;label=62;break;}else{label=60;break;}
 case 60: 
 var $185=((($183)-(4))|0);
 var $186=($84>>>0)<($185>>>0);
 if($186){var $_0358396=$84;var $187=$185;label=61;break;}else{var $_2=$__0361;label=62;break;}
 case 61: 
 var $187;
 var $_0358396;
 var $188=HEAP32[(($_0358396)>>2)];
 var $189=HEAP32[(($187)>>2)];
 HEAP32[(($_0358396)>>2)]=$189;
 HEAP32[(($187)>>2)]=$188;
 var $190=(($_0358396+4)|0);
 var $191=((($187)-(4))|0);
 var $192=($190>>>0)<($191>>>0);
 if($192){var $_0358396=$190;var $187=$191;label=61;break;}else{var $_2=$__0361;label=62;break;}
 case 62: 
 var $_2;
 var $193=((($__p_0403)+(1))|0);
 var $194=($193>>>0)<4;
 if($194){var $_0361402=$_2;var $__p_0403=$193;label=2;break;}else{label=63;break;}
 case 63: 
 var $196=HEAP8[($2)];
 var $197=($196&255);
 var $198=$197&1;
 var $199=($198|0)==0;
 if($199){label=65;break;}else{label=64;break;}
 case 64: 
 var $201=HEAP32[(($3)>>2)];
 var $204=$201;label=66;break;
 case 65: 
 var $203=$197>>>1;
 var $204=$203;label=66;break;
 case 66: 
 var $204;
 var $205=($204>>>0)>1;
 if($205){label=67;break;}else{label=77;break;}
 case 67: 
 var $207=$196&1;
 var $208=(($207<<24)>>24)==0;
 if($208){var $_in=$3;label=69;break;}else{label=68;break;}
 case 68: 
 var $210=HEAP32[(($4)>>2)];
 var $_in=$210;label=69;break;
 case 69: 
 var $_in;
 var $211=$_in;
 if($199){label=71;break;}else{label=70;break;}
 case 70: 
 var $213=HEAP32[(($3)>>2)];
 var $216=$213;label=72;break;
 case 71: 
 var $215=$197>>>1;
 var $216=$215;label=72;break;
 case 72: 
 var $216;
 var $217=(($_in+($216<<2))|0);
 var $218=HEAP32[(($__me)>>2)];
 var $_sroa_0371_0375=(($_in+4)|0);
 var $219=($_sroa_0371_0375|0)==($217|0);
 if($219){var $_0360_lcssa=$218;label=76;break;}else{label=73;break;}
 case 73: 
 var $220=((($216)-(2))|0);
 var $scevgep=(($_in+($220<<2))|0);
 var $scevgep405=$scevgep;
 var $221=(((-$211))|0);
 var $uglygep=(($scevgep405+$221)|0);
 var $uglygep406=$uglygep;
 var $222=$uglygep406>>>2;
 var $223=((($222)+(1))|0);
 var $_0360376=$218;var $_sroa_0371_0377=$_sroa_0371_0375;label=74;break;
 case 74: 
 var $_sroa_0371_0377;
 var $_0360376;
 var $225=HEAP32[(($_sroa_0371_0377)>>2)];
 HEAP32[(($_0360376)>>2)]=$225;
 var $226=(($_0360376+4)|0);
 var $_sroa_0371_0=(($_sroa_0371_0377+4)|0);
 var $227=($_sroa_0371_0|0)==($217|0);
 if($227){label=75;break;}else{var $_0360376=$226;var $_sroa_0371_0377=$_sroa_0371_0;label=74;break;}
 case 75: 
 var $scevgep407=(($218+($223<<2))|0);
 var $_0360_lcssa=$scevgep407;label=76;break;
 case 76: 
 var $_0360_lcssa;
 HEAP32[(($__me)>>2)]=$_0360_lcssa;
 label=77;break;
 case 77: 
 var $229=$__flags&176;
 if(($229|0)==32){ label=78;break;}else if(($229|0)==16){ label=80;break;}else{label=79;break;}
 case 78: 
 var $231=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$231;
 label=80;break;
 case 79: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=80;break;
 case 80: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i=sp;
 var $__pat=(sp)+(16);
 var $__dp=(sp)+(24);
 var $__ts=(sp)+(32);
 var $__grp=(sp)+(40);
 var $__grp246=$__grp;
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=$__sym;
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=$__sn;
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=(($__iob+28)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($4+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=$__p_i_i_i;
 var $10=HEAP32[((19280)>>2)];
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=42;break; }
 case 3: 
 var $13=HEAP32[((19284)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($4+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($4+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5880;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,13520,(594)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $31=$27;
 var $32=$__digits;
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=$34&1;
 var $36=($35|0)==0;
 if($36){label=9;break;}else{label=8;break;}
 case 8: 
 var $38=(($__digits+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $42=$39;label=10;break;
 case 9: 
 var $41=$34>>>1;
 var $42=$41;label=10;break;
 case 10: 
 var $42;
 var $43=($42|0)==0;
 if($43){var $60=0;label=16;break;}else{label=11;break;}
 case 11: 
 var $45=$33&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=13;break;}else{label=12;break;}
 case 12: 
 var $48=(($__digits+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $52=$49;label=14;break;
 case 13: 
 var $51=(($__digits+4)|0);
 var $52=$51;label=14;break;
 case 14: 
 var $52;
 var $53=HEAP32[(($52)>>2)];
 var $54=$27;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+44)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($31,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=42;break; }
 case 15: 
 var $59=($53|0)==($58|0);
 var $60=$59;label=16;break;
 case 16: 
 var $60;
 HEAP32[(($__grp246)>>2)]=0; HEAP32[((($__grp246)+(4))>>2)]=0; HEAP32[((($__grp246)+(8))>>2)]=0;
 HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0;
 HEAP32[(($2)>>2)]=0; HEAP32[((($2)+(4))>>2)]=0; HEAP32[((($2)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$60,$5,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=43;break; }
 case 17: 
 var $62=(($__mbuf)|0);
 var $63=HEAP8[($32)];
 var $64=($63&255);
 var $65=$64&1;
 var $66=($65|0)==0;
 if($66){label=19;break;}else{label=18;break;}
 case 18: 
 var $68=(($__digits+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $72=$69;label=20;break;
 case 19: 
 var $71=$64>>>1;
 var $72=$71;label=20;break;
 case 20: 
 var $72;
 var $73=HEAP32[(($__fd)>>2)];
 var $74=($72|0)>($73|0);
 if($74){label=21;break;}else{label=31;break;}
 case 21: 
 if($66){label=23;break;}else{label=22;break;}
 case 22: 
 var $77=(($__digits+4)|0);
 var $78=HEAP32[(($77)>>2)];
 var $81=$78;label=24;break;
 case 23: 
 var $80=$64>>>1;
 var $81=$80;label=24;break;
 case 24: 
 var $81;
 var $82=((($81)-($73))|0);
 var $83=$82<<1;
 var $84=HEAP8[($2)];
 var $85=($84&255);
 var $86=$85&1;
 var $87=($86|0)==0;
 if($87){label=26;break;}else{label=25;break;}
 case 25: 
 var $89=(($__sn+4)|0);
 var $90=HEAP32[(($89)>>2)];
 var $93=$90;label=27;break;
 case 26: 
 var $92=$85>>>1;
 var $93=$92;label=27;break;
 case 27: 
 var $93;
 var $94=HEAP8[($1)];
 var $95=($94&255);
 var $96=$95&1;
 var $97=($96|0)==0;
 if($97){label=29;break;}else{label=28;break;}
 case 28: 
 var $99=(($__sym+4)|0);
 var $100=HEAP32[(($99)>>2)];
 var $103=$100;label=30;break;
 case 29: 
 var $102=$95>>>1;
 var $103=$102;label=30;break;
 case 30: 
 var $103;
 var $104=$83|1;
 var $105=((($104)+($93))|0);
 var $106=((($105)+($103))|0);
 var $_pn=$106;label=38;break;
 case 31: 
 var $108=HEAP8[($2)];
 var $109=($108&255);
 var $110=$109&1;
 var $111=($110|0)==0;
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 var $113=(($__sn+4)|0);
 var $114=HEAP32[(($113)>>2)];
 var $117=$114;label=34;break;
 case 33: 
 var $116=$109>>>1;
 var $117=$116;label=34;break;
 case 34: 
 var $117;
 var $118=HEAP8[($1)];
 var $119=($118&255);
 var $120=$119&1;
 var $121=($120|0)==0;
 if($121){label=36;break;}else{label=35;break;}
 case 35: 
 var $123=(($__sym+4)|0);
 var $124=HEAP32[(($123)>>2)];
 var $127=$124;label=37;break;
 case 36: 
 var $126=$119>>>1;
 var $127=$126;label=37;break;
 case 37: 
 var $127;
 var $128=((($117)+(2))|0);
 var $129=((($128)+($127))|0);
 var $_pn=$129;label=38;break;
 case 38: 
 var $_pn;
 var $131=((($_pn)+($73))|0);
 var $132=($131>>>0)>100;
 if($132){label=39;break;}else{var $__mb_0=$62;var $__h_sroa_0_1=0;label=46;break;}
 case 39: 
 var $133=$131<<2;
 var $134=_malloc($133);
 var $135=$134;
 var $136=($134|0)==0;
 if($136){label=40;break;}else{var $__mb_0=$135;var $__h_sroa_0_1=$135;label=46;break;}
 case 40: 
 var $138=___cxa_allocate_exception(4);
 var $139=$138;
 HEAP32[(($139)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($138,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { var $__h_sroa_0_0=$135;label=44;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1); var $141$1 = tempRet0;
 var $142=$141$0;
 var $143=$141$1;
 var $_1=$143;var $_1232=$142;label=77;break;
 case 43: 
 var $145$0 = ___cxa_find_matching_catch(-1, -1); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=$145$1;
 var $_0=$147;var $_0231=$146;label=68;break;
 case 44: 
 var $__h_sroa_0_0;
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 var $151=$149$1;
 var $152=($__h_sroa_0_0|0)==0;
 if($152){var $_0=$151;var $_0231=$150;label=68;break;}else{label=45;break;}
 case 45: 
 var $154=$__h_sroa_0_0;
 _free($154);
 var $_0=$151;var $_0231=$150;label=68;break;
 case 46: 
 var $__h_sroa_0_1;
 var $__mb_0;
 var $156=(($__iob+4)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=$63&1;
 var $159=(($158<<24)>>24)==0;
 if($159){label=48;break;}else{label=47;break;}
 case 47: 
 var $161=(($__digits+8)|0);
 var $162=HEAP32[(($161)>>2)];
 var $165=$162;label=49;break;
 case 48: 
 var $164=(($__digits+4)|0);
 var $165=$164;label=49;break;
 case 49: 
 var $165;
 if($66){label=51;break;}else{label=50;break;}
 case 50: 
 var $167=(($__digits+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $171=$168;label=52;break;
 case 51: 
 var $170=$64>>>1;
 var $171=$170;label=52;break;
 case 52: 
 var $171;
 var $172=(($165+($171<<2))|0);
 var $173=HEAP32[(($__dp)>>2)];
 var $174=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$157,$165,$172,$31,$60,$__pat,$173,$174,$__grp,$__sym,$__sn,$73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 53: 
 var $176=(($__s)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=HEAP32[(($__mi)>>2)];
 var $179=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$177,$__mb_0,$178,$179,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { var $__h_sroa_0_0=$__h_sroa_0_1;label=44;break; }
 case 54: 
 var $181=($__h_sroa_0_1|0)==0;
 if($181){label=56;break;}else{label=55;break;}
 case 55: 
 var $183=$__h_sroa_0_1;
 _free($183);
 label=56;break;
 case 56: 
 var $184=HEAP8[($2)];
 var $185=$184&1;
 var $186=(($185<<24)>>24)==0;
 if($186){label=59;break;}else{label=57;break;}
 case 57: 
 var $188=(($__sn+8)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=($189|0)==0;
 if($190){label=59;break;}else{label=58;break;}
 case 58: 
 var $192=$189;
 _free($192);
 label=59;break;
 case 59: 
 var $193=HEAP8[($1)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=62;break;}else{label=60;break;}
 case 60: 
 var $197=(($__sym+8)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($198|0)==0;
 if($199){label=62;break;}else{label=61;break;}
 case 61: 
 var $201=$198;
 _free($201);
 label=62;break;
 case 62: 
 var $202=HEAP8[($__grp246)];
 var $203=$202&1;
 var $204=(($203<<24)>>24)==0;
 if($204){label=65;break;}else{label=63;break;}
 case 63: 
 var $206=(($__grp+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=($207|0)==0;
 if($208){label=65;break;}else{label=64;break;}
 case 64: 
 _free($207);
 label=65;break;
 case 65: 
 var $210=(($4+4)|0);
 var $211=$210;
 var $212=(tempValue=HEAP32[(($211)>>2)],HEAP32[(($211)>>2)]=tempValue+-1,tempValue);
 var $213=($212|0)==0;
 if($213){label=66;break;}else{label=67;break;}
 case 66: 
 var $215=$4;
 var $216=$4;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+8)|0);
 var $219=HEAP32[(($218)>>2)];
 FUNCTION_TABLE[$219]($215);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $_0231;
 var $_0;
 var $220=HEAP8[($2)];
 var $221=$220&1;
 var $222=(($221<<24)>>24)==0;
 if($222){label=71;break;}else{label=69;break;}
 case 69: 
 var $224=(($__sn+8)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){label=71;break;}else{label=70;break;}
 case 70: 
 var $228=$225;
 _free($228);
 label=71;break;
 case 71: 
 var $229=HEAP8[($1)];
 var $230=$229&1;
 var $231=(($230<<24)>>24)==0;
 if($231){label=74;break;}else{label=72;break;}
 case 72: 
 var $233=(($__sym+8)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($234|0)==0;
 if($235){label=74;break;}else{label=73;break;}
 case 73: 
 var $237=$234;
 _free($237);
 label=74;break;
 case 74: 
 var $238=HEAP8[($__grp246)];
 var $239=$238&1;
 var $240=(($239<<24)>>24)==0;
 if($240){var $_1=$_0;var $_1232=$_0231;label=77;break;}else{label=75;break;}
 case 75: 
 var $242=(($__grp+8)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=($243|0)==0;
 if($244){var $_1=$_0;var $_1232=$_0231;label=77;break;}else{label=76;break;}
 case 76: 
 _free($243);
 var $_1=$_0;var $_1232=$_0231;label=77;break;
 case 77: 
 var $_1232;
 var $_1;
 var $246=(($4+4)|0);
 var $247=$246;
 var $248=(tempValue=HEAP32[(($247)>>2)],HEAP32[(($247)>>2)]=tempValue+-1,tempValue);
 var $249=($248|0)==0;
 if($249){label=78;break;}else{label=79;break;}
 case 78: 
 var $251=$4;
 var $252=$4;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+8)|0);
 var $255=HEAP32[(($254)>>2)];
 FUNCTION_TABLE[$255]($251);
 label=79;break;
 case 79: 
 var $256$0=$_1232;
 var $256$1=0;
 var $257$0=$256$0;
 var $257$1=$_1;
 ___resumeException($257$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $__cat_0=$14>>>($15>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $0=$__ndflt;
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result135=$agg_result;
 var $1=$__dflt;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__dflt+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=$__dflt;
 var $10=(($9+1)|0);
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($2&255);
 var $13=$12&1;
 var $14=($13|0)==0;
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 var $16=(($__dflt+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $20=$17;label=7;break;
 case 6: 
 var $19=$12>>>1;
 var $20=$19;label=7;break;
 case 7: 
 var $20;
 var $21=(($11+$20)|0);
 var $22=($11>>>0)<($21>>>0);
 if($22){label=8;break;}else{label=9;break;}
 case 8: 
 var $23=$__ndflt;
 var $24=(($23+1)|0);
 var $25=(($__ndflt+8)|0);
 var $26=(($__ndflt+4)|0);
 var $27=(($__ndflt)|0);
 var $_0132=$11;var $32=0;label=10;break;
 case 9: 
 var $28=($__c|0)==-1;
 var $29=$__c<<1;
 var $30=$29;
 var $31=($28?-1:$30);
 var $_pre19=$__ndflt;
 var $_pre20=(($_pre19+1)|0);
 var $68=$_pre20;var $67=$31;label=24;break;
 case 10: 
 var $32;
 var $_0132;
 var $33=HEAP8[($_0132)];
 var $34=$32&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=11;break;}else{label=12;break;}
 case 11: 
 var $37=($32&255);
 var $38=$37>>>1;
 var $__sz_0_i=$38;var $__cap_0_i=10;label=13;break;
 case 12: 
 var $40=HEAP32[(($27)>>2)];
 var $41=$40&-2;
 var $42=((($41)-(1))|0);
 var $43=HEAP32[(($26)>>2)];
 var $__sz_0_i=$43;var $__cap_0_i=$42;label=13;break;
 case 13: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $45=($__sz_0_i|0)==($__cap_0_i|0);
 if($45){label=14;break;}else{var $__is_short_0_off0_in_in_i=$32;label=16;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__ndflt,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=21;break; }
 case 15: 
 var $47=HEAP8[($0)];
 var $__is_short_0_off0_in_in_i=$47;label=16;break;
 case 16: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=17;break;}else{label=18;break;}
 case 17: 
 var $50=$__sz_0_i<<1;
 var $51=((($50)+(2))|0);
 var $52=(($51)&255);
 HEAP8[($0)]=$52;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$24;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=19;break;
 case 18: 
 var $54=HEAP32[(($25)>>2)];
 var $55=((($__sz_0_i)+(1))|0);
 HEAP32[(($26)>>2)]=$55;
 var $_pn_i=$54;var $__p_0_sum_pre_phi_i=$55;label=19;break;
 case 19: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$33;
 var $56=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($56)]=0;
 var $57=(($_0132+1)|0);
 var $58=($57>>>0)<($21>>>0);
 var $_pre18=HEAP8[($0)];
 if($58){var $_0132=$57;var $32=$_pre18;label=10;break;}else{label=20;break;}
 case 20: 
 var $phitmp=$_pre18&1;
 var $phitmp136=(($phitmp<<24)>>24)==0;
 var $59=($__c|0)==-1;
 var $60=$__c<<1;
 var $61=$60;
 var $62=($59?-1:$61);
 var $63=HEAP32[(($25)>>2)];
 var $_=($phitmp136?$24:$63);
 var $68=$_;var $67=$62;label=24;break;
 case 21: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=23;break;
 case 22: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=23;break;
 case 23: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $65=$lpad_phi$0;
 var $66=$lpad_phi$1;
 var $_0122=$66;var $_0123=$65;label=45;break;
 case 24: 
 var $67;
 var $68;
 var $69=(function() { try { __THREW__ = 0; return _catgets($67,$__set,$__msgid,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=22;break; }
 case 25: 
 HEAP32[(($agg_result135)>>2)]=0; HEAP32[((($agg_result135)+(4))>>2)]=0; HEAP32[((($agg_result135)+(8))>>2)]=0;
 var $71=_strlen($69);
 var $72=(($69+$71)|0);
 var $73=($71|0)>0;
 if($73){label=26;break;}else{label=41;break;}
 case 26: 
 var $74=$agg_result;
 var $75=(($74+1)|0);
 var $76=(($agg_result+8)|0);
 var $77=(($agg_result+4)|0);
 var $78=(($agg_result)|0);
 var $_0120130=$69;var $79=0;label=27;break;
 case 27: 
 var $79;
 var $_0120130;
 var $80=HEAP8[($_0120130)];
 var $81=$79&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=28;break;}else{label=29;break;}
 case 28: 
 var $84=($79&255);
 var $85=$84>>>1;
 var $__sz_0_i3=$85;var $__cap_0_i2=10;label=30;break;
 case 29: 
 var $87=HEAP32[(($78)>>2)];
 var $88=$87&-2;
 var $89=((($88)-(1))|0);
 var $90=HEAP32[(($77)>>2)];
 var $__sz_0_i3=$90;var $__cap_0_i2=$89;label=30;break;
 case 30: 
 var $__cap_0_i2;
 var $__sz_0_i3;
 var $92=($__sz_0_i3|0)==($__cap_0_i2|0);
 if($92){label=31;break;}else{var $__is_short_0_off0_in_in_i4=$79;label=33;break;}
 case 31: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($agg_result,$__cap_0_i2,1,$__cap_0_i2,$__cap_0_i2,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=38;break; }
 case 32: 
 var $94=HEAP8[($agg_result135)];
 var $__is_short_0_off0_in_in_i4=$94;label=33;break;
 case 33: 
 var $__is_short_0_off0_in_in_i4;
 var $__is_short_0_off0_in_i5=$__is_short_0_off0_in_in_i4&1;
 var $__is_short_0_off0_i6=(($__is_short_0_off0_in_i5<<24)>>24)==0;
 if($__is_short_0_off0_i6){label=34;break;}else{label=35;break;}
 case 34: 
 var $97=$__sz_0_i3<<1;
 var $98=((($97)+(2))|0);
 var $99=(($98)&255);
 HEAP8[($agg_result135)]=$99;
 var $__p_0_sum_pre_i7=((($__sz_0_i3)+(1))|0);
 var $_pn_i9=$75;var $__p_0_sum_pre_phi_i8=$__p_0_sum_pre_i7;label=36;break;
 case 35: 
 var $101=HEAP32[(($76)>>2)];
 var $102=((($__sz_0_i3)+(1))|0);
 HEAP32[(($77)>>2)]=$102;
 var $_pn_i9=$101;var $__p_0_sum_pre_phi_i8=$102;label=36;break;
 case 36: 
 var $__p_0_sum_pre_phi_i8;
 var $_pn_i9;
 var $__p_0_i10=(($_pn_i9+$__sz_0_i3)|0);
 HEAP8[($__p_0_i10)]=$80;
 var $103=(($_pn_i9+$__p_0_sum_pre_phi_i8)|0);
 HEAP8[($103)]=0;
 var $104=(($_0120130+1)|0);
 var $105=($104>>>0)<($72>>>0);
 if($105){label=37;break;}else{label=41;break;}
 case 37: 
 var $_pre17=HEAP8[($agg_result135)];
 var $_0120130=$104;var $79=$_pre17;label=27;break;
 case 38: 
 var $107$0 = ___cxa_find_matching_catch(-1, -1); var $107$1 = tempRet0;
 var $108=$107$0;
 var $109=$107$1;
 var $110=HEAP8[($agg_result135)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){var $_0122=$109;var $_0123=$108;label=45;break;}else{label=39;break;}
 case 39: 
 var $114=HEAP32[(($76)>>2)];
 var $115=($114|0)==0;
 if($115){var $_0122=$109;var $_0123=$108;label=45;break;}else{label=40;break;}
 case 40: 
 _free($114);
 var $_0122=$109;var $_0123=$108;label=45;break;
 case 41: 
 var $117=HEAP8[($0)];
 var $118=$117&1;
 var $119=(($118<<24)>>24)==0;
 if($119){label=44;break;}else{label=42;break;}
 case 42: 
 var $121=(($__ndflt+8)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=($122|0)==0;
 if($123){label=44;break;}else{label=43;break;}
 case 43: 
 _free($122);
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
 case 45: 
 var $_0123;
 var $_0122;
 var $125=HEAP8[($0)];
 var $126=$125&1;
 var $127=(($126<<24)>>24)==0;
 if($127){label=48;break;}else{label=46;break;}
 case 46: 
 var $129=(($__ndflt+8)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=($130|0)==0;
 if($131){label=48;break;}else{label=47;break;}
 case 47: 
 _free($130);
 label=48;break;
 case 48: 
 var $133$0=$_0123;
 var $133$1=0;
 var $134$0=$133$0;
 var $134$1=$_0122;
 ___resumeException($134$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;
 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}
function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $__cat_0=$14>>>($15>>>0);
 return $__cat_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i10=sp;
 var $__buf_i12=(sp)+(8);
 var $__bn_i13=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $0=$__ndflt;
 var $1=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + 8)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0; HEAP32[((($0)+(8))>>2)]=0;
 var $agg_result192=$agg_result;
 var $3=(($1)|0);
 var $4=(($1)|0);
 var $5=(($1+4)|0);
 HEAP32[(($5)>>2)]=0;
 HEAP32[(($4)>>2)]=7712;
 var $6=$__dflt;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__dflt+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $15=$12;label=4;break;
 case 3: 
 var $14=(($__dflt+4)|0);
 var $15=$14;label=4;break;
 case 4: 
 var $15;
 var $16=($7&255);
 var $17=$16&1;
 var $18=($17|0)==0;
 if($18){label=6;break;}else{label=5;break;}
 case 5: 
 var $20=(($__dflt+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $24=$21;label=7;break;
 case 6: 
 var $23=$16>>>1;
 var $24=$23;label=7;break;
 case 7: 
 var $24;
 var $25=(($15+($24<<2))|0);
 var $26=($15>>>0)<($25>>>0);
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $27=($__c|0)==-1;
 var $28=$__c<<1;
 var $29=$28;
 var $30=($27?-1:$29);
 var $135=$30;label=55;break;
 case 9: 
 var $31=$1;
 var $32=(($__buf_i12)|0);
 var $33=(($__buf_i12+32)|0);
 var $34=$__ndflt;
 var $35=(($34+1)|0);
 var $36=(($__ndflt+8)|0);
 var $37=(($__ndflt+4)|0);
 var $38=(($__ndflt)|0);
 var $_0189=$15;var $40=7712;label=10;break;
 case 10: 
 var $40;
 var $_0189;
 HEAP32[(($__wn_i)>>2)]=$_0189;
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($3,$__mb_i10,$_0189,$25,$__wn_i,$32,$33,$__bn_i13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=51;break; }
 case 11: 
 var $44=($43|0)==2;
 var $45=HEAP32[(($__wn_i)>>2)];
 var $46=($45|0)==($_0189|0);
 var $or_cond163=$44|$46;
 if($or_cond163){label=13;break;}else{label=12;break;}
 case 12: 
 var $47=HEAP32[(($__bn_i13)>>2)];
 var $48=($32>>>0)<($47>>>0);
 if($48){var $__p_i14_0184=$32;label=35;break;}else{var $119=$45;label=46;break;}
 case 13: 
 var $50=___cxa_allocate_exception(8);
 var $51=$50;
 HEAP32[(($51)>>2)]=5944;
 var $52=(($50+4)|0);
 var $53=$52;
 var $54=($52|0)==0;
 if($54){label=31;break;}else{label=14;break;}
 case 14: 
 var $55=(function() { try { __THREW__ = 0; return _strlen(1248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=33;break; }
 case 15: 
 var $56=((($55)+(1))|0);
 var $57=((($55)+(13))|0);
 var $58=($57|0)==0;
 var $_size_i=($58?1:$57);
 label=16;break;
 case 16: 
 var $60=_malloc($_size_i);
 var $61=($60|0)==0;
 if($61){label=17;break;}else{label=30;break;}
 case 17: 
 var $63=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $64=($63|0)==0;
 if($64){label=24;break;}else{label=18;break;}
 case 18: 
 var $66=$63;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$66]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=19;break; }
 case 19: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=21;break;
 case 20: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=21;break;
 case 21: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $68=$lpad_phi_i$1;
 var $69=($68|0)<0;
 if($69){label=22;break;}else{var $eh_lpad_body7$1=$lpad_phi_i$1;var $eh_lpad_body7$0=$lpad_phi_i$0;label=27;break;}
 case 22: 
 var $71=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($71) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=26;break; }
 case 23: 
 throw "Reached an unreachable!";
 case 24: 
 var $73=___cxa_allocate_exception(4);
 var $74=$73;
 HEAP32[(($74)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($73,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $eh_lpad_body7$1=$77$1;var $eh_lpad_body7$0=$77$0;label=27;break;
 case 27: 
 var $eh_lpad_body7$0;
 var $eh_lpad_body7$1;
 var $78=$eh_lpad_body7$1;
 var $79=($78|0)<0;
 if($79){label=28;break;}else{var $eh_lpad_body4$1=$eh_lpad_body7$1;var $eh_lpad_body4$0=$eh_lpad_body7$0;label=34;break;}
 case 28: 
 var $81=$eh_lpad_body7$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=33;break; }
 case 29: 
 throw "Reached an unreachable!";
 case 30: 
 var $82=$60;
 var $83=(($60+4)|0);
 var $84=$83;
 HEAP32[(($84)>>2)]=$55;
 HEAP32[(($82)>>2)]=$55;
 var $85=(($60+12)|0);
 HEAP32[(($53)>>2)]=$85;
 var $86=(($60+8)|0);
 var $87=$86;
 HEAP32[(($87)>>2)]=0;
 assert($56 % 1 === 0);(_memcpy($85, 1248, $56)|0);
 label=31;break;
 case 31: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($50,13552,(208)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=52;break; }
 case 32: 
 throw "Reached an unreachable!";
 case 33: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;
 var $eh_lpad_body4$1=$89$1;var $eh_lpad_body4$0=$89$0;label=34;break;
 case 34: 
 var $eh_lpad_body4$0;
 var $eh_lpad_body4$1;
 ___cxa_free_exception($50);
 var $eh_lpad_body$1=$eh_lpad_body4$1;var $eh_lpad_body$0=$eh_lpad_body4$0;label=53;break;
 case 35: 
 var $__p_i14_0184;
 var $90=HEAP8[($__p_i14_0184)];
 var $91=HEAP8[($0)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){label=36;break;}else{label=37;break;}
 case 36: 
 var $95=($91&255);
 var $96=$95>>>1;
 var $__sz_0_i=$96;var $__cap_0_i=10;label=38;break;
 case 37: 
 var $98=HEAP32[(($38)>>2)];
 var $99=$98&-2;
 var $100=((($99)-(1))|0);
 var $101=HEAP32[(($37)>>2)];
 var $__sz_0_i=$101;var $__cap_0_i=$100;label=38;break;
 case 38: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $103=($__sz_0_i|0)==($__cap_0_i|0);
 if($103){label=39;break;}else{var $__is_short_0_off0_in_in_i=$91;label=41;break;}
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__ndflt,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=50;break; }
 case 40: 
 var $105=HEAP8[($0)];
 var $__is_short_0_off0_in_in_i=$105;label=41;break;
 case 41: 
 var $__is_short_0_off0_in_in_i;
 var $__is_short_0_off0_in_i=$__is_short_0_off0_in_in_i&1;
 var $__is_short_0_off0_i=(($__is_short_0_off0_in_i<<24)>>24)==0;
 if($__is_short_0_off0_i){label=42;break;}else{label=43;break;}
 case 42: 
 var $108=$__sz_0_i<<1;
 var $109=((($108)+(2))|0);
 var $110=(($109)&255);
 HEAP8[($0)]=$110;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$35;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=44;break;
 case 43: 
 var $112=HEAP32[(($36)>>2)];
 var $113=((($__sz_0_i)+(1))|0);
 HEAP32[(($37)>>2)]=$113;
 var $_pn_i=$112;var $__p_0_sum_pre_phi_i=$113;label=44;break;
 case 44: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$90;
 var $114=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($114)]=0;
 var $115=(($__p_i14_0184+1)|0);
 var $116=HEAP32[(($__bn_i13)>>2)];
 var $117=($115>>>0)<($116>>>0);
 if($117){var $__p_i14_0184=$115;label=35;break;}else{label=45;break;}
 case 45: 
 var $_pre193=HEAP32[(($__wn_i)>>2)];
 var $119=$_pre193;label=46;break;
 case 46: 
 var $119;
 var $120=($119>>>0)<($25>>>0);
 if($120){label=47;break;}else{label=48;break;}
 case 47: 
 var $_pre196=HEAP32[(($31)>>2)];
 var $_0189=$119;var $40=$_pre196;label=10;break;
 case 48: 
 var $_pre39=HEAP8[($0)];
 var $phitmp=$_pre39&1;
 var $phitmp40=(($phitmp<<24)>>24)==0;
 var $121=($__c|0)==-1;
 var $122=$__c<<1;
 var $123=$122;
 var $124=($121?-1:$123);
 if($phitmp40){var $135=$124;label=55;break;}else{label=54;break;}
 case 49: 
 var $126$0 = ___cxa_find_matching_catch(-1, -1); var $126$1 = tempRet0;
 var $127=$126$0;
 var $128=$126$1;
 var $_0153=$128;var $_0154=$127;label=107;break;
 case 50: 
 var $lpad_loopexit182$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit182$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit182$1;var $eh_lpad_body$0=$lpad_loopexit182$0;label=53;break;
 case 51: 
 var $lpad_loopexit186$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit186$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit186$1;var $eh_lpad_body$0=$lpad_loopexit186$0;label=53;break;
 case 52: 
 var $lpad_nonloopexit187$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit187$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit187$1;var $eh_lpad_body$0=$lpad_nonloopexit187$0;label=53;break;
 case 53: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $129=$eh_lpad_body$0;
 var $130=$eh_lpad_body$1;
 var $_0153=$130;var $_0154=$129;label=107;break;
 case 54: 
 var $132=(($__ndflt+8)|0);
 var $133=HEAP32[(($132)>>2)];
 var $139=$133;var $138=$124;label=56;break;
 case 55: 
 var $135;
 var $136=$__ndflt;
 var $137=(($136+1)|0);
 var $139=$137;var $138=$135;label=56;break;
 case 56: 
 var $138;
 var $139;
 var $140=(function() { try { __THREW__ = 0; return _catgets($138,$__set,$__msgid,$139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=49;break; }
 case 57: 
 HEAP32[(($agg_result192)>>2)]=0; HEAP32[((($agg_result192)+(4))>>2)]=0; HEAP32[((($agg_result192)+(8))>>2)]=0;
 var $142=(($2)|0);
 var $143=(($2)|0);
 var $144=(($2+4)|0);
 HEAP32[(($144)>>2)]=0;
 HEAP32[(($143)>>2)]=7656;
 var $145=_strlen($140);
 var $146=(($140+$145)|0);
 var $147=($145|0)<1;
 if($147){label=97;break;}else{label=58;break;}
 case 58: 
 var $148=$2;
 var $149=$146;
 var $150=(($__buf_i)|0);
 var $151=(($__buf_i+128)|0);
 var $152=(($agg_result+4)|0);
 var $153=(($agg_result+8)|0);
 var $154=(($agg_result)|0);
 var $_0152177=$140;var $156=7656;label=59;break;
 case 59: 
 var $156;
 var $_0152177;
 HEAP32[(($__nn_i)>>2)]=$_0152177;
 var $157=(($156+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$_0152177;
 var $160=((($149)-($159))|0);
 var $161=($160|0)>32;
 var $162=(($_0152177+32)|0);
 var $163=($161?$162:$146);
 var $164=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($142,$__mb_i,$_0152177,$163,$__nn_i,$150,$151,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=102;break; }
 case 60: 
 var $165=($164|0)==2;
 var $166=HEAP32[(($__nn_i)>>2)];
 var $167=($166|0)==($_0152177|0);
 var $or_cond166=$165|$167;
 if($or_cond166){label=62;break;}else{label=61;break;}
 case 61: 
 var $168=HEAP32[(($__bn_i)>>2)];
 var $169=($150>>>0)<($168>>>0);
 if($169){var $__p_i_0173=$150;label=84;break;}else{var $240=$166;label=95;break;}
 case 62: 
 var $171=___cxa_allocate_exception(8);
 var $172=$171;
 HEAP32[(($172)>>2)]=5944;
 var $173=(($171+4)|0);
 var $174=$173;
 var $175=($173|0)==0;
 if($175){label=80;break;}else{label=63;break;}
 case 63: 
 var $176=(function() { try { __THREW__ = 0; return _strlen(1248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=82;break; }
 case 64: 
 var $177=((($176)+(1))|0);
 var $178=((($176)+(13))|0);
 var $179=($178|0)==0;
 var $_size_i16=($179?1:$178);
 label=65;break;
 case 65: 
 var $181=_malloc($_size_i16);
 var $182=($181|0)==0;
 if($182){label=66;break;}else{label=79;break;}
 case 66: 
 var $184=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $185=($184|0)==0;
 if($185){label=73;break;}else{label=67;break;}
 case 67: 
 var $187=$184;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$187]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=68;break; }
 case 68: 
 var $lpad_loopexit_i17$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i17$1 = tempRet0;
 var $lpad_phi_i21$1=$lpad_loopexit_i17$1;var $lpad_phi_i21$0=$lpad_loopexit_i17$0;label=70;break;
 case 69: 
 var $lpad_nonloopexit_i19$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i19$1 = tempRet0;
 var $lpad_phi_i21$1=$lpad_nonloopexit_i19$1;var $lpad_phi_i21$0=$lpad_nonloopexit_i19$0;label=70;break;
 case 70: 
 var $lpad_phi_i21$0;
 var $lpad_phi_i21$1;
 var $189=$lpad_phi_i21$1;
 var $190=($189|0)<0;
 if($190){label=71;break;}else{var $eh_lpad_body24$1=$lpad_phi_i21$1;var $eh_lpad_body24$0=$lpad_phi_i21$0;label=76;break;}
 case 71: 
 var $192=$lpad_phi_i21$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=75;break; }
 case 72: 
 throw "Reached an unreachable!";
 case 73: 
 var $194=___cxa_allocate_exception(4);
 var $195=$194;
 HEAP32[(($195)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($194,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=69;break; }
 case 74: 
 throw "Reached an unreachable!";
 case 75: 
 var $198$0 = ___cxa_find_matching_catch(-1, -1); var $198$1 = tempRet0;
 var $eh_lpad_body24$1=$198$1;var $eh_lpad_body24$0=$198$0;label=76;break;
 case 76: 
 var $eh_lpad_body24$0;
 var $eh_lpad_body24$1;
 var $199=$eh_lpad_body24$1;
 var $200=($199|0)<0;
 if($200){label=77;break;}else{var $eh_lpad_body14$1=$eh_lpad_body24$1;var $eh_lpad_body14$0=$eh_lpad_body24$0;label=83;break;}
 case 77: 
 var $202=$eh_lpad_body24$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=82;break; }
 case 78: 
 throw "Reached an unreachable!";
 case 79: 
 var $203=$181;
 var $204=(($181+4)|0);
 var $205=$204;
 HEAP32[(($205)>>2)]=$176;
 HEAP32[(($203)>>2)]=$176;
 var $206=(($181+12)|0);
 HEAP32[(($174)>>2)]=$206;
 var $207=(($181+8)|0);
 var $208=$207;
 HEAP32[(($208)>>2)]=0;
 assert($177 % 1 === 0);(_memcpy($206, 1248, $177)|0);
 label=80;break;
 case 80: 
 (function() { try { __THREW__ = 0; return ___cxa_throw($171,13552,(208)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=103;break; }
 case 81: 
 throw "Reached an unreachable!";
 case 82: 
 var $210$0 = ___cxa_find_matching_catch(-1, -1); var $210$1 = tempRet0;
 var $eh_lpad_body14$1=$210$1;var $eh_lpad_body14$0=$210$0;label=83;break;
 case 83: 
 var $eh_lpad_body14$0;
 var $eh_lpad_body14$1;
 ___cxa_free_exception($171);
 var $eh_lpad_body170$1=$eh_lpad_body14$1;var $eh_lpad_body170$0=$eh_lpad_body14$0;label=104;break;
 case 84: 
 var $__p_i_0173;
 var $211=HEAP32[(($__p_i_0173)>>2)];
 var $212=HEAP8[($agg_result192)];
 var $213=$212&1;
 var $214=(($213<<24)>>24)==0;
 if($214){label=85;break;}else{label=86;break;}
 case 85: 
 var $216=($212&255);
 var $217=$216>>>1;
 var $__sz_0_i27=$217;var $__cap_0_i26=1;label=87;break;
 case 86: 
 var $219=HEAP32[(($154)>>2)];
 var $220=$219&-2;
 var $221=((($220)-(1))|0);
 var $222=HEAP32[(($152)>>2)];
 var $__sz_0_i27=$222;var $__cap_0_i26=$221;label=87;break;
 case 87: 
 var $__cap_0_i26;
 var $__sz_0_i27;
 var $224=($__sz_0_i27|0)==($__cap_0_i26|0);
 if($224){label=88;break;}else{var $__is_short_0_off0_in_in_i28=$212;label=90;break;}
 case 88: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($agg_result,$__cap_0_i26,1,$__cap_0_i26,$__cap_0_i26,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=101;break; }
 case 89: 
 var $226=HEAP8[($agg_result192)];
 var $__is_short_0_off0_in_in_i28=$226;label=90;break;
 case 90: 
 var $__is_short_0_off0_in_in_i28;
 var $__is_short_0_off0_in_i29=$__is_short_0_off0_in_in_i28&1;
 var $__is_short_0_off0_i30=(($__is_short_0_off0_in_i29<<24)>>24)==0;
 if($__is_short_0_off0_i30){label=91;break;}else{label=92;break;}
 case 91: 
 var $229=$__sz_0_i27<<1;
 var $230=((($229)+(2))|0);
 var $231=(($230)&255);
 HEAP8[($agg_result192)]=$231;
 var $__p_0_sum_pre_i31=((($__sz_0_i27)+(1))|0);
 var $_pn_i33=$152;var $__p_0_sum_pre_phi_i32=$__p_0_sum_pre_i31;label=93;break;
 case 92: 
 var $233=HEAP32[(($153)>>2)];
 var $234=((($__sz_0_i27)+(1))|0);
 HEAP32[(($152)>>2)]=$234;
 var $_pn_i33=$233;var $__p_0_sum_pre_phi_i32=$234;label=93;break;
 case 93: 
 var $__p_0_sum_pre_phi_i32;
 var $_pn_i33;
 var $__p_0_i34=(($_pn_i33+($__sz_0_i27<<2))|0);
 HEAP32[(($__p_0_i34)>>2)]=$211;
 var $235=(($_pn_i33+($__p_0_sum_pre_phi_i32<<2))|0);
 HEAP32[(($235)>>2)]=0;
 var $236=(($__p_i_0173+4)|0);
 var $237=HEAP32[(($__bn_i)>>2)];
 var $238=($236>>>0)<($237>>>0);
 if($238){var $__p_i_0173=$236;label=84;break;}else{label=94;break;}
 case 94: 
 var $_pre=HEAP32[(($__nn_i)>>2)];
 var $240=$_pre;label=95;break;
 case 95: 
 var $240;
 var $241=($240>>>0)<($146>>>0);
 if($241){label=96;break;}else{label=97;break;}
 case 96: 
 var $_pre195=HEAP32[(($148)>>2)];
 var $_0152177=$240;var $156=$_pre195;label=59;break;
 case 97: 
 var $242=HEAP8[($0)];
 var $243=$242&1;
 var $244=(($243<<24)>>24)==0;
 if($244){label=100;break;}else{label=98;break;}
 case 98: 
 var $246=(($__ndflt+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==0;
 if($248){label=100;break;}else{label=99;break;}
 case 99: 
 _free($247);
 label=100;break;
 case 100: 
 STACKTOP=sp;return;
 case 101: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_loopexit$1;var $eh_lpad_body170$0=$lpad_loopexit$0;label=104;break;
 case 102: 
 var $lpad_loopexit174$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit174$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_loopexit174$1;var $eh_lpad_body170$0=$lpad_loopexit174$0;label=104;break;
 case 103: 
 var $lpad_nonloopexit175$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit175$1 = tempRet0;
 var $eh_lpad_body170$1=$lpad_nonloopexit175$1;var $eh_lpad_body170$0=$lpad_nonloopexit175$0;label=104;break;
 case 104: 
 var $eh_lpad_body170$0;
 var $eh_lpad_body170$1;
 var $250=$eh_lpad_body170$0;
 var $251=$eh_lpad_body170$1;
 var $252=HEAP8[($agg_result192)];
 var $253=$252&1;
 var $254=(($253<<24)>>24)==0;
 if($254){var $_0153=$251;var $_0154=$250;label=107;break;}else{label=105;break;}
 case 105: 
 var $256=HEAP32[(($153)>>2)];
 var $257=($256|0)==0;
 if($257){var $_0153=$251;var $_0154=$250;label=107;break;}else{label=106;break;}
 case 106: 
 var $259=$256;
 _free($259);
 var $_0153=$251;var $_0154=$250;label=107;break;
 case 107: 
 var $_0154;
 var $_0153;
 var $260=HEAP8[($0)];
 var $261=$260&1;
 var $262=(($261<<24)>>24)==0;
 if($262){label=110;break;}else{label=108;break;}
 case 108: 
 var $264=(($__ndflt+8)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($265|0)==0;
 if($266){label=110;break;}else{label=109;break;}
 case 109: 
 _free($265);
 label=110;break;
 case 110: 
 var $268$0=$_0154;
 var $268$1=0;
 var $269$0=$268$0;
 var $269$1=$_0153;
 ___resumeException($269$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;
 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7104;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(19864)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(19864);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17856)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 label=9;break;
 case 6: 
 var $15=HEAP32[((17856)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i223=sp;
 var $__p_i_i_i216=(sp)+(16);
 var $__p_i_i_i209=(sp)+(32);
 var $__p_i_i_i199=(sp)+(48);
 var $__p_i_i_i190=(sp)+(64);
 var $__p_i_i_i183=(sp)+(80);
 var $__p_i_i_i176=(sp)+(96);
 var $__p_i_i_i169=(sp)+(112);
 var $__p_i_i_i162=(sp)+(128);
 var $__p_i_i_i155=(sp)+(144);
 var $__p_i_i_i148=(sp)+(160);
 var $__p_i_i_i141=(sp)+(176);
 var $__p_i_i_i134=(sp)+(192);
 var $__p_i_i_i127=(sp)+(208);
 var $__p_i_i_i120=(sp)+(224);
 var $__p_i_i_i113=(sp)+(240);
 var $__p_i_i_i106=(sp)+(256);
 var $__p_i_i_i99=(sp)+(272);
 var $__p_i_i_i92=(sp)+(288);
 var $__p_i_i_i85=(sp)+(304);
 var $__p_i_i_i78=(sp)+(320);
 var $__p_i_i_i71=(sp)+(336);
 var $__p_i_i_i64=(sp)+(352);
 var $__p_i_i_i57=(sp)+(368);
 var $__p_i_i_i50=(sp)+(384);
 var $__p_i_i_i43=(sp)+(400);
 var $__p_i_i_i36=(sp)+(416);
 var $__p_i_i_i=(sp)+(432);
 var $1=((($refs)-(1))|0);
 var $2=(($this)|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$1;
 HEAP32[(($2)>>2)]=7360;
 var $4=(($this+8)|0);
 var $5=(($this+12)|0);
 var $6=(($this+16)|0);
 var $7=(($this+136)|0);
 HEAP8[($7)]=1;
 var $8=(($this+24)|0);
 var $9=$8;
 HEAP32[(($5)>>2)]=$9;
 HEAP32[(($4)>>2)]=$9;
 var $10=(($8+112)|0);
 var $11=$10;
 HEAP32[(($6)>>2)]=$11;
 var $_0_i18_i=28;var $13=$9;label=2;break;
 case 2: 
 var $13;
 var $_0_i18_i;
 var $14=($13|0)==0;
 if($14){var $16=0;label=4;break;}else{label=3;break;}
 case 3: 
 HEAP32[(($13)>>2)]=0;
 var $_pre11_i_i=HEAP32[(($5)>>2)];
 var $16=$_pre11_i_i;label=4;break;
 case 4: 
 var $16;
 var $17=(($16+4)|0);
 HEAP32[(($5)>>2)]=$17;
 var $18=((($_0_i18_i)-(1))|0);
 var $19=($18|0)==0;
 if($19){label=5;break;}else{var $_0_i18_i=$18;var $13=$17;label=2;break;}
 case 5: 
 var $20=(($this+144)|0);
 var $21=$20;
 var $22=$20;
 HEAP8[($22)]=2;
 var $23=(($21+1)|0);
 HEAP8[($23)]=67;
 var $24=(($21+2)|0);
 HEAP8[($24)]=0;
 var $25=HEAP32[(($4)>>2)];
 var $26=($25|0)==($17|0);
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=$25;
 var $scevgep230=$16;
 var $28=(((-$27))|0);
 var $uglygep=(($scevgep230+$28)|0);
 var $uglygep231=$uglygep;
 var $29=$uglygep231>>>2;
 var $_sum=(((-$29))|0);
 var $scevgep232=(($16+($_sum<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep232;
 label=7;break;
 case 7: 
 HEAP32[((17988)>>2)]=0;
 HEAP32[((17984)>>2)]=7064;
 var $31=$__p_i_i_i;
 var $32=HEAP32[((18968)>>2)];
 var $33=($32|0)==-1;
 if($33){label=9;break;}else{label=8;break;}
 case 8: 
 var $_sroa_016_0__idx_i_i=(($__p_i_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i_i)>>2)]=18968;
 var $_sroa_117_4__idx18_i_i=(($__p_i_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i=(($__p_i_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18968,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=109;break; }
 case 9: 
 var $35=HEAP32[((18972)>>2)];
 var $36=((($35)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17984,$36) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=109;break; }
 case 10: 
 HEAP32[((17980)>>2)]=0;
 HEAP32[((17976)>>2)]=7024;
 var $38=$__p_i_i_i36;
 var $39=HEAP32[((18960)>>2)];
 var $40=($39|0)==-1;
 if($40){label=12;break;}else{label=11;break;}
 case 11: 
 var $_sroa_016_0__idx_i_i37=(($__p_i_i_i36)|0);
 HEAP32[(($_sroa_016_0__idx_i_i37)>>2)]=18960;
 var $_sroa_117_4__idx18_i_i38=(($__p_i_i_i36+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i38)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i39=(($__p_i_i_i36+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18960,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=109;break; }
 case 12: 
 var $42=HEAP32[((18964)>>2)];
 var $43=((($42)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17976,$43) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=109;break; }
 case 13: 
 HEAP32[((18188)>>2)]=0;
 HEAP32[((18184)>>2)]=7472;
 HEAP32[((18192)>>2)]=0;
 HEAP8[(18196)]=0;
 var $44=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1,0); var $46$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 15: 
 var $48=HEAP32[(($44)>>2)];
 HEAP32[((18192)>>2)]=$48;
 var $49=$__p_i_i_i43;
 var $50=HEAP32[((19288)>>2)];
 var $51=($50|0)==-1;
 if($51){label=17;break;}else{label=16;break;}
 case 16: 
 var $_sroa_016_0__idx_i_i44=(($__p_i_i_i43)|0);
 HEAP32[(($_sroa_016_0__idx_i_i44)>>2)]=19288;
 var $_sroa_117_4__idx18_i_i45=(($__p_i_i_i43+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i45)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i46=(($__p_i_i_i43+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i46)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19288,$49) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=109;break; }
 case 17: 
 var $53=HEAP32[((19292)>>2)];
 var $54=((($53)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18184,$54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=109;break; }
 case 18: 
 HEAP32[((18180)>>2)]=0;
 HEAP32[((18176)>>2)]=7392;
 var $56=$__p_i_i_i50;
 var $57=HEAP32[((19280)>>2)];
 var $58=($57|0)==-1;
 if($58){label=20;break;}else{label=19;break;}
 case 19: 
 var $_sroa_016_0__idx_i_i51=(($__p_i_i_i50)|0);
 HEAP32[(($_sroa_016_0__idx_i_i51)>>2)]=19280;
 var $_sroa_117_4__idx18_i_i52=(($__p_i_i_i50+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i52)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i53=(($__p_i_i_i50+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i53)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19280,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=109;break; }
 case 20: 
 var $60=HEAP32[((19284)>>2)];
 var $61=((($60)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18176,$61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=109;break; }
 case 21: 
 HEAP32[((17996)>>2)]=0;
 HEAP32[((17992)>>2)]=7160;
 var $63=$__p_i_i_i57;
 var $64=HEAP32[((18984)>>2)];
 var $65=($64|0)==-1;
 if($65){label=23;break;}else{label=22;break;}
 case 22: 
 var $_sroa_016_0__idx_i_i58=(($__p_i_i_i57)|0);
 HEAP32[(($_sroa_016_0__idx_i_i58)>>2)]=18984;
 var $_sroa_117_4__idx18_i_i59=(($__p_i_i_i57+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i59)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i60=(($__p_i_i_i57+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i60)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18984,$63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=109;break; }
 case 23: 
 var $67=HEAP32[((18988)>>2)];
 var $68=((($67)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17992,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=109;break; }
 case 24: 
 HEAP32[((5196)>>2)]=0;
 HEAP32[((5192)>>2)]=7104;
 var $69=HEAP8[(19864)];
 var $70=(($69<<24)>>24)==0;
 if($70){label=25;break;}else{label=29;break;}
 case 25: 
 var $72=___cxa_guard_acquire(19864);
 var $73=($72|0)==0;
 if($73){label=29;break;}else{label=26;break;}
 case 26: 
 var $75=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=28;break; }
 case 27: 
 HEAP32[((17856)>>2)]=$75;
 label=29;break;
 case 28: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $eh_lpad_body$1=$77$1;var $eh_lpad_body$0=$77$0;label=110;break;
 case 29: 
 var $79=HEAP32[((17856)>>2)];
 HEAP32[((5200)>>2)]=$79;
 var $80=$__p_i_i_i64;
 var $81=HEAP32[((18976)>>2)];
 var $82=($81|0)==-1;
 if($82){label=31;break;}else{label=30;break;}
 case 30: 
 var $_sroa_016_0__idx_i_i65=(($__p_i_i_i64)|0);
 HEAP32[(($_sroa_016_0__idx_i_i65)>>2)]=18976;
 var $_sroa_117_4__idx18_i_i66=(($__p_i_i_i64+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i66)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i67=(($__p_i_i_i64+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i67)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18976,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=109;break; }
 case 31: 
 var $84=HEAP32[((18980)>>2)];
 var $85=((($84)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,5192,$85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=109;break; }
 case 32: 
 HEAP32[((18004)>>2)]=0;
 HEAP32[((18000)>>2)]=7216;
 var $87=$__p_i_i_i71;
 var $88=HEAP32[((18992)>>2)];
 var $89=($88|0)==-1;
 if($89){label=34;break;}else{label=33;break;}
 case 33: 
 var $_sroa_016_0__idx_i_i72=(($__p_i_i_i71)|0);
 HEAP32[(($_sroa_016_0__idx_i_i72)>>2)]=18992;
 var $_sroa_117_4__idx18_i_i73=(($__p_i_i_i71+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i73)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i74=(($__p_i_i_i71+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i74)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18992,$87) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=109;break; }
 case 34: 
 var $91=HEAP32[((18996)>>2)];
 var $92=((($91)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18000,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=109;break; }
 case 35: 
 HEAP32[((18012)>>2)]=0;
 HEAP32[((18008)>>2)]=7272;
 var $94=$__p_i_i_i78;
 var $95=HEAP32[((19000)>>2)];
 var $96=($95|0)==-1;
 if($96){label=37;break;}else{label=36;break;}
 case 36: 
 var $_sroa_016_0__idx_i_i79=(($__p_i_i_i78)|0);
 HEAP32[(($_sroa_016_0__idx_i_i79)>>2)]=19000;
 var $_sroa_117_4__idx18_i_i80=(($__p_i_i_i78+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i80)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i81=(($__p_i_i_i78+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i81)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19000,$94) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=109;break; }
 case 37: 
 var $98=HEAP32[((19004)>>2)];
 var $99=((($98)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18008,$99) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=109;break; }
 case 38: 
 HEAP32[((17908)>>2)]=0;
 HEAP32[((17904)>>2)]=6568;
 HEAP8[(17912)]=46;
 HEAP8[(17913)]=44;
 HEAP32[((17916)>>2)]=0; HEAP32[((17920)>>2)]=0; HEAP32[((17924)>>2)]=0;
 var $101=$__p_i_i_i85;
 var $102=HEAP32[((18904)>>2)];
 var $103=($102|0)==-1;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $_sroa_016_0__idx_i_i86=(($__p_i_i_i85)|0);
 HEAP32[(($_sroa_016_0__idx_i_i86)>>2)]=18904;
 var $_sroa_117_4__idx18_i_i87=(($__p_i_i_i85+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i87)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i88=(($__p_i_i_i85+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i88)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18904,$101) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=109;break; }
 case 40: 
 var $105=HEAP32[((18908)>>2)];
 var $106=((($105)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17904,$106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=109;break; }
 case 41: 
 HEAP32[((5164)>>2)]=0;
 HEAP32[((5160)>>2)]=6520;
 HEAP32[((5168)>>2)]=46;
 HEAP32[((5172)>>2)]=44;
 HEAP32[((5176)>>2)]=0; HEAP32[((5180)>>2)]=0; HEAP32[((5184)>>2)]=0;
 var $108=$__p_i_i_i92;
 var $109=HEAP32[((18896)>>2)];
 var $110=($109|0)==-1;
 if($110){label=43;break;}else{label=42;break;}
 case 42: 
 var $_sroa_016_0__idx_i_i93=(($__p_i_i_i92)|0);
 HEAP32[(($_sroa_016_0__idx_i_i93)>>2)]=18896;
 var $_sroa_117_4__idx18_i_i94=(($__p_i_i_i92+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i94)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i95=(($__p_i_i_i92+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i95)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18896,$108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=109;break; }
 case 43: 
 var $112=HEAP32[((18900)>>2)];
 var $113=((($112)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,5160,$113) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=109;break; }
 case 44: 
 HEAP32[((17972)>>2)]=0;
 HEAP32[((17968)>>2)]=6952;
 var $115=$__p_i_i_i99;
 var $116=HEAP32[((18952)>>2)];
 var $117=($116|0)==-1;
 if($117){label=46;break;}else{label=45;break;}
 case 45: 
 var $_sroa_016_0__idx_i_i100=(($__p_i_i_i99)|0);
 HEAP32[(($_sroa_016_0__idx_i_i100)>>2)]=18952;
 var $_sroa_117_4__idx18_i_i101=(($__p_i_i_i99+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i101)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i102=(($__p_i_i_i99+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i102)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18952,$115) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=109;break; }
 case 46: 
 var $119=HEAP32[((18956)>>2)];
 var $120=((($119)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17968,$120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=109;break; }
 case 47: 
 HEAP32[((17964)>>2)]=0;
 HEAP32[((17960)>>2)]=6880;
 var $122=$__p_i_i_i106;
 var $123=HEAP32[((18944)>>2)];
 var $124=($123|0)==-1;
 if($124){label=49;break;}else{label=48;break;}
 case 48: 
 var $_sroa_016_0__idx_i_i107=(($__p_i_i_i106)|0);
 HEAP32[(($_sroa_016_0__idx_i_i107)>>2)]=18944;
 var $_sroa_117_4__idx18_i_i108=(($__p_i_i_i106+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i108)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i109=(($__p_i_i_i106+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i109)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18944,$122) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=109;break; }
 case 49: 
 var $126=HEAP32[((18948)>>2)];
 var $127=((($126)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17960,$127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=109;break; }
 case 50: 
 HEAP32[((17956)>>2)]=0;
 HEAP32[((17952)>>2)]=6816;
 var $129=$__p_i_i_i113;
 var $130=HEAP32[((18936)>>2)];
 var $131=($130|0)==-1;
 if($131){label=52;break;}else{label=51;break;}
 case 51: 
 var $_sroa_016_0__idx_i_i114=(($__p_i_i_i113)|0);
 HEAP32[(($_sroa_016_0__idx_i_i114)>>2)]=18936;
 var $_sroa_117_4__idx18_i_i115=(($__p_i_i_i113+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i115)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i116=(($__p_i_i_i113+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i116)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18936,$129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=109;break; }
 case 52: 
 var $133=HEAP32[((18940)>>2)];
 var $134=((($133)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17952,$134) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=109;break; }
 case 53: 
 HEAP32[((17948)>>2)]=0;
 HEAP32[((17944)>>2)]=6752;
 var $136=$__p_i_i_i120;
 var $137=HEAP32[((18928)>>2)];
 var $138=($137|0)==-1;
 if($138){label=55;break;}else{label=54;break;}
 case 54: 
 var $_sroa_016_0__idx_i_i121=(($__p_i_i_i120)|0);
 HEAP32[(($_sroa_016_0__idx_i_i121)>>2)]=18928;
 var $_sroa_117_4__idx18_i_i122=(($__p_i_i_i120+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i122)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i123=(($__p_i_i_i120+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i123)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18928,$136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=109;break; }
 case 55: 
 var $140=HEAP32[((18932)>>2)];
 var $141=((($140)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17944,$141) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=109;break; }
 case 56: 
 HEAP32[((18228)>>2)]=0;
 HEAP32[((18224)>>2)]=8544;
 var $143=$__p_i_i_i127;
 var $144=HEAP32[((19768)>>2)];
 var $145=($144|0)==-1;
 if($145){label=58;break;}else{label=57;break;}
 case 57: 
 var $_sroa_016_0__idx_i_i128=(($__p_i_i_i127)|0);
 HEAP32[(($_sroa_016_0__idx_i_i128)>>2)]=19768;
 var $_sroa_117_4__idx18_i_i129=(($__p_i_i_i127+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i129)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i130=(($__p_i_i_i127+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i130)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19768,$143) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=109;break; }
 case 58: 
 var $147=HEAP32[((19772)>>2)];
 var $148=((($147)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18224,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=109;break; }
 case 59: 
 HEAP32[((18220)>>2)]=0;
 HEAP32[((18216)>>2)]=8480;
 var $150=$__p_i_i_i134;
 var $151=HEAP32[((19760)>>2)];
 var $152=($151|0)==-1;
 if($152){label=61;break;}else{label=60;break;}
 case 60: 
 var $_sroa_016_0__idx_i_i135=(($__p_i_i_i134)|0);
 HEAP32[(($_sroa_016_0__idx_i_i135)>>2)]=19760;
 var $_sroa_117_4__idx18_i_i136=(($__p_i_i_i134+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i136)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i137=(($__p_i_i_i134+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i137)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19760,$150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=109;break; }
 case 61: 
 var $154=HEAP32[((19764)>>2)];
 var $155=((($154)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18216,$155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=109;break; }
 case 62: 
 HEAP32[((18212)>>2)]=0;
 HEAP32[((18208)>>2)]=8416;
 var $157=$__p_i_i_i141;
 var $158=HEAP32[((19752)>>2)];
 var $159=($158|0)==-1;
 if($159){label=64;break;}else{label=63;break;}
 case 63: 
 var $_sroa_016_0__idx_i_i142=(($__p_i_i_i141)|0);
 HEAP32[(($_sroa_016_0__idx_i_i142)>>2)]=19752;
 var $_sroa_117_4__idx18_i_i143=(($__p_i_i_i141+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i143)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i144=(($__p_i_i_i141+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i144)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19752,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=109;break; }
 case 64: 
 var $161=HEAP32[((19756)>>2)];
 var $162=((($161)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18208,$162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=109;break; }
 case 65: 
 HEAP32[((18204)>>2)]=0;
 HEAP32[((18200)>>2)]=8352;
 var $164=$__p_i_i_i148;
 var $165=HEAP32[((19744)>>2)];
 var $166=($165|0)==-1;
 if($166){label=67;break;}else{label=66;break;}
 case 66: 
 var $_sroa_016_0__idx_i_i149=(($__p_i_i_i148)|0);
 HEAP32[(($_sroa_016_0__idx_i_i149)>>2)]=19744;
 var $_sroa_117_4__idx18_i_i150=(($__p_i_i_i148+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i150)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i151=(($__p_i_i_i148+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i151)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19744,$164) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=109;break; }
 case 67: 
 var $168=HEAP32[((19748)>>2)];
 var $169=((($168)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,18200,$169) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=109;break; }
 case 68: 
 HEAP32[((17900)>>2)]=0;
 HEAP32[((17896)>>2)]=6224;
 var $171=$__p_i_i_i155;
 var $172=HEAP32[((18856)>>2)];
 var $173=($172|0)==-1;
 if($173){label=70;break;}else{label=69;break;}
 case 69: 
 var $_sroa_016_0__idx_i_i156=(($__p_i_i_i155)|0);
 HEAP32[(($_sroa_016_0__idx_i_i156)>>2)]=18856;
 var $_sroa_117_4__idx18_i_i157=(($__p_i_i_i155+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i157)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i158=(($__p_i_i_i155+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i158)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18856,$171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=109;break; }
 case 70: 
 var $175=HEAP32[((18860)>>2)];
 var $176=((($175)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17896,$176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=71;break; } else { label=109;break; }
 case 71: 
 HEAP32[((17892)>>2)]=0;
 HEAP32[((17888)>>2)]=6184;
 var $178=$__p_i_i_i162;
 var $179=HEAP32[((18848)>>2)];
 var $180=($179|0)==-1;
 if($180){label=73;break;}else{label=72;break;}
 case 72: 
 var $_sroa_016_0__idx_i_i163=(($__p_i_i_i162)|0);
 HEAP32[(($_sroa_016_0__idx_i_i163)>>2)]=18848;
 var $_sroa_117_4__idx18_i_i164=(($__p_i_i_i162+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i164)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i165=(($__p_i_i_i162+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i165)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18848,$178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=109;break; }
 case 73: 
 var $182=HEAP32[((18852)>>2)];
 var $183=((($182)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17888,$183) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=109;break; }
 case 74: 
 HEAP32[((17884)>>2)]=0;
 HEAP32[((17880)>>2)]=6144;
 var $185=$__p_i_i_i169;
 var $186=HEAP32[((18840)>>2)];
 var $187=($186|0)==-1;
 if($187){label=76;break;}else{label=75;break;}
 case 75: 
 var $_sroa_016_0__idx_i_i170=(($__p_i_i_i169)|0);
 HEAP32[(($_sroa_016_0__idx_i_i170)>>2)]=18840;
 var $_sroa_117_4__idx18_i_i171=(($__p_i_i_i169+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i171)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i172=(($__p_i_i_i169+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i172)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18840,$185) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=109;break; }
 case 76: 
 var $189=HEAP32[((18844)>>2)];
 var $190=((($189)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17880,$190) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=109;break; }
 case 77: 
 HEAP32[((17876)>>2)]=0;
 HEAP32[((17872)>>2)]=6104;
 var $192=$__p_i_i_i176;
 var $193=HEAP32[((18832)>>2)];
 var $194=($193|0)==-1;
 if($194){label=79;break;}else{label=78;break;}
 case 78: 
 var $_sroa_016_0__idx_i_i177=(($__p_i_i_i176)|0);
 HEAP32[(($_sroa_016_0__idx_i_i177)>>2)]=18832;
 var $_sroa_117_4__idx18_i_i178=(($__p_i_i_i176+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i178)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i179=(($__p_i_i_i176+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i179)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18832,$192) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=109;break; }
 case 79: 
 var $196=HEAP32[((18836)>>2)];
 var $197=((($196)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17872,$197) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=80;break; } else { label=109;break; }
 case 80: 
 HEAP32[((5148)>>2)]=0;
 HEAP32[((5144)>>2)]=6424;
 HEAP32[((5152)>>2)]=6472;
 var $199=$__p_i_i_i183;
 var $200=HEAP32[((18888)>>2)];
 var $201=($200|0)==-1;
 if($201){label=82;break;}else{label=81;break;}
 case 81: 
 var $_sroa_016_0__idx_i_i184=(($__p_i_i_i183)|0);
 HEAP32[(($_sroa_016_0__idx_i_i184)>>2)]=18888;
 var $_sroa_117_4__idx18_i_i185=(($__p_i_i_i183+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i185)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i186=(($__p_i_i_i183+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i186)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18888,$199) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=109;break; }
 case 82: 
 var $203=HEAP32[((18892)>>2)];
 var $204=((($203)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,5144,$204) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=83;break; } else { label=109;break; }
 case 83: 
 HEAP32[((5132)>>2)]=0;
 HEAP32[((5128)>>2)]=6328;
 HEAP32[((5136)>>2)]=6376;
 var $206=$__p_i_i_i190;
 var $207=HEAP32[((18880)>>2)];
 var $208=($207|0)==-1;
 if($208){label=85;break;}else{label=84;break;}
 case 84: 
 var $_sroa_016_0__idx_i_i191=(($__p_i_i_i190)|0);
 HEAP32[(($_sroa_016_0__idx_i_i191)>>2)]=18880;
 var $_sroa_117_4__idx18_i_i192=(($__p_i_i_i190+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i192)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i193=(($__p_i_i_i190+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i193)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18880,$206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=109;break; }
 case 85: 
 var $210=HEAP32[((18884)>>2)];
 var $211=((($210)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,5128,$211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=86;break; } else { label=109;break; }
 case 86: 
 HEAP32[((5116)>>2)]=0;
 HEAP32[((5112)>>2)]=7328;
 var $212=HEAP8[(19864)];
 var $213=(($212<<24)>>24)==0;
 if($213){label=87;break;}else{label=91;break;}
 case 87: 
 var $215=___cxa_guard_acquire(19864);
 var $216=($215|0)==0;
 if($216){label=91;break;}else{label=88;break;}
 case 88: 
 var $218=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=89;break; } else { label=90;break; }
 case 89: 
 HEAP32[((17856)>>2)]=$218;
 label=91;break;
 case 90: 
 var $220$0 = ___cxa_find_matching_catch(-1, -1); var $220$1 = tempRet0;
 var $eh_lpad_body$1=$220$1;var $eh_lpad_body$0=$220$0;label=110;break;
 case 91: 
 var $222=HEAP32[((17856)>>2)];
 HEAP32[((5120)>>2)]=$222;
 HEAP32[((5112)>>2)]=6296;
 var $223=$__p_i_i_i199;
 var $224=HEAP32[((18872)>>2)];
 var $225=($224|0)==-1;
 if($225){label=93;break;}else{label=92;break;}
 case 92: 
 var $_sroa_016_0__idx_i_i200=(($__p_i_i_i199)|0);
 HEAP32[(($_sroa_016_0__idx_i_i200)>>2)]=18872;
 var $_sroa_117_4__idx18_i_i201=(($__p_i_i_i199+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i201)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i202=(($__p_i_i_i199+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i202)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18872,$223) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=109;break; }
 case 93: 
 var $227=HEAP32[((18876)>>2)];
 var $228=((($227)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,5112,$228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=94;break; } else { label=109;break; }
 case 94: 
 HEAP32[((5100)>>2)]=0;
 HEAP32[((5096)>>2)]=7328;
 var $229=HEAP8[(19864)];
 var $230=(($229<<24)>>24)==0;
 if($230){label=95;break;}else{label=99;break;}
 case 95: 
 var $232=___cxa_guard_acquire(19864);
 var $233=($232|0)==0;
 if($233){label=99;break;}else{label=96;break;}
 case 96: 
 var $235=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=97;break; } else { label=98;break; }
 case 97: 
 HEAP32[((17856)>>2)]=$235;
 label=99;break;
 case 98: 
 var $237$0 = ___cxa_find_matching_catch(-1, -1); var $237$1 = tempRet0;
 var $eh_lpad_body$1=$237$1;var $eh_lpad_body$0=$237$0;label=110;break;
 case 99: 
 var $239=HEAP32[((17856)>>2)];
 HEAP32[((5104)>>2)]=$239;
 HEAP32[((5096)>>2)]=6264;
 var $240=$__p_i_i_i209;
 var $241=HEAP32[((18864)>>2)];
 var $242=($241|0)==-1;
 if($242){label=101;break;}else{label=100;break;}
 case 100: 
 var $_sroa_016_0__idx_i_i210=(($__p_i_i_i209)|0);
 HEAP32[(($_sroa_016_0__idx_i_i210)>>2)]=18864;
 var $_sroa_117_4__idx18_i_i211=(($__p_i_i_i209+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i211)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i212=(($__p_i_i_i209+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i212)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18864,$240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=101;break; } else { label=109;break; }
 case 101: 
 var $244=HEAP32[((18868)>>2)];
 var $245=((($244)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,5096,$245) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=102;break; } else { label=109;break; }
 case 102: 
 HEAP32[((17940)>>2)]=0;
 HEAP32[((17936)>>2)]=6656;
 var $247=$__p_i_i_i216;
 var $248=HEAP32[((18920)>>2)];
 var $249=($248|0)==-1;
 if($249){label=104;break;}else{label=103;break;}
 case 103: 
 var $_sroa_016_0__idx_i_i217=(($__p_i_i_i216)|0);
 HEAP32[(($_sroa_016_0__idx_i_i217)>>2)]=18920;
 var $_sroa_117_4__idx18_i_i218=(($__p_i_i_i216+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i218)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i219=(($__p_i_i_i216+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i219)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18920,$247) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=109;break; }
 case 104: 
 var $251=HEAP32[((18924)>>2)];
 var $252=((($251)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17936,$252) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=105;break; } else { label=109;break; }
 case 105: 
 HEAP32[((17932)>>2)]=0;
 HEAP32[((17928)>>2)]=6616;
 var $254=$__p_i_i_i223;
 var $255=HEAP32[((18912)>>2)];
 var $256=($255|0)==-1;
 if($256){label=107;break;}else{label=106;break;}
 case 106: 
 var $_sroa_016_0__idx_i_i224=(($__p_i_i_i223)|0);
 HEAP32[(($_sroa_016_0__idx_i_i224)>>2)]=18912;
 var $_sroa_117_4__idx18_i_i225=(($__p_i_i_i223+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i_i225)>>2)]=(30);
 var $_sroa_219_8__idx20_i_i226=(($__p_i_i_i223+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i_i226)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18912,$254) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=109;break; }
 case 107: 
 var $258=HEAP32[((18916)>>2)];
 var $259=((($258)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,17928,$259) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=108;break; } else { label=109;break; }
 case 108: 
 STACKTOP=sp;return;
 case 109: 
 var $261$0 = ___cxa_find_matching_catch(-1, -1); var $261$1 = tempRet0;
 var $eh_lpad_body$1=$261$1;var $eh_lpad_body$0=$261$0;label=110;break;
 case 110: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $262=HEAP8[($22)];
 var $263=$262&1;
 var $264=(($263<<24)>>24)==0;
 if($264){label=113;break;}else{label=111;break;}
 case 111: 
 var $266=(($this+152)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==0;
 if($268){label=113;break;}else{label=112;break;}
 case 112: 
 _free($267);
 label=113;break;
 case 113: 
 var $270=HEAP32[(($4)>>2)];
 var $271=$270;
 var $272=($270|0)==0;
 if($272){label=119;break;}else{label=114;break;}
 case 114: 
 var $273=HEAP32[(($5)>>2)];
 var $274=($270|0)==($273|0);
 if($274){label=116;break;}else{label=115;break;}
 case 115: 
 var $scevgep_i_i_i=((($273)-(4))|0);
 var $scevgep25_i_i_i=$scevgep_i_i_i;
 var $275=(((-$271))|0);
 var $uglygep_i_i_i=(($scevgep25_i_i_i+$275)|0);
 var $uglygep26_i_i_i=$uglygep_i_i_i;
 var $276=$uglygep26_i_i_i>>>2;
 var $277=$276^-1;
 var $scevgep27_i_i_i=(($273+($277<<2))|0);
 HEAP32[(($5)>>2)]=$scevgep27_i_i_i;
 label=116;break;
 case 116: 
 var $278=(($this+24)|0);
 var $279=$278;
 var $280=($270|0)==($279|0);
 if($280){label=117;break;}else{label=118;break;}
 case 117: 
 HEAP8[($7)]=0;
 label=119;break;
 case 118: 
 var $283=$270;
 _free($283);
 label=119;break;
 case 119: 
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 var $2=(($f+4)|0);
 var $3=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+1,tempValue);
 var $4=(($this+12)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>($id>>>0);
 if($12){var $156=$7;label=63;break;}else{label=2;break;}
 case 2: 
 var $14=((($id)+(1))|0);
 var $15=($11>>>0)<($14>>>0);
 if($15){label=3;break;}else{label=55;break;}
 case 3: 
 var $17=((($14)-($11))|0);
 var $18=(($this+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19;
 var $21=((($20)-($8))|0);
 var $22=$21>>2;
 var $23=($22>>>0)<($17>>>0);
 if($23){label=7;break;}else{var $_0_i_i=$17;var $24=$5;label=4;break;}
 case 4: 
 var $24;
 var $_0_i_i;
 var $25=($24|0)==0;
 if($25){var $27=0;label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($24)>>2)]=0;
 var $_pre11_i_i=HEAP32[(($4)>>2)];
 var $27=$_pre11_i_i;label=6;break;
 case 6: 
 var $27;
 var $28=(($27+4)|0);
 HEAP32[(($4)>>2)]=$28;
 var $29=((($_0_i_i)-(1))|0);
 var $30=($29|0)==0;
 if($30){label=54;break;}else{var $_0_i_i=$29;var $24=$28;label=4;break;}
 case 7: 
 var $32=(($this+24)|0);
 var $33=($14>>>0)>1073741823;
 if($33){label=8;break;}else{label=30;break;}
 case 8: 
 var $35=___cxa_allocate_exception(8);
 var $36=$35;
 HEAP32[(($36)>>2)]=6072;
 var $37=(($35+4)|0);
 var $38=$37;
 var $39=($37|0)==0;
 if($39){label=26;break;}else{label=9;break;}
 case 9: 
 var $40=(function() { try { __THREW__ = 0; return _strlen(2568) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=28;break; }
 case 10: 
 var $41=((($40)+(1))|0);
 var $42=((($40)+(13))|0);
 var $43=($42|0)==0;
 var $_size_i_i_i=($43?1:$42);
 label=11;break;
 case 11: 
 var $45=_malloc($_size_i_i_i);
 var $46=($45|0)==0;
 if($46){label=12;break;}else{label=21;break;}
 case 12: 
 var $48=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $49=($48|0)==0;
 if($49){label=19;break;}else{label=13;break;}
 case 13: 
 var $51=$48;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 14: 
 var $lpad_loopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_loopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_loopexit_i_i_i$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_nonloopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_nonloopexit_i_i_i$0;label=16;break;
 case 16: 
 var $lpad_phi_i_i_i$0;
 var $lpad_phi_i_i_i$1;
 var $53=$lpad_phi_i_i_i$1;
 var $54=($53|0)<0;
 if($54){label=17;break;}else{var $eh_lpad_body4_i_i$1=$lpad_phi_i_i_i$1;var $eh_lpad_body4_i_i$0=$lpad_phi_i_i_i$0;label=23;break;}
 case 17: 
 var $56=$lpad_phi_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $58=___cxa_allocate_exception(4);
 var $59=$58;
 HEAP32[(($59)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($58,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $61=$45;
 var $62=(($45+4)|0);
 var $63=$62;
 HEAP32[(($63)>>2)]=$40;
 HEAP32[(($61)>>2)]=$40;
 var $64=(($45+12)|0);
 HEAP32[(($38)>>2)]=$64;
 var $65=(($45+8)|0);
 var $66=$65;
 HEAP32[(($66)>>2)]=0;
 assert($41 % 1 === 0);(_memcpy($64, 2568, $41)|0);
 label=26;break;
 case 22: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $eh_lpad_body4_i_i$1=$68$1;var $eh_lpad_body4_i_i$0=$68$0;label=23;break;
 case 23: 
 var $eh_lpad_body4_i_i$0;
 var $eh_lpad_body4_i_i$1;
 var $69=$eh_lpad_body4_i_i$1;
 var $70=($69|0)<0;
 if($70){label=24;break;}else{var $eh_lpad_body_i_i$1=$eh_lpad_body4_i_i$1;var $eh_lpad_body_i_i$0=$eh_lpad_body4_i_i$0;label=29;break;}
 case 24: 
 var $72=$eh_lpad_body4_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=28;break; }
 case 25: 
 throw "Reached an unreachable!";
 case 26: 
 var $73=$35;
 HEAP32[(($73)>>2)]=6008;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,13584,(288)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=58;break; }
 case 27: 
 throw "Reached an unreachable!";
 case 28: 
 var $75$0 = ___cxa_find_matching_catch(-1, -1); var $75$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$75$1;var $eh_lpad_body_i_i$0=$75$0;label=29;break;
 case 29: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 ___cxa_free_exception($35);
 var $eh_lpad_body$1=$eh_lpad_body_i_i$1;var $eh_lpad_body$0=$eh_lpad_body_i_i$0;label=59;break;
 case 30: 
 var $77=((($20)-($9))|0);
 var $78=$77>>2;
 var $79=($78>>>0)>536870910;
 if($79){var $_04851_i=1073741823;label=34;break;}else{label=31;break;}
 case 31: 
 var $80=$77>>1;
 var $81=($80>>>0)<($14>>>0);
 var $_sroa_speculated_i=($81?$14:$80);
 var $82=($_sroa_speculated_i|0)==0;
 if($82){var $111=0;var $_049_i=0;label=46;break;}else{label=32;break;}
 case 32: 
 var $84=(($this+136)|0);
 var $85=HEAP8[($84)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 var $88=($_sroa_speculated_i>>>0)<29;
 var $or_cond_i_i_i=$87&$88;
 if($or_cond_i_i_i){label=33;break;}else{var $_04851_i=$_sroa_speculated_i;label=34;break;}
 case 33: 
 HEAP8[($84)]=1;
 var $90=$32;
 var $111=$90;var $_049_i=$_sroa_speculated_i;label=46;break;
 case 34: 
 var $_04851_i;
 var $91=$_04851_i<<2;
 var $92=($91|0)==0;
 var $_size_i_i=($92?1:$91);
 label=35;break;
 case 35: 
 var $94=_malloc($_size_i_i);
 var $95=($94|0)==0;
 if($95){label=36;break;}else{label=45;break;}
 case 36: 
 var $97=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=37;break;}
 case 37: 
 var $100=$97;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$100]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 38: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=40;break;
 case 39: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=40;break;
 case 40: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $102=$lpad_phi_i_i$1;
 var $103=($102|0)<0;
 if($103){label=41;break;}else{var $eh_lpad_body$1=$lpad_phi_i_i$1;var $eh_lpad_body$0=$lpad_phi_i_i$0;label=59;break;}
 case 41: 
 var $105=$lpad_phi_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=58;break; }
 case 42: 
 throw "Reached an unreachable!";
 case 43: 
 var $107=___cxa_allocate_exception(4);
 var $108=$107;
 HEAP32[(($108)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($107,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=39;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $110=$94;
 var $111=$110;var $_049_i=$_04851_i;label=46;break;
 case 46: 
 var $_049_i;
 var $111;
 var $112=(($111+($11<<2))|0);
 var $_0_i39_i=$17;var $114=$112;label=47;break;
 case 47: 
 var $114;
 var $_0_i39_i;
 var $115=($114|0)==0;
 if($115){var $117=0;label=49;break;}else{label=48;break;}
 case 48: 
 HEAP32[(($114)>>2)]=0;
 var $117=$114;label=49;break;
 case 49: 
 var $117;
 var $118=(($117+4)|0);
 var $119=((($_0_i39_i)-(1))|0);
 var $120=($119|0)==0;
 if($120){label=50;break;}else{var $_0_i39_i=$119;var $114=$118;label=47;break;}
 case 50: 
 var $121=(($111+($_049_i<<2))|0);
 var $122=HEAP32[(($6)>>2)];
 var $123=HEAP32[(($4)>>2)];
 var $124=$123;
 var $125=$122;
 var $126=((($124)-($125))|0);
 var $127=$126>>2;
 var $_sum_i=((($11)-($127))|0);
 var $128=(($111+($_sum_i<<2))|0);
 var $129=$128;
 var $130=$122;
 assert($126 % 1 === 0);(_memcpy($129, $130, $126)|0);
 HEAP32[(($6)>>2)]=$128;
 HEAP32[(($4)>>2)]=$118;
 HEAP32[(($18)>>2)]=$121;
 var $131=($122|0)==0;
 if($131){label=54;break;}else{label=51;break;}
 case 51: 
 var $133=$32;
 var $134=($122|0)==($133|0);
 if($134){label=52;break;}else{label=53;break;}
 case 52: 
 var $136=(($this+136)|0);
 HEAP8[($136)]=0;
 label=54;break;
 case 53: 
 _free($130);
 label=54;break;
 case 54: 
 var $_pre25=HEAP32[(($6)>>2)];
 var $156=$_pre25;label=63;break;
 case 55: 
 var $138=($11>>>0)>($14>>>0);
 if($138){label=56;break;}else{var $156=$7;label=63;break;}
 case 56: 
 var $140=(($7+($14<<2))|0);
 var $141=($140|0)==($5|0);
 if($141){var $156=$7;label=63;break;}else{label=57;break;}
 case 57: 
 var $scevgep_i=((($5)-(4))|0);
 var $scevgep20_i=$scevgep_i;
 var $scevgep2122_i=$140;
 var $142=(((-$scevgep2122_i))|0);
 var $uglygep_i=(($scevgep20_i+$142)|0);
 var $uglygep23_i=$uglygep_i;
 var $143=$uglygep23_i>>>2;
 var $144=$143^-1;
 var $scevgep24_i=(($5+($144<<2))|0);
 HEAP32[(($4)>>2)]=$scevgep24_i;
 var $156=$7;label=63;break;
 case 58: 
 var $146$0 = ___cxa_find_matching_catch(-1, -1); var $146$1 = tempRet0;
 var $eh_lpad_body$1=$146$1;var $eh_lpad_body$0=$146$0;label=59;break;
 case 59: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $147=($f|0)==0;
 if($147){label=62;break;}else{label=60;break;}
 case 60: 
 var $149=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+-1,tempValue);
 var $150=($149|0)==0;
 if($150){label=61;break;}else{label=62;break;}
 case 61: 
 var $152=$f;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+8)|0);
 var $155=HEAP32[(($154)>>2)];
 FUNCTION_TABLE[$155]($1);
 label=62;break;
 case 62: 
 ___resumeException($eh_lpad_body$0)
 case 63: 
 var $156;
 var $157=(($156+($id<<2))|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($158|0)==0;
 if($159){var $170=$156;label=67;break;}else{label=64;break;}
 case 64: 
 var $161=(($158+4)|0);
 var $162=(tempValue=HEAP32[(($161)>>2)],HEAP32[(($161)>>2)]=tempValue+-1,tempValue);
 var $163=($162|0)==0;
 if($163){label=65;break;}else{label=66;break;}
 case 65: 
 var $165=(($158)|0);
 var $166=$158;
 var $167=HEAP32[(($166)>>2)];
 var $168=(($167+8)|0);
 var $169=HEAP32[(($168)>>2)];
 FUNCTION_TABLE[$169]($165);
 label=66;break;
 case 66: 
 var $_pre=HEAP32[(($6)>>2)];
 var $170=$_pre;label=67;break;
 case 67: 
 var $170;
 var $171=(($170+($id<<2))|0);
 HEAP32[(($171)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 __ZNSt3__16locale5__impD2Ev($this);
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7360;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){var $31=$3;label=7;break;}else{var $i_09=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_09;
 var $9=(($8+($i_09<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $24=$7;var $23=$8;label=6;break;}else{label=3;break;}
 case 3: 
 var $13=(($10+4)|0);
 var $14=(tempValue=HEAP32[(($13)>>2)],HEAP32[(($13)>>2)]=tempValue+-1,tempValue);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=(($10)|0);
 var $18=$10;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$21]($17);
 label=5;break;
 case 5: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre10=HEAP32[(($4)>>2)];
 var $24=$_pre;var $23=$_pre10;label=6;break;
 case 6: 
 var $23;
 var $24;
 var $25=((($i_09)+(1))|0);
 var $26=$24;
 var $27=$23;
 var $28=((($26)-($27))|0);
 var $29=$28>>2;
 var $30=($25>>>0)<($29>>>0);
 if($30){var $i_09=$25;var $8=$23;var $7=$24;label=2;break;}else{var $31=$23;label=7;break;}
 case 7: 
 var $31;
 var $32=(($this+144)|0);
 var $33=$32;
 var $34=HEAP8[($33)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){var $42=$31;label=10;break;}else{label=8;break;}
 case 8: 
 var $38=(($this+152)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){var $42=$31;label=10;break;}else{label=9;break;}
 case 9: 
 _free($39);
 var $_pre1=HEAP32[(($4)>>2)];
 var $42=$_pre1;label=10;break;
 case 10: 
 var $42;
 var $43=$42;
 var $44=($42|0)==0;
 if($44){label=16;break;}else{label=11;break;}
 case 11: 
 var $45=HEAP32[(($2)>>2)];
 var $46=($42|0)==($45|0);
 if($46){label=13;break;}else{label=12;break;}
 case 12: 
 var $scevgep_i_i_i=((($45)-(4))|0);
 var $scevgep25_i_i_i=$scevgep_i_i_i;
 var $47=(((-$43))|0);
 var $uglygep_i_i_i=(($scevgep25_i_i_i+$47)|0);
 var $uglygep26_i_i_i=$uglygep_i_i_i;
 var $48=$uglygep26_i_i_i>>>2;
 var $49=$48^-1;
 var $scevgep27_i_i_i=(($45+($49<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep27_i_i_i;
 label=13;break;
 case 13: 
 var $50=(($this+24)|0);
 var $51=$50;
 var $52=($42|0)==($51|0);
 if($52){label=14;break;}else{label=15;break;}
 case 14: 
 var $54=(($this+136)|0);
 HEAP8[($54)]=0;
 label=16;break;
 case 15: 
 var $56=$42;
 _free($56);
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16localeC2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19848)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=8;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19848);
 var $5=($4|0)==0;
 if($5){label=8;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19856)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19856);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__impC2Ej(18016,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 6: 
 HEAP32[((17840)>>2)]=18016;
 label=7;break;
 case 7: 
 var $15=HEAP32[((17840)>>2)];
 HEAP32[((17848)>>2)]=$15;
 var $16=(($15+4)|0);
 var $17=(tempValue=HEAP32[(($16)>>2)],HEAP32[(($16)>>2)]=tempValue+1,tempValue);
 label=8;break;
 case 8: 
 var $18=(($this)|0);
 var $19=HEAP32[((17848)>>2)];
 HEAP32[(($18)>>2)]=$19;
 var $20=(($19+4)|0);
 var $21=(tempValue=HEAP32[(($20)>>2)],HEAP32[(($20)>>2)]=tempValue+1,tempValue);
 return;
 case 9: 
 var $22$0 = ___cxa_find_matching_catch(-1, -1,0); var $22$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this_0_0_val,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=$__p_i_i;
 var $2=(($x)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==-1;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sroa_016_0__idx_i=(($__p_i_i)|0);
 HEAP32[(($_sroa_016_0__idx_i)>>2)]=$x;
 var $_sroa_117_4__idx18_i=(($__p_i_i+4)|0);
 HEAP32[(($_sroa_117_4__idx18_i)>>2)]=(30);
 var $_sroa_219_8__idx20_i=(($__p_i_i+8)|0);
 HEAP32[(($_sroa_219_8__idx20_i)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($2,$1);
 label=3;break;
 case 3: 
 var $6=(($x+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=((($7)-(1))|0);
 var $9=(($this_0_0_val+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this_0_0_val+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$10;
 var $14=$12;
 var $15=((($13)-($14))|0);
 var $16=$15>>2;
 var $17=($16>>>0)>($8>>>0);
 if($17){label=4;break;}else{label=5;break;}
 case 4: 
 var $18=(($12+($8<<2))|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=6;break;}
 case 5: 
 var $21=___cxa_allocate_exception(4);
 var $22=$21;
 HEAP32[(($22)>>2)]=5880;
 ___cxa_throw($21,13520,(594));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $19;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__16locale2id6__initEv($this){
 var label=0;
 var $1=(tempValue=HEAP32[((19008)>>2)],HEAP32[((19008)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $11=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<1))|0);
 var $7=HEAP16[(($6)>>1)];
 var $8=$7&$m;
 var $9=(($8<<16)>>16)!=0;
 var $11=$9;label=5;break;
 case 5: 
 var $11;
 return $11;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_08_lcssa=$low;label=7;break;}else{var $_0810=$low;var $_011=$vec;label=2;break;}
 case 2: 
 var $_011;
 var $_0810;
 var $2=HEAP32[(($_0810)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $_off0=$9;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_011)>>1)]=$_off0;
 var $11=(($_0810+4)|0);
 var $12=(($_011+2)|0);
 var $13=($11|0)==($high|0);
 if($13){var $_08_lcssa=$high;label=7;break;}else{var $_0810=$11;var $_011=$12;label=2;break;}
 case 7: 
 var $_08_lcssa;
 return $_08_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP32[(($_09)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<1))|0);
 var $9=HEAP16[(($8)>>1)];
 var $10=$9&$m;
 var $11=(($10<<16)>>16)==0;
 if($11){label=6;break;}else{var $_0_lcssa=$_09;label=7;break;}
 case 6: 
 var $13=(($_09+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_09=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0=$low;label=2;break;
 case 2: 
 var $_0;
 var $2=($_0|0)==($high|0);
 if($2){var $_0_lcssa=$high;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_0)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_0;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $9=HEAP32[(($6)>>2)];
 var $10=(($9+($4<<1))|0);
 var $11=HEAP16[(($10)>>1)];
 var $12=$11&$m;
 var $13=(($12<<16)>>16)==0;
 var $14=(($_0+4)|0);
 if($13){var $_0_lcssa=$_0;label=7;break;}else{var $_0=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $9=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $9=$7;label=5;break;
 case 5: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_08=$low;label=2;break;}
 case 2: 
 var $_08;
 var $2=HEAP32[(($_08)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $11=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $11=$9;label=6;break;
 case 6: 
 var $11;
 HEAP32[(($_08)>>2)]=$11;
 var $12=(($_08+4)|0);
 var $13=($12|0)==($high|0);
 if($13){var $_0_lcssa=$high;label=7;break;}else{var $_08=$12;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $9=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $5=HEAP32[(($2)>>2)];
 var $6=(($5+($c<<2))|0);
 var $7=HEAP32[(($6)>>2)];
 var $9=$7;label=5;break;
 case 5: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_08=$low;label=2;break;}
 case 2: 
 var $_08;
 var $2=HEAP32[(($_08)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $11=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($2<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $11=$9;label=6;break;
 case 6: 
 var $11;
 HEAP32[(($_08)>>2)]=$11;
 var $12=(($_08+4)|0);
 var $13=($12|0)==($high|0);
 if($13){var $_0_lcssa=$high;label=7;break;}else{var $_08=$12;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;
 var $1=(($c<<24)>>24);
 return $1;
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_07_lcssa=$low;label=3;break;}else{var $_078=$low;var $_09=$dest;label=2;break;}
 case 2: 
 var $_09;
 var $_078;
 var $2=HEAP8[($_078)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_09)>>2)]=$3;
 var $4=(($_078+1)|0);
 var $5=(($_09+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_07_lcssa=$high;label=3;break;}else{var $_078=$4;var $_09=$5;label=2;break;}
 case 3: 
 var $_07_lcssa;
 return $_07_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;
 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_010_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low14=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep13=$scevgep;
 var $2=(((-$low14))|0);
 var $uglygep=(($scevgep13+$2)|0);
 var $uglygep15=$uglygep;
 var $3=$uglygep15>>>2;
 var $4=((($3)+(1))|0);
 var $_01011=$low;var $_012=$dest;label=3;break;
 case 3: 
 var $_012;
 var $_01011;
 var $6=HEAP32[(($_01011)>>2)];
 var $isascii=($6>>>0)<128;
 var $7=(($6)&255);
 var $_dfault=($isascii?$7:$dfault);
 HEAP8[($_012)]=$_dfault;
 var $8=(($_01011+4)|0);
 var $9=(($_012+1)|0);
 var $10=($8|0)==($high|0);
 if($10){label=4;break;}else{var $_01011=$8;var $_012=$9;label=3;break;}
 case 4: 
 var $scevgep16=(($low+($4<<2))|0);
 var $_010_lcssa=$scevgep16;label=5;break;
 case 5: 
 var $_010_lcssa;
 return $_010_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7472;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 _free($10);
 label=4;break;
 case 4: 
 var $11=($this|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 var $12=$this;
 _free($12);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7472;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$3;
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c<<24)>>24)<0;
 if($1){var $12=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $3=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $5$0 = ___cxa_find_matching_catch(-1, -1,0); var $5$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($3)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP8[($_09)];
 var $3=(($2<<24)>>24)<0;
 if($3){var $14=$2;label=6;break;}else{label=3;break;}
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_09)]=$14;
 var $15=(($_09+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_09=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c<<24)>>24);
 var $2=(($c<<24)>>24)<0;
 if($2){var $12=$c;label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 var $7=HEAP32[(($4)>>2)];
 var $8=(($7+($1<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_09=$low;label=2;break;}
 case 2: 
 var $_09;
 var $2=HEAP8[($_09)];
 var $3=(($2<<24)>>24)<0;
 if($3){var $14=$2;label=6;break;}else{label=3;break;}
 case 3: 
 var $5=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $7$0 = ___cxa_find_matching_catch(-1, -1,0); var $7$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($5)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_09)]=$14;
 var $15=(($_09+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_09=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;
 return $c;
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_07_lcssa=$low;label=3;break;}else{var $_078=$low;var $_09=$dest;label=2;break;}
 case 2: 
 var $_09;
 var $_078;
 var $2=HEAP8[($_078)];
 HEAP8[($_09)]=$2;
 var $3=(($_078+1)|0);
 var $4=(($_09+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_07_lcssa=$high;label=3;break;}else{var $_078=$3;var $_09=$4;label=2;break;}
 case 3: 
 var $_07_lcssa;
 return $_07_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;
 var $1=(($c<<24)>>24)<0;
 var $dfault_c=($1?$dfault:$c);
 return $dfault_c;
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_010_lcssa=$low;label=3;break;}else{var $_01012=$low;var $_013=$dest;label=2;break;}
 case 2: 
 var $_013;
 var $_01012;
 var $2=HEAP8[($_01012)];
 var $3=(($2<<24)>>24)<0;
 var $dfault_=($3?$dfault:$2);
 HEAP8[($_013)]=$dfault_;
 var $4=(($_01012+1)|0);
 var $5=(($_013+1)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_010_lcssa=$high;label=3;break;}else{var $_01012=$4;var $_013=$5;label=2;break;}
 case 3: 
 var $_010_lcssa;
 return $_010_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;
 var $1=$end;
 var $2=$frm;
 var $3=((($1)-($2))|0);
 var $4=($3>>>0)<($mx>>>0);
 var $_sroa_speculated=($4?$3:$mx);
 return $_sroa_speculated;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i_i=sp;
 var $buf_i=(sp)+(8);
 var $tmp=(sp)+(264);
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $2=($fend_0|0)==($frm_end|0);
 if($2){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($fend_0)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_0+4)|0);
 if($5){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$6;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $8=($frm|0)==($frm_end|0);
 var $9=($to|0)==($to_end|0);
 var $or_cond251=$8|$9;
 if($or_cond251){var $176=$frm;label=68;break;}else{label=5;break;}
 case 5: 
 var $10=$to_end;
 var $11=(($this+8)|0);
 var $12=(($tmp)|0);
 var $13=(($buf_i)|0);
 var $14=(($buf_i_i)|0);
 var $_0194252=$to;var $_0193253=$frm;var $fend_1254=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1254;
 var $_0193253;
 var $_0194252;
 var $16=$fend_1254;
 var $17=$_0193253;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=$_0194252;
 var $21=((($10)-($20))|0);
 var $22=HEAP32[(($11)>>2)];
 var $23=_uselocale($22);
 var $24=HEAP32[(($frm_nxt)>>2)];
 var $25=($_0194252|0)!=0;
 var $_037_ph_i=($25?$21:256);
 var $s_0_ph_i=($25?$_0194252:$13);
 var $26=($24|0)==0;
 var $27=($_037_ph_i|0)==0;
 var $or_cond56_i=$26|$27;
 if($or_cond56_i){var $cnt_1_i=0;var $_1_i=$19;var $_239_i=$_037_ph_i;var $s_053_i=$s_0_ph_i;var $ws_i_8=$24;label=35;break;}else{var $_03757_i=$_037_ph_i;var $_058_i=$19;var $cnt_059_i=0;var $s_060_i=$s_0_ph_i;var $ws_i_0=$24;label=7;break;}
 case 7: 
 var $ws_i_0;
 var $s_060_i;
 var $cnt_059_i;
 var $_058_i;
 var $_03757_i;
 var $28=($_058_i>>>0)>=($_03757_i>>>0);
 var $29=($_058_i>>>0)>32;
 var $or_cond40_i=$28|$29;
 if($or_cond40_i){label=8;break;}else{var $cnt_1_i=$cnt_059_i;var $_1_i=$_058_i;var $_239_i=$_03757_i;var $s_053_i=$s_060_i;var $ws_i_8=$ws_i_0;label=35;break;}
 case 8: 
 var $_037__0_i=($28?$_03757_i:$_058_i);
 var $30=((($_058_i)-($_037__0_i))|0);
 var $31=($s_060_i|0)==0;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 var $32=($_037__0_i>>>0)>3;
 if($32){var $_25272_i_i=$_037__0_i;var $_04973_i_i=$s_060_i;var $ws_i_1=$ws_i_0;label=14;break;}else{var $_252_lcssa_i_i=$_037__0_i;var $_049_lcssa_i_i=$s_060_i;var $ws_i_2=$ws_i_0;label=15;break;}
 case 10: 
 var $34=HEAP32[(($ws_i_0)>>2)];
 var $35=($34|0)==0;
 if($35){var $_0_i_i2=0;var $ws_i_7=$ws_i_0;label=32;break;}else{var $_05055_i_i=0;var $ws2_056_i_i=$ws_i_0;var $36=$34;label=11;break;}
 case 11: 
 var $36;
 var $ws2_056_i_i;
 var $_05055_i_i;
 var $37=($36>>>0)>127;
 if($37){label=12;break;}else{var $_pn_i_i=1;label=13;break;}
 case 12: 
 var $39=_wcrtomb($14,$36);
 var $40=($39|0)==-1;
 if($40){var $cnt_1_i=-1;var $_1_i=$30;var $_239_i=0;var $s_053_i=$s_060_i;var $ws_i_8=$ws_i_0;label=35;break;}else{var $_pn_i_i=$39;label=13;break;}
 case 13: 
 var $_pn_i_i;
 var $_151_i_i=((($_pn_i_i)+($_05055_i_i))|0);
 var $42=(($ws2_056_i_i+4)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){var $_0_i_i=$_151_i_i;var $ws_i_5=$ws_i_0;label=31;break;}else{var $_05055_i_i=$_151_i_i;var $ws2_056_i_i=$42;var $36=$43;label=11;break;}
 case 14: 
 var $ws_i_1;
 var $_04973_i_i;
 var $_25272_i_i;
 var $45=HEAP32[(($ws_i_1)>>2)];
 var $46=($45|0)==0;
 if($46){var $_465_i_i=$_25272_i_i;var $_266_i_i=$_04973_i_i;var $ws_i_3=$ws_i_1;label=21;break;}else{label=16;break;}
 case 15: 
 var $ws_i_2;
 var $_049_lcssa_i_i;
 var $_252_lcssa_i_i;
 var $47=($_252_lcssa_i_i|0)==0;
 if($47){var $_461_i_i=0;label=30;break;}else{var $_465_i_i=$_252_lcssa_i_i;var $_266_i_i=$_049_lcssa_i_i;var $ws_i_3=$ws_i_2;label=21;break;}
 case 16: 
 var $49=($45>>>0)>127;
 if($49){label=17;break;}else{label=19;break;}
 case 17: 
 var $51=_wcrtomb($_04973_i_i,$45);
 var $52=($51|0)==-1;
 if($52){var $cnt_1_i=-1;var $_1_i=$30;var $_239_i=0;var $s_053_i=$s_060_i;var $ws_i_8=$ws_i_1;label=35;break;}else{label=18;break;}
 case 18: 
 var $54=(($_04973_i_i+$51)|0);
 var $55=((($_25272_i_i)-($51))|0);
 var $_1_i_i=$54;var $_353_i_i=$55;var $61=$ws_i_1;label=20;break;
 case 19: 
 var $57=(($45)&255);
 var $58=(($_04973_i_i+1)|0);
 HEAP8[($_04973_i_i)]=$57;
 var $59=((($_25272_i_i)-(1))|0);
 var $_1_i_i=$58;var $_353_i_i=$59;var $61=$ws_i_1;label=20;break;
 case 20: 
 var $61;
 var $_353_i_i;
 var $_1_i_i;
 var $62=(($61+4)|0);
 var $63=($_353_i_i>>>0)>3;
 if($63){var $_25272_i_i=$_353_i_i;var $_04973_i_i=$_1_i_i;var $ws_i_1=$62;label=14;break;}else{var $_252_lcssa_i_i=$_353_i_i;var $_049_lcssa_i_i=$_1_i_i;var $ws_i_2=$62;label=15;break;}
 case 21: 
 var $ws_i_3;
 var $_266_i_i;
 var $_465_i_i;
 var $64=HEAP32[(($ws_i_3)>>2)];
 var $65=($64|0)==0;
 if($65){label=29;break;}else{label=22;break;}
 case 22: 
 var $67=($64>>>0)>127;
 if($67){label=23;break;}else{label=27;break;}
 case 23: 
 var $69=_wcrtomb($14,$64);
 var $70=($69|0)==-1;
 if($70){var $cnt_1_i=-1;var $_1_i=$30;var $_239_i=0;var $s_053_i=$s_060_i;var $ws_i_8=$ws_i_3;label=35;break;}else{label=24;break;}
 case 24: 
 var $72=($69>>>0)>($_465_i_i>>>0);
 if($72){label=25;break;}else{label=26;break;}
 case 25: 
 var $74=((($_037__0_i)-($_465_i_i))|0);
 var $_0_i_i=$74;var $ws_i_5=$ws_i_3;label=31;break;
 case 26: 
 var $76=HEAP32[(($ws_i_3)>>2)];
 var $77=_wcrtomb($_266_i_i,$76);
 var $78=(($_266_i_i+$69)|0);
 var $79=((($_465_i_i)-($69))|0);
 var $_3_i_i=$78;var $_5_i_i=$79;var $84=$ws_i_3;label=28;break;
 case 27: 
 var $81=(($64)&255);
 var $82=(($_266_i_i+1)|0);
 HEAP8[($_266_i_i)]=$81;
 var $83=((($_465_i_i)-(1))|0);
 var $_3_i_i=$82;var $_5_i_i=$83;var $84=$ws_i_3;label=28;break;
 case 28: 
 var $84;
 var $_5_i_i;
 var $_3_i_i;
 var $85=(($84+4)|0);
 var $86=($_5_i_i|0)==0;
 if($86){var $_461_i_i=0;label=30;break;}else{var $_465_i_i=$_5_i_i;var $_266_i_i=$_3_i_i;var $ws_i_3=$85;label=21;break;}
 case 29: 
 HEAP8[($_266_i_i)]=0;
 var $_461_i_i=$_465_i_i;label=30;break;
 case 30: 
 var $_461_i_i;
 var $88=((($_037__0_i)-($_461_i_i))|0);
 var $_0_i_i=$88;var $ws_i_5=0;label=31;break;
 case 31: 
 var $ws_i_5;
 var $_0_i_i;
 var $89=($_0_i_i|0)==-1;
 if($89){var $cnt_1_i=-1;var $_1_i=$30;var $_239_i=0;var $s_053_i=$s_060_i;var $ws_i_8=$ws_i_5;label=35;break;}else{var $_0_i_i2=$_0_i_i;var $ws_i_7=$ws_i_5;label=32;break;}
 case 32: 
 var $ws_i_7;
 var $_0_i_i2;
 var $90=($s_060_i|0)==($13|0);
 if($90){var $s_1_i=$13;var $_138_i=$_03757_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $92=(($s_060_i+$_0_i_i2)|0);
 var $93=((($_03757_i)-($_0_i_i2))|0);
 var $s_1_i=$92;var $_138_i=$93;label=34;break;
 case 34: 
 var $_138_i;
 var $s_1_i;
 var $95=((($_0_i_i2)+($cnt_059_i))|0);
 var $96=($ws_i_7|0)==0;
 var $97=($_138_i|0)==0;
 var $or_cond_i=$96|$97;
 if($or_cond_i){var $cnt_1_i=$95;var $_1_i=$30;var $_239_i=$_138_i;var $s_053_i=$s_1_i;var $ws_i_8=$ws_i_7;label=35;break;}else{var $_03757_i=$_138_i;var $_058_i=$30;var $cnt_059_i=$95;var $s_060_i=$s_1_i;var $ws_i_0=$ws_i_7;label=7;break;}
 case 35: 
 var $ws_i_8;
 var $s_053_i;
 var $_239_i;
 var $_1_i;
 var $cnt_1_i;
 var $98=($ws_i_8|0)==0;
 if($98){var $cnt_3_i=$cnt_1_i;var $ws_i_10=$ws_i_8;label=40;break;}else{label=36;break;}
 case 36: 
 var $99=($_239_i|0)==0;
 var $100=($_1_i|0)==0;
 var $or_cond4143_i=$99|$100;
 if($or_cond4143_i){var $cnt_3_i=$cnt_1_i;var $ws_i_10=$ws_i_8;label=40;break;}else{var $_344_i=$_239_i;var $_245_i=$_1_i;var $cnt_246_i=$cnt_1_i;var $s_247_i=$s_053_i;var $ws_i_9=$ws_i_8;label=37;break;}
 case 37: 
 var $ws_i_9;
 var $s_247_i;
 var $cnt_246_i;
 var $_245_i;
 var $_344_i;
 var $101=HEAP32[(($ws_i_9)>>2)];
 var $102=_wcrtomb($s_247_i,$101);
 var $103=((($102)+(1))|0);
 var $104=($103>>>0)<2;
 if($104){label=38;break;}else{label=39;break;}
 case 38: 
 var $106=($102|0)==0;
 var $_ws_i_9=($106?0:$ws_i_9);
 var $cnt_246_i_=($106?$cnt_246_i:-1);
 var $cnt_3_i=$cnt_246_i_;var $ws_i_10=$_ws_i_9;label=40;break;
 case 39: 
 var $108=(($ws_i_9+4)|0);
 var $109=((($_245_i)-(1))|0);
 var $110=(($s_247_i+$102)|0);
 var $111=((($_344_i)-($102))|0);
 var $112=((($cnt_246_i)+(1))|0);
 var $113=($_344_i|0)==($102|0);
 var $114=($109|0)==0;
 var $or_cond41_i=$113|$114;
 if($or_cond41_i){var $cnt_3_i=$112;var $ws_i_10=$108;label=40;break;}else{var $_344_i=$111;var $_245_i=$109;var $cnt_246_i=$112;var $s_247_i=$110;var $ws_i_9=$108;label=37;break;}
 case 40: 
 var $ws_i_10;
 var $cnt_3_i;
 if($25){label=41;break;}else{label=42;break;}
 case 41: 
 HEAP32[(($frm_nxt)>>2)]=$ws_i_10;
 label=42;break;
 case 42: 
 var $117=($23|0)==0;
 if($117){label=45;break;}else{label=43;break;}
 case 43: 
 var $119=(function() { try { __THREW__ = 0; return _uselocale($23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=44;break; }
 case 44: 
 var $121$0 = ___cxa_find_matching_catch(-1, -1,0); var $121$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 45: 
 if(($cnt_3_i|0)==-1){ label=46;break;}else if(($cnt_3_i|0)==0){ var $_0=1;label=69;break;}else{label=53;break;}
 case 46: 
 HEAP32[(($to_nxt)>>2)]=$_0194252;
 var $123=HEAP32[(($frm_nxt)>>2)];
 var $124=($_0193253|0)==($123|0);
 if($124){var $_1_lcssa=$_0193253;label=52;break;}else{var $_1218=$_0193253;var $125=$_0194252;label=47;break;}
 case 47: 
 var $125;
 var $_1218;
 var $126=HEAP32[(($_1218)>>2)];
 var $127=HEAP32[(($11)>>2)];
 var $128=_uselocale($127);
 var $129=_wcrtomb($125,$126);
 var $130=($128|0)==0;
 if($130){label=50;break;}else{label=48;break;}
 case 48: 
 var $132=(function() { try { __THREW__ = 0; return _uselocale($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=49;break; }
 case 49: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1,0); var $134$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 50: 
 var $135=($129|0)==-1;
 if($135){var $_1_lcssa=$_1218;label=52;break;}else{label=51;break;}
 case 51: 
 var $137=HEAP32[(($to_nxt)>>2)];
 var $138=(($137+$129)|0);
 HEAP32[(($to_nxt)>>2)]=$138;
 var $139=(($_1218+4)|0);
 var $140=HEAP32[(($frm_nxt)>>2)];
 var $141=($139|0)==($140|0);
 if($141){var $_1_lcssa=$139;label=52;break;}else{var $_1218=$139;var $125=$138;label=47;break;}
 case 52: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=69;break;
 case 53: 
 var $143=HEAP32[(($to_nxt)>>2)];
 var $144=(($143+$cnt_3_i)|0);
 HEAP32[(($to_nxt)>>2)]=$144;
 var $145=($144|0)==($to_end|0);
 if($145){label=67;break;}else{label=54;break;}
 case 54: 
 var $147=($fend_1254|0)==($frm_end|0);
 if($147){label=55;break;}else{label=56;break;}
 case 55: 
 var $_pre291=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $173=$144;var $172=$_pre291;label=66;break;
 case 56: 
 var $149=HEAP32[(($11)>>2)];
 var $150=_uselocale($149);
 HEAP8[($12)]=0;
 var $151=($150|0)==0;
 if($151){label=59;break;}else{label=57;break;}
 case 57: 
 var $153=(function() { try { __THREW__ = 0; return _uselocale($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1,0); var $155$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 59: 
 var $156=HEAP32[(($to_nxt)>>2)];
 var $157=($156|0)==($to_end|0);
 if($157){var $_0=1;label=69;break;}else{var $n_0220=0;var $p_0221=$12;var $159=$156;var $158=0;label=60;break;}
 case 60: 
 var $158;
 var $159;
 var $p_0221;
 var $n_0220;
 var $160=(($159+1)|0);
 HEAP32[(($to_nxt)>>2)]=$160;
 HEAP8[($159)]=$158;
 var $161=($n_0220|0)==0;
 if($161){label=62;break;}else{label=61;break;}
 case 61: 
 var $162=(($p_0221+1)|0);
 var $_pre292=HEAP32[(($to_nxt)>>2)];
 var $phitmp=((($n_0220)-(1))|0);
 var $_pre14=HEAP8[($162)];
 var $n_0220=$phitmp;var $p_0221=$162;var $159=$_pre292;var $158=$_pre14;label=60;break;
 case 62: 
 var $163=HEAP32[(($frm_nxt)>>2)];
 var $164=(($163+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$164;
 var $fend_2=$164;label=63;break;
 case 63: 
 var $fend_2;
 var $166=($fend_2|0)==($frm_end|0);
 if($166){var $fend_2_lcssa=$frm_end;label=65;break;}else{label=64;break;}
 case 64: 
 var $168=HEAP32[(($fend_2)>>2)];
 var $169=($168|0)==0;
 var $170=(($fend_2+4)|0);
 if($169){var $fend_2_lcssa=$fend_2;label=65;break;}else{var $fend_2=$170;label=63;break;}
 case 65: 
 var $fend_2_lcssa;
 var $_pre288=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $173=$_pre288;var $172=$164;label=66;break;
 case 66: 
 var $172;
 var $173;
 var $fend_3;
 var $174=($172|0)==($frm_end|0);
 var $175=($173|0)==($to_end|0);
 var $or_cond=$174|$175;
 if($or_cond){var $176=$172;label=68;break;}else{var $_0194252=$173;var $_0193253=$172;var $fend_1254=$fend_3;label=6;break;}
 case 67: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $176=$_pre;label=68;break;
 case 68: 
 var $176;
 var $not_=($176|0)!=($frm_end|0);
 var $177=($not_&1);
 var $_0=$177;label=69;break;
 case 69: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf_i=sp;
 var $s_i=(sp)+(1024);
 var $save_state=(sp)+(1032);
 var $tmpcast=$save_state;
 var $fend_0=$frm;label=2;break;
 case 2: 
 var $fend_0;
 var $2=($fend_0|0)==($frm_end|0);
 if($2){var $fend_0_lcssa=$frm_end;label=4;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($fend_0)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_0+1)|0);
 if($5){var $fend_0_lcssa=$fend_0;label=4;break;}else{var $fend_0=$6;label=2;break;}
 case 4: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $8=($frm|0)==($frm_end|0);
 var $9=($to|0)==($to_end|0);
 var $or_cond266=$8|$9;
 if($or_cond266){var $129=$frm;label=49;break;}else{label=5;break;}
 case 5: 
 var $10=$st;
 var $11=$to_end;
 var $12=(($this+8)|0);
 var $13=$wbuf_i;
 var $14=$s_i;
 var $15=(($wbuf_i)|0);
 var $16=(($st)|0);
 var $_0202267=$to;var $_0201268=$frm;var $fend_1269=$fend_0_lcssa;label=6;break;
 case 6: 
 var $fend_1269;
 var $_0201268;
 var $_0202267;
 var $ld$0$0=(($10)|0);
 var $18$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($10+4)|0);
 var $18$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$18$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$18$1;
 var $19=$fend_1269;
 var $20=$_0201268;
 var $21=((($19)-($20))|0);
 var $22=$_0202267;
 var $23=((($11)-($22))|0);
 var $24=$23>>2;
 var $25=HEAP32[(($12)>>2)];
 var $26=_uselocale($25);
 var $27=HEAP32[(($frm_nxt)>>2)];
 HEAP32[(($s_i)>>2)]=$27;
 var $28=($_0202267|0)!=0;
 var $_040_ph_i=($28?$24:256);
 var $ws_0_ph_i=($28?$_0202267:$15);
 var $29=($27|0)==0;
 var $30=($_040_ph_i|0)==0;
 var $or_cond59_i=$29|$30;
 if($or_cond59_i){var $cnt_1_i=0;var $_1_i=$21;var $_242_i=$_040_ph_i;var $ws_056_i=$ws_0_ph_i;var $47=$27;label=13;break;}else{var $_04060_i=$_040_ph_i;var $_061_i=$21;var $cnt_062_i=0;var $ws_063_i=$ws_0_ph_i;var $_pr78_i=$27;label=7;break;}
 case 7: 
 var $_pr78_i;
 var $ws_063_i;
 var $cnt_062_i;
 var $_061_i;
 var $_04060_i;
 var $31=$_061_i>>>2;
 var $32=($31>>>0)>=($_04060_i>>>0);
 var $33=($_061_i>>>0)>131;
 var $or_cond43_i=$32|$33;
 if($or_cond43_i){label=8;break;}else{var $cnt_1_i=$cnt_062_i;var $_1_i=$_061_i;var $_242_i=$_04060_i;var $ws_056_i=$ws_063_i;var $47=$_pr78_i;label=13;break;}
 case 8: 
 var $_040__i=($32?$_04060_i:$31);
 var $34=((($_061_i)-($_040__i))|0);
 var $35=_mbsrtowcs($ws_063_i,$s_i,$_040__i,$st);
 var $36=($35|0)==-1;
 if($36){label=9;break;}else{label=10;break;}
 case 9: 
 var $_pr_pre_i=HEAP32[(($s_i)>>2)];
 var $cnt_1_i=-1;var $_1_i=$34;var $_242_i=0;var $ws_056_i=$ws_063_i;var $47=$_pr_pre_i;label=13;break;
 case 10: 
 var $38=($ws_063_i|0)==($15|0);
 if($38){var $ws_1_i=$15;var $_141_i=$_04060_i;label=12;break;}else{label=11;break;}
 case 11: 
 var $40=(($ws_063_i+($35<<2))|0);
 var $41=((($_04060_i)-($35))|0);
 var $ws_1_i=$40;var $_141_i=$41;label=12;break;
 case 12: 
 var $_141_i;
 var $ws_1_i;
 var $43=((($35)+($cnt_062_i))|0);
 var $44=HEAP32[(($s_i)>>2)];
 var $45=($44|0)==0;
 var $46=($_141_i|0)==0;
 var $or_cond_i=$45|$46;
 if($or_cond_i){var $cnt_1_i=$43;var $_1_i=$34;var $_242_i=$_141_i;var $ws_056_i=$ws_1_i;var $47=$44;label=13;break;}else{var $_04060_i=$_141_i;var $_061_i=$34;var $cnt_062_i=$43;var $ws_063_i=$ws_1_i;var $_pr78_i=$44;label=7;break;}
 case 13: 
 var $47;
 var $ws_056_i;
 var $_242_i;
 var $_1_i;
 var $cnt_1_i;
 var $48=($47|0)==0;
 if($48){var $cnt_3_i=$cnt_1_i;var $66=0;label=20;break;}else{label=14;break;}
 case 14: 
 var $49=($_242_i|0)==0;
 var $50=($_1_i|0)==0;
 var $or_cond4446_i=$49|$50;
 if($or_cond4446_i){var $cnt_3_i=$cnt_1_i;var $66=$47;label=20;break;}else{var $_347_i=$_242_i;var $_248_i=$_1_i;var $cnt_249_i=$cnt_1_i;var $ws_250_i=$ws_056_i;var $51=$47;label=15;break;}
 case 15: 
 var $51;
 var $ws_250_i;
 var $cnt_249_i;
 var $_248_i;
 var $_347_i;
 var $52=_mbrtowc($ws_250_i,$51,$_248_i,$st);
 var $53=((($52)+(2))|0);
 var $54=($53>>>0)<3;
 if($54){label=16;break;}else{label=19;break;}
 case 16: 
 if(($52|0)==0){ label=17;break;}else if(($52|0)==-1){ var $cnt_3_i=-1;var $66=$51;label=20;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($s_i)>>2)]=0;
 var $cnt_3_i=$cnt_249_i;var $66=0;label=20;break;
 case 18: 
 HEAP32[(($16)>>2)]=0;
 var $cnt_3_i=$cnt_249_i;var $66=$51;label=20;break;
 case 19: 
 var $59=(($51+$52)|0);
 HEAP32[(($s_i)>>2)]=$59;
 var $60=((($_248_i)-($52))|0);
 var $61=(($ws_250_i+4)|0);
 var $62=((($_347_i)-(1))|0);
 var $63=((($cnt_249_i)+(1))|0);
 var $64=($62|0)==0;
 var $65=($_248_i|0)==($52|0);
 var $or_cond44_i=$64|$65;
 if($or_cond44_i){var $cnt_3_i=$63;var $66=$59;label=20;break;}else{var $_347_i=$62;var $_248_i=$60;var $cnt_249_i=$63;var $ws_250_i=$61;var $51=$59;label=15;break;}
 case 20: 
 var $66;
 var $cnt_3_i;
 if($28){label=21;break;}else{label=22;break;}
 case 21: 
 HEAP32[(($frm_nxt)>>2)]=$66;
 label=22;break;
 case 22: 
 var $69=($26|0)==0;
 if($69){label=25;break;}else{label=23;break;}
 case 23: 
 var $71=(function() { try { __THREW__ = 0; return _uselocale($26) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1,0); var $73$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 25: 
 if(($cnt_3_i|0)==-1){ label=26;break;}else if(($cnt_3_i|0)==0){ var $_0=2;label=50;break;}else{label=37;break;}
 case 26: 
 HEAP32[(($to_nxt)>>2)]=$_0202267;
 var $74=HEAP32[(($frm_nxt)>>2)];
 var $75=($_0201268|0)==($74|0);
 if($75){var $_1_lcssa=$_0201268;label=36;break;}else{var $storemerge231=$_0202267;var $_1232=$_0201268;label=27;break;}
 case 27: 
 var $_1232;
 var $storemerge231;
 var $76=$_1232;
 var $77=((($19)-($76))|0);
 var $78=HEAP32[(($12)>>2)];
 var $79=_uselocale($78);
 var $80=_mbrtowc($storemerge231,$_1232,$77,$tmpcast);
 var $81=($79|0)==0;
 if($81){label=30;break;}else{label=28;break;}
 case 28: 
 var $83=(function() { try { __THREW__ = 0; return _uselocale($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 30: 
 if(($80|0)==0){ label=31;break;}else if(($80|0)==-1){ label=32;break;}else if(($80|0)==-2){ label=33;break;}else{label=34;break;}
 case 31: 
 var $87=(($_1232+1)|0);
 var $_2=$87;label=35;break;
 case 32: 
 HEAP32[(($frm_nxt)>>2)]=$_1232;
 var $_0=2;label=50;break;
 case 33: 
 HEAP32[(($frm_nxt)>>2)]=$_1232;
 var $_0=1;label=50;break;
 case 34: 
 var $91=(($_1232+$80)|0);
 var $_2=$91;label=35;break;
 case 35: 
 var $_2;
 var $93=HEAP32[(($to_nxt)>>2)];
 var $94=(($93+4)|0);
 HEAP32[(($to_nxt)>>2)]=$94;
 var $95=HEAP32[(($frm_nxt)>>2)];
 var $96=($_2|0)==($95|0);
 if($96){var $_1_lcssa=$_2;label=36;break;}else{var $storemerge231=$94;var $_1232=$_2;label=27;break;}
 case 36: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_223=($_1_lcssa|0)!=($frm_end|0);
 var $97=($not_223&1);
 var $_0=$97;label=50;break;
 case 37: 
 var $99=HEAP32[(($to_nxt)>>2)];
 var $100=(($99+($cnt_3_i<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$100;
 var $101=($100|0)==($to_end|0);
 if($101){label=48;break;}else{label=38;break;}
 case 38: 
 var $103=($fend_1269|0)==($frm_end|0);
 var $_pre314=HEAP32[(($frm_nxt)>>2)];
 if($103){var $fend_3=$frm_end;var $126=$100;var $125=$_pre314;label=47;break;}else{label=39;break;}
 case 39: 
 var $105=HEAP32[(($12)>>2)];
 var $106=_uselocale($105);
 var $107=_mbrtowc($100,$_pre314,1,$st);
 var $108=($106|0)==0;
 if($108){label=42;break;}else{label=40;break;}
 case 40: 
 var $110=(function() { try { __THREW__ = 0; return _uselocale($106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1,0); var $112$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 42: 
 var $113=($107|0)==0;
 if($113){label=43;break;}else{var $_0=2;label=50;break;}
 case 43: 
 var $115=HEAP32[(($to_nxt)>>2)];
 var $116=(($115+4)|0);
 HEAP32[(($to_nxt)>>2)]=$116;
 var $117=HEAP32[(($frm_nxt)>>2)];
 var $118=(($117+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$118;
 var $fend_2=$118;label=44;break;
 case 44: 
 var $fend_2;
 var $120=($fend_2|0)==($frm_end|0);
 if($120){var $fend_2_lcssa=$frm_end;label=46;break;}else{label=45;break;}
 case 45: 
 var $122=HEAP8[($fend_2)];
 var $123=(($122<<24)>>24)==0;
 var $124=(($fend_2+1)|0);
 if($123){var $fend_2_lcssa=$fend_2;label=46;break;}else{var $fend_2=$124;label=44;break;}
 case 46: 
 var $fend_2_lcssa;
 var $_pre312=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $126=$_pre312;var $125=$118;label=47;break;
 case 47: 
 var $125;
 var $126;
 var $fend_3;
 var $127=($125|0)==($frm_end|0);
 var $128=($126|0)==($to_end|0);
 var $or_cond=$127|$128;
 if($or_cond){var $129=$125;label=49;break;}else{var $_0202267=$126;var $_0201268=$125;var $fend_1269=$fend_3;label=6;break;}
 case 48: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $129=$_pre;label=49;break;
 case 49: 
 var $129;
 var $not_=($129|0)!=($frm_end|0);
 var $130=($not_&1);
 var $_0=$130;label=50;break;
 case 50: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_uselocale($2);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 4: 
 return 0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=3;break;}
 case 3: 
 var $6=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 5: 
 var $9=HEAP32[(($1)>>2)];
 var $10=($9|0)==0;
 if($10){var $_0=1;label=10;break;}else{label=6;break;}
 case 6: 
 var $12=(function() { try { __THREW__ = 0; return _uselocale($9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 var $13=($12|0)==0;
 if($13){var $_0=0;label=10;break;}else{label=8;break;}
 case 8: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=10;break; } else { label=9;break; }
 case 9: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 var $_0;
 return $_0;
 case 11: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond71=$1|$2;
 if($or_cond71){var $nbytes_0_lcssa=0;label=10;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $5=($st|0)!=0;
 var $6=($5?$st:15584);
 var $_06172=$frm;var $nbytes_073=0;var $nwchar_t_074=0;label=3;break;
 case 3: 
 var $nwchar_t_074;
 var $nbytes_073;
 var $_06172;
 var $8=$_06172;
 var $9=((($3)-($8))|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=_uselocale($10);
 var $12=_mbrtowc(0,$_06172,$9,$6);
 var $13=($11|0)==0;
 if($13){label=6;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 if(($12|0)==-1|($12|0)==-2){ var $nbytes_0_lcssa=$nbytes_073;label=10;break;}else if(($12|0)==0){ label=7;break;}else{label=8;break;}
 case 7: 
 var $19=(($_06172+1)|0);
 var $_pn=1;var $_1=$19;label=9;break;
 case 8: 
 var $21=(($_06172+$12)|0);
 var $_pn=$12;var $_1=$21;label=9;break;
 case 9: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_073))|0);
 var $23=((($nwchar_t_074)+(1))|0);
 var $24=($23>>>0)>=($mx>>>0);
 var $25=($_1|0)==($frm_end|0);
 var $or_cond=$24|$25;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=10;break;}else{var $_06172=$_1;var $nbytes_073=$nbytes_1;var $nwchar_t_074=$23;label=3;break;}
 case 10: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $11=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $11=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $11=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 6: 
 var $11;
 return $11;
 case 7: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$frm_end;
 var $3=($frm>>>0)<($frm_end>>>0);
 if($3){label=2;break;}else{var $_0_i=0;var $_to_nxt_2=$to;var $_frm_nxt_2=$frm;label=22;break;}
 case 2: 
 var $4=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $6=HEAP16[(($_frm_nxt_0)>>1)];
 var $7=($6&65535);
 var $8=($6&65535)<128;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=$_to_nxt_0;
 var $11=((($4)-($10))|0);
 var $12=($11|0)<1;
 if($12){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=5;break;}
 case 5: 
 var $14=(($6)&255);
 var $15=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$14;
 var $_to_nxt_1=$15;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 6: 
 var $17=($6&65535)<2048;
 if($17){label=7;break;}else{label=9;break;}
 case 7: 
 var $19=$_to_nxt_0;
 var $20=((($4)-($19))|0);
 var $21=($20|0)<2;
 if($21){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=8;break;}
 case 8: 
 var $23=$7>>>6;
 var $24=$23|192;
 var $25=(($24)&255);
 var $26=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$25;
 var $27=$7&63;
 var $28=$27|128;
 var $29=(($28)&255);
 var $30=(($_to_nxt_0+2)|0);
 HEAP8[($26)]=$29;
 var $_to_nxt_1=$30;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 9: 
 var $32=($6&65535)<55296;
 if($32){label=10;break;}else{label=12;break;}
 case 10: 
 var $34=$_to_nxt_0;
 var $35=((($4)-($34))|0);
 var $36=($35|0)<3;
 if($36){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=11;break;}
 case 11: 
 var $38=$7>>>12;
 var $39=$38|224;
 var $40=(($39)&255);
 var $41=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$40;
 var $42=$7>>>6;
 var $43=$42&63;
 var $44=$43|128;
 var $45=(($44)&255);
 var $46=(($_to_nxt_0+2)|0);
 HEAP8[($41)]=$45;
 var $47=$7&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($_to_nxt_0+3)|0);
 HEAP8[($46)]=$49;
 var $_to_nxt_1=$50;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 12: 
 var $52=($6&65535)<56320;
 if($52){label=13;break;}else{label=18;break;}
 case 13: 
 var $54=$_frm_nxt_0;
 var $55=((($2)-($54))|0);
 var $56=($55|0)<4;
 if($56){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=14;break;}
 case 14: 
 var $58=(($_frm_nxt_0+2)|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=($59&65535);
 var $61=$60&64512;
 var $62=($61|0)==56320;
 if($62){label=15;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}
 case 15: 
 var $64=$_to_nxt_0;
 var $65=((($4)-($64))|0);
 var $66=($65|0)<4;
 if($66){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=16;break;}
 case 16: 
 var $68=$7&960;
 var $69=$68<<10;
 var $70=((($69)+(65536))|0);
 var $71=($70>>>0)>1114111;
 if($71){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=17;break;}
 case 17: 
 var $73=$68>>>6;
 var $74=((($73)+(1))|0);
 var $75=$74>>>2;
 var $76=$75|240;
 var $77=(($76)&255);
 var $78=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$77;
 var $79=$74<<4;
 var $80=$79&48;
 var $81=$7>>>2;
 var $82=$81&15;
 var $83=$82|$80;
 var $84=$83|128;
 var $85=(($84)&255);
 var $86=(($_to_nxt_0+2)|0);
 HEAP8[($78)]=$85;
 var $87=$7<<4;
 var $88=$87&48;
 var $89=$60>>>6;
 var $90=$89&15;
 var $91=$88|$90;
 var $92=$91|128;
 var $93=(($92)&255);
 var $94=(($_to_nxt_0+3)|0);
 HEAP8[($86)]=$93;
 var $95=$60&63;
 var $96=$95|128;
 var $97=(($96)&255);
 var $98=(($_to_nxt_0+4)|0);
 HEAP8[($94)]=$97;
 var $_to_nxt_1=$98;var $_frm_nxt_1=$58;label=21;break;
 case 18: 
 var $100=($6&65535)<57344;
 if($100){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=19;break;}
 case 19: 
 var $102=$_to_nxt_0;
 var $103=((($4)-($102))|0);
 var $104=($103|0)<3;
 if($104){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=20;break;}
 case 20: 
 var $106=$7>>>12;
 var $107=$106|224;
 var $108=(($107)&255);
 var $109=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$108;
 var $110=$7>>>6;
 var $111=$110&63;
 var $112=$111|128;
 var $113=(($112)&255);
 var $114=(($_to_nxt_0+2)|0);
 HEAP8[($109)]=$113;
 var $115=$7&63;
 var $116=$115|128;
 var $117=(($116)&255);
 var $118=(($_to_nxt_0+3)|0);
 HEAP8[($114)]=$117;
 var $_to_nxt_1=$118;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 21: 
 var $_frm_nxt_1;
 var $_to_nxt_1;
 var $120=(($_frm_nxt_1+2)|0);
 var $121=($120>>>0)<($frm_end>>>0);
 if($121){var $_to_nxt_0=$_to_nxt_1;var $_frm_nxt_0=$120;label=3;break;}else{var $_0_i=0;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_2=$120;label=22;break;}
 case 22: 
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $_0_i;
 var $122=$_frm_nxt_2;
 var $123=$frm;
 var $124=((($122)-($123))|0);
 var $125=$124>>1;
 var $126=(($frm+($125<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$126;
 var $127=$_to_nxt_2;
 var $128=$to;
 var $129=((($127)-($128))|0);
 var $130=(($to+$129)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_to_nxt_2=$to;var $_frm_nxt_2=$frm;label=31;break;}
 case 2: 
 var $3=$frm_end;
 var $4=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $6=($_to_nxt_0>>>0)<($to_end>>>0);
 if($6){label=4;break;}else{var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=31;break;}
 case 4: 
 var $8=HEAP8[($_frm_nxt_0)];
 var $9=($8&255);
 var $10=(($8<<24)>>24)>-1;
 if($10){label=5;break;}else{label=6;break;}
 case 5: 
 var $12=($8&255);
 HEAP16[(($_to_nxt_0)>>1)]=$12;
 var $13=(($_frm_nxt_0+1)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$13;label=30;break;
 case 6: 
 var $15=($8&255)<194;
 if($15){var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=7;break;}
 case 7: 
 var $17=($8&255)<224;
 if($17){label=8;break;}else{label=11;break;}
 case 8: 
 var $19=$_frm_nxt_0;
 var $20=((($3)-($19))|0);
 var $21=($20|0)<2;
 if($21){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=9;break;}
 case 9: 
 var $23=(($_frm_nxt_0+1)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=$25&192;
 var $27=($26|0)==128;
 if($27){label=10;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 10: 
 var $29=$9<<6;
 var $30=$25&63;
 var $31=$29&1984;
 var $32=$30|$31;
 var $33=(($32)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$33;
 var $34=(($_frm_nxt_0+2)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$34;label=30;break;
 case 11: 
 var $36=($8&255)<240;
 if($36){label=12;break;}else{label=19;break;}
 case 12: 
 var $38=$_frm_nxt_0;
 var $39=((($3)-($38))|0);
 var $40=($39|0)<3;
 if($40){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=13;break;}
 case 13: 
 var $42=(($_frm_nxt_0+1)|0);
 var $43=HEAP8[($42)];
 var $44=(($_frm_nxt_0+2)|0);
 var $45=HEAP8[($44)];
 if(($9|0)==224){ label=14;break;}else if(($9|0)==237){ label=15;break;}else{label=16;break;}
 case 14: 
 var $47=$43&-32;
 var $48=(($47<<24)>>24)==-96;
 if($48){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 15: 
 var $50=$43&-32;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 16: 
 var $53=$43&-64;
 var $54=(($53<<24)>>24)==-128;
 if($54){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 17: 
 var $56=($45&255);
 var $57=$56&192;
 var $58=($57|0)==128;
 if($58){label=18;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 18: 
 var $60=$9<<12;
 var $61=($43&255);
 var $62=$61<<6;
 var $63=$62&4032;
 var $64=$63|$60;
 var $65=$56&63;
 var $66=$64|$65;
 var $67=(($66)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$67;
 var $68=(($_frm_nxt_0+3)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$68;label=30;break;
 case 19: 
 var $70=($8&255)<245;
 if($70){label=20;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 20: 
 var $72=$_frm_nxt_0;
 var $73=((($3)-($72))|0);
 var $74=($73|0)<4;
 if($74){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=21;break;}
 case 21: 
 var $76=(($_frm_nxt_0+1)|0);
 var $77=HEAP8[($76)];
 var $78=(($_frm_nxt_0+2)|0);
 var $79=HEAP8[($78)];
 var $80=(($_frm_nxt_0+3)|0);
 var $81=HEAP8[($80)];
 if(($9|0)==240){ label=22;break;}else if(($9|0)==244){ label=23;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($77)+(112))&255);
 var $83=($_off_i&255)<48;
 if($83){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 23: 
 var $85=$77&-16;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 24: 
 var $88=$77&-64;
 var $89=(($88<<24)>>24)==-128;
 if($89){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 25: 
 var $91=($79&255);
 var $92=$91&192;
 var $93=($92|0)==128;
 if($93){label=26;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 26: 
 var $95=($81&255);
 var $96=$95&192;
 var $97=($96|0)==128;
 if($97){label=27;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 27: 
 var $99=$_to_nxt_0;
 var $100=((($4)-($99))|0);
 var $101=($100|0)<4;
 if($101){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=28;break;}
 case 28: 
 var $103=$9&7;
 var $104=$103<<18;
 var $105=($77&255);
 var $106=$105<<12;
 var $107=$106&196608;
 var $108=$107|$104;
 var $109=($108>>>0)>1114111;
 if($109){var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=29;break;}
 case 29: 
 var $111=$95&63;
 var $112=$91<<6;
 var $113=$103<<2;
 var $114=$105>>>4;
 var $115=$114&3;
 var $116=$115|$113;
 var $117=$116<<6;
 var $118=((($117)+(16320))|0);
 var $119=$105<<2;
 var $120=$119&60;
 var $121=$91>>>4;
 var $122=$121&3;
 var $123=$120|$122;
 var $124=$123|$118;
 var $125=$124|55296;
 var $126=(($125)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$126;
 var $127=$112&960;
 var $128=$111|$127;
 var $129=$128|56320;
 var $130=(($129)&65535);
 var $131=(($_to_nxt_0+2)|0);
 HEAP16[(($131)>>1)]=$130;
 var $132=(($_frm_nxt_0+4)|0);
 var $_to_nxt_1=$131;var $_frm_nxt_1=$132;label=30;break;
 case 30: 
 var $_frm_nxt_1;
 var $_to_nxt_1;
 var $134=(($_to_nxt_1+2)|0);
 var $135=($_frm_nxt_1>>>0)<($frm_end>>>0);
 if($135){var $_to_nxt_0=$134;var $_frm_nxt_0=$_frm_nxt_1;label=3;break;}else{var $_to_nxt_2=$134;var $_frm_nxt_2=$_frm_nxt_1;label=31;break;}
 case 31: 
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $136=($_frm_nxt_2>>>0)<($frm_end>>>0);
 var $137=($136&1);
 var $_0_i=$137;var $_to_nxt_3=$_to_nxt_2;var $_frm_nxt_3=$_frm_nxt_2;label=32;break;
 case 32: 
 var $_frm_nxt_3;
 var $_to_nxt_3;
 var $_0_i;
 var $138=$_frm_nxt_3;
 var $139=$frm;
 var $140=((($138)-($139))|0);
 var $141=(($frm+$140)|0);
 HEAP32[(($frm_nxt)>>2)]=$141;
 var $142=$_to_nxt_3;
 var $143=$to;
 var $144=((($142)-($143))|0);
 var $145=$144>>1;
 var $146=(($to+($145<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$146;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 var $3=($mx|0)!=0;
 var $or_cond83_i=$2&$3;
 if($or_cond83_i){label=2;break;}else{var $frm_nxt_1_lcssa_i=$frm;label=36;break;}
 case 2: 
 var $4=$frm_end;
 var $nchar16_t_084_i=0;var $frm_nxt_185_i=$frm;label=3;break;
 case 3: 
 var $frm_nxt_185_i;
 var $nchar16_t_084_i;
 var $5=HEAP8[($frm_nxt_185_i)];
 var $6=($5&255);
 var $7=(($5<<24)>>24)>-1;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=(($frm_nxt_185_i+1)|0);
 var $frm_nxt_2_i=$9;var $nchar16_t_1_i=$nchar16_t_084_i;label=35;break;
 case 5: 
 var $11=($5&255)<194;
 if($11){var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}else{label=6;break;}
 case 6: 
 var $13=($5&255)<224;
 if($13){label=7;break;}else{label=10;break;}
 case 7: 
 var $15=$frm_nxt_185_i;
 var $16=((($4)-($15))|0);
 var $17=($16|0)<2;
 if($17){var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}else{label=8;break;}
 case 8: 
 var $19=(($frm_nxt_185_i+1)|0);
 var $20=HEAP8[($19)];
 var $21=$20&-64;
 var $22=(($21<<24)>>24)==-128;
 if($22){label=9;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}
 case 9: 
 var $24=(($frm_nxt_185_i+2)|0);
 var $frm_nxt_2_i=$24;var $nchar16_t_1_i=$nchar16_t_084_i;label=35;break;
 case 10: 
 var $26=($5&255)<240;
 if($26){label=11;break;}else{label=21;break;}
 case 11: 
 var $28=$frm_nxt_185_i;
 var $29=((($4)-($28))|0);
 var $30=($29|0)<3;
 if($30){var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}else{label=12;break;}
 case 12: 
 var $32=(($frm_nxt_185_i+1)|0);
 var $33=HEAP8[($32)];
 var $34=(($frm_nxt_185_i+2)|0);
 var $35=HEAP8[($34)];
 if(($6|0)==224){ label=13;break;}else if(($6|0)==237){ label=15;break;}else{label=17;break;}
 case 13: 
 var $37=$33&-32;
 var $38=(($37<<24)>>24)==-96;
 if($38){label=19;break;}else{label=14;break;}
 case 14: 
 var $40=$frm;
 var $41=((($28)-($40))|0);
 var $_0_i=$41;label=37;break;
 case 15: 
 var $43=$33&-32;
 var $44=(($43<<24)>>24)==-128;
 if($44){label=19;break;}else{label=16;break;}
 case 16: 
 var $46=$frm;
 var $47=((($28)-($46))|0);
 var $_0_i=$47;label=37;break;
 case 17: 
 var $49=$33&-64;
 var $50=(($49<<24)>>24)==-128;
 if($50){label=19;break;}else{label=18;break;}
 case 18: 
 var $52=$frm;
 var $53=((($28)-($52))|0);
 var $_0_i=$53;label=37;break;
 case 19: 
 var $55=$35&-64;
 var $56=(($55<<24)>>24)==-128;
 if($56){label=20;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}
 case 20: 
 var $58=(($frm_nxt_185_i+3)|0);
 var $frm_nxt_2_i=$58;var $nchar16_t_1_i=$nchar16_t_084_i;label=35;break;
 case 21: 
 var $60=($5&255)<245;
 if($60){label=22;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}
 case 22: 
 var $62=$frm_nxt_185_i;
 var $63=((($4)-($62))|0);
 var $64=($63|0)<4;
 if($64){var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}else{label=23;break;}
 case 23: 
 var $66=((($mx)-($nchar16_t_084_i))|0);
 var $67=($66>>>0)<2;
 if($67){var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}else{label=24;break;}
 case 24: 
 var $69=(($frm_nxt_185_i+1)|0);
 var $70=HEAP8[($69)];
 var $71=(($frm_nxt_185_i+2)|0);
 var $72=HEAP8[($71)];
 var $73=(($frm_nxt_185_i+3)|0);
 var $74=HEAP8[($73)];
 if(($6|0)==240){ label=25;break;}else if(($6|0)==244){ label=27;break;}else{label=29;break;}
 case 25: 
 var $_off_i=((($70)+(112))&255);
 var $76=($_off_i&255)<48;
 if($76){label=31;break;}else{label=26;break;}
 case 26: 
 var $78=$frm;
 var $79=((($62)-($78))|0);
 var $_0_i=$79;label=37;break;
 case 27: 
 var $81=$70&-16;
 var $82=(($81<<24)>>24)==-128;
 if($82){label=31;break;}else{label=28;break;}
 case 28: 
 var $84=$frm;
 var $85=((($62)-($84))|0);
 var $_0_i=$85;label=37;break;
 case 29: 
 var $87=$70&-64;
 var $88=(($87<<24)>>24)==-128;
 if($88){label=31;break;}else{label=30;break;}
 case 30: 
 var $90=$frm;
 var $91=((($62)-($90))|0);
 var $_0_i=$91;label=37;break;
 case 31: 
 var $93=$72&-64;
 var $94=(($93<<24)>>24)==-128;
 if($94){label=32;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}
 case 32: 
 var $96=$74&-64;
 var $97=(($96<<24)>>24)==-128;
 if($97){label=33;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}
 case 33: 
 var $99=$6<<18;
 var $100=$99&1835008;
 var $101=($70&255);
 var $102=$101<<12;
 var $103=$102&196608;
 var $104=$103|$100;
 var $105=($104>>>0)>1114111;
 if($105){var $frm_nxt_1_lcssa_i=$frm_nxt_185_i;label=36;break;}else{label=34;break;}
 case 34: 
 var $107=((($nchar16_t_084_i)+(1))|0);
 var $108=(($frm_nxt_185_i+4)|0);
 var $frm_nxt_2_i=$108;var $nchar16_t_1_i=$107;label=35;break;
 case 35: 
 var $nchar16_t_1_i;
 var $frm_nxt_2_i;
 var $110=((($nchar16_t_1_i)+(1))|0);
 var $111=($frm_nxt_2_i>>>0)<($frm_end>>>0);
 var $112=($110>>>0)<($mx>>>0);
 var $or_cond_i=$111&$112;
 if($or_cond_i){var $nchar16_t_084_i=$110;var $frm_nxt_185_i=$frm_nxt_2_i;label=3;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_2_i;label=36;break;}
 case 36: 
 var $frm_nxt_1_lcssa_i;
 var $113=$frm_nxt_1_lcssa_i;
 var $114=$frm;
 var $115=((($113)-($114))|0);
 var $_0_i=$115;label=37;break;
 case 37: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_0_i=0;var $_to_nxt_2=$to;var $_frm_nxt_1=$frm;label=16;break;}
 case 2: 
 var $3=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $5=HEAP32[(($_frm_nxt_0)>>2)];
 var $6=$5&-2048;
 var $7=($6|0)==55296;
 var $8=($5>>>0)>1114111;
 var $or_cond_i=$7|$8;
 if($or_cond_i){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=4;break;}
 case 4: 
 var $10=($5>>>0)<128;
 if($10){label=5;break;}else{label=7;break;}
 case 5: 
 var $12=$_to_nxt_0;
 var $13=((($3)-($12))|0);
 var $14=($13|0)<1;
 if($14){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=6;break;}
 case 6: 
 var $16=(($5)&255);
 var $17=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$16;
 var $_to_nxt_1=$17;label=15;break;
 case 7: 
 var $19=($5>>>0)<2048;
 if($19){label=8;break;}else{label=10;break;}
 case 8: 
 var $21=$_to_nxt_0;
 var $22=((($3)-($21))|0);
 var $23=($22|0)<2;
 if($23){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=9;break;}
 case 9: 
 var $25=$5>>>6;
 var $26=$25|192;
 var $27=(($26)&255);
 var $28=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$27;
 var $29=$5&63;
 var $30=$29|128;
 var $31=(($30)&255);
 var $32=(($_to_nxt_0+2)|0);
 HEAP8[($28)]=$31;
 var $_to_nxt_1=$32;label=15;break;
 case 10: 
 var $34=($5>>>0)<65536;
 var $35=$_to_nxt_0;
 var $36=((($3)-($35))|0);
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=($36|0)<3;
 if($38){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=12;break;}
 case 12: 
 var $40=$5>>>12;
 var $41=$40|224;
 var $42=(($41)&255);
 var $43=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$42;
 var $44=$5>>>6;
 var $45=$44&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=(($_to_nxt_0+2)|0);
 HEAP8[($43)]=$47;
 var $49=$5&63;
 var $50=$49|128;
 var $51=(($50)&255);
 var $52=(($_to_nxt_0+3)|0);
 HEAP8[($48)]=$51;
 var $_to_nxt_1=$52;label=15;break;
 case 13: 
 var $54=($36|0)<4;
 if($54){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=14;break;}
 case 14: 
 var $56=$5>>>18;
 var $57=$56|240;
 var $58=(($57)&255);
 var $59=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$58;
 var $60=$5>>>12;
 var $61=$60&63;
 var $62=$61|128;
 var $63=(($62)&255);
 var $64=(($_to_nxt_0+2)|0);
 HEAP8[($59)]=$63;
 var $65=$5>>>6;
 var $66=$65&63;
 var $67=$66|128;
 var $68=(($67)&255);
 var $69=(($_to_nxt_0+3)|0);
 HEAP8[($64)]=$68;
 var $70=$5&63;
 var $71=$70|128;
 var $72=(($71)&255);
 var $73=(($_to_nxt_0+4)|0);
 HEAP8[($69)]=$72;
 var $_to_nxt_1=$73;label=15;break;
 case 15: 
 var $_to_nxt_1;
 var $75=(($_frm_nxt_0+4)|0);
 var $76=($75>>>0)<($frm_end>>>0);
 if($76){var $_to_nxt_0=$_to_nxt_1;var $_frm_nxt_0=$75;label=3;break;}else{var $_0_i=0;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_1=$75;label=16;break;}
 case 16: 
 var $_frm_nxt_1;
 var $_to_nxt_2;
 var $_0_i;
 var $77=$_frm_nxt_1;
 var $78=$frm;
 var $79=((($77)-($78))|0);
 var $80=$79>>2;
 var $81=(($frm+($80<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$81;
 var $82=$_to_nxt_2;
 var $83=$to;
 var $84=((($82)-($83))|0);
 var $85=(($to+$84)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_to_nxt_1=$to;var $_frm_nxt_2=$frm;label=30;break;}
 case 2: 
 var $3=$frm_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $5=($_to_nxt_0>>>0)<($to_end>>>0);
 if($5){label=4;break;}else{var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=30;break;}
 case 4: 
 var $7=HEAP8[($_frm_nxt_0)];
 var $8=($7&255);
 var $9=(($7<<24)>>24)>-1;
 if($9){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($_to_nxt_0)>>2)]=$8;
 var $11=(($_frm_nxt_0+1)|0);
 var $_frm_nxt_1=$11;label=29;break;
 case 6: 
 var $13=($7&255)<194;
 if($13){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=7;break;}
 case 7: 
 var $15=($7&255)<224;
 if($15){label=8;break;}else{label=11;break;}
 case 8: 
 var $17=$_frm_nxt_0;
 var $18=((($3)-($17))|0);
 var $19=($18|0)<2;
 if($19){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=9;break;}
 case 9: 
 var $21=(($_frm_nxt_0+1)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23&192;
 var $25=($24|0)==128;
 if($25){label=10;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 10: 
 var $27=$8<<6;
 var $28=$23&63;
 var $29=$27&1984;
 var $30=$28|$29;
 HEAP32[(($_to_nxt_0)>>2)]=$30;
 var $31=(($_frm_nxt_0+2)|0);
 var $_frm_nxt_1=$31;label=29;break;
 case 11: 
 var $33=($7&255)<240;
 if($33){label=12;break;}else{label=19;break;}
 case 12: 
 var $35=$_frm_nxt_0;
 var $36=((($3)-($35))|0);
 var $37=($36|0)<3;
 if($37){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=13;break;}
 case 13: 
 var $39=(($_frm_nxt_0+1)|0);
 var $40=HEAP8[($39)];
 var $41=(($_frm_nxt_0+2)|0);
 var $42=HEAP8[($41)];
 if(($8|0)==224){ label=14;break;}else if(($8|0)==237){ label=15;break;}else{label=16;break;}
 case 14: 
 var $44=$40&-32;
 var $45=(($44<<24)>>24)==-96;
 if($45){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 15: 
 var $47=$40&-32;
 var $48=(($47<<24)>>24)==-128;
 if($48){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 16: 
 var $50=$40&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 17: 
 var $53=($42&255);
 var $54=$53&192;
 var $55=($54|0)==128;
 if($55){label=18;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 18: 
 var $57=($40&255);
 var $58=$57<<6;
 var $59=$8<<12;
 var $60=$58&4032;
 var $61=$59&61440;
 var $62=$53&63;
 var $63=$60|$61;
 var $64=$63|$62;
 HEAP32[(($_to_nxt_0)>>2)]=$64;
 var $65=(($_frm_nxt_0+3)|0);
 var $_frm_nxt_1=$65;label=29;break;
 case 19: 
 var $67=($7&255)<245;
 if($67){label=20;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 20: 
 var $69=$_frm_nxt_0;
 var $70=((($3)-($69))|0);
 var $71=($70|0)<4;
 if($71){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=21;break;}
 case 21: 
 var $73=(($_frm_nxt_0+1)|0);
 var $74=HEAP8[($73)];
 var $75=(($_frm_nxt_0+2)|0);
 var $76=HEAP8[($75)];
 var $77=(($_frm_nxt_0+3)|0);
 var $78=HEAP8[($77)];
 if(($8|0)==240){ label=22;break;}else if(($8|0)==244){ label=23;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($74)+(112))&255);
 var $80=($_off_i&255)<48;
 if($80){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 23: 
 var $82=$74&-16;
 var $83=(($82<<24)>>24)==-128;
 if($83){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 24: 
 var $85=$74&-64;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 25: 
 var $88=($76&255);
 var $89=$88&192;
 var $90=($89|0)==128;
 if($90){label=26;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 26: 
 var $92=($78&255);
 var $93=$92&192;
 var $94=($93|0)==128;
 if($94){label=27;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 27: 
 var $96=$8<<18;
 var $97=$96&1835008;
 var $98=($74&255);
 var $99=$98<<12;
 var $100=$99&258048;
 var $101=$100|$97;
 var $102=$88<<6;
 var $103=$102&4032;
 var $104=$101|$103;
 var $105=$92&63;
 var $106=$104|$105;
 var $107=($106>>>0)>1114111;
 if($107){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=28;break;}
 case 28: 
 HEAP32[(($_to_nxt_0)>>2)]=$106;
 var $109=(($_frm_nxt_0+4)|0);
 var $_frm_nxt_1=$109;label=29;break;
 case 29: 
 var $_frm_nxt_1;
 var $111=(($_to_nxt_0+4)|0);
 var $112=($_frm_nxt_1>>>0)<($frm_end>>>0);
 if($112){var $_to_nxt_0=$111;var $_frm_nxt_0=$_frm_nxt_1;label=3;break;}else{var $_to_nxt_1=$111;var $_frm_nxt_2=$_frm_nxt_1;label=30;break;}
 case 30: 
 var $_frm_nxt_2;
 var $_to_nxt_1;
 var $113=($_frm_nxt_2>>>0)<($frm_end>>>0);
 var $114=($113&1);
 var $_0_i=$114;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_3=$_frm_nxt_2;label=31;break;
 case 31: 
 var $_frm_nxt_3;
 var $_to_nxt_2;
 var $_0_i;
 var $115=$_frm_nxt_3;
 var $116=$frm;
 var $117=((($115)-($116))|0);
 var $118=(($frm+$117)|0);
 HEAP32[(($frm_nxt)>>2)]=$118;
 var $119=$_to_nxt_2;
 var $120=$to;
 var $121=((($119)-($120))|0);
 var $122=$121>>2;
 var $123=(($to+($122<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$123;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 var $3=($mx|0)!=0;
 var $or_cond79_i=$2&$3;
 if($or_cond79_i){label=2;break;}else{var $frm_nxt_1_lcssa_i=$frm;label=36;break;}
 case 2: 
 var $4=$frm_end;
 var $nchar32_t_080_i=1;var $frm_nxt_181_i=$frm;label=3;break;
 case 3: 
 var $frm_nxt_181_i;
 var $nchar32_t_080_i;
 var $6=HEAP8[($frm_nxt_181_i)];
 var $7=($6&255);
 var $8=(($6<<24)>>24)>-1;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($frm_nxt_181_i+1)|0);
 var $frm_nxt_2_i=$10;label=34;break;
 case 5: 
 var $12=($6&255)<194;
 if($12){var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}else{label=6;break;}
 case 6: 
 var $14=($6&255)<224;
 if($14){label=7;break;}else{label=10;break;}
 case 7: 
 var $16=$frm_nxt_181_i;
 var $17=((($4)-($16))|0);
 var $18=($17|0)<2;
 if($18){var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}else{label=8;break;}
 case 8: 
 var $20=(($frm_nxt_181_i+1)|0);
 var $21=HEAP8[($20)];
 var $22=$21&-64;
 var $23=(($22<<24)>>24)==-128;
 if($23){label=9;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}
 case 9: 
 var $25=(($frm_nxt_181_i+2)|0);
 var $frm_nxt_2_i=$25;label=34;break;
 case 10: 
 var $27=($6&255)<240;
 if($27){label=11;break;}else{label=21;break;}
 case 11: 
 var $29=$frm_nxt_181_i;
 var $30=((($4)-($29))|0);
 var $31=($30|0)<3;
 if($31){var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}else{label=12;break;}
 case 12: 
 var $33=(($frm_nxt_181_i+1)|0);
 var $34=HEAP8[($33)];
 var $35=(($frm_nxt_181_i+2)|0);
 var $36=HEAP8[($35)];
 if(($7|0)==224){ label=13;break;}else if(($7|0)==237){ label=15;break;}else{label=17;break;}
 case 13: 
 var $38=$34&-32;
 var $39=(($38<<24)>>24)==-96;
 if($39){label=19;break;}else{label=14;break;}
 case 14: 
 var $41=$frm;
 var $42=((($29)-($41))|0);
 var $_0_i=$42;label=37;break;
 case 15: 
 var $44=$34&-32;
 var $45=(($44<<24)>>24)==-128;
 if($45){label=19;break;}else{label=16;break;}
 case 16: 
 var $47=$frm;
 var $48=((($29)-($47))|0);
 var $_0_i=$48;label=37;break;
 case 17: 
 var $50=$34&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=$frm;
 var $54=((($29)-($53))|0);
 var $_0_i=$54;label=37;break;
 case 19: 
 var $56=$36&-64;
 var $57=(($56<<24)>>24)==-128;
 if($57){label=20;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}
 case 20: 
 var $59=(($frm_nxt_181_i+3)|0);
 var $frm_nxt_2_i=$59;label=34;break;
 case 21: 
 var $61=($6&255)<245;
 if($61){label=22;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}
 case 22: 
 var $63=$frm_nxt_181_i;
 var $64=((($4)-($63))|0);
 var $65=($64|0)<4;
 if($65){var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}else{label=23;break;}
 case 23: 
 var $67=(($frm_nxt_181_i+1)|0);
 var $68=HEAP8[($67)];
 var $69=(($frm_nxt_181_i+2)|0);
 var $70=HEAP8[($69)];
 var $71=(($frm_nxt_181_i+3)|0);
 var $72=HEAP8[($71)];
 if(($7|0)==240){ label=24;break;}else if(($7|0)==244){ label=26;break;}else{label=28;break;}
 case 24: 
 var $_off_i=((($68)+(112))&255);
 var $74=($_off_i&255)<48;
 if($74){label=30;break;}else{label=25;break;}
 case 25: 
 var $76=$frm;
 var $77=((($63)-($76))|0);
 var $_0_i=$77;label=37;break;
 case 26: 
 var $79=$68&-16;
 var $80=(($79<<24)>>24)==-128;
 if($80){label=30;break;}else{label=27;break;}
 case 27: 
 var $82=$frm;
 var $83=((($63)-($82))|0);
 var $_0_i=$83;label=37;break;
 case 28: 
 var $85=$68&-64;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=30;break;}else{label=29;break;}
 case 29: 
 var $88=$frm;
 var $89=((($63)-($88))|0);
 var $_0_i=$89;label=37;break;
 case 30: 
 var $91=$70&-64;
 var $92=(($91<<24)>>24)==-128;
 if($92){label=31;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}
 case 31: 
 var $94=$72&-64;
 var $95=(($94<<24)>>24)==-128;
 if($95){label=32;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}
 case 32: 
 var $97=$7<<18;
 var $98=$97&1835008;
 var $99=($68&255);
 var $100=$99<<12;
 var $101=$100&196608;
 var $102=$101|$98;
 var $103=($102>>>0)>1114111;
 if($103){var $frm_nxt_1_lcssa_i=$frm_nxt_181_i;label=36;break;}else{label=33;break;}
 case 33: 
 var $105=(($frm_nxt_181_i+4)|0);
 var $frm_nxt_2_i=$105;label=34;break;
 case 34: 
 var $frm_nxt_2_i;
 var $107=($frm_nxt_2_i>>>0)<($frm_end>>>0);
 var $108=($nchar32_t_080_i>>>0)<($mx>>>0);
 var $or_cond_i=$107&$108;
 if($or_cond_i){label=35;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_2_i;label=36;break;}
 case 35: 
 var $phitmp_i=((($nchar32_t_080_i)+(1))|0);
 var $nchar32_t_080_i=$phitmp_i;var $frm_nxt_181_i=$frm_nxt_2_i;label=3;break;
 case 36: 
 var $frm_nxt_1_lcssa_i;
 var $109=$frm_nxt_1_lcssa_i;
 var $110=$frm;
 var $111=((($109)-($110))|0);
 var $_0_i=$111;label=37;break;
 case 37: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6568;
 var $2=(($this+12)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=5;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6568;
 var $2=(($this+12)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6520;
 var $2=(($this+16)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=5;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6520;
 var $2=(($this+16)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;
 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;
 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;
 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=$1;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=20;break;
 case 3: 
 var $9=(($this+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$agg_result;
 var $21=$agg_result;
 HEAP8[($21)]=$19;
 var $22=(($20+1)|0);
 var $__p_0_i_i_i=$22;label=19;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 label=8;break;
 case 8: 
 var $27=_malloc($_size_i);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=18;break;}
 case 9: 
 var $30=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=10;break;}
 case 10: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $35=$lpad_phi_i$1;
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=16;break;}
 case 14: 
 var $38=$lpad_phi_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $44=(($agg_result+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($agg_result+4)|0);
 HEAP32[(($47)>>2)]=$12;
 var $__p_0_i_i_i=$27;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i_i_i, $10, $12)|0);
 var $48=(($__p_0_i_i_i+$12)|0);
 HEAP8[($48)]=0;
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0);
 var $2=$1;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=20;break;
 case 3: 
 var $9=(($this+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$agg_result;
 var $21=$agg_result;
 HEAP8[($21)]=$19;
 var $22=(($20+1)|0);
 var $__p_0_i_i_i=$22;label=19;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 label=8;break;
 case 8: 
 var $27=_malloc($_size_i);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=18;break;}
 case 9: 
 var $30=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=10;break;}
 case 10: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $35=$lpad_phi_i$1;
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=16;break;}
 case 14: 
 var $38=$lpad_phi_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $44=(($agg_result+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($agg_result+4)|0);
 HEAP32[(($47)>>2)]=$12;
 var $__p_0_i_i_i=$27;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i_i_i, $10, $12)|0);
 var $48=(($__p_0_i_i_i+$12)|0);
 HEAP8[($48)]=0;
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 var $2=$agg_result;
 HEAP8[($2)]=8;
 var $3=(($1+1)|0);
 var $4=$3;
 tempBigInt=1702195828;HEAP8[($4)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(3))|0)]=tempBigInt&0xff;
 var $5=(($1+5)|0);
 HEAP8[($5)]=0;
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=2200;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=((($5)-(2200))|0);
 var $7=$6>>2;
 var $8=($7>>>0)>1073741807;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $11=($7>>>0)<2;
 if($11){label=6;break;}else{label=7;break;}
 case 6: 
 var $13=$6>>>1;
 var $14=(($13)&255);
 var $15=$agg_result;
 HEAP8[($15)]=$14;
 var $16=(($agg_result+4)|0);
 var $__p_0_i=$16;label=19;break;
 case 7: 
 var $17=((($7)+(4))|0);
 var $18=$17&-4;
 var $19=$18<<2;
 var $20=($19|0)==0;
 var $_size_i=($20?1:$19);
 label=8;break;
 case 8: 
 var $22=_malloc($_size_i);
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=18;break;}
 case 9: 
 var $25=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=15;break;}else{label=10;break;}
 case 10: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $30=$lpad_phi_i$1;
 var $31=($30|0)<0;
 if($31){label=14;break;}else{label=16;break;}
 case 14: 
 var $33=$lpad_phi_i$0;
 ___cxa_call_unexpected($33);
 throw "Reached an unreachable!";
 case 15: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $39=$22;
 var $40=(($agg_result+8)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=$18|1;
 var $42=(($agg_result)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=(($agg_result+4)|0);
 HEAP32[(($43)>>2)]=$7;
 var $__p_0_i=$39;label=19;break;
 case 19: 
 var $__p_0_i;
 var $45=($7|0)==0;
 if($45){label=21;break;}else{var $_056_i_i=2200;var $_047_i_i=$7;var $_08_i_i=$__p_0_i;label=20;break;}
 case 20: 
 var $_08_i_i;
 var $_047_i_i;
 var $_056_i_i;
 var $46=((($_047_i_i)-(1))|0);
 var $47=(($_056_i_i+4)|0);
 var $48=HEAP32[(($_056_i_i)>>2)];
 var $49=(($_08_i_i+4)|0);
 HEAP32[(($_08_i_i)>>2)]=$48;
 var $50=($46|0)==0;
 if($50){label=21;break;}else{var $_056_i_i=$47;var $_047_i_i=$46;var $_08_i_i=$49;label=20;break;}
 case 21: 
 var $51=(($__p_0_i+($7<<2))|0);
 HEAP32[(($51)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;
 var $1=$agg_result;
 var $2=$agg_result;
 HEAP8[($2)]=10;
 var $3=(($1+1)|0);
 assert(5 % 1 === 0);HEAP8[($3)]=HEAP8[(2192)];HEAP8[((($3)+(1))|0)]=HEAP8[(2193)];HEAP8[((($3)+(2))|0)]=HEAP8[(2194)];HEAP8[((($3)+(3))|0)]=HEAP8[(2195)];HEAP8[((($3)+(4))|0)]=HEAP8[(2196)];
 var $4=(($1+6)|0);
 HEAP8[($4)]=0;
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=2136;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=((($5)-(2136))|0);
 var $7=$6>>2;
 var $8=($7>>>0)>1073741807;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $11=($7>>>0)<2;
 if($11){label=6;break;}else{label=7;break;}
 case 6: 
 var $13=$6>>>1;
 var $14=(($13)&255);
 var $15=$agg_result;
 HEAP8[($15)]=$14;
 var $16=(($agg_result+4)|0);
 var $__p_0_i=$16;label=19;break;
 case 7: 
 var $17=((($7)+(4))|0);
 var $18=$17&-4;
 var $19=$18<<2;
 var $20=($19|0)==0;
 var $_size_i=($20?1:$19);
 label=8;break;
 case 8: 
 var $22=_malloc($_size_i);
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=18;break;}
 case 9: 
 var $25=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=15;break;}else{label=10;break;}
 case 10: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $30=$lpad_phi_i$1;
 var $31=($30|0)<0;
 if($31){label=14;break;}else{label=16;break;}
 case 14: 
 var $33=$lpad_phi_i$0;
 ___cxa_call_unexpected($33);
 throw "Reached an unreachable!";
 case 15: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $39=$22;
 var $40=(($agg_result+8)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=$18|1;
 var $42=(($agg_result)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=(($agg_result+4)|0);
 HEAP32[(($43)>>2)]=$7;
 var $__p_0_i=$39;label=19;break;
 case 19: 
 var $__p_0_i;
 var $45=($7|0)==0;
 if($45){label=21;break;}else{var $_056_i_i=2136;var $_047_i_i=$7;var $_08_i_i=$__p_0_i;label=20;break;}
 case 20: 
 var $_08_i_i;
 var $_047_i_i;
 var $_056_i_i;
 var $46=((($_047_i_i)-(1))|0);
 var $47=(($_056_i_i+4)|0);
 var $48=HEAP32[(($_056_i_i)>>2)];
 var $49=(($_08_i_i+4)|0);
 HEAP32[(($_08_i_i)>>2)]=$48;
 var $50=($46|0)==0;
 if($50){label=21;break;}else{var $_056_i_i=$47;var $_047_i_i=$46;var $_08_i_i=$49;label=20;break;}
 case 21: 
 var $51=(($__p_0_i+($7<<2))|0);
 HEAP32[(($51)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19944)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19944);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19832)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19832);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(17384, 0, 168)|0;
 var $12=_atexit(868,0,___dso_handle);
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17384,3024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17396,3016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17408,3000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17420,2984) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17432,2968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17444,2960) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17456,2944) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17468,2936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17480,2928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17492,2848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17504,2840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17516,2832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17528,2784) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17540,2776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((18328)>>2)]=17384;
 label=21;break;
 case 21: 
 var $15=HEAP32[((18328)>>2)];
 return $15;
 case 22: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19888)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19888);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19808)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19808);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16640, 0, 168)|0;
 var $12=_atexit(440,0,___dso_handle);
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16640,3432) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16652,3400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16664,3368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16676,3328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16688,3272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16700,3240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16712,3200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16724,3176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16736,3120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16748,3104) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16760,3088) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16772,3072) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16784,3056) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16796,3040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((18240)>>2)]=16640;
 label=21;break;
 case 21: 
 var $15=HEAP32[((18240)>>2)];
 return $15;
 case 22: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19936)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19936);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19824)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19824);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(17096, 0, 288)|0;
 var $12=_atexit(484,0,___dso_handle);
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17096,328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17108,312) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17120,304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17132,296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17144,288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17156,280) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17168,272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17180,264) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17192,184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17204,176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17216,152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17228,136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17240,128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17252,120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17264,72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17276,64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17288,288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17300,56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17312,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17324,3512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17336,3504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17348,3480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17360,3472) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17372,3464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((18320)>>2)]=17096;
 label=31;break;
 case 31: 
 var $15=HEAP32[((18320)>>2)];
 return $15;
 case 32: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19880)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19880);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19800)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19800);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16352, 0, 288)|0;
 var $12=_atexit(376,0,___dso_handle);
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16352,992) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16364,952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16376,928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16388,896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16400,544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16412,856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16424,832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16436,800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16448,760) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16460,712) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16472,672) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16484,632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16496,616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16508,600) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16520,584) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16532,560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16544,544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16556,528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16568,512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16580,496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16592,480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16604,464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16616,448) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16628,368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((18232)>>2)]=16352;
 label=31;break;
 case 31: 
 var $15=HEAP32[((18232)>>2)];
 return $15;
 case 32: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19952)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19952);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19840)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19840);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(17552, 0, 288)|0;
 var $12=_atexit(372,0,___dso_handle);
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17552,1032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(17564,1024) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((18336)>>2)]=17552;
 label=9;break;
 case 9: 
 var $15=HEAP32[((18336)>>2)];
 return $15;
 case 10: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19896)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19896);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19816)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19816);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16808, 0, 288)|0;
 var $12=_atexit(810,0,___dso_handle);
 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16808,1064) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16820,1040) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((18248)>>2)]=16808;
 label=9;break;
 case 9: 
 var $15=HEAP32[((18248)>>2)];
 return $15;
 case 10: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;
 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19960)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19960);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[(18344)]=16;
 var $$etemp$1=18345;
 var $$etemp$0$0=623865125;
 var $$etemp$0$1=2032480100;
 var $st$2$0=(($$etemp$1)|0);
 tempBigInt=$$etemp$0$0;HEAP8[($st$2$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))|0)]=tempBigInt&0xff;
 var $st$3$1=(($$etemp$1+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[($st$3$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))|0)]=tempBigInt&0xff;
 HEAP8[(18353)]=0;
 var $6=_atexit((858),18344,___dso_handle);
 label=4;break;
 case 4: 
 return 18344;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19904)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19904);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=1904;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(1904))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(18256)]=$18;
 var $__p_0_i=18260;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((18264)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((18256)>>2)]=$41;
 HEAP32[((18260)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_056_i_i=1904;var $_047_i_i=$11;var $_08_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_08_i_i;
 var $_047_i_i;
 var $_056_i_i;
 var $44=((($_047_i_i)-(1))|0);
 var $45=(($_056_i_i+4)|0);
 var $46=HEAP32[(($_056_i_i)>>2)];
 var $47=(($_08_i_i+4)|0);
 HEAP32[(($_08_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_056_i_i=$45;var $_047_i_i=$44;var $_08_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((568),18256,___dso_handle);
 label=24;break;
 case 24: 
 return 18256;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19984)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19984);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[(18392)]=16;
 var $$etemp$1=18393;
 var $$etemp$0$0=624576549;
 var $$etemp$0$1=1394948685;
 var $st$2$0=(($$etemp$1)|0);
 tempBigInt=$$etemp$0$0;HEAP8[($st$2$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))|0)]=tempBigInt&0xff;
 var $st$3$1=(($$etemp$1+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[($st$3$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))|0)]=tempBigInt&0xff;
 HEAP8[(18401)]=0;
 var $6=_atexit((858),18392,___dso_handle);
 label=4;break;
 case 4: 
 return 18392;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19928)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19928);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=1728;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(1728))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(18304)]=$18;
 var $__p_0_i=18308;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((18312)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((18304)>>2)]=$41;
 HEAP32[((18308)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_056_i_i=1728;var $_047_i_i=$11;var $_08_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_08_i_i;
 var $_047_i_i;
 var $_056_i_i;
 var $44=((($_047_i_i)-(1))|0);
 var $45=(($_056_i_i+4)|0);
 var $46=HEAP32[(($_056_i_i)>>2)];
 var $47=(($_08_i_i+4)|0);
 HEAP32[(($_08_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_056_i_i=$45;var $_047_i_i=$44;var $_08_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((568),18304,___dso_handle);
 label=24;break;
 case 24: 
 return 18304;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19976)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=14;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19976);
 var $5=($4|0)==0;
 if($5){label=14;break;}else{label=3;break;}
 case 3: 
 var $6=_malloc(32);
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=13;break;}
 case 4: 
 var $9=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $10=($9|0)==0;
 if($10){label=11;break;}else{label=5;break;}
 case 5: 
 var $12=$9;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$12]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 6: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=8;break;
 case 8: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $14=$lpad_phi_i$1;
 var $15=($14|0)<0;
 if($15){label=9;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=16;break;}
 case 9: 
 var $17=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=15;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $19=___cxa_allocate_exception(4);
 var $20=$19;
 HEAP32[(($20)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($19,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=7;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 HEAP32[((18384)>>2)]=$6;
 HEAP32[((18376)>>2)]=33;
 HEAP32[((18380)>>2)]=20;
 assert(20 % 1 === 0);(_memcpy($6, 1632, 20)|0);
 var $22=(($6+20)|0);
 HEAP8[($22)]=0;
 var $23=_atexit((858),18376,___dso_handle);
 label=14;break;
 case 14: 
 return 18376;
 case 15: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $eh_lpad_body$1=$26$1;var $eh_lpad_body$0=$26$0;label=16;break;
 case 16: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19920)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19920);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=1496;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(1496))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(18288)]=$18;
 var $__p_0_i=18292;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((18296)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((18288)>>2)]=$41;
 HEAP32[((18292)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_056_i_i=1496;var $_047_i_i=$11;var $_08_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_08_i_i;
 var $_047_i_i;
 var $_056_i_i;
 var $44=((($_047_i_i)-(1))|0);
 var $45=(($_056_i_i+4)|0);
 var $46=HEAP32[(($_056_i_i)>>2)];
 var $47=(($_08_i_i+4)|0);
 HEAP32[(($_08_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_056_i_i=$45;var $_047_i_i=$44;var $_08_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((568),18288,___dso_handle);
 label=24;break;
 case 24: 
 return 18288;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19968)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=14;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19968);
 var $5=($4|0)==0;
 if($5){label=14;break;}else{label=3;break;}
 case 3: 
 var $6=_malloc(16);
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=13;break;}
 case 4: 
 var $9=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $10=($9|0)==0;
 if($10){label=11;break;}else{label=5;break;}
 case 5: 
 var $12=$9;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$12]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 6: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=8;break;
 case 8: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $14=$lpad_phi_i$1;
 var $15=($14|0)<0;
 if($15){label=9;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=16;break;}
 case 9: 
 var $17=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=15;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $19=___cxa_allocate_exception(4);
 var $20=$19;
 HEAP32[(($20)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($19,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=7;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 HEAP32[((18368)>>2)]=$6;
 HEAP32[((18360)>>2)]=17;
 HEAP32[((18364)>>2)]=11;
 assert(11 % 1 === 0);(_memcpy($6, 1448, 11)|0);
 var $22=(($6+11)|0);
 HEAP8[($22)]=0;
 var $23=_atexit((858),18360,___dso_handle);
 label=14;break;
 case 14: 
 return 18360;
 case 15: 
 var $26$0 = ___cxa_find_matching_catch(-1, -1); var $26$1 = tempRet0;
 var $eh_lpad_body$1=$26$1;var $eh_lpad_body$0=$26$0;label=16;break;
 case 16: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19912)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19912);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=1368;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(1368))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(18272)]=$18;
 var $__p_0_i=18276;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19776)>>2)],HEAP32[((19776)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5848;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,13504,(76)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((18280)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((18272)>>2)]=$41;
 HEAP32[((18276)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_056_i_i=1368;var $_047_i_i=$11;var $_08_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_08_i_i;
 var $_047_i_i;
 var $_056_i_i;
 var $44=((($_047_i_i)-(1))|0);
 var $45=(($_056_i_i+4)|0);
 var $46=HEAP32[(($_056_i_i)>>2)];
 var $47=(($_08_i_i+4)|0);
 HEAP32[(($_08_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_056_i_i=$45;var $_047_i_i=$44;var $_08_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((568),18272,___dso_handle);
 label=24;break;
 case 24: 
 return 18272;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19864)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19864);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=_strtold_l($__a,$__p2);
 var $16=HEAP32[(($3)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $20=HEAP32[(($__p2)>>2)];
 var $21=($20|0)==($__a_end|0);
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $24=($16|0)==34;
 if($24){label=12;break;}else{var $_0=$15;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$15;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19864)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19864);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=_strtold_l($__a,$__p2);
 var $16=HEAP32[(($3)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $20=HEAP32[(($__p2)>>2)];
 var $21=($20|0)==($__a_end|0);
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $24=($16|0)==34;
 if($24){label=12;break;}else{var $_0=$15;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$15;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19864)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19864);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=_strtold_l($__a,$__p2);
 var $16=HEAP32[(($3)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $20=HEAP32[(($__p2)>>2)];
 var $21=($20|0)==($__a_end|0);
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $24=($16|0)==34;
 if($24){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $27=$15;
 var $_0=$27;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19864)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19864);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17856)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17856)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19864)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19864);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17856)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17856)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19864)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19864);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17856)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17856)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19864)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19864);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17856)>>2)]=$15;
 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;
 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17856)>>2)];
 var $20$0=_strtoull($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19864)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19864);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((17856)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($27?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($27?$$etemp$1$1:$$etemp$2$1);
 var $_0$1=$_$1;var $_0$0=$_$0;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19864)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19864);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,2528,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17856)>>2)]=$11;
 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((17856)>>2)];
 var $16$0=_strtoll($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $25=($17|0)==34;
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $26=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 var $or_cond=$25|$26;
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $27=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 var $or_cond13=$or_cond|$27;
 if($or_cond13){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $29=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 var $_=($29?2147483647:-2147483648);
 var $_0=$_;label=15;break;
 case 13: 
 var $31$0=$16$0;
 var $31=$31$0;
 var $_0=$31;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor($0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(17084)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((17092)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 _free($9);
 label=4;break;
 case 4: 
 var $10=HEAP8[(17072)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=7;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[((17080)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 _free($17);
 label=7;break;
 case 7: 
 var $18=HEAP8[(17060)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=HEAP32[((17068)>>2)];
 var $23=($22|0)==0;
 if($23){label=10;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 _free($25);
 label=10;break;
 case 10: 
 var $26=HEAP8[(17048)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[((17056)>>2)];
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 _free($33);
 label=13;break;
 case 13: 
 var $34=HEAP8[(17036)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=16;break;}else{label=14;break;}
 case 14: 
 var $38=HEAP32[((17044)>>2)];
 var $39=($38|0)==0;
 if($39){label=16;break;}else{label=15;break;}
 case 15: 
 var $41=$38;
 _free($41);
 label=16;break;
 case 16: 
 var $42=HEAP8[(17024)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=17;break;}
 case 17: 
 var $46=HEAP32[((17032)>>2)];
 var $47=($46|0)==0;
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $49=$46;
 _free($49);
 label=19;break;
 case 19: 
 var $50=HEAP8[(17012)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=22;break;}else{label=20;break;}
 case 20: 
 var $54=HEAP32[((17020)>>2)];
 var $55=($54|0)==0;
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $57=$54;
 _free($57);
 label=22;break;
 case 22: 
 var $58=HEAP8[(17000)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=25;break;}else{label=23;break;}
 case 23: 
 var $62=HEAP32[((17008)>>2)];
 var $63=($62|0)==0;
 if($63){label=25;break;}else{label=24;break;}
 case 24: 
 var $65=$62;
 _free($65);
 label=25;break;
 case 25: 
 var $66=HEAP8[(16988)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=28;break;}else{label=26;break;}
 case 26: 
 var $70=HEAP32[((16996)>>2)];
 var $71=($70|0)==0;
 if($71){label=28;break;}else{label=27;break;}
 case 27: 
 var $73=$70;
 _free($73);
 label=28;break;
 case 28: 
 var $74=HEAP8[(16976)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=31;break;}else{label=29;break;}
 case 29: 
 var $78=HEAP32[((16984)>>2)];
 var $79=($78|0)==0;
 if($79){label=31;break;}else{label=30;break;}
 case 30: 
 var $81=$78;
 _free($81);
 label=31;break;
 case 31: 
 var $82=HEAP8[(16964)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=34;break;}else{label=32;break;}
 case 32: 
 var $86=HEAP32[((16972)>>2)];
 var $87=($86|0)==0;
 if($87){label=34;break;}else{label=33;break;}
 case 33: 
 var $89=$86;
 _free($89);
 label=34;break;
 case 34: 
 var $90=HEAP8[(16952)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=37;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[((16960)>>2)];
 var $95=($94|0)==0;
 if($95){label=37;break;}else{label=36;break;}
 case 36: 
 var $97=$94;
 _free($97);
 label=37;break;
 case 37: 
 var $98=HEAP8[(16940)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=HEAP32[((16948)>>2)];
 var $103=($102|0)==0;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $105=$102;
 _free($105);
 label=40;break;
 case 40: 
 var $106=HEAP8[(16928)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=HEAP32[((16936)>>2)];
 var $111=($110|0)==0;
 if($111){label=43;break;}else{label=42;break;}
 case 42: 
 var $113=$110;
 _free($113);
 label=43;break;
 case 43: 
 var $114=HEAP8[(16916)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=46;break;}else{label=44;break;}
 case 44: 
 var $118=HEAP32[((16924)>>2)];
 var $119=($118|0)==0;
 if($119){label=46;break;}else{label=45;break;}
 case 45: 
 var $121=$118;
 _free($121);
 label=46;break;
 case 46: 
 var $122=HEAP8[(16904)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=49;break;}else{label=47;break;}
 case 47: 
 var $126=HEAP32[((16912)>>2)];
 var $127=($126|0)==0;
 if($127){label=49;break;}else{label=48;break;}
 case 48: 
 var $129=$126;
 _free($129);
 label=49;break;
 case 49: 
 var $130=HEAP8[(16892)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=52;break;}else{label=50;break;}
 case 50: 
 var $134=HEAP32[((16900)>>2)];
 var $135=($134|0)==0;
 if($135){label=52;break;}else{label=51;break;}
 case 51: 
 var $137=$134;
 _free($137);
 label=52;break;
 case 52: 
 var $138=HEAP8[(16880)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=55;break;}else{label=53;break;}
 case 53: 
 var $142=HEAP32[((16888)>>2)];
 var $143=($142|0)==0;
 if($143){label=55;break;}else{label=54;break;}
 case 54: 
 var $145=$142;
 _free($145);
 label=55;break;
 case 55: 
 var $146=HEAP8[(16868)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=58;break;}else{label=56;break;}
 case 56: 
 var $150=HEAP32[((16876)>>2)];
 var $151=($150|0)==0;
 if($151){label=58;break;}else{label=57;break;}
 case 57: 
 var $153=$150;
 _free($153);
 label=58;break;
 case 58: 
 var $154=HEAP8[(16856)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=61;break;}else{label=59;break;}
 case 59: 
 var $158=HEAP32[((16864)>>2)];
 var $159=($158|0)==0;
 if($159){label=61;break;}else{label=60;break;}
 case 60: 
 var $161=$158;
 _free($161);
 label=61;break;
 case 61: 
 var $162=HEAP8[(16844)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=64;break;}else{label=62;break;}
 case 62: 
 var $166=HEAP32[((16852)>>2)];
 var $167=($166|0)==0;
 if($167){label=64;break;}else{label=63;break;}
 case 63: 
 var $169=$166;
 _free($169);
 label=64;break;
 case 64: 
 var $170=HEAP8[(16832)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=67;break;}else{label=65;break;}
 case 65: 
 var $174=HEAP32[((16840)>>2)];
 var $175=($174|0)==0;
 if($175){label=67;break;}else{label=66;break;}
 case 66: 
 var $177=$174;
 _free($177);
 label=67;break;
 case 67: 
 var $178=HEAP8[(16820)];
 var $179=$178&1;
 var $180=(($179<<24)>>24)==0;
 if($180){label=70;break;}else{label=68;break;}
 case 68: 
 var $182=HEAP32[((16828)>>2)];
 var $183=($182|0)==0;
 if($183){label=70;break;}else{label=69;break;}
 case 69: 
 var $185=$182;
 _free($185);
 label=70;break;
 case 70: 
 var $186=HEAP8[(16808)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=73;break;}else{label=71;break;}
 case 71: 
 var $190=HEAP32[((16816)>>2)];
 var $191=($190|0)==0;
 if($191){label=73;break;}else{label=72;break;}
 case 72: 
 var $193=$190;
 _free($193);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor53($0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(17828)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((17836)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _free($6);
 label=4;break;
 case 4: 
 var $9=HEAP8[(17816)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP32[((17824)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 _free($13);
 label=7;break;
 case 7: 
 var $16=HEAP8[(17804)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=10;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[((17812)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 _free($20);
 label=10;break;
 case 10: 
 var $23=HEAP8[(17792)];
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=13;break;}else{label=11;break;}
 case 11: 
 var $27=HEAP32[((17800)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 _free($27);
 label=13;break;
 case 13: 
 var $30=HEAP8[(17780)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=16;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[((17788)>>2)];
 var $35=($34|0)==0;
 if($35){label=16;break;}else{label=15;break;}
 case 15: 
 _free($34);
 label=16;break;
 case 16: 
 var $37=HEAP8[(17768)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=19;break;}else{label=17;break;}
 case 17: 
 var $41=HEAP32[((17776)>>2)];
 var $42=($41|0)==0;
 if($42){label=19;break;}else{label=18;break;}
 case 18: 
 _free($41);
 label=19;break;
 case 19: 
 var $44=HEAP8[(17756)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=22;break;}else{label=20;break;}
 case 20: 
 var $48=HEAP32[((17764)>>2)];
 var $49=($48|0)==0;
 if($49){label=22;break;}else{label=21;break;}
 case 21: 
 _free($48);
 label=22;break;
 case 22: 
 var $51=HEAP8[(17744)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=25;break;}else{label=23;break;}
 case 23: 
 var $55=HEAP32[((17752)>>2)];
 var $56=($55|0)==0;
 if($56){label=25;break;}else{label=24;break;}
 case 24: 
 _free($55);
 label=25;break;
 case 25: 
 var $58=HEAP8[(17732)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=28;break;}else{label=26;break;}
 case 26: 
 var $62=HEAP32[((17740)>>2)];
 var $63=($62|0)==0;
 if($63){label=28;break;}else{label=27;break;}
 case 27: 
 _free($62);
 label=28;break;
 case 28: 
 var $65=HEAP8[(17720)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=31;break;}else{label=29;break;}
 case 29: 
 var $69=HEAP32[((17728)>>2)];
 var $70=($69|0)==0;
 if($70){label=31;break;}else{label=30;break;}
 case 30: 
 _free($69);
 label=31;break;
 case 31: 
 var $72=HEAP8[(17708)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=34;break;}else{label=32;break;}
 case 32: 
 var $76=HEAP32[((17716)>>2)];
 var $77=($76|0)==0;
 if($77){label=34;break;}else{label=33;break;}
 case 33: 
 _free($76);
 label=34;break;
 case 34: 
 var $79=HEAP8[(17696)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=37;break;}else{label=35;break;}
 case 35: 
 var $83=HEAP32[((17704)>>2)];
 var $84=($83|0)==0;
 if($84){label=37;break;}else{label=36;break;}
 case 36: 
 _free($83);
 label=37;break;
 case 37: 
 var $86=HEAP8[(17684)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=40;break;}else{label=38;break;}
 case 38: 
 var $90=HEAP32[((17692)>>2)];
 var $91=($90|0)==0;
 if($91){label=40;break;}else{label=39;break;}
 case 39: 
 _free($90);
 label=40;break;
 case 40: 
 var $93=HEAP8[(17672)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=43;break;}else{label=41;break;}
 case 41: 
 var $97=HEAP32[((17680)>>2)];
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=42;break;}
 case 42: 
 _free($97);
 label=43;break;
 case 43: 
 var $100=HEAP8[(17660)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=46;break;}else{label=44;break;}
 case 44: 
 var $104=HEAP32[((17668)>>2)];
 var $105=($104|0)==0;
 if($105){label=46;break;}else{label=45;break;}
 case 45: 
 _free($104);
 label=46;break;
 case 46: 
 var $107=HEAP8[(17648)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=49;break;}else{label=47;break;}
 case 47: 
 var $111=HEAP32[((17656)>>2)];
 var $112=($111|0)==0;
 if($112){label=49;break;}else{label=48;break;}
 case 48: 
 _free($111);
 label=49;break;
 case 49: 
 var $114=HEAP8[(17636)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=52;break;}else{label=50;break;}
 case 50: 
 var $118=HEAP32[((17644)>>2)];
 var $119=($118|0)==0;
 if($119){label=52;break;}else{label=51;break;}
 case 51: 
 _free($118);
 label=52;break;
 case 52: 
 var $121=HEAP8[(17624)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=55;break;}else{label=53;break;}
 case 53: 
 var $125=HEAP32[((17632)>>2)];
 var $126=($125|0)==0;
 if($126){label=55;break;}else{label=54;break;}
 case 54: 
 _free($125);
 label=55;break;
 case 55: 
 var $128=HEAP8[(17612)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=58;break;}else{label=56;break;}
 case 56: 
 var $132=HEAP32[((17620)>>2)];
 var $133=($132|0)==0;
 if($133){label=58;break;}else{label=57;break;}
 case 57: 
 _free($132);
 label=58;break;
 case 58: 
 var $135=HEAP8[(17600)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=61;break;}else{label=59;break;}
 case 59: 
 var $139=HEAP32[((17608)>>2)];
 var $140=($139|0)==0;
 if($140){label=61;break;}else{label=60;break;}
 case 60: 
 _free($139);
 label=61;break;
 case 61: 
 var $142=HEAP8[(17588)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=64;break;}else{label=62;break;}
 case 62: 
 var $146=HEAP32[((17596)>>2)];
 var $147=($146|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 _free($146);
 label=64;break;
 case 64: 
 var $149=HEAP8[(17576)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){label=67;break;}else{label=65;break;}
 case 65: 
 var $153=HEAP32[((17584)>>2)];
 var $154=($153|0)==0;
 if($154){label=67;break;}else{label=66;break;}
 case 66: 
 _free($153);
 label=67;break;
 case 67: 
 var $156=HEAP8[(17564)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=70;break;}else{label=68;break;}
 case 68: 
 var $160=HEAP32[((17572)>>2)];
 var $161=($160|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 _free($160);
 label=70;break;
 case 70: 
 var $163=HEAP8[(17552)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=73;break;}else{label=71;break;}
 case 71: 
 var $167=HEAP32[((17560)>>2)];
 var $168=($167|0)==0;
 if($168){label=73;break;}else{label=72;break;}
 case 72: 
 _free($167);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor56($0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(16628)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16636)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 _free($9);
 label=4;break;
 case 4: 
 var $10=HEAP8[(16616)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=7;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[((16624)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 _free($17);
 label=7;break;
 case 7: 
 var $18=HEAP8[(16604)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=HEAP32[((16612)>>2)];
 var $23=($22|0)==0;
 if($23){label=10;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 _free($25);
 label=10;break;
 case 10: 
 var $26=HEAP8[(16592)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[((16600)>>2)];
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 _free($33);
 label=13;break;
 case 13: 
 var $34=HEAP8[(16580)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=16;break;}else{label=14;break;}
 case 14: 
 var $38=HEAP32[((16588)>>2)];
 var $39=($38|0)==0;
 if($39){label=16;break;}else{label=15;break;}
 case 15: 
 var $41=$38;
 _free($41);
 label=16;break;
 case 16: 
 var $42=HEAP8[(16568)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=17;break;}
 case 17: 
 var $46=HEAP32[((16576)>>2)];
 var $47=($46|0)==0;
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $49=$46;
 _free($49);
 label=19;break;
 case 19: 
 var $50=HEAP8[(16556)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=22;break;}else{label=20;break;}
 case 20: 
 var $54=HEAP32[((16564)>>2)];
 var $55=($54|0)==0;
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $57=$54;
 _free($57);
 label=22;break;
 case 22: 
 var $58=HEAP8[(16544)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=25;break;}else{label=23;break;}
 case 23: 
 var $62=HEAP32[((16552)>>2)];
 var $63=($62|0)==0;
 if($63){label=25;break;}else{label=24;break;}
 case 24: 
 var $65=$62;
 _free($65);
 label=25;break;
 case 25: 
 var $66=HEAP8[(16532)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=28;break;}else{label=26;break;}
 case 26: 
 var $70=HEAP32[((16540)>>2)];
 var $71=($70|0)==0;
 if($71){label=28;break;}else{label=27;break;}
 case 27: 
 var $73=$70;
 _free($73);
 label=28;break;
 case 28: 
 var $74=HEAP8[(16520)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=31;break;}else{label=29;break;}
 case 29: 
 var $78=HEAP32[((16528)>>2)];
 var $79=($78|0)==0;
 if($79){label=31;break;}else{label=30;break;}
 case 30: 
 var $81=$78;
 _free($81);
 label=31;break;
 case 31: 
 var $82=HEAP8[(16508)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=34;break;}else{label=32;break;}
 case 32: 
 var $86=HEAP32[((16516)>>2)];
 var $87=($86|0)==0;
 if($87){label=34;break;}else{label=33;break;}
 case 33: 
 var $89=$86;
 _free($89);
 label=34;break;
 case 34: 
 var $90=HEAP8[(16496)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=37;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[((16504)>>2)];
 var $95=($94|0)==0;
 if($95){label=37;break;}else{label=36;break;}
 case 36: 
 var $97=$94;
 _free($97);
 label=37;break;
 case 37: 
 var $98=HEAP8[(16484)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=HEAP32[((16492)>>2)];
 var $103=($102|0)==0;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $105=$102;
 _free($105);
 label=40;break;
 case 40: 
 var $106=HEAP8[(16472)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=HEAP32[((16480)>>2)];
 var $111=($110|0)==0;
 if($111){label=43;break;}else{label=42;break;}
 case 42: 
 var $113=$110;
 _free($113);
 label=43;break;
 case 43: 
 var $114=HEAP8[(16460)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=46;break;}else{label=44;break;}
 case 44: 
 var $118=HEAP32[((16468)>>2)];
 var $119=($118|0)==0;
 if($119){label=46;break;}else{label=45;break;}
 case 45: 
 var $121=$118;
 _free($121);
 label=46;break;
 case 46: 
 var $122=HEAP8[(16448)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=49;break;}else{label=47;break;}
 case 47: 
 var $126=HEAP32[((16456)>>2)];
 var $127=($126|0)==0;
 if($127){label=49;break;}else{label=48;break;}
 case 48: 
 var $129=$126;
 _free($129);
 label=49;break;
 case 49: 
 var $130=HEAP8[(16436)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=52;break;}else{label=50;break;}
 case 50: 
 var $134=HEAP32[((16444)>>2)];
 var $135=($134|0)==0;
 if($135){label=52;break;}else{label=51;break;}
 case 51: 
 var $137=$134;
 _free($137);
 label=52;break;
 case 52: 
 var $138=HEAP8[(16424)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=55;break;}else{label=53;break;}
 case 53: 
 var $142=HEAP32[((16432)>>2)];
 var $143=($142|0)==0;
 if($143){label=55;break;}else{label=54;break;}
 case 54: 
 var $145=$142;
 _free($145);
 label=55;break;
 case 55: 
 var $146=HEAP8[(16412)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=58;break;}else{label=56;break;}
 case 56: 
 var $150=HEAP32[((16420)>>2)];
 var $151=($150|0)==0;
 if($151){label=58;break;}else{label=57;break;}
 case 57: 
 var $153=$150;
 _free($153);
 label=58;break;
 case 58: 
 var $154=HEAP8[(16400)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=61;break;}else{label=59;break;}
 case 59: 
 var $158=HEAP32[((16408)>>2)];
 var $159=($158|0)==0;
 if($159){label=61;break;}else{label=60;break;}
 case 60: 
 var $161=$158;
 _free($161);
 label=61;break;
 case 61: 
 var $162=HEAP8[(16388)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=64;break;}else{label=62;break;}
 case 62: 
 var $166=HEAP32[((16396)>>2)];
 var $167=($166|0)==0;
 if($167){label=64;break;}else{label=63;break;}
 case 63: 
 var $169=$166;
 _free($169);
 label=64;break;
 case 64: 
 var $170=HEAP8[(16376)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=67;break;}else{label=65;break;}
 case 65: 
 var $174=HEAP32[((16384)>>2)];
 var $175=($174|0)==0;
 if($175){label=67;break;}else{label=66;break;}
 case 66: 
 var $177=$174;
 _free($177);
 label=67;break;
 case 67: 
 var $178=HEAP8[(16364)];
 var $179=$178&1;
 var $180=(($179<<24)>>24)==0;
 if($180){label=70;break;}else{label=68;break;}
 case 68: 
 var $182=HEAP32[((16372)>>2)];
 var $183=($182|0)==0;
 if($183){label=70;break;}else{label=69;break;}
 case 69: 
 var $185=$182;
 _free($185);
 label=70;break;
 case 70: 
 var $186=HEAP8[(16352)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=73;break;}else{label=71;break;}
 case 71: 
 var $190=HEAP32[((16360)>>2)];
 var $191=($190|0)==0;
 if($191){label=73;break;}else{label=72;break;}
 case 72: 
 var $193=$190;
 _free($193);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor81($0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(17372)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((17380)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _free($6);
 label=4;break;
 case 4: 
 var $9=HEAP8[(17360)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP32[((17368)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 _free($13);
 label=7;break;
 case 7: 
 var $16=HEAP8[(17348)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=10;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[((17356)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 _free($20);
 label=10;break;
 case 10: 
 var $23=HEAP8[(17336)];
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=13;break;}else{label=11;break;}
 case 11: 
 var $27=HEAP32[((17344)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 _free($27);
 label=13;break;
 case 13: 
 var $30=HEAP8[(17324)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=16;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[((17332)>>2)];
 var $35=($34|0)==0;
 if($35){label=16;break;}else{label=15;break;}
 case 15: 
 _free($34);
 label=16;break;
 case 16: 
 var $37=HEAP8[(17312)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=19;break;}else{label=17;break;}
 case 17: 
 var $41=HEAP32[((17320)>>2)];
 var $42=($41|0)==0;
 if($42){label=19;break;}else{label=18;break;}
 case 18: 
 _free($41);
 label=19;break;
 case 19: 
 var $44=HEAP8[(17300)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=22;break;}else{label=20;break;}
 case 20: 
 var $48=HEAP32[((17308)>>2)];
 var $49=($48|0)==0;
 if($49){label=22;break;}else{label=21;break;}
 case 21: 
 _free($48);
 label=22;break;
 case 22: 
 var $51=HEAP8[(17288)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=25;break;}else{label=23;break;}
 case 23: 
 var $55=HEAP32[((17296)>>2)];
 var $56=($55|0)==0;
 if($56){label=25;break;}else{label=24;break;}
 case 24: 
 _free($55);
 label=25;break;
 case 25: 
 var $58=HEAP8[(17276)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=28;break;}else{label=26;break;}
 case 26: 
 var $62=HEAP32[((17284)>>2)];
 var $63=($62|0)==0;
 if($63){label=28;break;}else{label=27;break;}
 case 27: 
 _free($62);
 label=28;break;
 case 28: 
 var $65=HEAP8[(17264)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=31;break;}else{label=29;break;}
 case 29: 
 var $69=HEAP32[((17272)>>2)];
 var $70=($69|0)==0;
 if($70){label=31;break;}else{label=30;break;}
 case 30: 
 _free($69);
 label=31;break;
 case 31: 
 var $72=HEAP8[(17252)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=34;break;}else{label=32;break;}
 case 32: 
 var $76=HEAP32[((17260)>>2)];
 var $77=($76|0)==0;
 if($77){label=34;break;}else{label=33;break;}
 case 33: 
 _free($76);
 label=34;break;
 case 34: 
 var $79=HEAP8[(17240)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=37;break;}else{label=35;break;}
 case 35: 
 var $83=HEAP32[((17248)>>2)];
 var $84=($83|0)==0;
 if($84){label=37;break;}else{label=36;break;}
 case 36: 
 _free($83);
 label=37;break;
 case 37: 
 var $86=HEAP8[(17228)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=40;break;}else{label=38;break;}
 case 38: 
 var $90=HEAP32[((17236)>>2)];
 var $91=($90|0)==0;
 if($91){label=40;break;}else{label=39;break;}
 case 39: 
 _free($90);
 label=40;break;
 case 40: 
 var $93=HEAP8[(17216)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=43;break;}else{label=41;break;}
 case 41: 
 var $97=HEAP32[((17224)>>2)];
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=42;break;}
 case 42: 
 _free($97);
 label=43;break;
 case 43: 
 var $100=HEAP8[(17204)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=46;break;}else{label=44;break;}
 case 44: 
 var $104=HEAP32[((17212)>>2)];
 var $105=($104|0)==0;
 if($105){label=46;break;}else{label=45;break;}
 case 45: 
 _free($104);
 label=46;break;
 case 46: 
 var $107=HEAP8[(17192)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=49;break;}else{label=47;break;}
 case 47: 
 var $111=HEAP32[((17200)>>2)];
 var $112=($111|0)==0;
 if($112){label=49;break;}else{label=48;break;}
 case 48: 
 _free($111);
 label=49;break;
 case 49: 
 var $114=HEAP8[(17180)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=52;break;}else{label=50;break;}
 case 50: 
 var $118=HEAP32[((17188)>>2)];
 var $119=($118|0)==0;
 if($119){label=52;break;}else{label=51;break;}
 case 51: 
 _free($118);
 label=52;break;
 case 52: 
 var $121=HEAP8[(17168)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=55;break;}else{label=53;break;}
 case 53: 
 var $125=HEAP32[((17176)>>2)];
 var $126=($125|0)==0;
 if($126){label=55;break;}else{label=54;break;}
 case 54: 
 _free($125);
 label=55;break;
 case 55: 
 var $128=HEAP8[(17156)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=58;break;}else{label=56;break;}
 case 56: 
 var $132=HEAP32[((17164)>>2)];
 var $133=($132|0)==0;
 if($133){label=58;break;}else{label=57;break;}
 case 57: 
 _free($132);
 label=58;break;
 case 58: 
 var $135=HEAP8[(17144)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=61;break;}else{label=59;break;}
 case 59: 
 var $139=HEAP32[((17152)>>2)];
 var $140=($139|0)==0;
 if($140){label=61;break;}else{label=60;break;}
 case 60: 
 _free($139);
 label=61;break;
 case 61: 
 var $142=HEAP8[(17132)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=64;break;}else{label=62;break;}
 case 62: 
 var $146=HEAP32[((17140)>>2)];
 var $147=($146|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 _free($146);
 label=64;break;
 case 64: 
 var $149=HEAP8[(17120)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){label=67;break;}else{label=65;break;}
 case 65: 
 var $153=HEAP32[((17128)>>2)];
 var $154=($153|0)==0;
 if($154){label=67;break;}else{label=66;break;}
 case 66: 
 _free($153);
 label=67;break;
 case 67: 
 var $156=HEAP8[(17108)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=70;break;}else{label=68;break;}
 case 68: 
 var $160=HEAP32[((17116)>>2)];
 var $161=($160|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 _free($160);
 label=70;break;
 case 70: 
 var $163=HEAP8[(17096)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=73;break;}else{label=71;break;}
 case 71: 
 var $167=HEAP32[((17104)>>2)];
 var $168=($167|0)==0;
 if($168){label=73;break;}else{label=72;break;}
 case 72: 
 _free($167);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor105($0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(16796)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16804)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 _free($9);
 label=4;break;
 case 4: 
 var $10=HEAP8[(16784)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=7;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[((16792)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 _free($17);
 label=7;break;
 case 7: 
 var $18=HEAP8[(16772)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=HEAP32[((16780)>>2)];
 var $23=($22|0)==0;
 if($23){label=10;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 _free($25);
 label=10;break;
 case 10: 
 var $26=HEAP8[(16760)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[((16768)>>2)];
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 _free($33);
 label=13;break;
 case 13: 
 var $34=HEAP8[(16748)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=16;break;}else{label=14;break;}
 case 14: 
 var $38=HEAP32[((16756)>>2)];
 var $39=($38|0)==0;
 if($39){label=16;break;}else{label=15;break;}
 case 15: 
 var $41=$38;
 _free($41);
 label=16;break;
 case 16: 
 var $42=HEAP8[(16736)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=17;break;}
 case 17: 
 var $46=HEAP32[((16744)>>2)];
 var $47=($46|0)==0;
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $49=$46;
 _free($49);
 label=19;break;
 case 19: 
 var $50=HEAP8[(16724)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=22;break;}else{label=20;break;}
 case 20: 
 var $54=HEAP32[((16732)>>2)];
 var $55=($54|0)==0;
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $57=$54;
 _free($57);
 label=22;break;
 case 22: 
 var $58=HEAP8[(16712)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=25;break;}else{label=23;break;}
 case 23: 
 var $62=HEAP32[((16720)>>2)];
 var $63=($62|0)==0;
 if($63){label=25;break;}else{label=24;break;}
 case 24: 
 var $65=$62;
 _free($65);
 label=25;break;
 case 25: 
 var $66=HEAP8[(16700)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=28;break;}else{label=26;break;}
 case 26: 
 var $70=HEAP32[((16708)>>2)];
 var $71=($70|0)==0;
 if($71){label=28;break;}else{label=27;break;}
 case 27: 
 var $73=$70;
 _free($73);
 label=28;break;
 case 28: 
 var $74=HEAP8[(16688)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=31;break;}else{label=29;break;}
 case 29: 
 var $78=HEAP32[((16696)>>2)];
 var $79=($78|0)==0;
 if($79){label=31;break;}else{label=30;break;}
 case 30: 
 var $81=$78;
 _free($81);
 label=31;break;
 case 31: 
 var $82=HEAP8[(16676)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=34;break;}else{label=32;break;}
 case 32: 
 var $86=HEAP32[((16684)>>2)];
 var $87=($86|0)==0;
 if($87){label=34;break;}else{label=33;break;}
 case 33: 
 var $89=$86;
 _free($89);
 label=34;break;
 case 34: 
 var $90=HEAP8[(16664)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=37;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[((16672)>>2)];
 var $95=($94|0)==0;
 if($95){label=37;break;}else{label=36;break;}
 case 36: 
 var $97=$94;
 _free($97);
 label=37;break;
 case 37: 
 var $98=HEAP8[(16652)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=HEAP32[((16660)>>2)];
 var $103=($102|0)==0;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $105=$102;
 _free($105);
 label=40;break;
 case 40: 
 var $106=HEAP8[(16640)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=HEAP32[((16648)>>2)];
 var $111=($110|0)==0;
 if($111){label=43;break;}else{label=42;break;}
 case 42: 
 var $113=$110;
 _free($113);
 label=43;break;
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function ___cxx_global_array_dtor120($0){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(17540)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((17548)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _free($6);
 label=4;break;
 case 4: 
 var $9=HEAP8[(17528)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP32[((17536)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 _free($13);
 label=7;break;
 case 7: 
 var $16=HEAP8[(17516)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=10;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[((17524)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 _free($20);
 label=10;break;
 case 10: 
 var $23=HEAP8[(17504)];
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=13;break;}else{label=11;break;}
 case 11: 
 var $27=HEAP32[((17512)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 _free($27);
 label=13;break;
 case 13: 
 var $30=HEAP8[(17492)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=16;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[((17500)>>2)];
 var $35=($34|0)==0;
 if($35){label=16;break;}else{label=15;break;}
 case 15: 
 _free($34);
 label=16;break;
 case 16: 
 var $37=HEAP8[(17480)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=19;break;}else{label=17;break;}
 case 17: 
 var $41=HEAP32[((17488)>>2)];
 var $42=($41|0)==0;
 if($42){label=19;break;}else{label=18;break;}
 case 18: 
 _free($41);
 label=19;break;
 case 19: 
 var $44=HEAP8[(17468)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=22;break;}else{label=20;break;}
 case 20: 
 var $48=HEAP32[((17476)>>2)];
 var $49=($48|0)==0;
 if($49){label=22;break;}else{label=21;break;}
 case 21: 
 _free($48);
 label=22;break;
 case 22: 
 var $51=HEAP8[(17456)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=25;break;}else{label=23;break;}
 case 23: 
 var $55=HEAP32[((17464)>>2)];
 var $56=($55|0)==0;
 if($56){label=25;break;}else{label=24;break;}
 case 24: 
 _free($55);
 label=25;break;
 case 25: 
 var $58=HEAP8[(17444)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=28;break;}else{label=26;break;}
 case 26: 
 var $62=HEAP32[((17452)>>2)];
 var $63=($62|0)==0;
 if($63){label=28;break;}else{label=27;break;}
 case 27: 
 _free($62);
 label=28;break;
 case 28: 
 var $65=HEAP8[(17432)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=31;break;}else{label=29;break;}
 case 29: 
 var $69=HEAP32[((17440)>>2)];
 var $70=($69|0)==0;
 if($70){label=31;break;}else{label=30;break;}
 case 30: 
 _free($69);
 label=31;break;
 case 31: 
 var $72=HEAP8[(17420)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=34;break;}else{label=32;break;}
 case 32: 
 var $76=HEAP32[((17428)>>2)];
 var $77=($76|0)==0;
 if($77){label=34;break;}else{label=33;break;}
 case 33: 
 _free($76);
 label=34;break;
 case 34: 
 var $79=HEAP8[(17408)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=37;break;}else{label=35;break;}
 case 35: 
 var $83=HEAP32[((17416)>>2)];
 var $84=($83|0)==0;
 if($84){label=37;break;}else{label=36;break;}
 case 36: 
 _free($83);
 label=37;break;
 case 37: 
 var $86=HEAP8[(17396)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=40;break;}else{label=38;break;}
 case 38: 
 var $90=HEAP32[((17404)>>2)];
 var $91=($90|0)==0;
 if($91){label=40;break;}else{label=39;break;}
 case 39: 
 _free($90);
 label=40;break;
 case 40: 
 var $93=HEAP8[(17384)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=43;break;}else{label=41;break;}
 case 41: 
 var $97=HEAP32[((17392)>>2)];
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=42;break;}
 case 42: 
 _free($97);
 label=43;break;
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_027=($2?15576:$st);
 var $3=(($_027)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_028=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((___fsmu8+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_028=$31;label=11;break;
 case 11: 
 var $_028;
 var $c_0;
 var $s_0;
 var $33=($_028|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_028;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_380=$wn;label=15;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=34;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_077=$wn;label=7;break;}else{var $s_5_ph=$1;var $_076_ph=$ws;var $_481_ph=$wn;label=6;break;}
 case 6: 
 var $_481_ph;
 var $_076_ph;
 var $s_5_ph;
 var $12=($_481_ph|0)==0;
 if($12){var $_0=$wn;label=52;break;}else{var $_48197=$_481_ph;var $_07698=$_076_ph;var $s_599=$s_5_ph;label=25;break;}
 case 7: 
 var $_077;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$13;label=11;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$13;label=11;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_17882=$_077;var $s_183=$s_0;label=10;break;}else{var $s_2=$s_0;var $_279=$_077;var $37=$27;label=11;break;}
 case 10: 
 var $s_183;
 var $_17882;
 var $28=(($s_183+4)|0);
 var $29=((($_17882)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 var $36=(($31)&255);
 if($35){var $_17882=$29;var $s_183=$28;label=10;break;}else{var $s_2=$28;var $_279=$29;var $37=$36;label=11;break;}
 case 11: 
 var $37;
 var $_279;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($s_2+1)|0);
 var $43=((($_279)-(1))|0);
 var $s_0=$42;var $_077=$43;label=7;break;
 case 13: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_8115=$_279;var $_4117=$ws;var $s_10119=$s_2;var $183=$37;label=46;break;}else{label=14;break;}
 case 14: 
 var $48=(($s_2+1)|0);
 var $49=((___fsmu8+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_380=$_279;label=15;break;
 case 15: 
 var $_380;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=16;break;}else{label=17;break;}
 case 16: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_380;label=44;break;
 case 17: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=24;break;}else{label=18;break;}
 case 18: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_380;label=44;break;
 case 20: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=24;break;}else{label=21;break;}
 case 21: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=22;break;}else{label=23;break;}
 case 22: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_380;label=44;break;
 case 23: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=24;break;
 case 24: 
 var $s_4;
 var $87=((($_380)-(1))|0);
 var $s_0=$s_4;var $_077=$87;label=7;break;
 case 25: 
 var $s_599;
 var $_07698;
 var $_48197;
 var $88=HEAP8[($s_599)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=26;break;}else{var $s_7=$s_599;var $_2=$_07698;var $_6=$_48197;var $122=$88;label=30;break;}
 case 26: 
 var $93=$s_599;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_48197>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_587=$_48197;var $_188=$_07698;var $s_689=$s_599;label=27;break;}else{var $s_7=$s_599;var $_2=$_07698;var $_6=$_48197;var $122=$88;label=30;break;}
 case 27: 
 var $s_689;
 var $_188;
 var $_587;
 var $97=$s_689;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 var $103=(($98)&255);
 if($102){label=28;break;}else{var $s_7=$s_689;var $_2=$_188;var $_6=$_587;var $122=$103;label=30;break;}
 case 28: 
 var $105=(($s_689+1)|0);
 var $106=$98&255;
 var $107=(($_188+4)|0);
 HEAP32[(($_188)>>2)]=$106;
 var $108=(($s_689+2)|0);
 var $109=HEAP8[($105)];
 var $110=($109&255);
 var $111=(($_188+8)|0);
 HEAP32[(($107)>>2)]=$110;
 var $112=(($s_689+3)|0);
 var $113=HEAP8[($108)];
 var $114=($113&255);
 var $115=(($_188+12)|0);
 HEAP32[(($111)>>2)]=$114;
 var $116=(($s_689+4)|0);
 var $117=HEAP8[($112)];
 var $118=($117&255);
 var $119=(($_188+16)|0);
 HEAP32[(($115)>>2)]=$118;
 var $120=((($_587)-(4))|0);
 var $121=($120>>>0)>3;
 if($121){var $_587=$120;var $_188=$119;var $s_689=$116;label=27;break;}else{label=29;break;}
 case 29: 
 var $_pre_pre=HEAP8[($116)];
 var $s_7=$116;var $_2=$119;var $_6=$120;var $122=$_pre_pre;label=30;break;
 case 30: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=31;break;}else{label=32;break;}
 case 31: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=52;break;}else{var $_48197=$129;var $_07698=$128;var $s_599=$127;label=25;break;}
 case 32: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_8115=$_6;var $_4117=$_2;var $s_10119=$s_7;var $183=$122;label=46;break;}else{label=33;break;}
 case 33: 
 var $135=(($s_7+1)|0);
 var $136=((___fsmu8+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=34;break;
 case 34: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=35;break;}else{label=36;break;}
 case 35: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=44;break;
 case 36: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=37;break;}else{var $c_5=$153;var $s_9=$151;label=43;break;}
 case 37: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=38;break;}else{label=39;break;}
 case 38: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=44;break;
 case 39: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=40;break;}else{var $c_5=$165;var $s_9=$164;label=43;break;}
 case 40: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=41;break;}else{label=42;break;}
 case 41: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=44;break;
 case 42: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=43;break;
 case 43: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_076_ph=$179;var $_481_ph=$180;label=6;break;
 case 44: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){label=45;break;}else{var $_4116=$_4;var $s_10118=$s_10;label=50;break;}
 case 45: 
 var $_pre=HEAP8[($s_10)];
 var $_8115=$_8;var $_4117=$_4;var $s_10119=$s_10;var $183=$_pre;label=46;break;
 case 46: 
 var $183;
 var $s_10119;
 var $_4117;
 var $_8115;
 var $184=(($183<<24)>>24)==0;
 if($184){label=47;break;}else{var $_4116=$_4117;var $s_10118=$s_10119;label=50;break;}
 case 47: 
 var $186=($_4117|0)==0;
 if($186){label=49;break;}else{label=48;break;}
 case 48: 
 HEAP32[(($_4117)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=49;break;
 case 49: 
 var $189=((($wn)-($_8115))|0);
 var $_0=$189;label=52;break;
 case 50: 
 var $s_10118;
 var $_4116;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_4116|0)==0;
 if($192){var $_0=-1;label=52;break;}else{label=51;break;}
 case 51: 
 HEAP32[(($src)>>2)]=$s_10118;
 var $_0=-1;label=52;break;
 case 52: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _wcrtomb($s,$wc){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt8bad_castD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt8bad_castD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt8bad_cast4whatEv($this){
 var label=0;
 return 1088;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0){
 var label=0;
 var $2=(($this)|0);
 var $3=(($thrown_type)|0);
 var $4=($2|0)==($3|0);
 return $4;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info_i=sp;
 var $info=(sp)+(56);
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_0=1;label=17;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_0=0;label=17;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=$info_i;
 var $9=$thrown_type;
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)-(8))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=(($7+$13)|0);
 var $15=((($10)-(4))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 var $18=(($info_i)|0);
 HEAP32[(($18)>>2)]=15440;
 var $19=(($info_i+4)|0);
 HEAP32[(($19)>>2)]=$7;
 var $20=(($info_i+8)|0);
 HEAP32[(($20)>>2)]=15456;
 var $21=(($info_i+12)|0);
 HEAP32[(($21)>>2)]=-1;
 var $22=(($info_i+16)|0);
 var $23=(($info_i+20)|0);
 var $24=(($info_i+24)|0);
 var $25=(($info_i+28)|0);
 var $26=(($info_i+32)|0);
 var $27=(($info_i+40)|0);
 var $28=($16|0)==15440;
 var $29=$22;
 _memset($29, 0, 39)|0;
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=(($info_i+48)|0);
 HEAP32[(($31)>>2)]=1;
 var $32=HEAP32[((15440)>>2)];
 var $33=(($32+20)|0);
 var $34=HEAP32[(($33)>>2)];
 FUNCTION_TABLE[$34]($17,$info_i,$14,$14,1,0);
 var $35=HEAP32[(($24)>>2)];
 var $36=($35|0)==1;
 var $__i=($36?$14:0);
 var $68=$__i;label=14;break;
 case 5: 
 var $38=(($info_i+36)|0);
 var $39=$16;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+24)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($17,$info_i,$14,1,0);
 var $43=HEAP32[(($38)>>2)];
 if(($43|0)==0){ label=6;break;}else if(($43|0)==1){ label=9;break;}else{var $68=0;label=14;break;}
 case 6: 
 var $45=HEAP32[(($27)>>2)];
 var $46=($45|0)==1;
 if($46){label=7;break;}else{var $68=0;label=14;break;}
 case 7: 
 var $48=HEAP32[(($25)>>2)];
 var $49=($48|0)==1;
 if($49){label=8;break;}else{var $68=0;label=14;break;}
 case 8: 
 var $51=HEAP32[(($26)>>2)];
 var $52=($51|0)==1;
 var $53=HEAP32[(($23)>>2)];
 var $_13_i=($52?$53:0);
 var $68=$_13_i;label=14;break;
 case 9: 
 var $55=HEAP32[(($24)>>2)];
 var $56=($55|0)==1;
 if($56){label=13;break;}else{label=10;break;}
 case 10: 
 var $58=HEAP32[(($27)>>2)];
 var $59=($58|0)==0;
 if($59){label=11;break;}else{var $68=0;label=14;break;}
 case 11: 
 var $61=HEAP32[(($25)>>2)];
 var $62=($61|0)==1;
 if($62){label=12;break;}else{var $68=0;label=14;break;}
 case 12: 
 var $64=HEAP32[(($26)>>2)];
 var $65=($64|0)==1;
 if($65){label=13;break;}else{var $68=0;label=14;break;}
 case 13: 
 var $67=HEAP32[(($22)>>2)];
 var $68=$67;label=14;break;
 case 14: 
 var $68;
 var $69=$68;
 var $70=($68|0)==0;
 if($70){var $_0=0;label=17;break;}else{label=15;break;}
 case 15: 
 var $72=$info;
 _memset($72, 0, 56)|0;
 var $73=(($info)|0);
 HEAP32[(($73)>>2)]=$69;
 var $74=(($info+8)|0);
 HEAP32[(($74)>>2)]=$this;
 var $75=(($info+12)|0);
 HEAP32[(($75)>>2)]=-1;
 var $76=(($info+48)|0);
 HEAP32[(($76)>>2)]=1;
 var $77=$68;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+28)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$80]($69,$info,$81,1);
 var $82=(($info+24)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($83|0)==1;
 if($84){label=16;break;}else{var $_0=0;label=17;break;}
 case 16: 
 var $86=(($info+16)|0);
 var $87=HEAP32[(($86)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$87;
 var $_0=1;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i16=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i16=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i16;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i16)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=15;break;}else{label=16;break;}
 case 15: 
 var $80=(($p_0+8)|0);
 var $81=($80>>>0)<($29>>>0);
 if($81){var $p_0=$80;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off098=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off087=0;var $p_088=$42;var $is_dst_type_derived_from_static_type_0_off089=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off089;
 var $p_088;
 var $does_dst_type_point_to_our_static_type_0_off087;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_088+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i81=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i81=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i81;
 var $60=(($p_088)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i81)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=$70&1;
 var $72=(($71<<24)>>24)==0;
 if($72){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off089;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;label=22;break;}
 case 16: 
 var $74=HEAP8[($44)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off089;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;label=21;break;}else{label=17;break;}
 case 17: 
 var $78=HEAP8[($43)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=20;break;}else{label=18;break;}
 case 18: 
 var $82=HEAP32[(($47)>>2)];
 var $83=($82|0)==1;
 if($83){label=27;break;}else{label=19;break;}
 case 19: 
 var $85=HEAP32[(($46)>>2)];
 var $86=$85&2;
 var $87=($86|0)==0;
 if($87){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $89=HEAP32[(($46)>>2)];
 var $90=$89&1;
 var $91=($90|0)==0;
 if($91){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $93=(($p_088+8)|0);
 var $94=($93>>>0)<($40>>>0);
 if($94){var $does_dst_type_point_to_our_static_type_0_off087=$does_dst_type_point_to_our_static_type_1_off0;var $p_088=$93;var $is_dst_type_derived_from_static_type_0_off089=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off098=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off098;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $95=(($info+40)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=((($96)+(1))|0);
 HEAP32[(($95)>>2)]=$97;
 var $98=(($info+36)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==1;
 if($100){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;label=26;break;}
 case 24: 
 var $102=(($info+24)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==2;
 if($104){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;label=26;break;}
 case 25: 
 var $106=(($info+54)|0);
 HEAP8[($106)]=1;
 if($is_dst_type_derived_from_static_type_2_off098){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off099;
 if($is_dst_type_derived_from_static_type_2_off099){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $110=(($this+12)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($this+16+($111<<3))|0);
 var $113=(($this+20)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=$114>>8;
 var $116=$114&1;
 var $117=($116|0)==0;
 if($117){var $offset_to_base_0_i82=$115;label=31;break;}else{label=30;break;}
 case 30: 
 var $119=$current_ptr;
 var $120=HEAP32[(($119)>>2)];
 var $121=(($120+$115)|0);
 var $122=$121;
 var $123=HEAP32[(($122)>>2)];
 var $offset_to_base_0_i82=$123;label=31;break;
 case 31: 
 var $offset_to_base_0_i82;
 var $124=(($this+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=$125;
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+24)|0);
 var $129=HEAP32[(($128)>>2)];
 var $130=(($current_ptr+$offset_to_base_0_i82)|0);
 var $131=$114&2;
 var $132=($131|0)!=0;
 var $133=($132?$path_below:2);
 FUNCTION_TABLE[$129]($125,$info,$130,$133,$use_strcmp);
 var $134=(($this+24)|0);
 var $135=($111|0)>1;
 if($135){label=32;break;}else{label=53;break;}
 case 32: 
 var $137=(($this+8)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&2;
 var $140=($139|0)==0;
 if($140){label=33;break;}else{label=34;break;}
 case 33: 
 var $142=(($info+36)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==1;
 if($144){label=34;break;}else{label=39;break;}
 case 34: 
 var $145=(($info+54)|0);
 var $146=$current_ptr;
 var $p2_0=$134;label=35;break;
 case 35: 
 var $p2_0;
 var $148=HEAP8[($145)];
 var $149=$148&1;
 var $150=(($149<<24)>>24)==0;
 if($150){label=36;break;}else{label=53;break;}
 case 36: 
 var $152=(($p2_0+4)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=$153>>8;
 var $155=$153&1;
 var $156=($155|0)==0;
 if($156){var $offset_to_base_0_i79=$154;label=38;break;}else{label=37;break;}
 case 37: 
 var $158=HEAP32[(($146)>>2)];
 var $159=(($158+$154)|0);
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $offset_to_base_0_i79=$161;label=38;break;
 case 38: 
 var $offset_to_base_0_i79;
 var $162=(($p2_0)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=$163;
 var $165=HEAP32[(($164)>>2)];
 var $166=(($165+24)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($current_ptr+$offset_to_base_0_i79)|0);
 var $169=$153&2;
 var $170=($169|0)!=0;
 var $171=($170?$path_below:2);
 FUNCTION_TABLE[$167]($163,$info,$168,$171,$use_strcmp);
 var $172=(($p2_0+8)|0);
 var $173=($172>>>0)<($112>>>0);
 if($173){var $p2_0=$172;label=35;break;}else{label=53;break;}
 case 39: 
 var $175=$138&1;
 var $176=($175|0)==0;
 if($176){label=41;break;}else{label=40;break;}
 case 40: 
 var $177=(($info+24)|0);
 var $178=(($info+54)|0);
 var $179=$current_ptr;
 var $p2_1=$134;label=42;break;
 case 41: 
 var $180=(($info+54)|0);
 var $181=$current_ptr;
 var $p2_2=$134;label=48;break;
 case 42: 
 var $p2_1;
 var $183=HEAP8[($178)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=43;break;}else{label=53;break;}
 case 43: 
 var $187=HEAP32[(($142)>>2)];
 var $188=($187|0)==1;
 if($188){label=44;break;}else{label=45;break;}
 case 44: 
 var $190=HEAP32[(($177)>>2)];
 var $191=($190|0)==1;
 if($191){label=53;break;}else{label=45;break;}
 case 45: 
 var $193=(($p2_1+4)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=$194>>8;
 var $196=$194&1;
 var $197=($196|0)==0;
 if($197){var $offset_to_base_0_i77=$195;label=47;break;}else{label=46;break;}
 case 46: 
 var $199=HEAP32[(($179)>>2)];
 var $200=(($199+$195)|0);
 var $201=$200;
 var $202=HEAP32[(($201)>>2)];
 var $offset_to_base_0_i77=$202;label=47;break;
 case 47: 
 var $offset_to_base_0_i77;
 var $203=(($p2_1)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=$204;
 var $206=HEAP32[(($205)>>2)];
 var $207=(($206+24)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($current_ptr+$offset_to_base_0_i77)|0);
 var $210=$194&2;
 var $211=($210|0)!=0;
 var $212=($211?$path_below:2);
 FUNCTION_TABLE[$208]($204,$info,$209,$212,$use_strcmp);
 var $213=(($p2_1+8)|0);
 var $214=($213>>>0)<($112>>>0);
 if($214){var $p2_1=$213;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $216=HEAP8[($180)];
 var $217=$216&1;
 var $218=(($217<<24)>>24)==0;
 if($218){label=49;break;}else{label=53;break;}
 case 49: 
 var $220=HEAP32[(($142)>>2)];
 var $221=($220|0)==1;
 if($221){label=53;break;}else{label=50;break;}
 case 50: 
 var $223=(($p2_2+4)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$224>>8;
 var $226=$224&1;
 var $227=($226|0)==0;
 if($227){var $offset_to_base_0_i=$225;label=52;break;}else{label=51;break;}
 case 51: 
 var $229=HEAP32[(($181)>>2)];
 var $230=(($229+$225)|0);
 var $231=$230;
 var $232=HEAP32[(($231)>>2)];
 var $offset_to_base_0_i=$232;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $233=(($p2_2)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$234;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+24)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=(($current_ptr+$offset_to_base_0_i)|0);
 var $240=$224&2;
 var $241=($240|0)!=0;
 var $242=($241?$path_below:2);
 FUNCTION_TABLE[$238]($234,$info,$239,$242,$use_strcmp);
 var $243=(($p2_2+8)|0);
 var $244=($243>>>0)<($112>>>0);
 if($244){var $p2_2=$243;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){var $is_dst_type_derived_from_static_type_0_off036=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $50=HEAP8[($38)];
 var $51=$50&1;
 var $not_=(($51<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off036=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off036;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $52=(($info+40)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=((($53)+(1))|0);
 HEAP32[(($52)>>2)]=$54;
 var $55=(($info+36)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==1;
 if($57){label=14;break;}else{label=16;break;}
 case 14: 
 var $59=(($info+24)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==2;
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=(($info+54)|0);
 HEAP8[($63)]=1;
 if($is_dst_type_derived_from_static_type_0_off036){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off036){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $67=(($this+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+24)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond23_i=$36&$37;
 if($or_cond23_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=$47&1;
 var $49=(($info+53)|0);
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($this+12)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($this+16+($53<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $55=(($this+20)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=$56>>8;
 var $58=$56&1;
 var $59=($58|0)==0;
 if($59){var $offset_to_base_0_i32=$57;label=14;break;}else{label=13;break;}
 case 13: 
 var $61=$current_ptr;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+$57)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i32=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i32;
 var $66=(($this+16)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+20)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($current_ptr+$offset_to_base_0_i32)|0);
 var $73=$56&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$dst_ptr,$72,$75,$use_strcmp);
 var $76=($53|0)>1;
 if($76){label=15;break;}else{label=25;break;}
 case 15: 
 var $77=(($this+24)|0);
 var $78=(($info+24)|0);
 var $79=(($this+8)|0);
 var $80=(($info+54)|0);
 var $81=$current_ptr;
 var $p_0=$77;label=16;break;
 case 16: 
 var $p_0;
 var $83=HEAP8[($80)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){label=17;break;}else{label=25;break;}
 case 17: 
 var $87=HEAP8[($46)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=20;break;}else{label=18;break;}
 case 18: 
 var $91=HEAP32[(($78)>>2)];
 var $92=($91|0)==1;
 if($92){label=25;break;}else{label=19;break;}
 case 19: 
 var $94=HEAP32[(($79)>>2)];
 var $95=$94&2;
 var $96=($95|0)==0;
 if($96){label=25;break;}else{label=22;break;}
 case 20: 
 var $98=HEAP8[($49)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $102=HEAP32[(($79)>>2)];
 var $103=$102&1;
 var $104=($103|0)==0;
 if($104){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($49)]=0;
 var $106=(($p_0+4)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=$107>>8;
 var $109=$107&1;
 var $110=($109|0)==0;
 if($110){var $offset_to_base_0_i=$108;label=24;break;}else{label=23;break;}
 case 23: 
 var $112=HEAP32[(($81)>>2)];
 var $113=(($112+$108)|0);
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $offset_to_base_0_i=$115;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $116=(($p_0)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=(($119+20)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($current_ptr+$offset_to_base_0_i)|0);
 var $123=$107&2;
 var $124=($123|0)!=0;
 var $125=($124?$path_below:2);
 FUNCTION_TABLE[$121]($117,$info,$dst_ptr,$122,$125,$use_strcmp);
 var $126=(($p_0+8)|0);
 var $127=($126>>>0)<($54>>>0);
 if($127){var $p_0=$126;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$48;
 HEAP8[($49)]=$51;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond23_i=$36&$37;
 if($or_cond23_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond23_i=$34&$35;
 if($or_cond23_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((15608)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((15648+($18<<2))|0);
 var $20=$19;
 var $_sum111=((($18)+(2))|0);
 var $21=((15648+($_sum111<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((15608)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((15624)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum113114=$40|4;
 var $44=(($43+$_sum113114)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((15616)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((15648+($83<<2))|0);
 var $85=$84;
 var $_sum104=((($83)+(2))|0);
 var $86=((15648+($_sum104<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((15608)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((15624)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum106107=$8|4;
 var $113=(($109+$_sum106107)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((15616)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((15628)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((15648+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((15608)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((15608)>>2)]=$130;
 var $_sum109_pre=((($122)+(2))|0);
 var $_pre=((15648+($_sum109_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum110=((($122)+(2))|0);
 var $132=((15648+($_sum110<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((15624)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((15616)>>2)]=$106;
 HEAP32[((15628)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((15612)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((15912+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((15624)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((15912+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((15612)>>2)];
 var $252=$251&$250;
 HEAP32[((15612)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((15624)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((15624)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((15624)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((15624)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i137=$8|4;
 var $311=(($192+$_sum_i137)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((15616)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((15628)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((15648+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((15608)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((15608)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((15648+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((15648+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((15624)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((15616)>>2)]=$rsize_0_i;
 HEAP32[((15628)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $344=($342|0)==0;
 if($344){var $nb_0=$8;label=160;break;}else{var $mem_0=$343;label=341;break;}
 case 78: 
 var $346=($bytes>>>0)>4294967231;
 if($346){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $348=((($bytes)+(11))|0);
 var $349=$348&-8;
 var $350=HEAP32[((15612)>>2)];
 var $351=($350|0)==0;
 if($351){var $nb_0=$349;label=160;break;}else{label=80;break;}
 case 80: 
 var $353=(((-$349))|0);
 var $354=$348>>>8;
 var $355=($354|0)==0;
 if($355){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $357=($349>>>0)>16777215;
 if($357){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $359=((($354)+(1048320))|0);
 var $360=$359>>>16;
 var $361=$360&8;
 var $362=$354<<$361;
 var $363=((($362)+(520192))|0);
 var $364=$363>>>16;
 var $365=$364&4;
 var $366=$365|$361;
 var $367=$362<<$365;
 var $368=((($367)+(245760))|0);
 var $369=$368>>>16;
 var $370=$369&2;
 var $371=$366|$370;
 var $372=(((14)-($371))|0);
 var $373=$367<<$370;
 var $374=$373>>>15;
 var $375=((($372)+($374))|0);
 var $376=$375<<1;
 var $377=((($375)+(7))|0);
 var $378=$349>>>($377>>>0);
 var $379=$378&1;
 var $380=$379|$376;
 var $idx_0_i=$380;label=83;break;
 case 83: 
 var $idx_0_i;
 var $382=((15912+($idx_0_i<<2))|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($383|0)==0;
 if($384){var $v_2_i=0;var $rsize_2_i=$353;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $386=($idx_0_i|0)==31;
 if($386){var $391=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $388=$idx_0_i>>>1;
 var $389=(((25)-($388))|0);
 var $391=$389;label=86;break;
 case 86: 
 var $391;
 var $392=$349<<$391;
 var $v_0_i118=0;var $rsize_0_i117=$353;var $t_0_i116=$383;var $sizebits_0_i=$392;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i116;
 var $rsize_0_i117;
 var $v_0_i118;
 var $394=(($t_0_i116+4)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=$395&-8;
 var $397=((($396)-($349))|0);
 var $398=($397>>>0)<($rsize_0_i117>>>0);
 if($398){label=88;break;}else{var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;label=89;break;}
 case 88: 
 var $400=($396|0)==($349|0);
 if($400){var $v_2_i=$t_0_i116;var $rsize_2_i=$397;var $t_1_i=$t_0_i116;label=90;break;}else{var $v_1_i=$t_0_i116;var $rsize_1_i=$397;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $402=(($t_0_i116+20)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=$sizebits_0_i>>>31;
 var $405=(($t_0_i116+16+($404<<2))|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($403|0)==0;
 var $408=($403|0)==($406|0);
 var $or_cond_i=$407|$408;
 var $rst_1_i=($or_cond_i?$rst_0_i:$403);
 var $409=($406|0)==0;
 var $410=$sizebits_0_i<<1;
 if($409){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$406;var $sizebits_0_i=$410;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $411=($t_1_i|0)==0;
 var $412=($v_2_i|0)==0;
 var $or_cond21_i=$411&$412;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $414=2<<$idx_0_i;
 var $415=(((-$414))|0);
 var $416=$414|$415;
 var $417=$350&$416;
 var $418=($417|0)==0;
 if($418){var $nb_0=$349;label=160;break;}else{label=92;break;}
 case 92: 
 var $420=(((-$417))|0);
 var $421=$417&$420;
 var $422=((($421)-(1))|0);
 var $423=$422>>>12;
 var $424=$423&16;
 var $425=$422>>>($424>>>0);
 var $426=$425>>>5;
 var $427=$426&8;
 var $428=$427|$424;
 var $429=$425>>>($427>>>0);
 var $430=$429>>>2;
 var $431=$430&4;
 var $432=$428|$431;
 var $433=$429>>>($431>>>0);
 var $434=$433>>>1;
 var $435=$434&2;
 var $436=$432|$435;
 var $437=$433>>>($435>>>0);
 var $438=$437>>>1;
 var $439=$438&1;
 var $440=$436|$439;
 var $441=$437>>>($439>>>0);
 var $442=((($440)+($441))|0);
 var $443=((15912+($442<<2))|0);
 var $444=HEAP32[(($443)>>2)];
 var $t_2_ph_i=$444;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $445=($t_2_ph_i|0)==0;
 if($445){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_330_i;
 var $rsize_329_i;
 var $t_228_i;
 var $446=(($t_228_i+4)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=$447&-8;
 var $449=((($448)-($349))|0);
 var $450=($449>>>0)<($rsize_329_i>>>0);
 var $_rsize_3_i=($450?$449:$rsize_329_i);
 var $t_2_v_3_i=($450?$t_228_i:$v_330_i);
 var $451=(($t_228_i+16)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){label=95;break;}else{var $t_228_i=$452;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $454=(($t_228_i+20)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=($455|0)==0;
 if($456){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_228_i=$455;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $457=($v_3_lcssa_i|0)==0;
 if($457){var $nb_0=$349;label=160;break;}else{label=97;break;}
 case 97: 
 var $459=HEAP32[((15616)>>2)];
 var $460=((($459)-($349))|0);
 var $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
 if($461){label=98;break;}else{var $nb_0=$349;label=160;break;}
 case 98: 
 var $463=$v_3_lcssa_i;
 var $464=HEAP32[((15624)>>2)];
 var $465=($463>>>0)<($464>>>0);
 if($465){label=158;break;}else{label=99;break;}
 case 99: 
 var $467=(($463+$349)|0);
 var $468=$467;
 var $469=($463>>>0)<($467>>>0);
 if($469){label=100;break;}else{label=158;break;}
 case 100: 
 var $471=(($v_3_lcssa_i+24)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($v_3_lcssa_i+12)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($474|0)==($v_3_lcssa_i|0);
 if($475){label=106;break;}else{label=101;break;}
 case 101: 
 var $477=(($v_3_lcssa_i+8)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=$478;
 var $480=($479>>>0)<($464>>>0);
 if($480){label=105;break;}else{label=102;break;}
 case 102: 
 var $482=(($478+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($483|0)==($v_3_lcssa_i|0);
 if($484){label=103;break;}else{label=105;break;}
 case 103: 
 var $486=(($474+8)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=($487|0)==($v_3_lcssa_i|0);
 if($488){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($482)>>2)]=$474;
 HEAP32[(($486)>>2)]=$478;
 var $R_1_i122=$474;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $491=(($v_3_lcssa_i+20)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($492|0)==0;
 if($493){label=107;break;}else{var $R_0_i120=$492;var $RP_0_i119=$491;label=108;break;}
 case 107: 
 var $495=(($v_3_lcssa_i+16)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){var $R_1_i122=0;label=113;break;}else{var $R_0_i120=$496;var $RP_0_i119=$495;label=108;break;}
 case 108: 
 var $RP_0_i119;
 var $R_0_i120;
 var $498=(($R_0_i120+20)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){label=109;break;}else{var $R_0_i120=$499;var $RP_0_i119=$498;label=108;break;}
 case 109: 
 var $502=(($R_0_i120+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($503|0)==0;
 if($504){label=110;break;}else{var $R_0_i120=$503;var $RP_0_i119=$502;label=108;break;}
 case 110: 
 var $506=$RP_0_i119;
 var $507=($506>>>0)<($464>>>0);
 if($507){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i119)>>2)]=0;
 var $R_1_i122=$R_0_i120;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i122;
 var $511=($472|0)==0;
 if($511){label=133;break;}else{label=114;break;}
 case 114: 
 var $513=(($v_3_lcssa_i+28)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=((15912+($514<<2))|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=($v_3_lcssa_i|0)==($516|0);
 if($517){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($515)>>2)]=$R_1_i122;
 var $cond_i123=($R_1_i122|0)==0;
 if($cond_i123){label=116;break;}else{label=123;break;}
 case 116: 
 var $519=HEAP32[(($513)>>2)];
 var $520=1<<$519;
 var $521=$520^-1;
 var $522=HEAP32[((15612)>>2)];
 var $523=$522&$521;
 HEAP32[((15612)>>2)]=$523;
 label=133;break;
 case 117: 
 var $525=$472;
 var $526=HEAP32[((15624)>>2)];
 var $527=($525>>>0)<($526>>>0);
 if($527){label=121;break;}else{label=118;break;}
 case 118: 
 var $529=(($472+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($530|0)==($v_3_lcssa_i|0);
 if($531){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($529)>>2)]=$R_1_i122;
 label=122;break;
 case 120: 
 var $534=(($472+20)|0);
 HEAP32[(($534)>>2)]=$R_1_i122;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $537=($R_1_i122|0)==0;
 if($537){label=133;break;}else{label=123;break;}
 case 123: 
 var $539=$R_1_i122;
 var $540=HEAP32[((15624)>>2)];
 var $541=($539>>>0)<($540>>>0);
 if($541){label=132;break;}else{label=124;break;}
 case 124: 
 var $543=(($R_1_i122+24)|0);
 HEAP32[(($543)>>2)]=$472;
 var $544=(($v_3_lcssa_i+16)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=($545|0)==0;
 if($546){label=128;break;}else{label=125;break;}
 case 125: 
 var $548=$545;
 var $549=HEAP32[((15624)>>2)];
 var $550=($548>>>0)<($549>>>0);
 if($550){label=127;break;}else{label=126;break;}
 case 126: 
 var $552=(($R_1_i122+16)|0);
 HEAP32[(($552)>>2)]=$545;
 var $553=(($545+24)|0);
 HEAP32[(($553)>>2)]=$R_1_i122;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $556=(($v_3_lcssa_i+20)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($557|0)==0;
 if($558){label=133;break;}else{label=129;break;}
 case 129: 
 var $560=$557;
 var $561=HEAP32[((15624)>>2)];
 var $562=($560>>>0)<($561>>>0);
 if($562){label=131;break;}else{label=130;break;}
 case 130: 
 var $564=(($R_1_i122+20)|0);
 HEAP32[(($564)>>2)]=$557;
 var $565=(($557+24)|0);
 HEAP32[(($565)>>2)]=$R_1_i122;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $569=($rsize_3_lcssa_i>>>0)<16;
 if($569){label=134;break;}else{label=135;break;}
 case 134: 
 var $571=((($rsize_3_lcssa_i)+($349))|0);
 var $572=$571|3;
 var $573=(($v_3_lcssa_i+4)|0);
 HEAP32[(($573)>>2)]=$572;
 var $_sum19_i=((($571)+(4))|0);
 var $574=(($463+$_sum19_i)|0);
 var $575=$574;
 var $576=HEAP32[(($575)>>2)];
 var $577=$576|1;
 HEAP32[(($575)>>2)]=$577;
 label=159;break;
 case 135: 
 var $579=$349|3;
 var $580=(($v_3_lcssa_i+4)|0);
 HEAP32[(($580)>>2)]=$579;
 var $581=$rsize_3_lcssa_i|1;
 var $_sum_i125136=$349|4;
 var $582=(($463+$_sum_i125136)|0);
 var $583=$582;
 HEAP32[(($583)>>2)]=$581;
 var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
 var $584=(($463+$_sum1_i126)|0);
 var $585=$584;
 HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
 var $586=$rsize_3_lcssa_i>>>3;
 var $587=($rsize_3_lcssa_i>>>0)<256;
 if($587){label=136;break;}else{label=141;break;}
 case 136: 
 var $589=$586<<1;
 var $590=((15648+($589<<2))|0);
 var $591=$590;
 var $592=HEAP32[((15608)>>2)];
 var $593=1<<$586;
 var $594=$592&$593;
 var $595=($594|0)==0;
 if($595){label=137;break;}else{label=138;break;}
 case 137: 
 var $597=$592|$593;
 HEAP32[((15608)>>2)]=$597;
 var $_sum15_pre_i=((($589)+(2))|0);
 var $_pre_i127=((15648+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$591;var $_pre_phi_i128=$_pre_i127;label=140;break;
 case 138: 
 var $_sum18_i=((($589)+(2))|0);
 var $599=((15648+($_sum18_i<<2))|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=$600;
 var $602=HEAP32[((15624)>>2)];
 var $603=($601>>>0)<($602>>>0);
 if($603){label=139;break;}else{var $F5_0_i=$600;var $_pre_phi_i128=$599;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i128;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i128)>>2)]=$468;
 var $606=(($F5_0_i+12)|0);
 HEAP32[(($606)>>2)]=$468;
 var $_sum16_i=((($349)+(8))|0);
 var $607=(($463+$_sum16_i)|0);
 var $608=$607;
 HEAP32[(($608)>>2)]=$F5_0_i;
 var $_sum17_i=((($349)+(12))|0);
 var $609=(($463+$_sum17_i)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=$591;
 label=159;break;
 case 141: 
 var $612=$467;
 var $613=$rsize_3_lcssa_i>>>8;
 var $614=($613|0)==0;
 if($614){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $616=($rsize_3_lcssa_i>>>0)>16777215;
 if($616){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $618=((($613)+(1048320))|0);
 var $619=$618>>>16;
 var $620=$619&8;
 var $621=$613<<$620;
 var $622=((($621)+(520192))|0);
 var $623=$622>>>16;
 var $624=$623&4;
 var $625=$624|$620;
 var $626=$621<<$624;
 var $627=((($626)+(245760))|0);
 var $628=$627>>>16;
 var $629=$628&2;
 var $630=$625|$629;
 var $631=(((14)-($630))|0);
 var $632=$626<<$629;
 var $633=$632>>>15;
 var $634=((($631)+($633))|0);
 var $635=$634<<1;
 var $636=((($634)+(7))|0);
 var $637=$rsize_3_lcssa_i>>>($636>>>0);
 var $638=$637&1;
 var $639=$638|$635;
 var $I7_0_i=$639;label=144;break;
 case 144: 
 var $I7_0_i;
 var $641=((15912+($I7_0_i<<2))|0);
 var $_sum2_i=((($349)+(28))|0);
 var $642=(($463+$_sum2_i)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=$I7_0_i;
 var $_sum3_i129=((($349)+(16))|0);
 var $644=(($463+$_sum3_i129)|0);
 var $_sum4_i130=((($349)+(20))|0);
 var $645=(($463+$_sum4_i130)|0);
 var $646=$645;
 HEAP32[(($646)>>2)]=0;
 var $647=$644;
 HEAP32[(($647)>>2)]=0;
 var $648=HEAP32[((15612)>>2)];
 var $649=1<<$I7_0_i;
 var $650=$648&$649;
 var $651=($650|0)==0;
 if($651){label=145;break;}else{label=146;break;}
 case 145: 
 var $653=$648|$649;
 HEAP32[((15612)>>2)]=$653;
 HEAP32[(($641)>>2)]=$612;
 var $654=$641;
 var $_sum5_i=((($349)+(24))|0);
 var $655=(($463+$_sum5_i)|0);
 var $656=$655;
 HEAP32[(($656)>>2)]=$654;
 var $_sum6_i=((($349)+(12))|0);
 var $657=(($463+$_sum6_i)|0);
 var $658=$657;
 HEAP32[(($658)>>2)]=$612;
 var $_sum7_i=((($349)+(8))|0);
 var $659=(($463+$_sum7_i)|0);
 var $660=$659;
 HEAP32[(($660)>>2)]=$612;
 label=159;break;
 case 146: 
 var $662=HEAP32[(($641)>>2)];
 var $663=($I7_0_i|0)==31;
 if($663){var $668=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $665=$I7_0_i>>>1;
 var $666=(((25)-($665))|0);
 var $668=$666;label=148;break;
 case 148: 
 var $668;
 var $669=$rsize_3_lcssa_i<<$668;
 var $K12_0_i=$669;var $T_0_i=$662;label=149;break;
 case 149: 
 var $T_0_i;
 var $K12_0_i;
 var $671=(($T_0_i+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){label=154;break;}else{label=150;break;}
 case 150: 
 var $676=$K12_0_i>>>31;
 var $677=(($T_0_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 var $680=$K12_0_i<<1;
 if($679){label=151;break;}else{var $K12_0_i=$680;var $T_0_i=$678;label=149;break;}
 case 151: 
 var $682=$677;
 var $683=HEAP32[((15624)>>2)];
 var $684=($682>>>0)<($683>>>0);
 if($684){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($677)>>2)]=$612;
 var $_sum12_i=((($349)+(24))|0);
 var $686=(($463+$_sum12_i)|0);
 var $687=$686;
 HEAP32[(($687)>>2)]=$T_0_i;
 var $_sum13_i=((($349)+(12))|0);
 var $688=(($463+$_sum13_i)|0);
 var $689=$688;
 HEAP32[(($689)>>2)]=$612;
 var $_sum14_i=((($349)+(8))|0);
 var $690=(($463+$_sum14_i)|0);
 var $691=$690;
 HEAP32[(($691)>>2)]=$612;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $694=(($T_0_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_i;
 var $697=HEAP32[((15624)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=157;break;}else{label=155;break;}
 case 155: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=157;break;}else{label=156;break;}
 case 156: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$612;
 HEAP32[(($694)>>2)]=$612;
 var $_sum9_i=((($349)+(8))|0);
 var $704=(($463+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($349)+(12))|0);
 var $706=(($463+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_i;
 var $_sum11_i=((($349)+(24))|0);
 var $708=(($463+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $713=($711|0)==0;
 if($713){var $nb_0=$349;label=160;break;}else{var $mem_0=$712;label=341;break;}
 case 160: 
 var $nb_0;
 var $714=HEAP32[((15616)>>2)];
 var $715=($nb_0>>>0)>($714>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((15628)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((15628)>>2)]=$723;
 HEAP32[((15616)>>2)]=$717;
 var $724=$717|1;
 var $_sum102=((($nb_0)+(4))|0);
 var $725=(($721+$_sum102)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((15616)>>2)]=0;
 HEAP32[((15628)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum101=((($714)+(4))|0);
 var $735=(($734+$_sum101)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((15620)>>2)];
 var $744=($nb_0>>>0)<($743>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((15620)>>2)]=$746;
 var $747=HEAP32[((15632)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((15632)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((15552)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((15560)>>2)]=$762;
 HEAP32[((15556)>>2)]=$762;
 HEAP32[((15564)>>2)]=-1;
 HEAP32[((15568)>>2)]=-1;
 HEAP32[((15572)>>2)]=0;
 HEAP32[((16052)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((15552)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((15560)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((16048)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((16040)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((16052)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((15632)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=16056;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_0303639_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((15556)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((16040)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i131=$826&$827;
 if($or_cond_i131){label=185;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((16048)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_0303639_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 var $ssize_0__i=($836?$ssize_0_i:0);
 var $__i=($836?$809:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$835;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $838=HEAP32[((15620)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 var $_3_i=($847?$840:0);
 var $_4_i=($847?$843:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $849=(((-$ssize_1_i))|0);
 var $850=($tbase_0_i|0)==-1;
 if($850){label=191;break;}else{var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $852=($br_0_i|0)!=-1;
 var $853=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$852&$853;
 var $854=($ssize_1_i>>>0)<($771>>>0);
 var $or_cond6_i=$or_cond5_i&$854;
 if($or_cond6_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $856=HEAP32[((15560)>>2)];
 var $857=((($773)-($ssize_1_i))|0);
 var $858=((($857)+($856))|0);
 var $859=(((-$856))|0);
 var $860=$858&$859;
 var $861=($860>>>0)<2147483647;
 if($861){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $863=_sbrk($860);
 var $864=($863|0)==-1;
 if($864){label=195;break;}else{label=194;break;}
 case 194: 
 var $866=((($860)+($ssize_1_i))|0);
 var $ssize_2_i=$866;label=196;break;
 case 195: 
 var $868=_sbrk($849);
 var $tsize_0303639_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $870=($br_0_i|0)==-1;
 if($870){var $tsize_0303639_i=$tsize_0_i;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0303639_i;
 var $871=HEAP32[((16052)>>2)];
 var $872=$871|4;
 HEAP32[((16052)>>2)]=$872;
 var $tsize_1_i=$tsize_0303639_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $874=($776>>>0)<2147483647;
 if($874){label=199;break;}else{label=340;break;}
 case 199: 
 var $876=_sbrk($776);
 var $877=_sbrk(0);
 var $notlhs_i=($876|0)!=-1;
 var $notrhs_i=($877|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $878=($876>>>0)<($877>>>0);
 var $or_cond9_i=$or_cond8_not_i&$878;
 if($or_cond9_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $879=$877;
 var $880=$876;
 var $881=((($879)-($880))|0);
 var $882=((($nb_0)+(40))|0);
 var $883=($881>>>0)>($882>>>0);
 var $_tsize_1_i=($883?$881:$tsize_1_i);
 var $_tbase_1_i=($883?$876:-1);
 var $884=($_tbase_1_i|0)==-1;
 if($884){label=340;break;}else{var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((16040)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((16040)>>2)]=$886;
 var $887=HEAP32[((16044)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((16044)>>2)]=$886;
 label=203;break;
 case 203: 
 var $890=HEAP32[((15632)>>2)];
 var $891=($890|0)==0;
 if($891){label=204;break;}else{var $sp_067_i=16056;label=211;break;}
 case 204: 
 var $893=HEAP32[((15624)>>2)];
 var $894=($893|0)==0;
 var $895=($tbase_245_i>>>0)<($893>>>0);
 var $or_cond10_i=$894|$895;
 if($or_cond10_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((15624)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((16056)>>2)]=$tbase_245_i;
 HEAP32[((16060)>>2)]=$tsize_244_i;
 HEAP32[((16068)>>2)]=0;
 var $897=HEAP32[((15552)>>2)];
 HEAP32[((15644)>>2)]=$897;
 HEAP32[((15640)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $899=$i_02_i_i<<1;
 var $900=((15648+($899<<2))|0);
 var $901=$900;
 var $_sum_i_i=((($899)+(3))|0);
 var $902=((15648+($_sum_i_i<<2))|0);
 HEAP32[(($902)>>2)]=$901;
 var $_sum1_i_i=((($899)+(2))|0);
 var $903=((15648+($_sum1_i_i<<2))|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=((($i_02_i_i)+(1))|0);
 var $905=($904>>>0)<32;
 if($905){var $i_02_i_i=$904;label=207;break;}else{label=208;break;}
 case 208: 
 var $906=((($tsize_244_i)-(40))|0);
 var $907=(($tbase_245_i+8)|0);
 var $908=$907;
 var $909=$908&7;
 var $910=($909|0)==0;
 if($910){var $914=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $912=(((-$908))|0);
 var $913=$912&7;
 var $914=$913;label=210;break;
 case 210: 
 var $914;
 var $915=(($tbase_245_i+$914)|0);
 var $916=$915;
 var $917=((($906)-($914))|0);
 HEAP32[((15632)>>2)]=$916;
 HEAP32[((15620)>>2)]=$917;
 var $918=$917|1;
 var $_sum_i14_i=((($914)+(4))|0);
 var $919=(($tbase_245_i+$_sum_i14_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=$918;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $921=(($tbase_245_i+$_sum2_i_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=40;
 var $923=HEAP32[((15568)>>2)];
 HEAP32[((15636)>>2)]=$923;
 label=338;break;
 case 211: 
 var $sp_067_i;
 var $924=(($sp_067_i)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($sp_067_i+4)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($925+$927)|0);
 var $929=($tbase_245_i|0)==($928|0);
 if($929){label=213;break;}else{label=212;break;}
 case 212: 
 var $931=(($sp_067_i+8)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($932|0)==0;
 if($933){label=218;break;}else{var $sp_067_i=$932;label=211;break;}
 case 213: 
 var $934=(($sp_067_i+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=$935&8;
 var $937=($936|0)==0;
 if($937){label=214;break;}else{label=218;break;}
 case 214: 
 var $939=$890;
 var $940=($939>>>0)>=($925>>>0);
 var $941=($939>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$940&$941;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $943=((($927)+($tsize_244_i))|0);
 HEAP32[(($926)>>2)]=$943;
 var $944=HEAP32[((15632)>>2)];
 var $945=HEAP32[((15620)>>2)];
 var $946=((($945)+($tsize_244_i))|0);
 var $947=$944;
 var $948=(($944+8)|0);
 var $949=$948;
 var $950=$949&7;
 var $951=($950|0)==0;
 if($951){var $955=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $953=(((-$949))|0);
 var $954=$953&7;
 var $955=$954;label=217;break;
 case 217: 
 var $955;
 var $956=(($947+$955)|0);
 var $957=$956;
 var $958=((($946)-($955))|0);
 HEAP32[((15632)>>2)]=$957;
 HEAP32[((15620)>>2)]=$958;
 var $959=$958|1;
 var $_sum_i18_i=((($955)+(4))|0);
 var $960=(($947+$_sum_i18_i)|0);
 var $961=$960;
 HEAP32[(($961)>>2)]=$959;
 var $_sum2_i19_i=((($946)+(4))|0);
 var $962=(($947+$_sum2_i19_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=40;
 var $964=HEAP32[((15568)>>2)];
 HEAP32[((15636)>>2)]=$964;
 label=338;break;
 case 218: 
 var $965=HEAP32[((15624)>>2)];
 var $966=($tbase_245_i>>>0)<($965>>>0);
 if($966){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((15624)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $968=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_160_i=16056;label=221;break;
 case 221: 
 var $sp_160_i;
 var $970=(($sp_160_i)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==($968|0);
 if($972){label=223;break;}else{label=222;break;}
 case 222: 
 var $974=(($sp_160_i+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){label=304;break;}else{var $sp_160_i=$975;label=221;break;}
 case 223: 
 var $977=(($sp_160_i+12)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978&8;
 var $980=($979|0)==0;
 if($980){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($970)>>2)]=$tbase_245_i;
 var $982=(($sp_160_i+4)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=((($983)+($tsize_244_i))|0);
 HEAP32[(($982)>>2)]=$984;
 var $985=(($tbase_245_i+8)|0);
 var $986=$985;
 var $987=$986&7;
 var $988=($987|0)==0;
 if($988){var $993=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $990=(((-$986))|0);
 var $991=$990&7;
 var $993=$991;label=226;break;
 case 226: 
 var $993;
 var $994=(($tbase_245_i+$993)|0);
 var $_sum93_i=((($tsize_244_i)+(8))|0);
 var $995=(($tbase_245_i+$_sum93_i)|0);
 var $996=$995;
 var $997=$996&7;
 var $998=($997|0)==0;
 if($998){var $1003=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1000=(((-$996))|0);
 var $1001=$1000&7;
 var $1003=$1001;label=228;break;
 case 228: 
 var $1003;
 var $_sum94_i=((($1003)+($tsize_244_i))|0);
 var $1004=(($tbase_245_i+$_sum94_i)|0);
 var $1005=$1004;
 var $1006=$1004;
 var $1007=$994;
 var $1008=((($1006)-($1007))|0);
 var $_sum_i21_i=((($993)+($nb_0))|0);
 var $1009=(($tbase_245_i+$_sum_i21_i)|0);
 var $1010=$1009;
 var $1011=((($1008)-($nb_0))|0);
 var $1012=$nb_0|3;
 var $_sum1_i22_i=((($993)+(4))|0);
 var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
 var $1014=$1013;
 HEAP32[(($1014)>>2)]=$1012;
 var $1015=HEAP32[((15632)>>2)];
 var $1016=($1005|0)==($1015|0);
 if($1016){label=229;break;}else{label=230;break;}
 case 229: 
 var $1018=HEAP32[((15620)>>2)];
 var $1019=((($1018)+($1011))|0);
 HEAP32[((15620)>>2)]=$1019;
 HEAP32[((15632)>>2)]=$1010;
 var $1020=$1019|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1021=(($tbase_245_i+$_sum46_i_i)|0);
 var $1022=$1021;
 HEAP32[(($1022)>>2)]=$1020;
 label=303;break;
 case 230: 
 var $1024=HEAP32[((15628)>>2)];
 var $1025=($1005|0)==($1024|0);
 if($1025){label=231;break;}else{label=232;break;}
 case 231: 
 var $1027=HEAP32[((15616)>>2)];
 var $1028=((($1027)+($1011))|0);
 HEAP32[((15616)>>2)]=$1028;
 HEAP32[((15628)>>2)]=$1010;
 var $1029=$1028|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1030=(($tbase_245_i+$_sum44_i_i)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1029;
 var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
 var $1032=(($tbase_245_i+$_sum45_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1028;
 label=303;break;
 case 232: 
 var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
 var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
 var $1035=(($tbase_245_i+$_sum95_i)|0);
 var $1036=$1035;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=$1037&3;
 var $1039=($1038|0)==1;
 if($1039){label=233;break;}else{var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;label=280;break;}
 case 233: 
 var $1041=$1037&-8;
 var $1042=$1037>>>3;
 var $1043=($1037>>>0)<256;
 if($1043){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1003|8;
 var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1045=(($tbase_245_i+$_sum105_i)|0);
 var $1046=$1045;
 var $1047=HEAP32[(($1046)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum41_i_i)+($1003))|0);
 var $1048=(($tbase_245_i+$_sum106_i)|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=$1042<<1;
 var $1052=((15648+($1051<<2))|0);
 var $1053=$1052;
 var $1054=($1047|0)==($1053|0);
 if($1054){label=237;break;}else{label=235;break;}
 case 235: 
 var $1056=$1047;
 var $1057=HEAP32[((15624)>>2)];
 var $1058=($1056>>>0)<($1057>>>0);
 if($1058){label=245;break;}else{label=236;break;}
 case 236: 
 var $1060=(($1047+12)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1061|0)==($1005|0);
 if($1062){label=237;break;}else{label=245;break;}
 case 237: 
 var $1063=($1050|0)==($1047|0);
 if($1063){label=238;break;}else{label=239;break;}
 case 238: 
 var $1065=1<<$1042;
 var $1066=$1065^-1;
 var $1067=HEAP32[((15608)>>2)];
 var $1068=$1067&$1066;
 HEAP32[((15608)>>2)]=$1068;
 label=279;break;
 case 239: 
 var $1070=($1050|0)==($1053|0);
 if($1070){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre56_i_i=(($1050+8)|0);
 var $_pre_phi57_i_i=$_pre56_i_i;label=243;break;
 case 241: 
 var $1072=$1050;
 var $1073=HEAP32[((15624)>>2)];
 var $1074=($1072>>>0)<($1073>>>0);
 if($1074){label=244;break;}else{label=242;break;}
 case 242: 
 var $1076=(($1050+8)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=($1077|0)==($1005|0);
 if($1078){var $_pre_phi57_i_i=$1076;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi57_i_i;
 var $1079=(($1047+12)|0);
 HEAP32[(($1079)>>2)]=$1050;
 HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1081=$1004;
 var $_sum34_i_i=$1003|24;
 var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1082=(($tbase_245_i+$_sum96_i)|0);
 var $1083=$1082;
 var $1084=HEAP32[(($1083)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum97_i=((($_sum5_i_i)+($1003))|0);
 var $1085=(($tbase_245_i+$_sum97_i)|0);
 var $1086=$1085;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=($1087|0)==($1081|0);
 if($1088){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1003|8;
 var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1090=(($tbase_245_i+$_sum98_i)|0);
 var $1091=$1090;
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=$1092;
 var $1094=HEAP32[((15624)>>2)];
 var $1095=($1093>>>0)<($1094>>>0);
 if($1095){label=251;break;}else{label=248;break;}
 case 248: 
 var $1097=(($1092+12)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1081|0);
 if($1099){label=249;break;}else{label=251;break;}
 case 249: 
 var $1101=(($1087+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==($1081|0);
 if($1103){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1097)>>2)]=$1087;
 HEAP32[(($1101)>>2)]=$1092;
 var $R_1_i_i=$1087;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1003|16;
 var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1106=(($tbase_245_i+$_sum103_i)|0);
 var $1107=$1106;
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=($1108|0)==0;
 if($1109){label=253;break;}else{var $R_0_i_i=$1108;var $RP_0_i_i=$1107;label=254;break;}
 case 253: 
 var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1111=(($tbase_245_i+$_sum104_i)|0);
 var $1112=$1111;
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1115=(($R_0_i_i+20)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=255;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=254;break;}
 case 255: 
 var $1119=(($R_0_i_i+16)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=($1120|0)==0;
 if($1121){label=256;break;}else{var $R_0_i_i=$1120;var $RP_0_i_i=$1119;label=254;break;}
 case 256: 
 var $1123=$RP_0_i_i;
 var $1124=HEAP32[((15624)>>2)];
 var $1125=($1123>>>0)<($1124>>>0);
 if($1125){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1129=($1084|0)==0;
 if($1129){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum99_i=((($_sum31_i_i)+($1003))|0);
 var $1131=(($tbase_245_i+$_sum99_i)|0);
 var $1132=$1131;
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=((15912+($1133<<2))|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1081|0)==($1135|0);
 if($1136){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1134)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1138=HEAP32[(($1132)>>2)];
 var $1139=1<<$1138;
 var $1140=$1139^-1;
 var $1141=HEAP32[((15612)>>2)];
 var $1142=$1141&$1140;
 HEAP32[((15612)>>2)]=$1142;
 label=279;break;
 case 263: 
 var $1144=$1084;
 var $1145=HEAP32[((15624)>>2)];
 var $1146=($1144>>>0)<($1145>>>0);
 if($1146){label=267;break;}else{label=264;break;}
 case 264: 
 var $1148=(($1084+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1149|0)==($1081|0);
 if($1150){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1153=(($1084+20)|0);
 HEAP32[(($1153)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1156=($R_1_i_i|0)==0;
 if($1156){label=279;break;}else{label=269;break;}
 case 269: 
 var $1158=$R_1_i_i;
 var $1159=HEAP32[((15624)>>2)];
 var $1160=($1158>>>0)<($1159>>>0);
 if($1160){label=278;break;}else{label=270;break;}
 case 270: 
 var $1162=(($R_1_i_i+24)|0);
 HEAP32[(($1162)>>2)]=$1084;
 var $_sum3233_i_i=$1003|16;
 var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1163=(($tbase_245_i+$_sum100_i)|0);
 var $1164=$1163;
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=($1165|0)==0;
 if($1166){label=274;break;}else{label=271;break;}
 case 271: 
 var $1168=$1165;
 var $1169=HEAP32[((15624)>>2)];
 var $1170=($1168>>>0)<($1169>>>0);
 if($1170){label=273;break;}else{label=272;break;}
 case 272: 
 var $1172=(($R_1_i_i+16)|0);
 HEAP32[(($1172)>>2)]=$1165;
 var $1173=(($1165+24)|0);
 HEAP32[(($1173)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1176=(($tbase_245_i+$_sum101_i)|0);
 var $1177=$1176;
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=($1178|0)==0;
 if($1179){label=279;break;}else{label=275;break;}
 case 275: 
 var $1181=$1178;
 var $1182=HEAP32[((15624)>>2)];
 var $1183=($1181>>>0)<($1182>>>0);
 if($1183){label=277;break;}else{label=276;break;}
 case 276: 
 var $1185=(($R_1_i_i+20)|0);
 HEAP32[(($1185)>>2)]=$1178;
 var $1186=(($1178+24)|0);
 HEAP32[(($1186)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1041|$1003;
 var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1190=(($tbase_245_i+$_sum102_i)|0);
 var $1191=$1190;
 var $1192=((($1041)+($1011))|0);
 var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1194=(($oldfirst_0_i_i+4)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=$1195&-2;
 HEAP32[(($1194)>>2)]=$1196;
 var $1197=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1198=(($tbase_245_i+$_sum10_i_i)|0);
 var $1199=$1198;
 HEAP32[(($1199)>>2)]=$1197;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1200=(($tbase_245_i+$_sum11_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$qsize_0_i_i;
 var $1202=$qsize_0_i_i>>>3;
 var $1203=($qsize_0_i_i>>>0)<256;
 if($1203){label=281;break;}else{label=286;break;}
 case 281: 
 var $1205=$1202<<1;
 var $1206=((15648+($1205<<2))|0);
 var $1207=$1206;
 var $1208=HEAP32[((15608)>>2)];
 var $1209=1<<$1202;
 var $1210=$1208&$1209;
 var $1211=($1210|0)==0;
 if($1211){label=282;break;}else{label=283;break;}
 case 282: 
 var $1213=$1208|$1209;
 HEAP32[((15608)>>2)]=$1213;
 var $_sum27_pre_i_i=((($1205)+(2))|0);
 var $_pre_i24_i=((15648+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1205)+(2))|0);
 var $1215=((15648+($_sum30_i_i<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=$1216;
 var $1218=HEAP32[((15624)>>2)];
 var $1219=($1217>>>0)<($1218>>>0);
 if($1219){label=284;break;}else{var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
 var $1222=(($F4_0_i_i+12)|0);
 HEAP32[(($1222)>>2)]=$1010;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1223=(($tbase_245_i+$_sum28_i_i)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1225=(($tbase_245_i+$_sum29_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$1207;
 label=303;break;
 case 286: 
 var $1228=$1009;
 var $1229=$qsize_0_i_i>>>8;
 var $1230=($1229|0)==0;
 if($1230){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1232=($qsize_0_i_i>>>0)>16777215;
 if($1232){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1234=((($1229)+(1048320))|0);
 var $1235=$1234>>>16;
 var $1236=$1235&8;
 var $1237=$1229<<$1236;
 var $1238=((($1237)+(520192))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&4;
 var $1241=$1240|$1236;
 var $1242=$1237<<$1240;
 var $1243=((($1242)+(245760))|0);
 var $1244=$1243>>>16;
 var $1245=$1244&2;
 var $1246=$1241|$1245;
 var $1247=(((14)-($1246))|0);
 var $1248=$1242<<$1245;
 var $1249=$1248>>>15;
 var $1250=((($1247)+($1249))|0);
 var $1251=$1250<<1;
 var $1252=((($1250)+(7))|0);
 var $1253=$qsize_0_i_i>>>($1252>>>0);
 var $1254=$1253&1;
 var $1255=$1254|$1251;
 var $I7_0_i_i=$1255;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1257=((15912+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
 var $1259=$1258;
 HEAP32[(($1259)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1260=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1261=(($tbase_245_i+$_sum14_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=0;
 var $1263=$1260;
 HEAP32[(($1263)>>2)]=0;
 var $1264=HEAP32[((15612)>>2)];
 var $1265=1<<$I7_0_i_i;
 var $1266=$1264&$1265;
 var $1267=($1266|0)==0;
 if($1267){label=290;break;}else{label=291;break;}
 case 290: 
 var $1269=$1264|$1265;
 HEAP32[((15612)>>2)]=$1269;
 HEAP32[(($1257)>>2)]=$1228;
 var $1270=$1257;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1271=(($tbase_245_i+$_sum15_i_i)|0);
 var $1272=$1271;
 HEAP32[(($1272)>>2)]=$1270;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1273=(($tbase_245_i+$_sum16_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1228;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1275=(($tbase_245_i+$_sum17_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1228;
 label=303;break;
 case 291: 
 var $1278=HEAP32[(($1257)>>2)];
 var $1279=($I7_0_i_i|0)==31;
 if($1279){var $1284=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1281=$I7_0_i_i>>>1;
 var $1282=(((25)-($1281))|0);
 var $1284=$1282;label=293;break;
 case 293: 
 var $1284;
 var $1285=$qsize_0_i_i<<$1284;
 var $K8_0_i_i=$1285;var $T_0_i27_i=$1278;label=294;break;
 case 294: 
 var $T_0_i27_i;
 var $K8_0_i_i;
 var $1287=(($T_0_i27_i+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){label=299;break;}else{label=295;break;}
 case 295: 
 var $1292=$K8_0_i_i>>>31;
 var $1293=(($T_0_i27_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 var $1296=$K8_0_i_i<<1;
 if($1295){label=296;break;}else{var $K8_0_i_i=$1296;var $T_0_i27_i=$1294;label=294;break;}
 case 296: 
 var $1298=$1293;
 var $1299=HEAP32[((15624)>>2)];
 var $1300=($1298>>>0)<($1299>>>0);
 if($1300){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($1293)>>2)]=$1228;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1302=(($tbase_245_i+$_sum24_i_i)|0);
 var $1303=$1302;
 HEAP32[(($1303)>>2)]=$T_0_i27_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1304=(($tbase_245_i+$_sum25_i_i)|0);
 var $1305=$1304;
 HEAP32[(($1305)>>2)]=$1228;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1306=(($tbase_245_i+$_sum26_i_i)|0);
 var $1307=$1306;
 HEAP32[(($1307)>>2)]=$1228;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $1310=(($T_0_i27_i+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=$T_0_i27_i;
 var $1313=HEAP32[((15624)>>2)];
 var $1314=($1312>>>0)<($1313>>>0);
 if($1314){label=302;break;}else{label=300;break;}
 case 300: 
 var $1316=$1311;
 var $1317=($1316>>>0)<($1313>>>0);
 if($1317){label=302;break;}else{label=301;break;}
 case 301: 
 var $1319=(($1311+12)|0);
 HEAP32[(($1319)>>2)]=$1228;
 HEAP32[(($1310)>>2)]=$1228;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1320=(($tbase_245_i+$_sum21_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$1311;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1322=(($tbase_245_i+$_sum22_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=$T_0_i27_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1324=(($tbase_245_i+$_sum23_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$993|8;
 var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1326;label=341;break;
 case 304: 
 var $1327=$890;
 var $sp_0_i_i_i=16056;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1329=(($sp_0_i_i_i)|0);
 var $1330=HEAP32[(($1329)>>2)];
 var $1331=($1330>>>0)>($1327>>>0);
 if($1331){label=307;break;}else{label=306;break;}
 case 306: 
 var $1333=(($sp_0_i_i_i+4)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1330+$1334)|0);
 var $1336=($1335>>>0)>($1327>>>0);
 if($1336){label=308;break;}else{label=307;break;}
 case 307: 
 var $1338=(($sp_0_i_i_i+8)|0);
 var $1339=HEAP32[(($1338)>>2)];
 var $sp_0_i_i_i=$1339;label=305;break;
 case 308: 
 var $_sum_i15_i=((($1334)-(47))|0);
 var $_sum1_i16_i=((($1334)-(39))|0);
 var $1340=(($1330+$_sum1_i16_i)|0);
 var $1341=$1340;
 var $1342=$1341&7;
 var $1343=($1342|0)==0;
 if($1343){var $1348=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1345=(((-$1341))|0);
 var $1346=$1345&7;
 var $1348=$1346;label=310;break;
 case 310: 
 var $1348;
 var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
 var $1349=(($1330+$_sum2_i17_i)|0);
 var $1350=(($890+16)|0);
 var $1351=$1350;
 var $1352=($1349>>>0)<($1351>>>0);
 var $1353=($1352?$1327:$1349);
 var $1354=(($1353+8)|0);
 var $1355=$1354;
 var $1356=((($tsize_244_i)-(40))|0);
 var $1357=(($tbase_245_i+8)|0);
 var $1358=$1357;
 var $1359=$1358&7;
 var $1360=($1359|0)==0;
 if($1360){var $1364=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1362=(((-$1358))|0);
 var $1363=$1362&7;
 var $1364=$1363;label=312;break;
 case 312: 
 var $1364;
 var $1365=(($tbase_245_i+$1364)|0);
 var $1366=$1365;
 var $1367=((($1356)-($1364))|0);
 HEAP32[((15632)>>2)]=$1366;
 HEAP32[((15620)>>2)]=$1367;
 var $1368=$1367|1;
 var $_sum_i_i_i=((($1364)+(4))|0);
 var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=$1368;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1372=$1371;
 HEAP32[(($1372)>>2)]=40;
 var $1373=HEAP32[((15568)>>2)];
 HEAP32[((15636)>>2)]=$1373;
 var $1374=(($1353+4)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1354)>>2)]=HEAP32[((16056)>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((16060)>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((16064)>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((16068)>>2)];
 HEAP32[((16056)>>2)]=$tbase_245_i;
 HEAP32[((16060)>>2)]=$tsize_244_i;
 HEAP32[((16068)>>2)]=0;
 HEAP32[((16064)>>2)]=$1355;
 var $1376=(($1353+28)|0);
 var $1377=$1376;
 HEAP32[(($1377)>>2)]=7;
 var $1378=(($1353+32)|0);
 var $1379=($1378>>>0)<($1335>>>0);
 if($1379){var $1380=$1377;label=313;break;}else{label=314;break;}
 case 313: 
 var $1380;
 var $1381=(($1380+4)|0);
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1380+8)|0);
 var $1383=$1382;
 var $1384=($1383>>>0)<($1335>>>0);
 if($1384){var $1380=$1381;label=313;break;}else{label=314;break;}
 case 314: 
 var $1385=($1353|0)==($1327|0);
 if($1385){label=338;break;}else{label=315;break;}
 case 315: 
 var $1387=$1353;
 var $1388=$890;
 var $1389=((($1387)-($1388))|0);
 var $1390=(($1327+$1389)|0);
 var $_sum3_i_i=((($1389)+(4))|0);
 var $1391=(($1327+$_sum3_i_i)|0);
 var $1392=$1391;
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=$1393&-2;
 HEAP32[(($1392)>>2)]=$1394;
 var $1395=$1389|1;
 var $1396=(($890+4)|0);
 HEAP32[(($1396)>>2)]=$1395;
 var $1397=$1390;
 HEAP32[(($1397)>>2)]=$1389;
 var $1398=$1389>>>3;
 var $1399=($1389>>>0)<256;
 if($1399){label=316;break;}else{label=321;break;}
 case 316: 
 var $1401=$1398<<1;
 var $1402=((15648+($1401<<2))|0);
 var $1403=$1402;
 var $1404=HEAP32[((15608)>>2)];
 var $1405=1<<$1398;
 var $1406=$1404&$1405;
 var $1407=($1406|0)==0;
 if($1407){label=317;break;}else{label=318;break;}
 case 317: 
 var $1409=$1404|$1405;
 HEAP32[((15608)>>2)]=$1409;
 var $_sum11_pre_i_i=((($1401)+(2))|0);
 var $_pre_i_i=((15648+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1403;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1401)+(2))|0);
 var $1411=((15648+($_sum12_i_i<<2))|0);
 var $1412=HEAP32[(($1411)>>2)];
 var $1413=$1412;
 var $1414=HEAP32[((15624)>>2)];
 var $1415=($1413>>>0)<($1414>>>0);
 if($1415){label=319;break;}else{var $F_0_i_i=$1412;var $_pre_phi_i_i=$1411;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$890;
 var $1418=(($F_0_i_i+12)|0);
 HEAP32[(($1418)>>2)]=$890;
 var $1419=(($890+8)|0);
 HEAP32[(($1419)>>2)]=$F_0_i_i;
 var $1420=(($890+12)|0);
 HEAP32[(($1420)>>2)]=$1403;
 label=338;break;
 case 321: 
 var $1422=$890;
 var $1423=$1389>>>8;
 var $1424=($1423|0)==0;
 if($1424){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1426=($1389>>>0)>16777215;
 if($1426){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1428=((($1423)+(1048320))|0);
 var $1429=$1428>>>16;
 var $1430=$1429&8;
 var $1431=$1423<<$1430;
 var $1432=((($1431)+(520192))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&4;
 var $1435=$1434|$1430;
 var $1436=$1431<<$1434;
 var $1437=((($1436)+(245760))|0);
 var $1438=$1437>>>16;
 var $1439=$1438&2;
 var $1440=$1435|$1439;
 var $1441=(((14)-($1440))|0);
 var $1442=$1436<<$1439;
 var $1443=$1442>>>15;
 var $1444=((($1441)+($1443))|0);
 var $1445=$1444<<1;
 var $1446=((($1444)+(7))|0);
 var $1447=$1389>>>($1446>>>0);
 var $1448=$1447&1;
 var $1449=$1448|$1445;
 var $I1_0_i_i=$1449;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1451=((15912+($I1_0_i_i<<2))|0);
 var $1452=(($890+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
 var $1453=(($890+20)|0);
 HEAP32[(($1453)>>2)]=0;
 var $1454=(($890+16)|0);
 HEAP32[(($1454)>>2)]=0;
 var $1455=HEAP32[((15612)>>2)];
 var $1456=1<<$I1_0_i_i;
 var $1457=$1455&$1456;
 var $1458=($1457|0)==0;
 if($1458){label=325;break;}else{label=326;break;}
 case 325: 
 var $1460=$1455|$1456;
 HEAP32[((15612)>>2)]=$1460;
 HEAP32[(($1451)>>2)]=$1422;
 var $1461=(($890+24)|0);
 var $_c_i_i=$1451;
 HEAP32[(($1461)>>2)]=$_c_i_i;
 var $1462=(($890+12)|0);
 HEAP32[(($1462)>>2)]=$890;
 var $1463=(($890+8)|0);
 HEAP32[(($1463)>>2)]=$890;
 label=338;break;
 case 326: 
 var $1465=HEAP32[(($1451)>>2)];
 var $1466=($I1_0_i_i|0)==31;
 if($1466){var $1471=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1468=$I1_0_i_i>>>1;
 var $1469=(((25)-($1468))|0);
 var $1471=$1469;label=328;break;
 case 328: 
 var $1471;
 var $1472=$1389<<$1471;
 var $K2_0_i_i=$1472;var $T_0_i_i=$1465;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K2_0_i_i;
 var $1474=(($T_0_i_i+4)|0);
 var $1475=HEAP32[(($1474)>>2)];
 var $1476=$1475&-8;
 var $1477=($1476|0)==($1389|0);
 if($1477){label=334;break;}else{label=330;break;}
 case 330: 
 var $1479=$K2_0_i_i>>>31;
 var $1480=(($T_0_i_i+16+($1479<<2))|0);
 var $1481=HEAP32[(($1480)>>2)];
 var $1482=($1481|0)==0;
 var $1483=$K2_0_i_i<<1;
 if($1482){label=331;break;}else{var $K2_0_i_i=$1483;var $T_0_i_i=$1481;label=329;break;}
 case 331: 
 var $1485=$1480;
 var $1486=HEAP32[((15624)>>2)];
 var $1487=($1485>>>0)<($1486>>>0);
 if($1487){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($1480)>>2)]=$1422;
 var $1489=(($890+24)|0);
 var $T_0_c8_i_i=$T_0_i_i;
 HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
 var $1490=(($890+12)|0);
 HEAP32[(($1490)>>2)]=$890;
 var $1491=(($890+8)|0);
 HEAP32[(($1491)>>2)]=$890;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $1494=(($T_0_i_i+8)|0);
 var $1495=HEAP32[(($1494)>>2)];
 var $1496=$T_0_i_i;
 var $1497=HEAP32[((15624)>>2)];
 var $1498=($1496>>>0)<($1497>>>0);
 if($1498){label=337;break;}else{label=335;break;}
 case 335: 
 var $1500=$1495;
 var $1501=($1500>>>0)<($1497>>>0);
 if($1501){label=337;break;}else{label=336;break;}
 case 336: 
 var $1503=(($1495+12)|0);
 HEAP32[(($1503)>>2)]=$1422;
 HEAP32[(($1494)>>2)]=$1422;
 var $1504=(($890+8)|0);
 var $_c7_i_i=$1495;
 HEAP32[(($1504)>>2)]=$_c7_i_i;
 var $1505=(($890+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($1505)>>2)]=$T_0_c_i_i;
 var $1506=(($890+24)|0);
 HEAP32[(($1506)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1507=HEAP32[((15620)>>2)];
 var $1508=($1507>>>0)>($nb_0>>>0);
 if($1508){label=339;break;}else{label=340;break;}
 case 339: 
 var $1510=((($1507)-($nb_0))|0);
 HEAP32[((15620)>>2)]=$1510;
 var $1511=HEAP32[((15632)>>2)];
 var $1512=$1511;
 var $1513=(($1512+$nb_0)|0);
 var $1514=$1513;
 HEAP32[((15632)>>2)]=$1514;
 var $1515=$1510|1;
 var $_sum_i134=((($nb_0)+(4))|0);
 var $1516=(($1512+$_sum_i134)|0);
 var $1517=$1516;
 HEAP32[(($1517)>>2)]=$1515;
 var $1518=$nb_0|3;
 var $1519=(($1511+4)|0);
 HEAP32[(($1519)>>2)]=$1518;
 var $1520=(($1511+8)|0);
 var $1521=$1520;
 var $mem_0=$1521;label=341;break;
 case 340: 
 var $1522=___errno_location();
 HEAP32[(($1522)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((15624)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum232=(((-8)-($21))|0);
 var $24=(($mem+$_sum232)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((15628)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum276=((($_sum232)+(8))|0);
 var $35=(($mem+$_sum276)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum277=((($_sum232)+(12))|0);
 var $38=(($mem+$_sum277)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((15648+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((15608)>>2)];
 var $57=$56&$55;
 HEAP32[((15608)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre305=(($40+8)|0);
 var $_pre_phi306=$_pre305;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi306=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi306;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi306)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum266=((($_sum232)+(24))|0);
 var $70=(($mem+$_sum266)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum267=((($_sum232)+(12))|0);
 var $73=(($mem+$_sum267)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum273=((($_sum232)+(8))|0);
 var $78=(($mem+$_sum273)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum269=((($_sum232)+(20))|0);
 var $93=(($mem+$_sum269)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum268=((($_sum232)+(16))|0);
 var $98=(($mem+$_sum268)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum270=((($_sum232)+(28))|0);
 var $117=(($mem+$_sum270)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((15912+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((15612)>>2)];
 var $128=$127&$126;
 HEAP32[((15612)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((15624)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((15624)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum271=((($_sum232)+(16))|0);
 var $149=(($mem+$_sum271)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((15624)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum272=((($_sum232)+(20))|0);
 var $162=(($mem+$_sum272)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((15624)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum233=((($14)-(4))|0);
 var $176=(($mem+$_sum233)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((15616)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum264=((($_sum232)+(4))|0);
 var $185=(($mem+$_sum264)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum263=((($14)-(4))|0);
 var $192=(($mem+$_sum263)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((15632)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((15620)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((15620)>>2)]=$204;
 HEAP32[((15632)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((15628)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((15628)>>2)]=0;
 HEAP32[((15616)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((15628)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((15616)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((15616)>>2)]=$215;
 HEAP32[((15628)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum257258=$14|4;
 var $229=(($mem+$_sum257258)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((15648+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((15624)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((15608)>>2)];
 var $249=$248&$247;
 HEAP32[((15608)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre303=(($231+8)|0);
 var $_pre_phi304=$_pre303;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((15624)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi304=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi304;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi304)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum235=((($14)+(16))|0);
 var $263=(($mem+$_sum235)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum236237=$14|4;
 var $266=(($mem+$_sum236237)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((15624)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum239=((($14)+(12))|0);
 var $287=(($mem+$_sum239)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum238=((($14)+(8))|0);
 var $292=(($mem+$_sum238)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((15624)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum250=((($14)+(20))|0);
 var $312=(($mem+$_sum250)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((15912+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond298=($R7_1|0)==0;
 if($cond298){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((15612)>>2)];
 var $323=$322&$321;
 HEAP32[((15612)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((15624)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((15624)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum251=((($14)+(8))|0);
 var $344=(($mem+$_sum251)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((15624)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum252=((($14)+(12))|0);
 var $357=(($mem+$_sum252)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((15624)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((15628)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((15616)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((15648+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((15608)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((15608)>>2)]=$396;
 var $_sum248_pre=((($388)+(2))|0);
 var $_pre=((15648+($_sum248_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum249=((($388)+(2))|0);
 var $398=((15648+($_sum249<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((15624)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((15912+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((15612)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((15612)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=$psize_1<<$458;
 var $K19_0=$459;var $T_0=$452;label=127;break;
 case 127: 
 var $T_0;
 var $K19_0;
 var $461=(($T_0+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){label=132;break;}else{label=128;break;}
 case 128: 
 var $466=$K19_0>>>31;
 var $467=(($T_0+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 var $470=$K19_0<<1;
 if($469){label=129;break;}else{var $K19_0=$470;var $T_0=$468;label=127;break;}
 case 129: 
 var $472=$467;
 var $473=HEAP32[((15624)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($467)>>2)]=$409;
 var $476=(($p_0+24)|0);
 var $T_0_c245=$T_0;
 HEAP32[(($476)>>2)]=$T_0_c245;
 var $477=(($p_0+12)|0);
 HEAP32[(($477)>>2)]=$p_0;
 var $478=(($p_0+8)|0);
 HEAP32[(($478)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $481=(($T_0+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0;
 var $484=HEAP32[((15624)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=135;break;}else{label=133;break;}
 case 133: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=135;break;}else{label=134;break;}
 case 134: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$409;
 HEAP32[(($481)>>2)]=$409;
 var $491=(($p_0+8)|0);
 var $_c244=$482;
 HEAP32[(($491)>>2)]=$_c244;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $495=HEAP32[((15640)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((15640)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=16064;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=138;break;}else{var $sp_0_in_i=$499;label=137;break;}
 case 138: 
 HEAP32[((15640)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _realloc($oldmem,$bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=80;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=80;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=((($oldmem)-(4))|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&-8;
 var $_sum=((($19)-(8))|0);
 var $20=(($oldmem+$_sum)|0);
 var $21=$20;
 var $22=HEAP32[((15624)>>2)];
 var $23=($15>>>0)<($22>>>0);
 if($23){label=76;break;}else{label=8;break;}
 case 8: 
 var $25=$18&3;
 var $26=($25|0)!=1;
 var $27=($_sum|0)>-8;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=9;break;}else{label=76;break;}
 case 9: 
 var $_sum3334_i=$19|4;
 var $_sum1=((($_sum3334_i)-(8))|0);
 var $29=(($oldmem+$_sum1)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31&1;
 var $phitmp_i=($32|0)==0;
 if($phitmp_i){label=76;break;}else{label=10;break;}
 case 10: 
 var $34=($25|0)==0;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=($14>>>0)<256;
 var $37=$14|4;
 var $38=($19>>>0)<($37>>>0);
 var $or_cond=$36|$38;
 if($or_cond){label=78;break;}else{label=12;break;}
 case 12: 
 var $40=((($19)-($14))|0);
 var $41=HEAP32[((15560)>>2)];
 var $42=$41<<1;
 var $43=($40>>>0)>($42>>>0);
 var $44=($15|0)==0;
 var $or_cond35=$43|$44;
 if($or_cond35){label=78;break;}else{var $mem_0=$oldmem;label=80;break;}
 case 13: 
 var $46=($19>>>0)<($14>>>0);
 if($46){label=16;break;}else{label=14;break;}
 case 14: 
 var $48=((($19)-($14))|0);
 var $49=($48>>>0)>15;
 if($49){label=15;break;}else{label=77;break;}
 case 15: 
 var $_sum2=((($14)-(8))|0);
 var $50=(($oldmem+$_sum2)|0);
 var $51=$50;
 var $52=$18&1;
 var $53=$52|$14;
 var $54=$53|2;
 HEAP32[(($17)>>2)]=$54;
 var $_sum29_i3=$14|4;
 var $_sum4=((($_sum29_i3)-(8))|0);
 var $55=(($oldmem+$_sum4)|0);
 var $56=$55;
 var $57=$48|3;
 HEAP32[(($56)>>2)]=$57;
 var $58=HEAP32[(($30)>>2)];
 var $59=$58|1;
 HEAP32[(($30)>>2)]=$59;
 _dispose_chunk($51,$48);
 var $mem_0=$oldmem;label=80;break;
 case 16: 
 var $61=HEAP32[((15632)>>2)];
 var $62=($21|0)==($61|0);
 if($62){label=17;break;}else{label=19;break;}
 case 17: 
 var $64=HEAP32[((15620)>>2)];
 var $65=((($64)+($19))|0);
 var $66=($65>>>0)>($14>>>0);
 if($66){label=18;break;}else{label=78;break;}
 case 18: 
 var $68=((($65)-($14))|0);
 var $_sum28=((($14)-(8))|0);
 var $69=(($oldmem+$_sum28)|0);
 var $70=$69;
 var $71=$18&1;
 var $72=$71|$14;
 var $73=$72|2;
 HEAP32[(($17)>>2)]=$73;
 var $_sum28_i29=$14|4;
 var $_sum30=((($_sum28_i29)-(8))|0);
 var $74=(($oldmem+$_sum30)|0);
 var $75=$74;
 var $76=$68|1;
 HEAP32[(($75)>>2)]=$76;
 HEAP32[((15632)>>2)]=$70;
 HEAP32[((15620)>>2)]=$68;
 label=77;break;
 case 19: 
 var $78=HEAP32[((15628)>>2)];
 var $79=($21|0)==($78|0);
 if($79){label=20;break;}else{label=25;break;}
 case 20: 
 var $81=HEAP32[((15616)>>2)];
 var $82=((($81)+($19))|0);
 var $83=($82>>>0)<($14>>>0);
 if($83){label=78;break;}else{label=21;break;}
 case 21: 
 var $85=((($82)-($14))|0);
 var $86=($85>>>0)>15;
 if($86){label=22;break;}else{label=23;break;}
 case 22: 
 var $_sum23=((($14)-(8))|0);
 var $88=(($oldmem+$_sum23)|0);
 var $89=$88;
 var $_sum24=((($82)-(8))|0);
 var $90=(($oldmem+$_sum24)|0);
 var $91=$18&1;
 var $92=$91|$14;
 var $93=$92|2;
 HEAP32[(($17)>>2)]=$93;
 var $_sum25_i25=$14|4;
 var $_sum26=((($_sum25_i25)-(8))|0);
 var $94=(($oldmem+$_sum26)|0);
 var $95=$94;
 var $96=$85|1;
 HEAP32[(($95)>>2)]=$96;
 var $97=$90;
 HEAP32[(($97)>>2)]=$85;
 var $_sum27=((($82)-(4))|0);
 var $98=(($oldmem+$_sum27)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=$100&-2;
 HEAP32[(($99)>>2)]=$101;
 var $storemerge_i=$89;var $storemerge27_i=$85;label=24;break;
 case 23: 
 var $103=$18&1;
 var $104=$103|$82;
 var $105=$104|2;
 HEAP32[(($17)>>2)]=$105;
 var $_sum22=((($82)-(4))|0);
 var $106=(($oldmem+$_sum22)|0);
 var $107=$106;
 var $108=HEAP32[(($107)>>2)];
 var $109=$108|1;
 HEAP32[(($107)>>2)]=$109;
 var $storemerge_i=0;var $storemerge27_i=0;label=24;break;
 case 24: 
 var $storemerge27_i;
 var $storemerge_i;
 HEAP32[((15616)>>2)]=$storemerge27_i;
 HEAP32[((15628)>>2)]=$storemerge_i;
 label=77;break;
 case 25: 
 var $112=$31&2;
 var $113=($112|0)==0;
 if($113){label=26;break;}else{label=78;break;}
 case 26: 
 var $115=$31&-8;
 var $116=((($115)+($19))|0);
 var $117=($116>>>0)<($14>>>0);
 if($117){label=78;break;}else{label=27;break;}
 case 27: 
 var $119=((($116)-($14))|0);
 var $120=$31>>>3;
 var $121=($31>>>0)<256;
 if($121){label=28;break;}else{label=40;break;}
 case 28: 
 var $123=(($oldmem+$19)|0);
 var $124=$123;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($oldmem+$_sum3334_i)|0);
 var $127=$126;
 var $128=HEAP32[(($127)>>2)];
 var $129=$120<<1;
 var $130=((15648+($129<<2))|0);
 var $131=$130;
 var $132=($125|0)==($131|0);
 if($132){label=31;break;}else{label=29;break;}
 case 29: 
 var $134=$125;
 var $135=($134>>>0)<($22>>>0);
 if($135){label=39;break;}else{label=30;break;}
 case 30: 
 var $137=(($125+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==($21|0);
 if($139){label=31;break;}else{label=39;break;}
 case 31: 
 var $140=($128|0)==($125|0);
 if($140){label=32;break;}else{label=33;break;}
 case 32: 
 var $142=1<<$120;
 var $143=$142^-1;
 var $144=HEAP32[((15608)>>2)];
 var $145=$144&$143;
 HEAP32[((15608)>>2)]=$145;
 label=73;break;
 case 33: 
 var $147=($128|0)==($131|0);
 if($147){label=34;break;}else{label=35;break;}
 case 34: 
 var $_pre_i=(($128+8)|0);
 var $_pre_phi_i=$_pre_i;label=37;break;
 case 35: 
 var $149=$128;
 var $150=($149>>>0)<($22>>>0);
 if($150){label=38;break;}else{label=36;break;}
 case 36: 
 var $152=(($128+8)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==($21|0);
 if($154){var $_pre_phi_i=$152;label=37;break;}else{label=38;break;}
 case 37: 
 var $_pre_phi_i;
 var $155=(($125+12)|0);
 HEAP32[(($155)>>2)]=$128;
 HEAP32[(($_pre_phi_i)>>2)]=$125;
 label=73;break;
 case 38: 
 _abort();
 throw "Reached an unreachable!";
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $157=$20;
 var $_sum5=((($19)+(16))|0);
 var $158=(($oldmem+$_sum5)|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($oldmem+$_sum3334_i)|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==($157|0);
 if($164){label=46;break;}else{label=41;break;}
 case 41: 
 var $166=(($oldmem+$19)|0);
 var $167=$166;
 var $168=HEAP32[(($167)>>2)];
 var $169=$168;
 var $170=($169>>>0)<($22>>>0);
 if($170){label=45;break;}else{label=42;break;}
 case 42: 
 var $172=(($168+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($173|0)==($157|0);
 if($174){label=43;break;}else{label=45;break;}
 case 43: 
 var $176=(($163+8)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($177|0)==($157|0);
 if($178){label=44;break;}else{label=45;break;}
 case 44: 
 HEAP32[(($172)>>2)]=$163;
 HEAP32[(($176)>>2)]=$168;
 var $R_1_i=$163;label=53;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum17=((($19)+(12))|0);
 var $181=(($oldmem+$_sum17)|0);
 var $182=$181;
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=47;break;}else{var $R_0_i=$183;var $RP_0_i=$182;label=48;break;}
 case 47: 
 var $_sum18=((($19)+(8))|0);
 var $186=(($oldmem+$_sum18)|0);
 var $187=$186;
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){var $R_1_i=0;label=53;break;}else{var $R_0_i=$188;var $RP_0_i=$187;label=48;break;}
 case 48: 
 var $RP_0_i;
 var $R_0_i;
 var $190=(($R_0_i+20)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($191|0)==0;
 if($192){label=49;break;}else{var $R_0_i=$191;var $RP_0_i=$190;label=48;break;}
 case 49: 
 var $194=(($R_0_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==0;
 if($196){label=50;break;}else{var $R_0_i=$195;var $RP_0_i=$194;label=48;break;}
 case 50: 
 var $198=$RP_0_i;
 var $199=($198>>>0)<($22>>>0);
 if($199){label=52;break;}else{label=51;break;}
 case 51: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=53;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 var $R_1_i;
 var $203=($160|0)==0;
 if($203){label=73;break;}else{label=54;break;}
 case 54: 
 var $_sum9=((($19)+(20))|0);
 var $205=(($oldmem+$_sum9)|0);
 var $206=$205;
 var $207=HEAP32[(($206)>>2)];
 var $208=((15912+($207<<2))|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($157|0)==($209|0);
 if($210){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($208)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=56;break;}else{label=63;break;}
 case 56: 
 var $212=HEAP32[(($206)>>2)];
 var $213=1<<$212;
 var $214=$213^-1;
 var $215=HEAP32[((15612)>>2)];
 var $216=$215&$214;
 HEAP32[((15612)>>2)]=$216;
 label=73;break;
 case 57: 
 var $218=$160;
 var $219=HEAP32[((15624)>>2)];
 var $220=($218>>>0)<($219>>>0);
 if($220){label=61;break;}else{label=58;break;}
 case 58: 
 var $222=(($160+16)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=($223|0)==($157|0);
 if($224){label=59;break;}else{label=60;break;}
 case 59: 
 HEAP32[(($222)>>2)]=$R_1_i;
 label=62;break;
 case 60: 
 var $227=(($160+20)|0);
 HEAP32[(($227)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $230=($R_1_i|0)==0;
 if($230){label=73;break;}else{label=63;break;}
 case 63: 
 var $232=$R_1_i;
 var $233=HEAP32[((15624)>>2)];
 var $234=($232>>>0)<($233>>>0);
 if($234){label=72;break;}else{label=64;break;}
 case 64: 
 var $236=(($R_1_i+24)|0);
 HEAP32[(($236)>>2)]=$160;
 var $_sum10=((($19)+(8))|0);
 var $237=(($oldmem+$_sum10)|0);
 var $238=$237;
 var $239=HEAP32[(($238)>>2)];
 var $240=($239|0)==0;
 if($240){label=68;break;}else{label=65;break;}
 case 65: 
 var $242=$239;
 var $243=HEAP32[((15624)>>2)];
 var $244=($242>>>0)<($243>>>0);
 if($244){label=67;break;}else{label=66;break;}
 case 66: 
 var $246=(($R_1_i+16)|0);
 HEAP32[(($246)>>2)]=$239;
 var $247=(($239+24)|0);
 HEAP32[(($247)>>2)]=$R_1_i;
 label=68;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 var $_sum11=((($19)+(12))|0);
 var $250=(($oldmem+$_sum11)|0);
 var $251=$250;
 var $252=HEAP32[(($251)>>2)];
 var $253=($252|0)==0;
 if($253){label=73;break;}else{label=69;break;}
 case 69: 
 var $255=$252;
 var $256=HEAP32[((15624)>>2)];
 var $257=($255>>>0)<($256>>>0);
 if($257){label=71;break;}else{label=70;break;}
 case 70: 
 var $259=(($R_1_i+20)|0);
 HEAP32[(($259)>>2)]=$252;
 var $260=(($252+24)|0);
 HEAP32[(($260)>>2)]=$R_1_i;
 label=73;break;
 case 71: 
 _abort();
 throw "Reached an unreachable!";
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $264=($119>>>0)<16;
 if($264){label=74;break;}else{label=75;break;}
 case 74: 
 var $265=HEAP32[(($17)>>2)];
 var $266=$265&1;
 var $267=$116|$266;
 var $268=$267|2;
 HEAP32[(($17)>>2)]=$268;
 var $_sum910_i=$116|4;
 var $_sum16=((($_sum910_i)-(8))|0);
 var $269=(($oldmem+$_sum16)|0);
 var $270=$269;
 var $271=HEAP32[(($270)>>2)];
 var $272=$271|1;
 HEAP32[(($270)>>2)]=$272;
 var $mem_0=$oldmem;label=80;break;
 case 75: 
 var $_sum12=((($14)-(8))|0);
 var $274=(($oldmem+$_sum12)|0);
 var $275=$274;
 var $276=HEAP32[(($17)>>2)];
 var $277=$276&1;
 var $278=$277|$14;
 var $279=$278|2;
 HEAP32[(($17)>>2)]=$279;
 var $_sum5_i13=$14|4;
 var $_sum14=((($_sum5_i13)-(8))|0);
 var $280=(($oldmem+$_sum14)|0);
 var $281=$280;
 var $282=$119|3;
 HEAP32[(($281)>>2)]=$282;
 var $_sum78_i=$116|4;
 var $_sum15=((($_sum78_i)-(8))|0);
 var $283=(($oldmem+$_sum15)|0);
 var $284=$283;
 var $285=HEAP32[(($284)>>2)];
 var $286=$285|1;
 HEAP32[(($284)>>2)]=$286;
 _dispose_chunk($275,$119);
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $_old=($15|0)==0;
 if($_old){label=78;break;}else{var $mem_0=$oldmem;label=80;break;}
 case 78: 
 var $287=_malloc($bytes);
 var $288=($287|0)==0;
 if($288){var $mem_0=0;label=80;break;}else{label=79;break;}
 case 79: 
 var $290=HEAP32[(($17)>>2)];
 var $291=$290&-8;
 var $292=$290&3;
 var $293=($292|0)==0;
 var $294=($293?8:4);
 var $295=((($291)-($294))|0);
 var $296=($295>>>0)<($bytes>>>0);
 var $297=($296?$295:$bytes);
 assert($297 % 1 === 0);(_memcpy($287, $oldmem, $297)|0);
 _free($oldmem);
 var $mem_0=$287;label=80;break;
 case 80: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _dispose_chunk($p,$psize){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_0277=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=134;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((15624)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((15628)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((15648+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((15608)>>2)];
 var $49=$48&$47;
 HEAP32[((15608)>>2)]=$49;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre62=(($32+8)|0);
 var $_pre_phi63=$_pre62;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi63=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi63;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi63)>>2)]=$29;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_0277=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((15912+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=HEAP32[(($110)>>2)];
 var $117=1<<$116;
 var $118=$117^-1;
 var $119=HEAP32[((15612)>>2)];
 var $120=$119&$118;
 HEAP32[((15612)>>2)]=$120;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 35: 
 var $122=$64;
 var $123=HEAP32[((15624)>>2)];
 var $124=($122>>>0)<($123>>>0);
 if($124){label=39;break;}else{label=36;break;}
 case 36: 
 var $126=(($64+16)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=($127|0)==($61|0);
 if($128){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($126)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $131=(($64+20)|0);
 HEAP32[(($131)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $134=($R_1|0)==0;
 if($134){var $_0=$16;var $_0277=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $136=$R_1;
 var $137=HEAP32[((15624)>>2)];
 var $138=($136>>>0)<($137>>>0);
 if($138){label=50;break;}else{label=42;break;}
 case 42: 
 var $140=(($R_1+24)|0);
 HEAP32[(($140)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $141=(($1+$_sum31)|0);
 var $142=$141;
 var $143=HEAP32[(($142)>>2)];
 var $144=($143|0)==0;
 if($144){label=46;break;}else{label=43;break;}
 case 43: 
 var $146=$143;
 var $147=HEAP32[((15624)>>2)];
 var $148=($146>>>0)<($147>>>0);
 if($148){label=45;break;}else{label=44;break;}
 case 44: 
 var $150=(($R_1+16)|0);
 HEAP32[(($150)>>2)]=$143;
 var $151=(($143+24)|0);
 HEAP32[(($151)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $154=(($1+$_sum32)|0);
 var $155=$154;
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){var $_0=$16;var $_0277=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $159=$156;
 var $160=HEAP32[((15624)>>2)];
 var $161=($159>>>0)<($160>>>0);
 if($161){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($R_1+20)|0);
 HEAP32[(($163)>>2)]=$156;
 var $164=(($156+24)|0);
 HEAP32[(($164)>>2)]=$R_1;
 var $_0=$16;var $_0277=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $168=(($1+$_sum)|0);
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=$170&3;
 var $172=($171|0)==3;
 if($172){label=52;break;}else{var $_0=$16;var $_0277=$17;label=54;break;}
 case 52: 
 HEAP32[((15616)>>2)]=$17;
 var $174=HEAP32[(($169)>>2)];
 var $175=$174&-2;
 HEAP32[(($169)>>2)]=$175;
 var $176=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $177=(($1+$_sum24)|0);
 var $178=$177;
 HEAP32[(($178)>>2)]=$176;
 var $179=$2;
 HEAP32[(($179)>>2)]=$17;
 label=134;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_0277;
 var $_0;
 var $181=HEAP32[((15624)>>2)];
 var $182=($2>>>0)<($181>>>0);
 if($182){label=133;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $184=(($1+$_sum1)|0);
 var $185=$184;
 var $186=HEAP32[(($185)>>2)];
 var $187=$186&2;
 var $188=($187|0)==0;
 if($188){label=56;break;}else{label=109;break;}
 case 56: 
 var $190=HEAP32[((15632)>>2)];
 var $191=($3|0)==($190|0);
 if($191){label=57;break;}else{label=59;break;}
 case 57: 
 var $193=HEAP32[((15620)>>2)];
 var $194=((($193)+($_0277))|0);
 HEAP32[((15620)>>2)]=$194;
 HEAP32[((15632)>>2)]=$_0;
 var $195=$194|1;
 var $196=(($_0+4)|0);
 HEAP32[(($196)>>2)]=$195;
 var $197=HEAP32[((15628)>>2)];
 var $198=($_0|0)==($197|0);
 if($198){label=58;break;}else{label=134;break;}
 case 58: 
 HEAP32[((15628)>>2)]=0;
 HEAP32[((15616)>>2)]=0;
 label=134;break;
 case 59: 
 var $201=HEAP32[((15628)>>2)];
 var $202=($3|0)==($201|0);
 if($202){label=60;break;}else{label=61;break;}
 case 60: 
 var $204=HEAP32[((15616)>>2)];
 var $205=((($204)+($_0277))|0);
 HEAP32[((15616)>>2)]=$205;
 HEAP32[((15628)>>2)]=$_0;
 var $206=$205|1;
 var $207=(($_0+4)|0);
 HEAP32[(($207)>>2)]=$206;
 var $208=$_0;
 var $209=(($208+$205)|0);
 var $210=$209;
 HEAP32[(($210)>>2)]=$205;
 label=134;break;
 case 61: 
 var $212=$186&-8;
 var $213=((($212)+($_0277))|0);
 var $214=$186>>>3;
 var $215=($186>>>0)<256;
 if($215){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $217=(($1+$_sum20)|0);
 var $218=$217;
 var $219=HEAP32[(($218)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $220=(($1+$_sum21)|0);
 var $221=$220;
 var $222=HEAP32[(($221)>>2)];
 var $223=$214<<1;
 var $224=((15648+($223<<2))|0);
 var $225=$224;
 var $226=($219|0)==($225|0);
 if($226){label=65;break;}else{label=63;break;}
 case 63: 
 var $228=$219;
 var $229=($228>>>0)<($181>>>0);
 if($229){label=73;break;}else{label=64;break;}
 case 64: 
 var $231=(($219+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==($3|0);
 if($233){label=65;break;}else{label=73;break;}
 case 65: 
 var $234=($222|0)==($219|0);
 if($234){label=66;break;}else{label=67;break;}
 case 66: 
 var $236=1<<$214;
 var $237=$236^-1;
 var $238=HEAP32[((15608)>>2)];
 var $239=$238&$237;
 HEAP32[((15608)>>2)]=$239;
 label=107;break;
 case 67: 
 var $241=($222|0)==($225|0);
 if($241){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre60=(($222+8)|0);
 var $_pre_phi61=$_pre60;label=71;break;
 case 69: 
 var $243=$222;
 var $244=($243>>>0)<($181>>>0);
 if($244){label=72;break;}else{label=70;break;}
 case 70: 
 var $246=(($222+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==($3|0);
 if($248){var $_pre_phi61=$246;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi61;
 var $249=(($219+12)|0);
 HEAP32[(($249)>>2)]=$222;
 HEAP32[(($_pre_phi61)>>2)]=$219;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $251=$2;
 var $_sum2=((($psize)+(24))|0);
 var $252=(($1+$_sum2)|0);
 var $253=$252;
 var $254=HEAP32[(($253)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $255=(($1+$_sum3)|0);
 var $256=$255;
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($251|0);
 if($258){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $260=(($1+$_sum18)|0);
 var $261=$260;
 var $262=HEAP32[(($261)>>2)];
 var $263=$262;
 var $264=($263>>>0)<($181>>>0);
 if($264){label=79;break;}else{label=76;break;}
 case 76: 
 var $266=(($262+12)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($251|0);
 if($268){label=77;break;}else{label=79;break;}
 case 77: 
 var $270=(($257+8)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==($251|0);
 if($272){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($266)>>2)]=$257;
 HEAP32[(($270)>>2)]=$262;
 var $R7_1=$257;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $275=(($1+$_sum5)|0);
 var $276=$275;
 var $277=HEAP32[(($276)>>2)];
 var $278=($277|0)==0;
 if($278){label=81;break;}else{var $R7_0=$277;var $RP9_0=$276;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $280=(($1+$_sum4)|0);
 var $281=$280;
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==0;
 if($283){var $R7_1=0;label=87;break;}else{var $R7_0=$282;var $RP9_0=$281;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $284=(($R7_0+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=83;break;}else{var $R7_0=$285;var $RP9_0=$284;label=82;break;}
 case 83: 
 var $288=(($R7_0+16)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=82;break;}
 case 84: 
 var $292=$RP9_0;
 var $293=($292>>>0)<($181>>>0);
 if($293){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $297=($254|0)==0;
 if($297){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $299=(($1+$_sum15)|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $302=((15912+($301<<2))|0);
 var $303=HEAP32[(($302)>>2)];
 var $304=($251|0)==($303|0);
 if($304){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($302)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $306=HEAP32[(($300)>>2)];
 var $307=1<<$306;
 var $308=$307^-1;
 var $309=HEAP32[((15612)>>2)];
 var $310=$309&$308;
 HEAP32[((15612)>>2)]=$310;
 label=107;break;
 case 91: 
 var $312=$254;
 var $313=HEAP32[((15624)>>2)];
 var $314=($312>>>0)<($313>>>0);
 if($314){label=95;break;}else{label=92;break;}
 case 92: 
 var $316=(($254+16)|0);
 var $317=HEAP32[(($316)>>2)];
 var $318=($317|0)==($251|0);
 if($318){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($316)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $321=(($254+20)|0);
 HEAP32[(($321)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $324=($R7_1|0)==0;
 if($324){label=107;break;}else{label=97;break;}
 case 97: 
 var $326=$R7_1;
 var $327=HEAP32[((15624)>>2)];
 var $328=($326>>>0)<($327>>>0);
 if($328){label=106;break;}else{label=98;break;}
 case 98: 
 var $330=(($R7_1+24)|0);
 HEAP32[(($330)>>2)]=$254;
 var $_sum16=((($psize)+(16))|0);
 var $331=(($1+$_sum16)|0);
 var $332=$331;
 var $333=HEAP32[(($332)>>2)];
 var $334=($333|0)==0;
 if($334){label=102;break;}else{label=99;break;}
 case 99: 
 var $336=$333;
 var $337=HEAP32[((15624)>>2)];
 var $338=($336>>>0)<($337>>>0);
 if($338){label=101;break;}else{label=100;break;}
 case 100: 
 var $340=(($R7_1+16)|0);
 HEAP32[(($340)>>2)]=$333;
 var $341=(($333+24)|0);
 HEAP32[(($341)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $344=(($1+$_sum17)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=107;break;}else{label=103;break;}
 case 103: 
 var $349=$346;
 var $350=HEAP32[((15624)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=105;break;}else{label=104;break;}
 case 104: 
 var $353=(($R7_1+20)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $358=$213|1;
 var $359=(($_0+4)|0);
 HEAP32[(($359)>>2)]=$358;
 var $360=$_0;
 var $361=(($360+$213)|0);
 var $362=$361;
 HEAP32[(($362)>>2)]=$213;
 var $363=HEAP32[((15628)>>2)];
 var $364=($_0|0)==($363|0);
 if($364){label=108;break;}else{var $_1=$213;label=110;break;}
 case 108: 
 HEAP32[((15616)>>2)]=$213;
 label=134;break;
 case 109: 
 var $367=$186&-2;
 HEAP32[(($185)>>2)]=$367;
 var $368=$_0277|1;
 var $369=(($_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=$_0;
 var $371=(($370+$_0277)|0);
 var $372=$371;
 HEAP32[(($372)>>2)]=$_0277;
 var $_1=$_0277;label=110;break;
 case 110: 
 var $_1;
 var $374=$_1>>>3;
 var $375=($_1>>>0)<256;
 if($375){label=111;break;}else{label=116;break;}
 case 111: 
 var $377=$374<<1;
 var $378=((15648+($377<<2))|0);
 var $379=$378;
 var $380=HEAP32[((15608)>>2)];
 var $381=1<<$374;
 var $382=$380&$381;
 var $383=($382|0)==0;
 if($383){label=112;break;}else{label=113;break;}
 case 112: 
 var $385=$380|$381;
 HEAP32[((15608)>>2)]=$385;
 var $_sum13_pre=((($377)+(2))|0);
 var $_pre=((15648+($_sum13_pre<<2))|0);
 var $F16_0=$379;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($377)+(2))|0);
 var $387=((15648+($_sum14<<2))|0);
 var $388=HEAP32[(($387)>>2)];
 var $389=$388;
 var $390=HEAP32[((15624)>>2)];
 var $391=($389>>>0)<($390>>>0);
 if($391){label=114;break;}else{var $F16_0=$388;var $_pre_phi=$387;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $394=(($F16_0+12)|0);
 HEAP32[(($394)>>2)]=$_0;
 var $395=(($_0+8)|0);
 HEAP32[(($395)>>2)]=$F16_0;
 var $396=(($_0+12)|0);
 HEAP32[(($396)>>2)]=$379;
 label=134;break;
 case 116: 
 var $398=$_0;
 var $399=$_1>>>8;
 var $400=($399|0)==0;
 if($400){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $402=($_1>>>0)>16777215;
 if($402){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $404=((($399)+(1048320))|0);
 var $405=$404>>>16;
 var $406=$405&8;
 var $407=$399<<$406;
 var $408=((($407)+(520192))|0);
 var $409=$408>>>16;
 var $410=$409&4;
 var $411=$410|$406;
 var $412=$407<<$410;
 var $413=((($412)+(245760))|0);
 var $414=$413>>>16;
 var $415=$414&2;
 var $416=$411|$415;
 var $417=(((14)-($416))|0);
 var $418=$412<<$415;
 var $419=$418>>>15;
 var $420=((($417)+($419))|0);
 var $421=$420<<1;
 var $422=((($420)+(7))|0);
 var $423=$_1>>>($422>>>0);
 var $424=$423&1;
 var $425=$424|$421;
 var $I19_0=$425;label=119;break;
 case 119: 
 var $I19_0;
 var $427=((15912+($I19_0<<2))|0);
 var $428=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 var $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=HEAP32[((15612)>>2)];
 var $432=1<<$I19_0;
 var $433=$431&$432;
 var $434=($433|0)==0;
 if($434){label=120;break;}else{label=121;break;}
 case 120: 
 var $436=$431|$432;
 HEAP32[((15612)>>2)]=$436;
 HEAP32[(($427)>>2)]=$398;
 var $437=(($_0+24)|0);
 var $_c=$427;
 HEAP32[(($437)>>2)]=$_c;
 var $438=(($_0+12)|0);
 HEAP32[(($438)>>2)]=$_0;
 var $439=(($_0+8)|0);
 HEAP32[(($439)>>2)]=$_0;
 label=134;break;
 case 121: 
 var $441=HEAP32[(($427)>>2)];
 var $442=($I19_0|0)==31;
 if($442){var $447=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $444=$I19_0>>>1;
 var $445=(((25)-($444))|0);
 var $447=$445;label=123;break;
 case 123: 
 var $447;
 var $448=$_1<<$447;
 var $K20_0=$448;var $T_0=$441;label=124;break;
 case 124: 
 var $T_0;
 var $K20_0;
 var $450=(($T_0+4)|0);
 var $451=HEAP32[(($450)>>2)];
 var $452=$451&-8;
 var $453=($452|0)==($_1|0);
 if($453){label=129;break;}else{label=125;break;}
 case 125: 
 var $455=$K20_0>>>31;
 var $456=(($T_0+16+($455<<2))|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=($457|0)==0;
 var $459=$K20_0<<1;
 if($458){label=126;break;}else{var $K20_0=$459;var $T_0=$457;label=124;break;}
 case 126: 
 var $461=$456;
 var $462=HEAP32[((15624)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=128;break;}else{label=127;break;}
 case 127: 
 HEAP32[(($456)>>2)]=$398;
 var $465=(($_0+24)|0);
 var $T_0_c10=$T_0;
 HEAP32[(($465)>>2)]=$T_0_c10;
 var $466=(($_0+12)|0);
 HEAP32[(($466)>>2)]=$_0;
 var $467=(($_0+8)|0);
 HEAP32[(($467)>>2)]=$_0;
 label=134;break;
 case 128: 
 _abort();
 throw "Reached an unreachable!";
 case 129: 
 var $470=(($T_0+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0;
 var $473=HEAP32[((15624)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=132;break;}else{label=130;break;}
 case 130: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=132;break;}else{label=131;break;}
 case 131: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$398;
 HEAP32[(($470)>>2)]=$398;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=134;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9bad_allocD0Ev($this){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
function __ZNSt9bad_allocD2Ev($this){
 var label=0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;
 return 1584;
}
function _scanexp($f){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[($2)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=($14&1);
 var $16=HEAP32[(($1)>>2)];
 var $17=HEAP32[(($3)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($16+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[($16)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)<10;
 if($28){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=9;break;}
 case 9: 
 var $30=HEAP32[(($3)>>2)];
 var $31=($30|0)==0;
 if($31){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $33=HEAP32[(($1)>>2)];
 var $34=((($33)-(1))|0);
 HEAP32[(($1)>>2)]=$34;
 var $neg_0=$15;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $36=((($c_0)-(48))|0);
 var $37=($36>>>0)>9;
 if($37){label=12;break;}else{var $c_141=$c_0;var $x_042=0;label=14;break;}
 case 12: 
 var $39=HEAP32[(($3)>>2)];
 var $40=($39|0)==0;
 if($40){var $_0$1=-2147483648;var $_0$0=0;label=32;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP32[(($1)>>2)];
 var $43=((($42)-(1))|0);
 HEAP32[(($1)>>2)]=$43;
 var $_0$1=-2147483648;var $_0$0=0;label=32;break;
 case 14: 
 var $x_042;
 var $c_141;
 var $44=((($c_141)-(48))|0);
 var $45=((($44)+($x_042))|0);
 var $46=HEAP32[(($1)>>2)];
 var $47=HEAP32[(($3)>>2)];
 var $48=($46>>>0)<($47>>>0);
 if($48){label=15;break;}else{label=16;break;}
 case 15: 
 var $50=(($46+1)|0);
 HEAP32[(($1)>>2)]=$50;
 var $51=HEAP8[($46)];
 var $52=($51&255);
 var $c_1_be=$52;label=17;break;
 case 16: 
 var $54=___shgetc($f);
 var $c_1_be=$54;label=17;break;
 case 17: 
 var $c_1_be;
 var $55=((($c_1_be)-(48))|0);
 var $56=($55>>>0)<10;
 var $57=($45|0)<214748364;
 var $58=$56&$57;
 if($58){label=18;break;}else{label=19;break;}
 case 18: 
 var $phitmp49=((($45)*(10))&-1);
 var $c_141=$c_1_be;var $x_042=$phitmp49;label=14;break;
 case 19: 
 var $phitmp$0=$45;
 var $phitmp$1=((((($45|0)<0))|0)?-1:0);
 if($56){var $c_236=$c_1_be;var $y_037$1=$phitmp$1;var $y_037$0=$phitmp$0;label=21;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=20;break;}
 case 20: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $60=((($c_2_lcssa)-(48))|0);
 var $61=($60>>>0)<10;
 if($61){label=25;break;}else{label=29;break;}
 case 21: 
 var $y_037$0;
 var $y_037$1;
 var $c_236;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $62$0=___muldi3($y_037$0,$y_037$1,$$etemp$0$0,$$etemp$0$1);var $62$1=tempRet0;
 var $63$0=$c_236;
 var $63$1=((((($c_236|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $64$0=_i64Add($63$0,$63$1,$$etemp$1$0,$$etemp$1$1);var $64$1=tempRet0;
 var $65$0=_i64Add($64$0,$64$1,$62$0,$62$1);var $65$1=tempRet0;
 var $66=HEAP32[(($1)>>2)];
 var $67=HEAP32[(($3)>>2)];
 var $68=($66>>>0)<($67>>>0);
 if($68){label=22;break;}else{label=23;break;}
 case 22: 
 var $70=(($66+1)|0);
 HEAP32[(($1)>>2)]=$70;
 var $71=HEAP8[($66)];
 var $72=($71&255);
 var $c_2_be=$72;label=24;break;
 case 23: 
 var $74=___shgetc($f);
 var $c_2_be=$74;label=24;break;
 case 24: 
 var $c_2_be;
 var $75=((($c_2_be)-(48))|0);
 var $76=($75>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $77=(($65$1|0) < ($$etemp$2$1|0)) | (((($65$1|0) == ($$etemp$2$1|0) & ($65$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond35=$76&$77;
 if($or_cond35){var $c_236=$c_2_be;var $y_037$1=$65$1;var $y_037$0=$65$0;label=21;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$65$1;var $y_0_lcssa$0=$65$0;label=20;break;}
 case 25: 
 var $78=HEAP32[(($1)>>2)];
 var $79=HEAP32[(($3)>>2)];
 var $80=($78>>>0)<($79>>>0);
 if($80){label=26;break;}else{label=27;break;}
 case 26: 
 var $82=(($78+1)|0);
 HEAP32[(($1)>>2)]=$82;
 var $83=HEAP8[($78)];
 var $84=($83&255);
 var $c_3_be=$84;label=28;break;
 case 27: 
 var $86=___shgetc($f);
 var $c_3_be=$86;label=28;break;
 case 28: 
 var $c_3_be;
 var $87=((($c_3_be)-(48))|0);
 var $88=($87>>>0)<10;
 if($88){label=25;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($3)>>2)];
 var $90=($89|0)==0;
 if($90){label=31;break;}else{label=30;break;}
 case 30: 
 var $92=HEAP32[(($1)>>2)];
 var $93=((($92)-(1))|0);
 HEAP32[(($1)>>2)]=$93;
 label=31;break;
 case 31: 
 var $95=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $96$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $96$1=tempRet0;
 var $97$0=($95?$96$0:$y_0_lcssa$0);
 var $97$1=($95?$96$1:$y_0_lcssa$1);
 var $_0$1=$97$1;var $_0$0=$97$0;label=32;break;
 case 32: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }
}
function ___shgetc($f){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$f;
 var $10=___uflow($9);
 var $11=($10|0)<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=(($f+100)|0);
 HEAP32[(($13)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $15=HEAP32[(($1)>>2)];
 var $16=($15|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert26_phi_trans_insert_phi_trans_insert=(($f+4)|0);
 var $_pre27_pre_pre=HEAP32[(($_phi_trans_insert26_phi_trans_insert_phi_trans_insert)>>2)];
 if($16){var $_pre27_pre=$_pre27_pre_pre;label=8;break;}else{label=6;break;}
 case 6: 
 var $18=$_pre;
 var $19=$_pre27_pre_pre;
 var $20=((($18)-($19))|0);
 var $21=(($f+108)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($15)-($22))|0);
 var $24=((($23)-(1))|0);
 var $25=($20|0)>($24|0);
 if($25){label=7;break;}else{var $_pre27_pre=$_pre27_pre_pre;label=8;break;}
 case 7: 
 var $27=(($_pre27_pre_pre+$24)|0);
 var $28=(($f+100)|0);
 HEAP32[(($28)>>2)]=$27;
 var $_pre27=$_pre27_pre_pre;label=9;break;
 case 8: 
 var $_pre27_pre;
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$_pre;
 var $_pre27=$_pre27_pre;label=9;break;
 case 9: 
 var $_pre27;
 var $31=($_pre|0)==0;
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 var $33=$_pre;
 var $34=$_pre27;
 var $35=(($f+108)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($33)+(1))|0);
 var $38=((($37)-($34))|0);
 var $39=((($38)+($36))|0);
 HEAP32[(($35)>>2)]=$39;
 label=11;break;
 case 11: 
 var $40=((($_pre27)-(1))|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=($42|0)==($10|0);
 if($43){var $_0=$10;label=13;break;}else{label=12;break;}
 case 12: 
 var $45=(($10)&255);
 HEAP8[($40)]=$45;
 var $_0=$10;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($f+74)|0);
 var $6=HEAP8[($5)];
 var $7=((($6)-(1))&255);
 var $8=$7|$6;
 HEAP8[($5)]=$8;
 var $9=(($f+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($f+44)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($10>>>0)>($12>>>0);
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($f+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($f,0,0);
 label=4;break;
 case 4: 
 var $19=(($f+16)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($f+28)|0);
 HEAP32[(($20)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 var $21=(($f)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&20;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 var $26=$22&4;
 var $27=($26|0)==0;
 if($27){var $_0=-1;label=10;break;}else{label=6;break;}
 case 6: 
 var $29=$22|32;
 HEAP32[(($21)>>2)]=$29;
 var $_0=-1;label=10;break;
 case 7: 
 var $30=HEAP32[(($11)>>2)];
 HEAP32[(($1)>>2)]=$30;
 var $31=(($f+4)|0);
 HEAP32[(($31)>>2)]=$30;
 label=8;break;
 case 8: 
 var $33=(($f+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($f,$c,1);
 var $36=($35|0)==1;
 if($36){label=9;break;}else{var $_0=-1;label=10;break;}
 case 9: 
 var $38=HEAP8[($c)];
 var $39=($38&255);
 var $_0=$39;label=10;break;
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }
}
function _strtold_l($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+624)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i_i=sp;
 var $f_i_i=(sp)+(512);
 var $1=$f_i_i;
 _memset($1, 0, 108)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 var $6=(($f_i_i+104)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=$s;
 var $8=$7^-1;
 var $9=(($f_i_i+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=(($f_i_i+100)|0);
 HEAP32[(($10)>>2)]=-1;
 var $13=$s;var $12=-1;label=2;break;
 case 2: 
 var $12;
 var $13;
 var $14=($13>>>0)<($12>>>0);
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=(($13+1)|0);
 HEAP32[(($2)>>2)]=$16;
 var $17=HEAP8[($13)];
 var $18=($17&255);
 var $22=$18;label=5;break;
 case 4: 
 var $20=___shgetc($f_i_i);
 var $22=$20;label=5;break;
 case 5: 
 var $22;
 var $23=_isspace($22);
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre22=HEAP32[(($10)>>2)];
 var $13=$_pre;var $12=$_pre22;label=2;break;
 case 7: 
 var $26=($22|0)==45;
 if(($22|0)==45|($22|0)==43){ label=8;break;}else{var $c_0_i=$22;var $sign_0_i=1;label=11;break;}
 case 8: 
 var $28=($26&1);
 var $29=$28<<1;
 var $30=(((1)-($29))|0);
 var $31=HEAP32[(($2)>>2)];
 var $32=HEAP32[(($10)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=(($31+1)|0);
 HEAP32[(($2)>>2)]=$35;
 var $36=HEAP8[($31)];
 var $37=($36&255);
 var $c_0_i=$37;var $sign_0_i=$30;label=11;break;
 case 10: 
 var $39=___shgetc($f_i_i);
 var $c_0_i=$39;var $sign_0_i=$30;label=11;break;
 case 11: 
 var $sign_0_i;
 var $c_0_i;
 var $i_0148_i=0;var $c_1149_i=$c_0_i;label=12;break;
 case 12: 
 var $c_1149_i;
 var $i_0148_i;
 var $42=$c_1149_i|32;
 var $43=((744+$i_0148_i)|0);
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24);
 var $46=($42|0)==($45|0);
 if($46){label=13;break;}else{var $i_0_lcssa_i=$i_0148_i;var $c_1_lcssa_i=$c_1149_i;label=18;break;}
 case 13: 
 var $48=($i_0148_i>>>0)<7;
 if($48){label=14;break;}else{var $c_2_i=$c_1149_i;label=17;break;}
 case 14: 
 var $50=HEAP32[(($2)>>2)];
 var $51=HEAP32[(($10)>>2)];
 var $52=($50>>>0)<($51>>>0);
 if($52){label=15;break;}else{label=16;break;}
 case 15: 
 var $54=(($50+1)|0);
 HEAP32[(($2)>>2)]=$54;
 var $55=HEAP8[($50)];
 var $56=($55&255);
 var $c_2_i=$56;label=17;break;
 case 16: 
 var $58=___shgetc($f_i_i);
 var $c_2_i=$58;label=17;break;
 case 17: 
 var $c_2_i;
 var $60=((($i_0148_i)+(1))|0);
 var $61=($60>>>0)<8;
 if($61){var $i_0148_i=$60;var $c_1149_i=$c_2_i;label=12;break;}else{var $i_0_lcssa_i=$60;var $c_1_lcssa_i=$c_2_i;label=18;break;}
 case 18: 
 var $c_1_lcssa_i;
 var $i_0_lcssa_i;
 if(($i_0_lcssa_i|0)==3){ label=21;break;}else if(($i_0_lcssa_i|0)==8){ label=25;break;}else{label=19;break;}
 case 19: 
 var $63=($i_0_lcssa_i>>>0)<4;
 if($63){label=26;break;}else{label=20;break;}
 case 20: 
 var $65=($i_0_lcssa_i|0)==8;
 if($65){label=25;break;}else{label=21;break;}
 case 21: 
 var $66=HEAP32[(($10)>>2)];
 var $67=($66|0)==0;
 if($67){label=25;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($2)>>2)];
 var $70=((($69)-(1))|0);
 HEAP32[(($2)>>2)]=$70;
 var $notrhs_i=($i_0_lcssa_i>>>0)<4;
 if($notrhs_i){label=25;break;}else{var $i_1146_i=$i_0_lcssa_i;var $71=$70;label=23;break;}
 case 23: 
 var $71;
 var $i_1146_i;
 var $72=((($71)-(1))|0);
 var $73=((($i_1146_i)-(1))|0);
 var $74=($73>>>0)>3;
 if($74){var $i_1146_i=$73;var $71=$72;label=23;break;}else{label=24;break;}
 case 24: 
 HEAP32[(($2)>>2)]=$72;
 label=25;break;
 case 25: 
 var $75=($sign_0_i|0);
 var $76=($75)*(Infinity);
 var $77=$76;
 var $_0_i=$77;label=289;break;
 case 26: 
 var $79=($i_0_lcssa_i|0)==0;
 if($79){label=27;break;}else{label=48;break;}
 case 27: 
 var $80=$c_1_lcssa_i|32;
 var $81=($80|0)==110;
 if($81){label=28;break;}else{label=51;break;}
 case 28: 
 var $83=HEAP32[(($2)>>2)];
 var $84=HEAP32[(($10)>>2)];
 var $85=($83>>>0)<($84>>>0);
 if($85){label=29;break;}else{label=30;break;}
 case 29: 
 var $87=(($83+1)|0);
 HEAP32[(($2)>>2)]=$87;
 var $88=HEAP8[($83)];
 var $89=($88&255);
 var $c_4_i=$89;label=31;break;
 case 30: 
 var $91=___shgetc($f_i_i);
 var $c_4_i=$91;label=31;break;
 case 31: 
 var $c_4_i;
 var $93=$c_4_i|32;
 var $94=($93|0)==97;
 if($94){label=284;break;}else{label=48;break;}
 case 32: 
 var $95=HEAP32[(($2)>>2)];
 var $96=HEAP32[(($10)>>2)];
 var $97=($95>>>0)<($96>>>0);
 if($97){label=33;break;}else{label=34;break;}
 case 33: 
 var $99=(($95+1)|0);
 HEAP32[(($2)>>2)]=$99;
 var $100=HEAP8[($95)];
 var $101=($100&255);
 var $105=$101;label=35;break;
 case 34: 
 var $103=___shgetc($f_i_i);
 var $105=$103;label=35;break;
 case 35: 
 var $105;
 var $106=($105|0)==40;
 if($106){var $i_4_i=1;label=38;break;}else{label=36;break;}
 case 36: 
 var $108=HEAP32[(($10)>>2)];
 var $109=($108|0)==0;
 if($109){var $_0_i=NaN;label=289;break;}else{label=37;break;}
 case 37: 
 var $111=HEAP32[(($2)>>2)];
 var $112=((($111)-(1))|0);
 HEAP32[(($2)>>2)]=$112;
 var $_0_i=NaN;label=289;break;
 case 38: 
 var $i_4_i;
 var $113=HEAP32[(($2)>>2)];
 var $114=HEAP32[(($10)>>2)];
 var $115=($113>>>0)<($114>>>0);
 if($115){label=39;break;}else{label=40;break;}
 case 39: 
 var $117=(($113+1)|0);
 HEAP32[(($2)>>2)]=$117;
 var $118=HEAP8[($113)];
 var $119=($118&255);
 var $123=$119;label=41;break;
 case 40: 
 var $121=___shgetc($f_i_i);
 var $123=$121;label=41;break;
 case 41: 
 var $123;
 var $124=((($123)-(48))|0);
 var $125=($124>>>0)<10;
 var $126=((($123)-(65))|0);
 var $127=($126>>>0)<26;
 var $or_cond89_i=$125|$127;
 if($or_cond89_i){label=47;break;}else{label=42;break;}
 case 42: 
 var $129=((($123)-(97))|0);
 var $130=($129>>>0)<26;
 var $131=($123|0)==95;
 var $or_cond5_i=$130|$131;
 if($or_cond5_i){label=47;break;}else{label=43;break;}
 case 43: 
 var $133=($123|0)==41;
 if($133){var $_0_i=NaN;label=289;break;}else{label=44;break;}
 case 44: 
 var $135=HEAP32[(($10)>>2)];
 var $136=($135|0)==0;
 if($136){var $_0_i=NaN;label=289;break;}else{label=45;break;}
 case 45: 
 var $138=HEAP32[(($2)>>2)];
 var $139=((($138)-(1))|0);
 HEAP32[(($2)>>2)]=$139;
 var $140=($i_4_i|0)==0;
 if($140){var $_0_i=NaN;label=289;break;}else{var $_in_i=$i_4_i;var $141=$139;label=46;break;}
 case 46: 
 var $141;
 var $_in_i;
 var $142=((($_in_i)-(1))|0);
 var $143=((($141)-(1))|0);
 var $144=($142|0)==0;
 if($144){label=288;break;}else{var $_in_i=$142;var $141=$143;label=46;break;}
 case 47: 
 var $146=((($i_4_i)+(1))|0);
 var $i_4_i=$146;label=38;break;
 case 48: 
 var $147=HEAP32[(($10)>>2)];
 var $148=($147|0)==0;
 if($148){label=50;break;}else{label=49;break;}
 case 49: 
 var $150=HEAP32[(($2)>>2)];
 var $151=((($150)-(1))|0);
 HEAP32[(($2)>>2)]=$151;
 label=50;break;
 case 50: 
 var $153=___errno_location();
 HEAP32[(($153)>>2)]=22;
 HEAP32[(($6)>>2)]=0;
 var $154=HEAP32[(($3)>>2)];
 var $155=HEAP32[(($2)>>2)];
 var $156=$154;
 var $157=$155;
 var $158=((($156)-($157))|0);
 HEAP32[(($9)>>2)]=$158;
 HEAP32[(($10)>>2)]=$154;
 var $_0_i=0;label=289;break;
 case 51: 
 var $159=($c_1_lcssa_i|0)==48;
 if($159){label=52;break;}else{var $c_6_i=$c_1_lcssa_i;label=132;break;}
 case 52: 
 var $161=HEAP32[(($2)>>2)];
 var $162=HEAP32[(($10)>>2)];
 var $163=($161>>>0)<($162>>>0);
 if($163){label=53;break;}else{label=54;break;}
 case 53: 
 var $165=(($161+1)|0);
 HEAP32[(($2)>>2)]=$165;
 var $166=HEAP8[($161)];
 var $167=($166&255);
 var $171=$167;label=55;break;
 case 54: 
 var $169=___shgetc($f_i_i);
 var $171=$169;label=55;break;
 case 55: 
 var $171;
 var $172=$171|32;
 var $173=($172|0)==120;
 if($173){label=56;break;}else{label=130;break;}
 case 56: 
 var $175=HEAP32[(($2)>>2)];
 var $176=HEAP32[(($10)>>2)];
 var $177=($175>>>0)<($176>>>0);
 if($177){label=57;break;}else{label=58;break;}
 case 57: 
 var $179=(($175+1)|0);
 HEAP32[(($2)>>2)]=$179;
 var $180=HEAP8[($175)];
 var $181=($180&255);
 var $c_0_i_i=$181;var $gotdig_0_i_i=0;label=59;break;
 case 58: 
 var $183=___shgetc($f_i_i);
 var $c_0_i_i=$183;var $gotdig_0_i_i=0;label=59;break;
 case 59: 
 var $gotdig_0_i_i;
 var $c_0_i_i;
 if(($c_0_i_i|0)==48){ label=60;break;}else if(($c_0_i_i|0)==46){ label=63;break;}else{var $c_2_i_i=$c_0_i_i;var $dc_0_i_i$1=0;var $dc_0_i_i$0=0;var $rp_1_i_i$1=0;var $rp_1_i_i$0=0;var $gotdig_2_i_i=$gotdig_0_i_i;var $gotrad_0_i_i=0;var $gottail_0_i_i=0;var $scale_0_i_i=1;var $y_0_i_i=0;var $x_0_i_i=0;label=72;break;}
 case 60: 
 var $185=HEAP32[(($2)>>2)];
 var $186=HEAP32[(($10)>>2)];
 var $187=($185>>>0)<($186>>>0);
 if($187){label=61;break;}else{label=62;break;}
 case 61: 
 var $189=(($185+1)|0);
 HEAP32[(($2)>>2)]=$189;
 var $190=HEAP8[($185)];
 var $191=($190&255);
 var $c_0_i_i=$191;var $gotdig_0_i_i=1;label=59;break;
 case 62: 
 var $193=___shgetc($f_i_i);
 var $c_0_i_i=$193;var $gotdig_0_i_i=1;label=59;break;
 case 63: 
 var $195=HEAP32[(($2)>>2)];
 var $196=HEAP32[(($10)>>2)];
 var $197=($195>>>0)<($196>>>0);
 if($197){label=64;break;}else{label=65;break;}
 case 64: 
 var $199=(($195+1)|0);
 HEAP32[(($2)>>2)]=$199;
 var $200=HEAP8[($195)];
 var $201=($200&255);
 var $c_1_ph_i_i=$201;label=66;break;
 case 65: 
 var $203=___shgetc($f_i_i);
 var $c_1_ph_i_i=$203;label=66;break;
 case 66: 
 var $c_1_ph_i_i;
 var $204=($c_1_ph_i_i|0)==48;
 if($204){var $rp_0113_i_i$1=-1;var $rp_0113_i_i$0=-1;label=67;break;}else{var $c_2_i_i=$c_1_ph_i_i;var $dc_0_i_i$1=0;var $dc_0_i_i$0=0;var $rp_1_i_i$1=0;var $rp_1_i_i$0=0;var $gotdig_2_i_i=$gotdig_0_i_i;var $gotrad_0_i_i=1;var $gottail_0_i_i=0;var $scale_0_i_i=1;var $y_0_i_i=0;var $x_0_i_i=0;label=72;break;}
 case 67: 
 var $rp_0113_i_i$0;
 var $rp_0113_i_i$1;
 var $205=HEAP32[(($2)>>2)];
 var $206=HEAP32[(($10)>>2)];
 var $207=($205>>>0)<($206>>>0);
 if($207){label=68;break;}else{label=69;break;}
 case 68: 
 var $209=(($205+1)|0);
 HEAP32[(($2)>>2)]=$209;
 var $210=HEAP8[($205)];
 var $211=($210&255);
 var $215=$211;label=70;break;
 case 69: 
 var $213=___shgetc($f_i_i);
 var $215=$213;label=70;break;
 case 70: 
 var $215;
 var $216=($215|0)==48;
 if($216){label=71;break;}else{var $c_2_i_i=$215;var $dc_0_i_i$1=0;var $dc_0_i_i$0=0;var $rp_1_i_i$1=$rp_0113_i_i$1;var $rp_1_i_i$0=$rp_0113_i_i$0;var $gotdig_2_i_i=1;var $gotrad_0_i_i=1;var $gottail_0_i_i=0;var $scale_0_i_i=1;var $y_0_i_i=0;var $x_0_i_i=0;label=72;break;}
 case 71: 
 var $$etemp$0$0=-1;
 var $$etemp$0$1=-1;
 var $phitmp_i_i$0=_i64Add($rp_0113_i_i$0,$rp_0113_i_i$1,$$etemp$0$0,$$etemp$0$1);var $phitmp_i_i$1=tempRet0;
 var $rp_0113_i_i$1=$phitmp_i_i$1;var $rp_0113_i_i$0=$phitmp_i_i$0;label=67;break;
 case 72: 
 var $x_0_i_i;
 var $y_0_i_i;
 var $scale_0_i_i;
 var $gottail_0_i_i;
 var $gotrad_0_i_i;
 var $gotdig_2_i_i;
 var $rp_1_i_i$0;
 var $rp_1_i_i$1;
 var $dc_0_i_i$0;
 var $dc_0_i_i$1;
 var $c_2_i_i;
 var $217=((($c_2_i_i)-(48))|0);
 var $218=($217>>>0)<10;
 if($218){var $d_0_i_i=$217;label=77;break;}else{label=73;break;}
 case 73: 
 var $220=$c_2_i_i|32;
 var $221=((($220)-(97))|0);
 var $222=($221>>>0)<6;
 var $223=($c_2_i_i|0)==46;
 var $or_cond_i_i=$222|$223;
 if($or_cond_i_i){label=74;break;}else{var $c_2_lcssa_i_i=$c_2_i_i;label=87;break;}
 case 74: 
 if($223){label=75;break;}else{label=76;break;}
 case 75: 
 var $225=($gotrad_0_i_i|0)==0;
 if($225){var $dc_1_i_i$1=$dc_0_i_i$1;var $dc_1_i_i$0=$dc_0_i_i$0;var $rp_2_i_i$1=$dc_0_i_i$1;var $rp_2_i_i$0=$dc_0_i_i$0;var $gotdig_3_i_i=$gotdig_2_i_i;var $gotrad_1_i_i=1;var $gottail_2_i_i=$gottail_0_i_i;var $scale_2_i_i=$scale_0_i_i;var $y_2_i_i=$y_0_i_i;var $x_2_i_i=$x_0_i_i;label=84;break;}else{var $c_2_lcssa_i_i=46;label=87;break;}
 case 76: 
 var $227=($c_2_i_i|0)>57;
 var $228=((($220)-(87))|0);
 var $_130_i_i=($227?$228:$217);
 var $d_0_i_i=$_130_i_i;label=77;break;
 case 77: 
 var $d_0_i_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 var $229=(($dc_0_i_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i_i$0>>>0) <  ($$etemp$1$0>>>0))));
 if($229){label=78;break;}else{label=79;break;}
 case 78: 
 var $231=$x_0_i_i<<4;
 var $232=((($d_0_i_i)+($231))|0);
 var $gottail_1_i_i=$gottail_0_i_i;var $scale_1_i_i=$scale_0_i_i;var $y_1_i_i=$y_0_i_i;var $x_1_i_i=$232;label=83;break;
 case 79: 
 var $$etemp$2$0=14;
 var $$etemp$2$1=0;
 var $234=(($dc_0_i_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($234){label=80;break;}else{label=81;break;}
 case 80: 
 var $236=($d_0_i_i|0);
 var $237=($scale_0_i_i)*((0.0625));
 var $238=($237)*($236);
 var $239=($y_0_i_i)+($238);
 var $gottail_1_i_i=$gottail_0_i_i;var $scale_1_i_i=$237;var $y_1_i_i=$239;var $x_1_i_i=$x_0_i_i;label=83;break;
 case 81: 
 var $241=($d_0_i_i|0)!=0;
 var $242=($gottail_0_i_i|0)==0;
 var $or_cond95_i_i=$241&$242;
 if($or_cond95_i_i){label=82;break;}else{var $gottail_1_i_i=$gottail_0_i_i;var $scale_1_i_i=$scale_0_i_i;var $y_1_i_i=$y_0_i_i;var $x_1_i_i=$x_0_i_i;label=83;break;}
 case 82: 
 var $244=($scale_0_i_i)*((0.5));
 var $245=($y_0_i_i)+($244);
 var $gottail_1_i_i=1;var $scale_1_i_i=$scale_0_i_i;var $y_1_i_i=$245;var $x_1_i_i=$x_0_i_i;label=83;break;
 case 83: 
 var $x_1_i_i;
 var $y_1_i_i;
 var $scale_1_i_i;
 var $gottail_1_i_i;
 var $$etemp$3$0=1;
 var $$etemp$3$1=0;
 var $247$0=_i64Add($dc_0_i_i$0,$dc_0_i_i$1,$$etemp$3$0,$$etemp$3$1);var $247$1=tempRet0;
 var $dc_1_i_i$1=$247$1;var $dc_1_i_i$0=$247$0;var $rp_2_i_i$1=$rp_1_i_i$1;var $rp_2_i_i$0=$rp_1_i_i$0;var $gotdig_3_i_i=1;var $gotrad_1_i_i=$gotrad_0_i_i;var $gottail_2_i_i=$gottail_1_i_i;var $scale_2_i_i=$scale_1_i_i;var $y_2_i_i=$y_1_i_i;var $x_2_i_i=$x_1_i_i;label=84;break;
 case 84: 
 var $x_2_i_i;
 var $y_2_i_i;
 var $scale_2_i_i;
 var $gottail_2_i_i;
 var $gotrad_1_i_i;
 var $gotdig_3_i_i;
 var $rp_2_i_i$0;
 var $rp_2_i_i$1;
 var $dc_1_i_i$0;
 var $dc_1_i_i$1;
 var $248=HEAP32[(($2)>>2)];
 var $249=HEAP32[(($10)>>2)];
 var $250=($248>>>0)<($249>>>0);
 if($250){label=85;break;}else{label=86;break;}
 case 85: 
 var $252=(($248+1)|0);
 HEAP32[(($2)>>2)]=$252;
 var $253=HEAP8[($248)];
 var $254=($253&255);
 var $c_2_i_i=$254;var $dc_0_i_i$1=$dc_1_i_i$1;var $dc_0_i_i$0=$dc_1_i_i$0;var $rp_1_i_i$1=$rp_2_i_i$1;var $rp_1_i_i$0=$rp_2_i_i$0;var $gotdig_2_i_i=$gotdig_3_i_i;var $gotrad_0_i_i=$gotrad_1_i_i;var $gottail_0_i_i=$gottail_2_i_i;var $scale_0_i_i=$scale_2_i_i;var $y_0_i_i=$y_2_i_i;var $x_0_i_i=$x_2_i_i;label=72;break;
 case 86: 
 var $256=___shgetc($f_i_i);
 var $c_2_i_i=$256;var $dc_0_i_i$1=$dc_1_i_i$1;var $dc_0_i_i$0=$dc_1_i_i$0;var $rp_1_i_i$1=$rp_2_i_i$1;var $rp_1_i_i$0=$rp_2_i_i$0;var $gotdig_2_i_i=$gotdig_3_i_i;var $gotrad_0_i_i=$gotrad_1_i_i;var $gottail_0_i_i=$gottail_2_i_i;var $scale_0_i_i=$scale_2_i_i;var $y_0_i_i=$y_2_i_i;var $x_0_i_i=$x_2_i_i;label=72;break;
 case 87: 
 var $c_2_lcssa_i_i;
 var $258=($gotdig_2_i_i|0)==0;
 if($258){label=88;break;}else{label=92;break;}
 case 88: 
 var $260=HEAP32[(($10)>>2)];
 var $261=($260|0)==0;
 if($261){label=91;break;}else{label=89;break;}
 case 89: 
 var $263=HEAP32[(($2)>>2)];
 var $264=((($263)-(2))|0);
 HEAP32[(($2)>>2)]=$264;
 var $265=($gotrad_0_i_i|0)==0;
 if($265){label=91;break;}else{label=90;break;}
 case 90: 
 var $267=((($263)-(3))|0);
 HEAP32[(($2)>>2)]=$267;
 label=91;break;
 case 91: 
 var $268=($sign_0_i|0);
 var $269=($268)*(0);
 var $_0_i=$269;label=289;break;
 case 92: 
 var $271=($gotrad_0_i_i|0)==0;
 var $dc_0_rp_1_i_i$0=($271?$dc_0_i_i$0:$rp_1_i_i$0);
 var $dc_0_rp_1_i_i$1=($271?$dc_0_i_i$1:$rp_1_i_i$1);
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;
 var $272=(($dc_0_i_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i_i$0>>>0) <  ($$etemp$4$0>>>0))));
 if($272){var $x_3105_i_i=$x_0_i_i;var $dc_2106_i_i$1=$dc_0_i_i$1;var $dc_2106_i_i$0=$dc_0_i_i$0;label=93;break;}else{var $x_3_lcssa_i_i=$x_0_i_i;label=94;break;}
 case 93: 
 var $dc_2106_i_i$0;
 var $dc_2106_i_i$1;
 var $x_3105_i_i;
 var $273=$x_3105_i_i<<4;
 var $$etemp$5$0=1;
 var $$etemp$5$1=0;
 var $274$0=_i64Add($dc_2106_i_i$0,$dc_2106_i_i$1,$$etemp$5$0,$$etemp$5$1);var $274$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 var $275=(($274$1|0) < ($$etemp$6$1|0)) | (((($274$1|0) == ($$etemp$6$1|0) & ($274$0>>>0) <  ($$etemp$6$0>>>0))));
 if($275){var $x_3105_i_i=$273;var $dc_2106_i_i$1=$274$1;var $dc_2106_i_i$0=$274$0;label=93;break;}else{var $x_3_lcssa_i_i=$273;label=94;break;}
 case 94: 
 var $x_3_lcssa_i_i;
 var $276=$c_2_lcssa_i_i|32;
 var $277=($276|0)==112;
 if($277){label=95;break;}else{label=98;break;}
 case 95: 
 var $279$0=_scanexp($f_i_i);
 var $279$1=tempRet0;
 var $$etemp$7$0=0;
 var $$etemp$7$1=-2147483648;
 var $280=(($279$0|0) == ($$etemp$7$0|0)) & (($279$1|0) == ($$etemp$7$1|0));
 if($280){label=96;break;}else{var $e2_0_i_i$1=$279$1;var $e2_0_i_i$0=$279$0;label=100;break;}
 case 96: 
 var $282=HEAP32[(($10)>>2)];
 var $283=($282|0)==0;
 if($283){var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=100;break;}else{label=97;break;}
 case 97: 
 var $285=HEAP32[(($2)>>2)];
 var $286=((($285)-(1))|0);
 HEAP32[(($2)>>2)]=$286;
 var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=100;break;
 case 98: 
 var $288=HEAP32[(($10)>>2)];
 var $289=($288|0)==0;
 if($289){var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=100;break;}else{label=99;break;}
 case 99: 
 var $291=HEAP32[(($2)>>2)];
 var $292=((($291)-(1))|0);
 HEAP32[(($2)>>2)]=$292;
 var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=100;break;
 case 100: 
 var $e2_0_i_i$0;
 var $e2_0_i_i$1;
 var $294$0=($dc_0_rp_1_i_i$0<<2)|(0>>>30);
 var $294$1=($dc_0_rp_1_i_i$1<<2)|($dc_0_rp_1_i_i$0>>>30);
 var $$etemp$8$0=-32;
 var $$etemp$8$1=-1;
 var $295$0=_i64Add($294$0,$294$1,$$etemp$8$0,$$etemp$8$1);var $295$1=tempRet0;
 var $296$0=_i64Add($295$0,$295$1,$e2_0_i_i$0,$e2_0_i_i$1);var $296$1=tempRet0;
 var $297=($x_3_lcssa_i_i|0)==0;
 if($297){label=101;break;}else{label=102;break;}
 case 101: 
 var $299=($sign_0_i|0);
 var $300=($299)*(0);
 var $_0_i=$300;label=289;break;
 case 102: 
 var $$etemp$9$0=1074;
 var $$etemp$9$1=0;
 var $302=(($296$1|0) > ($$etemp$9$1|0)) | (((($296$1|0) == ($$etemp$9$1|0) & ($296$0>>>0) >  ($$etemp$9$0>>>0))));
 if($302){label=103;break;}else{label=104;break;}
 case 103: 
 var $304=___errno_location();
 HEAP32[(($304)>>2)]=34;
 var $305=($sign_0_i|0);
 var $306=($305)*((1.7976931348623157e+308));
 var $307=($306)*((1.7976931348623157e+308));
 var $_0_i=$307;label=289;break;
 case 104: 
 var $$etemp$10$0=-1180;
 var $$etemp$10$1=-1;
 var $309=(($296$1|0) < ($$etemp$10$1|0)) | (((($296$1|0) == ($$etemp$10$1|0) & ($296$0>>>0) <  ($$etemp$10$0>>>0))));
 if($309){label=106;break;}else{label=105;break;}
 case 105: 
 var $310=($x_3_lcssa_i_i|0)>-1;
 if($310){var $x_4100_i_i=$x_3_lcssa_i_i;var $y_3101_i_i=$y_0_i_i;var $e2_1102_i_i$1=$296$1;var $e2_1102_i_i$0=$296$0;label=107;break;}else{var $x_4_lcssa_i_i=$x_3_lcssa_i_i;var $y_3_lcssa_i_i=$y_0_i_i;var $e2_1_lcssa_i_i$1=$296$1;var $e2_1_lcssa_i_i$0=$296$0;label=110;break;}
 case 106: 
 var $312=___errno_location();
 HEAP32[(($312)>>2)]=34;
 var $313=($sign_0_i|0);
 var $314=($313)*((2.2250738585072014e-308));
 var $315=($314)*((2.2250738585072014e-308));
 var $_0_i=$315;label=289;break;
 case 107: 
 var $e2_1102_i_i$0;
 var $e2_1102_i_i$1;
 var $y_3101_i_i;
 var $x_4100_i_i;
 var $316=$y_3101_i_i<(0.5);
 var $317=$x_4100_i_i<<1;
 if($316){var $_pn_i_i=$y_3101_i_i;var $x_5_i_i=$317;label=109;break;}else{label=108;break;}
 case 108: 
 var $319=$317|1;
 var $320=($y_3101_i_i)-(1);
 var $_pn_i_i=$320;var $x_5_i_i=$319;label=109;break;
 case 109: 
 var $x_5_i_i;
 var $_pn_i_i;
 var $y_4_i_i=($y_3101_i_i)+($_pn_i_i);
 var $$etemp$11$0=-1;
 var $$etemp$11$1=-1;
 var $322$0=_i64Add($e2_1102_i_i$0,$e2_1102_i_i$1,$$etemp$11$0,$$etemp$11$1);var $322$1=tempRet0;
 var $323=($x_5_i_i|0)>-1;
 if($323){var $x_4100_i_i=$x_5_i_i;var $y_3101_i_i=$y_4_i_i;var $e2_1102_i_i$1=$322$1;var $e2_1102_i_i$0=$322$0;label=107;break;}else{var $x_4_lcssa_i_i=$x_5_i_i;var $y_3_lcssa_i_i=$y_4_i_i;var $e2_1_lcssa_i_i$1=$322$1;var $e2_1_lcssa_i_i$0=$322$0;label=110;break;}
 case 110: 
 var $e2_1_lcssa_i_i$0;
 var $e2_1_lcssa_i_i$1;
 var $y_3_lcssa_i_i;
 var $x_4_lcssa_i_i;
 var $$etemp$12$0=1106;
 var $$etemp$12$1=0;
 var $324$0=_i64Add($e2_1_lcssa_i_i$0,$e2_1_lcssa_i_i$1,$$etemp$12$0,$$etemp$12$1);var $324$1=tempRet0;
 var $$etemp$13$0=53;
 var $$etemp$13$1=0;
 var $325=(($324$1|0) < ($$etemp$13$1|0)) | (((($324$1|0) == ($$etemp$13$1|0) & ($324$0>>>0) <  ($$etemp$13$0>>>0))));
 if($325){label=111;break;}else{label=112;break;}
 case 111: 
 var $327$0=$324$0;
 var $327=$327$0;
 var $328=($327|0)<0;
 var $__i_i=($328?0:$327);
 var $329=($__i_i|0)<53;
 if($329){label=113;break;}else{label=112;break;}
 case 112: 
 var $_pre_i_i=($sign_0_i|0);
 var $y_5_i_i=$y_3_lcssa_i_i;var $x_6_i_i=$x_4_lcssa_i_i;var $bias_099_i_i=0;var $_pre_phi_i_i=$_pre_i_i;label=121;break;
 case 113: 
 var $331=(((84)-($__i_i))|0);
 var $332=($331|0)>1023;
 if($332){label=114;break;}else{label=116;break;}
 case 114: 
 var $334=((($331)-(1023))|0);
 var $335=($334|0)>1023;
 if($335){label=115;break;}else{var $y_0_i2_i=8.98846567431158e+307;var $_0_i_i=$334;label=119;break;}
 case 115: 
 var $337=((($331)-(2046))|0);
 var $338=($337|0)>1023;
 var $__i1_i=($338?1023:$337);
 var $y_0_i2_i=Infinity;var $_0_i_i=$__i1_i;label=119;break;
 case 116: 
 var $340=($331|0)<-1022;
 if($340){label=117;break;}else{var $y_0_i2_i=1;var $_0_i_i=$331;label=119;break;}
 case 117: 
 var $342=((($331)+(1022))|0);
 var $343=($342|0)<-1022;
 if($343){label=118;break;}else{var $y_0_i2_i=2.2250738585072014e-308;var $_0_i_i=$342;label=119;break;}
 case 118: 
 var $345=((($331)+(2044))|0);
 var $346=($345|0)<-1022;
 var $_17_i_i=($346?-1022:$345);
 var $y_0_i2_i=0;var $_0_i_i=$_17_i_i;label=119;break;
 case 119: 
 var $_0_i_i;
 var $y_0_i2_i;
 var $347=((($_0_i_i)+(1023))|0);
 var $348$0=$347;
 var $348$1=0;
 var $349$0=(0<<20)|(0>>>12);
 var $349$1=($348$0<<20)|(0>>>12);
 var $350=(HEAP32[((tempDoublePtr)>>2)]=$349$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$349$1, HEAPF64[(tempDoublePtr)>>3]);
 var $351=($y_0_i2_i)*($350);
 var $352=($sign_0_i|0);
 var $353=_copysign($351,$352);
 var $354=($__i_i|0)<32;
 var $355=$y_3_lcssa_i_i!=0;
 var $or_cond96_i_i=$354&$355;
 if($or_cond96_i_i){label=120;break;}else{var $y_5_i_i=$y_3_lcssa_i_i;var $x_6_i_i=$x_4_lcssa_i_i;var $bias_099_i_i=$353;var $_pre_phi_i_i=$352;label=121;break;}
 case 120: 
 var $357=$x_4_lcssa_i_i&1;
 var $358=($357|0)==0;
 var $359=$357^1;
 var $_x_4_i_i=((($359)+($x_4_lcssa_i_i))|0);
 var $_y_3_i_i=($358?0:$y_3_lcssa_i_i);
 var $y_5_i_i=$_y_3_i_i;var $x_6_i_i=$_x_4_i_i;var $bias_099_i_i=$353;var $_pre_phi_i_i=$352;label=121;break;
 case 121: 
 var $_pre_phi_i_i;
 var $bias_099_i_i;
 var $x_6_i_i;
 var $y_5_i_i;
 var $360=($x_6_i_i>>>0);
 var $361=($_pre_phi_i_i)*($360);
 var $362=($bias_099_i_i)+($361);
 var $363=($_pre_phi_i_i)*($y_5_i_i);
 var $364=($363)+($362);
 var $365=($364)-($bias_099_i_i);
 var $366=$365!=0;
 if($366){label=123;break;}else{label=122;break;}
 case 122: 
 var $368=___errno_location();
 HEAP32[(($368)>>2)]=34;
 label=123;break;
 case 123: 
 var $370$0=$e2_1_lcssa_i_i$0;
 var $370=$370$0;
 var $371=($370|0)>1023;
 if($371){label=124;break;}else{label=126;break;}
 case 124: 
 var $373=($365)*((8.98846567431158e+307));
 var $374=((($370)-(1023))|0);
 var $375=($374|0)>1023;
 if($375){label=125;break;}else{var $y_0_i_i16_i=$373;var $_0_i_i15_i=$374;label=129;break;}
 case 125: 
 var $377=($373)*((8.98846567431158e+307));
 var $378=((($370)-(2046))|0);
 var $379=($378|0)>1023;
 var $__i_i13_i=($379?1023:$378);
 var $y_0_i_i16_i=$377;var $_0_i_i15_i=$__i_i13_i;label=129;break;
 case 126: 
 var $381=($370|0)<-1022;
 if($381){label=127;break;}else{var $y_0_i_i16_i=$365;var $_0_i_i15_i=$370;label=129;break;}
 case 127: 
 var $383=($365)*((2.2250738585072014e-308));
 var $384=((($370)+(1022))|0);
 var $385=($384|0)<-1022;
 if($385){label=128;break;}else{var $y_0_i_i16_i=$383;var $_0_i_i15_i=$384;label=129;break;}
 case 128: 
 var $387=($383)*((2.2250738585072014e-308));
 var $388=((($370)+(2044))|0);
 var $389=($388|0)<-1022;
 var $_17_i_i14_i=($389?-1022:$388);
 var $y_0_i_i16_i=$387;var $_0_i_i15_i=$_17_i_i14_i;label=129;break;
 case 129: 
 var $_0_i_i15_i;
 var $y_0_i_i16_i;
 var $390=((($_0_i_i15_i)+(1023))|0);
 var $391$0=$390;
 var $391$1=0;
 var $392$0=(0<<20)|(0>>>12);
 var $392$1=($391$0<<20)|(0>>>12);
 var $393=(HEAP32[((tempDoublePtr)>>2)]=$392$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$392$1, HEAPF64[(tempDoublePtr)>>3]);
 var $394=($y_0_i_i16_i)*($393);
 var $_0_i=$394;label=289;break;
 case 130: 
 var $396=HEAP32[(($10)>>2)];
 var $397=($396|0)==0;
 if($397){var $c_6_i=48;label=132;break;}else{label=131;break;}
 case 131: 
 var $399=HEAP32[(($2)>>2)];
 var $400=((($399)-(1))|0);
 HEAP32[(($2)>>2)]=$400;
 var $c_6_i=48;label=132;break;
 case 132: 
 var $c_6_i;
 var $402=$x_i_i;
 var $_0234_i_i=$c_6_i;var $gotdig_0_i90_i=0;label=133;break;
 case 133: 
 var $gotdig_0_i90_i;
 var $_0234_i_i;
 if(($_0234_i_i|0)==48){ label=134;break;}else if(($_0234_i_i|0)==46){ label=137;break;}else{var $_2_i_i=$_0234_i_i;var $gotrad_0_i93_i=0;var $gotdig_2_i92_i=$gotdig_0_i90_i;var $lrp_1_i_i$1=0;var $lrp_1_i_i$0=0;label=146;break;}
 case 134: 
 var $404=HEAP32[(($2)>>2)];
 var $405=HEAP32[(($10)>>2)];
 var $406=($404>>>0)<($405>>>0);
 if($406){label=135;break;}else{label=136;break;}
 case 135: 
 var $408=(($404+1)|0);
 HEAP32[(($2)>>2)]=$408;
 var $409=HEAP8[($404)];
 var $410=($409&255);
 var $_0234_i_i=$410;var $gotdig_0_i90_i=1;label=133;break;
 case 136: 
 var $412=___shgetc($f_i_i);
 var $_0234_i_i=$412;var $gotdig_0_i90_i=1;label=133;break;
 case 137: 
 var $414=HEAP32[(($2)>>2)];
 var $415=HEAP32[(($10)>>2)];
 var $416=($414>>>0)<($415>>>0);
 if($416){label=138;break;}else{label=139;break;}
 case 138: 
 var $418=(($414+1)|0);
 HEAP32[(($2)>>2)]=$418;
 var $419=HEAP8[($414)];
 var $420=($419&255);
 var $_1_ph_i_i=$420;label=140;break;
 case 139: 
 var $422=___shgetc($f_i_i);
 var $_1_ph_i_i=$422;label=140;break;
 case 140: 
 var $_1_ph_i_i;
 var $423=($_1_ph_i_i|0)==48;
 if($423){var $lrp_0336_i_i$1=-1;var $lrp_0336_i_i$0=-1;label=141;break;}else{var $_2_i_i=$_1_ph_i_i;var $gotrad_0_i93_i=1;var $gotdig_2_i92_i=$gotdig_0_i90_i;var $lrp_1_i_i$1=0;var $lrp_1_i_i$0=0;label=146;break;}
 case 141: 
 var $lrp_0336_i_i$0;
 var $lrp_0336_i_i$1;
 var $424=HEAP32[(($2)>>2)];
 var $425=HEAP32[(($10)>>2)];
 var $426=($424>>>0)<($425>>>0);
 if($426){label=142;break;}else{label=143;break;}
 case 142: 
 var $428=(($424+1)|0);
 HEAP32[(($2)>>2)]=$428;
 var $429=HEAP8[($424)];
 var $430=($429&255);
 var $_1_be_i_i=$430;label=144;break;
 case 143: 
 var $432=___shgetc($f_i_i);
 var $_1_be_i_i=$432;label=144;break;
 case 144: 
 var $_1_be_i_i;
 var $433=($_1_be_i_i|0)==48;
 if($433){label=145;break;}else{var $_2_i_i=$_1_be_i_i;var $gotrad_0_i93_i=1;var $gotdig_2_i92_i=1;var $lrp_1_i_i$1=$lrp_0336_i_i$1;var $lrp_1_i_i$0=$lrp_0336_i_i$0;label=146;break;}
 case 145: 
 var $$etemp$14$0=-1;
 var $$etemp$14$1=-1;
 var $phitmp_i91_i$0=_i64Add($lrp_0336_i_i$0,$lrp_0336_i_i$1,$$etemp$14$0,$$etemp$14$1);var $phitmp_i91_i$1=tempRet0;
 var $lrp_0336_i_i$1=$phitmp_i91_i$1;var $lrp_0336_i_i$0=$phitmp_i91_i$0;label=141;break;
 case 146: 
 var $lrp_1_i_i$0;
 var $lrp_1_i_i$1;
 var $gotdig_2_i92_i;
 var $gotrad_0_i93_i;
 var $_2_i_i;
 var $434=(($x_i_i)|0);
 HEAP32[(($434)>>2)]=0;
 var $435=((($_2_i_i)-(48))|0);
 var $436=($435>>>0)<10;
 var $437=($_2_i_i|0)==46;
 var $or_cond7315_i_i=$436|$437;
 if($or_cond7315_i_i){label=147;break;}else{var $lrp_2_lcssa_i_i$1=$lrp_1_i_i$1;var $lrp_2_lcssa_i_i$0=$lrp_1_i_i$0;var $dc_0_lcssa_i_i$1=0;var $dc_0_lcssa_i_i$0=0;var $lnz_0_lcssa_i_i=0;var $gotdig_3_lcssa_i_i=$gotdig_2_i92_i;var $gotrad_1_lcssa_i_i=$gotrad_0_i93_i;var $k_0_lcssa_i_i=0;var $j_0_lcssa_i_i=0;var $_3_lcssa_i_i=$_2_i_i;label=160;break;}
 case 147: 
 var $438=(($x_i_i+496)|0);
 var $lrp_2316_i_i$1=$lrp_1_i_i$1;var $lrp_2316_i_i$0=$lrp_1_i_i$0;var $dc_0317_i_i$1=0;var $dc_0317_i_i$0=0;var $lnz_0318_i_i=0;var $gotdig_3319_i_i=$gotdig_2_i92_i;var $gotrad_1320_i_i=$gotrad_0_i93_i;var $k_0321_i_i=0;var $j_0322_i_i=0;var $_3323_i_i=$_2_i_i;var $440=$435;var $439=$437;label=148;break;
 case 148: 
 var $439;
 var $440;
 var $_3323_i_i;
 var $j_0322_i_i;
 var $k_0321_i_i;
 var $gotrad_1320_i_i;
 var $gotdig_3319_i_i;
 var $lnz_0318_i_i;
 var $dc_0317_i_i$0;
 var $dc_0317_i_i$1;
 var $lrp_2316_i_i$0;
 var $lrp_2316_i_i$1;
 if($439){label=149;break;}else{label=150;break;}
 case 149: 
 var $cond_i_i=($gotrad_1320_i_i|0)==0;
 if($cond_i_i){var $j_2_i_i=$j_0322_i_i;var $k_2_i_i=$k_0321_i_i;var $gotrad_2_i_i=1;var $gotdig_4_i_i=$gotdig_3319_i_i;var $lnz_2_i_i=$lnz_0318_i_i;var $dc_1_i96_i$1=$dc_0317_i_i$1;var $dc_1_i96_i$0=$dc_0317_i_i$0;var $lrp_3_i_i$1=$dc_0317_i_i$1;var $lrp_3_i_i$0=$dc_0317_i_i$0;label=156;break;}else{var $lrp_4_i_i$1=$lrp_2316_i_i$1;var $lrp_4_i_i$0=$lrp_2316_i_i$0;var $dc_0303_i_i$1=$dc_0317_i_i$1;var $dc_0303_i_i$0=$dc_0317_i_i$0;var $lnz_0305_i_i=$lnz_0318_i_i;var $gotdig_3307_i_i=$gotdig_3319_i_i;var $k_0310_i_i=$k_0321_i_i;var $j_0312_i_i=$j_0322_i_i;var $_3314_i_i=$_3323_i_i;label=161;break;}
 case 150: 
 var $443=($k_0321_i_i|0)<125;
 var $$etemp$15$0=1;
 var $$etemp$15$1=0;
 var $444$0=_i64Add($dc_0317_i_i$0,$dc_0317_i_i$1,$$etemp$15$0,$$etemp$15$1);var $444$1=tempRet0;
 var $445=($_3323_i_i|0)!=48;
 if($443){label=151;break;}else{label=154;break;}
 case 151: 
 var $447$0=$444$0;
 var $447=$447$0;
 var $_lnz_0_i_i=($445?$447:$lnz_0318_i_i);
 var $448=($j_0322_i_i|0)==0;
 var $449=(($x_i_i+($k_0321_i_i<<2))|0);
 if($448){var $storemerge_i_i=$440;label=153;break;}else{label=152;break;}
 case 152: 
 var $451=HEAP32[(($449)>>2)];
 var $452=((($451)*(10))&-1);
 var $453=((($_3323_i_i)-(48))|0);
 var $454=((($453)+($452))|0);
 var $storemerge_i_i=$454;label=153;break;
 case 153: 
 var $storemerge_i_i;
 HEAP32[(($449)>>2)]=$storemerge_i_i;
 var $456=((($j_0322_i_i)+(1))|0);
 var $457=($456|0)==9;
 var $458=($457&1);
 var $_k_0_i_i=((($458)+($k_0321_i_i))|0);
 var $__i95_i=($457?0:$456);
 var $j_2_i_i=$__i95_i;var $k_2_i_i=$_k_0_i_i;var $gotrad_2_i_i=$gotrad_1320_i_i;var $gotdig_4_i_i=1;var $lnz_2_i_i=$_lnz_0_i_i;var $dc_1_i96_i$1=$444$1;var $dc_1_i96_i$0=$444$0;var $lrp_3_i_i$1=$lrp_2316_i_i$1;var $lrp_3_i_i$0=$lrp_2316_i_i$0;label=156;break;
 case 154: 
 if($445){label=155;break;}else{var $j_2_i_i=$j_0322_i_i;var $k_2_i_i=$k_0321_i_i;var $gotrad_2_i_i=$gotrad_1320_i_i;var $gotdig_4_i_i=$gotdig_3319_i_i;var $lnz_2_i_i=$lnz_0318_i_i;var $dc_1_i96_i$1=$444$1;var $dc_1_i96_i$0=$444$0;var $lrp_3_i_i$1=$lrp_2316_i_i$1;var $lrp_3_i_i$0=$lrp_2316_i_i$0;label=156;break;}
 case 155: 
 var $461=HEAP32[(($438)>>2)];
 var $462=$461|1;
 HEAP32[(($438)>>2)]=$462;
 var $j_2_i_i=$j_0322_i_i;var $k_2_i_i=$k_0321_i_i;var $gotrad_2_i_i=$gotrad_1320_i_i;var $gotdig_4_i_i=$gotdig_3319_i_i;var $lnz_2_i_i=$lnz_0318_i_i;var $dc_1_i96_i$1=$444$1;var $dc_1_i96_i$0=$444$0;var $lrp_3_i_i$1=$lrp_2316_i_i$1;var $lrp_3_i_i$0=$lrp_2316_i_i$0;label=156;break;
 case 156: 
 var $lrp_3_i_i$0;
 var $lrp_3_i_i$1;
 var $dc_1_i96_i$0;
 var $dc_1_i96_i$1;
 var $lnz_2_i_i;
 var $gotdig_4_i_i;
 var $gotrad_2_i_i;
 var $k_2_i_i;
 var $j_2_i_i;
 var $463=HEAP32[(($2)>>2)];
 var $464=HEAP32[(($10)>>2)];
 var $465=($463>>>0)<($464>>>0);
 if($465){label=157;break;}else{label=158;break;}
 case 157: 
 var $467=(($463+1)|0);
 HEAP32[(($2)>>2)]=$467;
 var $468=HEAP8[($463)];
 var $469=($468&255);
 var $_3_be_i_i=$469;label=159;break;
 case 158: 
 var $471=___shgetc($f_i_i);
 var $_3_be_i_i=$471;label=159;break;
 case 159: 
 var $_3_be_i_i;
 var $472=((($_3_be_i_i)-(48))|0);
 var $473=($472>>>0)<10;
 var $474=($_3_be_i_i|0)==46;
 var $or_cond7_i_i=$473|$474;
 if($or_cond7_i_i){var $lrp_2316_i_i$1=$lrp_3_i_i$1;var $lrp_2316_i_i$0=$lrp_3_i_i$0;var $dc_0317_i_i$1=$dc_1_i96_i$1;var $dc_0317_i_i$0=$dc_1_i96_i$0;var $lnz_0318_i_i=$lnz_2_i_i;var $gotdig_3319_i_i=$gotdig_4_i_i;var $gotrad_1320_i_i=$gotrad_2_i_i;var $k_0321_i_i=$k_2_i_i;var $j_0322_i_i=$j_2_i_i;var $_3323_i_i=$_3_be_i_i;var $440=$472;var $439=$474;label=148;break;}else{var $lrp_2_lcssa_i_i$1=$lrp_3_i_i$1;var $lrp_2_lcssa_i_i$0=$lrp_3_i_i$0;var $dc_0_lcssa_i_i$1=$dc_1_i96_i$1;var $dc_0_lcssa_i_i$0=$dc_1_i96_i$0;var $lnz_0_lcssa_i_i=$lnz_2_i_i;var $gotdig_3_lcssa_i_i=$gotdig_4_i_i;var $gotrad_1_lcssa_i_i=$gotrad_2_i_i;var $k_0_lcssa_i_i=$k_2_i_i;var $j_0_lcssa_i_i=$j_2_i_i;var $_3_lcssa_i_i=$_3_be_i_i;label=160;break;}
 case 160: 
 var $_3_lcssa_i_i;
 var $j_0_lcssa_i_i;
 var $k_0_lcssa_i_i;
 var $gotrad_1_lcssa_i_i;
 var $gotdig_3_lcssa_i_i;
 var $lnz_0_lcssa_i_i;
 var $dc_0_lcssa_i_i$0;
 var $dc_0_lcssa_i_i$1;
 var $lrp_2_lcssa_i_i$0;
 var $lrp_2_lcssa_i_i$1;
 var $475=($gotrad_1_lcssa_i_i|0)==0;
 var $dc_0_lrp_2_i_i$0=($475?$dc_0_lcssa_i_i$0:$lrp_2_lcssa_i_i$0);
 var $dc_0_lrp_2_i_i$1=($475?$dc_0_lcssa_i_i$1:$lrp_2_lcssa_i_i$1);
 var $lrp_4_i_i$1=$dc_0_lrp_2_i_i$1;var $lrp_4_i_i$0=$dc_0_lrp_2_i_i$0;var $dc_0303_i_i$1=$dc_0_lcssa_i_i$1;var $dc_0303_i_i$0=$dc_0_lcssa_i_i$0;var $lnz_0305_i_i=$lnz_0_lcssa_i_i;var $gotdig_3307_i_i=$gotdig_3_lcssa_i_i;var $k_0310_i_i=$k_0_lcssa_i_i;var $j_0312_i_i=$j_0_lcssa_i_i;var $_3314_i_i=$_3_lcssa_i_i;label=161;break;
 case 161: 
 var $_3314_i_i;
 var $j_0312_i_i;
 var $k_0310_i_i;
 var $gotdig_3307_i_i;
 var $lnz_0305_i_i;
 var $dc_0303_i_i$0;
 var $dc_0303_i_i$1;
 var $lrp_4_i_i$0;
 var $lrp_4_i_i$1;
 var $476=($gotdig_3307_i_i|0)!=0;
 if($476){label=162;break;}else{label=167;break;}
 case 162: 
 var $478=$_3314_i_i|32;
 var $479=($478|0)==101;
 if($479){label=163;break;}else{label=167;break;}
 case 163: 
 var $481$0=_scanexp($f_i_i);
 var $481$1=tempRet0;
 var $$etemp$16$0=0;
 var $$etemp$16$1=-2147483648;
 var $482=(($481$0|0) == ($$etemp$16$0|0)) & (($481$1|0) == ($$etemp$16$1|0));
 if($482){label=164;break;}else{var $e10_0_i_i$1=$481$1;var $e10_0_i_i$0=$481$0;label=166;break;}
 case 164: 
 var $484=HEAP32[(($10)>>2)];
 var $485=($484|0)==0;
 if($485){var $e10_0_i_i$1=0;var $e10_0_i_i$0=0;label=166;break;}else{label=165;break;}
 case 165: 
 var $487=HEAP32[(($2)>>2)];
 var $488=((($487)-(1))|0);
 HEAP32[(($2)>>2)]=$488;
 var $e10_0_i_i$1=0;var $e10_0_i_i$0=0;label=166;break;
 case 166: 
 var $e10_0_i_i$0;
 var $e10_0_i_i$1;
 var $490$0=_i64Add($e10_0_i_i$0,$e10_0_i_i$1,$lrp_4_i_i$0,$lrp_4_i_i$1);var $490$1=tempRet0;
 var $lrp_5_i_i$1=$490$1;var $lrp_5_i_i$0=$490$0;label=170;break;
 case 167: 
 var $492=($_3314_i_i|0)>-1;
 if($492){label=168;break;}else{var $lrp_5_i_i$1=$lrp_4_i_i$1;var $lrp_5_i_i$0=$lrp_4_i_i$0;label=170;break;}
 case 168: 
 var $494=HEAP32[(($10)>>2)];
 var $495=($494|0)==0;
 if($495){var $lrp_5_i_i$1=$lrp_4_i_i$1;var $lrp_5_i_i$0=$lrp_4_i_i$0;label=170;break;}else{label=169;break;}
 case 169: 
 var $497=HEAP32[(($2)>>2)];
 var $498=((($497)-(1))|0);
 HEAP32[(($2)>>2)]=$498;
 var $lrp_5_i_i$1=$lrp_4_i_i$1;var $lrp_5_i_i$0=$lrp_4_i_i$0;label=170;break;
 case 170: 
 var $lrp_5_i_i$0;
 var $lrp_5_i_i$1;
 if($476){label=172;break;}else{label=171;break;}
 case 171: 
 var $501=___errno_location();
 HEAP32[(($501)>>2)]=22;
 HEAP32[(($6)>>2)]=0;
 var $502=HEAP32[(($3)>>2)];
 var $503=HEAP32[(($2)>>2)];
 var $504=$502;
 var $505=$503;
 var $506=((($504)-($505))|0);
 HEAP32[(($9)>>2)]=$506;
 HEAP32[(($10)>>2)]=$502;
 var $_0_i=0;label=289;break;
 case 172: 
 var $508=HEAP32[(($434)>>2)];
 var $509=($508|0)==0;
 if($509){label=173;break;}else{label=174;break;}
 case 173: 
 var $511=($sign_0_i|0);
 var $512=($511)*(0);
 var $_0_i=$512;label=289;break;
 case 174: 
 var $514=(($lrp_5_i_i$0|0) == ($dc_0303_i_i$0|0)) & (($lrp_5_i_i$1|0) == ($dc_0303_i_i$1|0));
 var $$etemp$17$0=10;
 var $$etemp$17$1=0;
 var $515=(($dc_0303_i_i$1|0) < ($$etemp$17$1|0)) | (((($dc_0303_i_i$1|0) == ($$etemp$17$1|0) & ($dc_0303_i_i$0>>>0) <  ($$etemp$17$0>>>0))));
 var $or_cond_i97_i=$514&$515;
 if($or_cond_i97_i){label=175;break;}else{label=176;break;}
 case 175: 
 var $517=($sign_0_i|0);
 var $518=($508>>>0);
 var $519=($517)*($518);
 var $_0_i=$519;label=289;break;
 case 176: 
 var $$etemp$18$0=537;
 var $$etemp$18$1=0;
 var $521=(($lrp_5_i_i$1|0) > ($$etemp$18$1|0)) | (((($lrp_5_i_i$1|0) == ($$etemp$18$1|0) & ($lrp_5_i_i$0>>>0) >  ($$etemp$18$0>>>0))));
 if($521){label=177;break;}else{label=178;break;}
 case 177: 
 var $523=___errno_location();
 HEAP32[(($523)>>2)]=34;
 var $524=($sign_0_i|0);
 var $525=($524)*((1.7976931348623157e+308));
 var $526=($525)*((1.7976931348623157e+308));
 var $_0_i=$526;label=289;break;
 case 178: 
 var $$etemp$19$0=-1180;
 var $$etemp$19$1=-1;
 var $528=(($lrp_5_i_i$1|0) < ($$etemp$19$1|0)) | (((($lrp_5_i_i$1|0) == ($$etemp$19$1|0) & ($lrp_5_i_i$0>>>0) <  ($$etemp$19$0>>>0))));
 if($528){label=179;break;}else{label=180;break;}
 case 179: 
 var $530=___errno_location();
 HEAP32[(($530)>>2)]=34;
 var $531=($sign_0_i|0);
 var $532=($531)*((2.2250738585072014e-308));
 var $533=($532)*((2.2250738585072014e-308));
 var $_0_i=$533;label=289;break;
 case 180: 
 var $535=($j_0312_i_i|0)==0;
 if($535){var $k_3_i_i=$k_0310_i_i;label=186;break;}else{label=181;break;}
 case 181: 
 var $536=($j_0312_i_i|0)<9;
 if($536){label=182;break;}else{label=185;break;}
 case 182: 
 var $537=(($x_i_i+($k_0310_i_i<<2))|0);
 var $_promoted_i_i=HEAP32[(($537)>>2)];
 var $j_3297_i_i=$j_0312_i_i;var $539=$_promoted_i_i;label=183;break;
 case 183: 
 var $539;
 var $j_3297_i_i;
 var $540=((($539)*(10))&-1);
 var $541=((($j_3297_i_i)+(1))|0);
 var $542=($541|0)<9;
 if($542){var $j_3297_i_i=$541;var $539=$540;label=183;break;}else{label=184;break;}
 case 184: 
 HEAP32[(($537)>>2)]=$540;
 label=185;break;
 case 185: 
 var $544=((($k_0310_i_i)+(1))|0);
 var $k_3_i_i=$544;label=186;break;
 case 186: 
 var $k_3_i_i;
 var $546$0=$lrp_5_i_i$0;
 var $546=$546$0;
 var $547=($lnz_0305_i_i|0)<9;
 if($547){label=187;break;}else{label=195;break;}
 case 187: 
 var $549=($lnz_0305_i_i|0)<=($546|0);
 var $550=($546|0)<18;
 var $or_cond3_i_i=$549&$550;
 if($or_cond3_i_i){label=188;break;}else{label=195;break;}
 case 188: 
 var $552=($546|0)==9;
 if($552){label=189;break;}else{label=190;break;}
 case 189: 
 var $554=($sign_0_i|0);
 var $555=HEAP32[(($434)>>2)];
 var $556=($555>>>0);
 var $557=($554)*($556);
 var $_0_i=$557;label=289;break;
 case 190: 
 var $559=($546|0)<9;
 if($559){label=191;break;}else{label=192;break;}
 case 191: 
 var $561=($sign_0_i|0);
 var $562=HEAP32[(($434)>>2)];
 var $563=($562>>>0);
 var $564=($561)*($563);
 var $565=(((8)-($546))|0);
 var $566=((16+($565<<2))|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=($567|0);
 var $569=($564)/($568);
 var $_0_i=$569;label=289;break;
 case 192: 
 var $571=((($546)*(-3))&-1);
 var $572=((($571)+(80))|0);
 var $573=($572|0)>30;
 var $_pre_i98_i=HEAP32[(($434)>>2)];
 if($573){label=194;break;}else{label=193;break;}
 case 193: 
 var $575=$_pre_i98_i>>>($572>>>0);
 var $576=($575|0)==0;
 if($576){label=194;break;}else{label=195;break;}
 case 194: 
 var $577=($sign_0_i|0);
 var $578=($_pre_i98_i>>>0);
 var $579=($577)*($578);
 var $580=((($546)-(10))|0);
 var $581=((16+($580<<2))|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=($582|0);
 var $584=($579)*($583);
 var $_0_i=$584;label=289;break;
 case 195: 
 var $586=(((($546|0))%(9))&-1);
 var $587=($586|0)==0;
 if($587){var $a_2_ph266_i_i=0;var $z_1_ph265_i_i=$k_3_i_i;var $e2_0_ph_i_i=0;var $rp_2_ph264_i_i=$546;label=204;break;}else{label=196;break;}
 case 196: 
 var $589=($546|0)>-1;
 var $590=((($586)+(9))|0);
 var $591=($589?$586:$590);
 var $592=(((8)-($591))|0);
 var $593=((16+($592<<2))|0);
 var $594=HEAP32[(($593)>>2)];
 var $595=($k_3_i_i|0)==0;
 if($595){var $z_0_i_i=0;var $a_0_lcssa387_i_i=0;var $rp_0_lcssa388_i_i=$546;label=203;break;}else{label=197;break;}
 case 197: 
 var $596=(((1000000000)/(($594|0)))&-1);
 var $rp_0286_i_i=$546;var $a_0287_i_i=0;var $k_4288_i_i=0;var $carry_0289_i_i=0;label=198;break;
 case 198: 
 var $carry_0289_i_i;
 var $k_4288_i_i;
 var $a_0287_i_i;
 var $rp_0286_i_i;
 var $597=(($x_i_i+($k_4288_i_i<<2))|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=(((($598>>>0))%(($594>>>0)))&-1);
 var $600=(((($598>>>0))/(($594>>>0)))&-1);
 var $601=((($600)+($carry_0289_i_i))|0);
 HEAP32[(($597)>>2)]=$601;
 var $602=(Math_imul($599,$596)|0);
 var $603=($k_4288_i_i|0)==($a_0287_i_i|0);
 var $604=($601|0)==0;
 var $or_cond237_i_i=$603&$604;
 var $605=((($k_4288_i_i)+(1))|0);
 if($or_cond237_i_i){label=199;break;}else{var $a_1_i_i=$a_0287_i_i;var $rp_1_i99_i=$rp_0286_i_i;label=200;break;}
 case 199: 
 var $607=$605&127;
 var $608=((($rp_0286_i_i)-(9))|0);
 var $a_1_i_i=$607;var $rp_1_i99_i=$608;label=200;break;
 case 200: 
 var $rp_1_i99_i;
 var $a_1_i_i;
 var $609=($605|0)==($k_3_i_i|0);
 if($609){label=201;break;}else{var $rp_0286_i_i=$rp_1_i99_i;var $a_0287_i_i=$a_1_i_i;var $k_4288_i_i=$605;var $carry_0289_i_i=$602;label=198;break;}
 case 201: 
 var $610=($602|0)==0;
 if($610){var $z_0_i_i=$k_3_i_i;var $a_0_lcssa387_i_i=$a_1_i_i;var $rp_0_lcssa388_i_i=$rp_1_i99_i;label=203;break;}else{label=202;break;}
 case 202: 
 var $612=((($k_3_i_i)+(1))|0);
 var $613=(($x_i_i+($k_3_i_i<<2))|0);
 HEAP32[(($613)>>2)]=$602;
 var $z_0_i_i=$612;var $a_0_lcssa387_i_i=$a_1_i_i;var $rp_0_lcssa388_i_i=$rp_1_i99_i;label=203;break;
 case 203: 
 var $rp_0_lcssa388_i_i;
 var $a_0_lcssa387_i_i;
 var $z_0_i_i;
 var $614=(((9)-($591))|0);
 var $615=((($614)+($rp_0_lcssa388_i_i))|0);
 var $a_2_ph266_i_i=$a_0_lcssa387_i_i;var $z_1_ph265_i_i=$z_0_i_i;var $e2_0_ph_i_i=0;var $rp_2_ph264_i_i=$615;label=204;break;
 case 204: 
 var $rp_2_ph264_i_i;
 var $e2_0_ph_i_i;
 var $z_1_ph265_i_i;
 var $a_2_ph266_i_i;
 var $616=($rp_2_ph264_i_i|0)<18;
 var $617=(($x_i_i+($a_2_ph266_i_i<<2))|0);
 if($616){var $z_1_us_i_i=$z_1_ph265_i_i;var $e2_0_us_i_i=$e2_0_ph_i_i;label=206;break;}else{label=205;break;}
 case 205: 
 var $618=($rp_2_ph264_i_i|0)==18;
 if($618){var $z_1_us271_i_i=$z_1_ph265_i_i;var $e2_0_us270_i_i=$e2_0_ph_i_i;label=213;break;}else{var $a_3_ph_i_i=$a_2_ph266_i_i;var $z_5_ph_i_i=$z_1_ph265_i_i;var $e2_1_ph_i_i=$e2_0_ph_i_i;var $rp_3_ph259_i_i=$rp_2_ph264_i_i;label=237;break;}
 case 206: 
 var $e2_0_us_i_i;
 var $z_1_us_i_i;
 var $619=((($z_1_us_i_i)+(127))|0);
 var $carry1_0_us_i_i=0;var $k_5_in_us_i_i=$619;var $z_2_us_i_i=$z_1_us_i_i;label=207;break;
 case 207: 
 var $z_2_us_i_i;
 var $k_5_in_us_i_i;
 var $carry1_0_us_i_i;
 var $k_5_us_i_i=$k_5_in_us_i_i&127;
 var $621=(($x_i_i+($k_5_us_i_i<<2))|0);
 var $622=HEAP32[(($621)>>2)];
 var $623$0=$622;
 var $623$1=0;
 var $624$0=($623$0<<29)|(0>>>3);
 var $624$1=($623$1<<29)|($623$0>>>3);
 var $625$0=$carry1_0_us_i_i;
 var $625$1=0;
 var $626$0=_i64Add($624$0,$624$1,$625$0,$625$1);var $626$1=tempRet0;
 var $$etemp$20$0=1000000000;
 var $$etemp$20$1=0;
 var $627=(($626$1>>>0) > ($$etemp$20$1>>>0)) | (((($626$1>>>0) == ($$etemp$20$1>>>0) & ($626$0>>>0) >  ($$etemp$20$0>>>0))));
 var $extract_t246_us_i_i$0=$626$0;
 var $extract_t246_us_i_i=$extract_t246_us_i_i$0;
 if($627){label=208;break;}else{var $carry1_1_us_i_i=0;var $_sink_off0_us_i_i=$extract_t246_us_i_i;label=209;break;}
 case 208: 
 var $$etemp$21$0=1000000000;
 var $$etemp$21$1=0;
 var $629$0=___udivdi3($626$0,$626$1,$$etemp$21$0,$$etemp$21$1);var $629$1=tempRet0;
 var $630$0=$629$0;
 var $630=$630$0;
 var $$etemp$22$0=1000000000;
 var $$etemp$22$1=0;
 var $631$0=___uremdi3($626$0,$626$1,$$etemp$22$0,$$etemp$22$1);var $631$1=tempRet0;
 var $extract_t_us_i_i$0=$631$0;
 var $extract_t_us_i_i=$extract_t_us_i_i$0;
 var $carry1_1_us_i_i=$630;var $_sink_off0_us_i_i=$extract_t_us_i_i;label=209;break;
 case 209: 
 var $_sink_off0_us_i_i;
 var $carry1_1_us_i_i;
 HEAP32[(($621)>>2)]=$_sink_off0_us_i_i;
 var $633=((($z_2_us_i_i)+(127))|0);
 var $634=$633&127;
 var $635=($k_5_us_i_i|0)!=($634|0);
 var $636=($k_5_us_i_i|0)==($a_2_ph266_i_i|0);
 var $or_cond238_us_i_i=$635|$636;
 if($or_cond238_us_i_i){var $z_3_us_i_i=$z_2_us_i_i;label=211;break;}else{label=210;break;}
 case 210: 
 var $638=($_sink_off0_us_i_i|0)==0;
 var $k_5_z_2_us_i_i=($638?$k_5_us_i_i:$z_2_us_i_i);
 var $z_3_us_i_i=$k_5_z_2_us_i_i;label=211;break;
 case 211: 
 var $z_3_us_i_i;
 var $640=((($k_5_us_i_i)-(1))|0);
 if($636){label=212;break;}else{var $carry1_0_us_i_i=$carry1_1_us_i_i;var $k_5_in_us_i_i=$640;var $z_2_us_i_i=$z_3_us_i_i;label=207;break;}
 case 212: 
 var $642=((($e2_0_us_i_i)-(29))|0);
 var $643=($carry1_1_us_i_i|0)==0;
 if($643){var $z_1_us_i_i=$z_3_us_i_i;var $e2_0_us_i_i=$642;label=206;break;}else{var $_lcssa269_i_i=$642;var $z_3_lcssa_lcssa_i_i=$z_3_us_i_i;var $carry1_1_lcssa_lcssa_i_i=$carry1_1_us_i_i;label=221;break;}
 case 213: 
 var $e2_0_us270_i_i;
 var $z_1_us271_i_i;
 var $644=HEAP32[(($617)>>2)];
 var $645=($644>>>0)<9007199;
 if($645){label=214;break;}else{var $a_3_ph_i_i=$a_2_ph266_i_i;var $z_5_ph_i_i=$z_1_us271_i_i;var $e2_1_ph_i_i=$e2_0_us270_i_i;var $rp_3_ph259_i_i=18;label=237;break;}
 case 214: 
 var $646=((($z_1_us271_i_i)+(127))|0);
 var $carry1_0_us275_i_i=0;var $k_5_in_us274_i_i=$646;var $z_2_us273_i_i=$z_1_us271_i_i;label=215;break;
 case 215: 
 var $z_2_us273_i_i;
 var $k_5_in_us274_i_i;
 var $carry1_0_us275_i_i;
 var $k_5_us276_i_i=$k_5_in_us274_i_i&127;
 var $648=(($x_i_i+($k_5_us276_i_i<<2))|0);
 var $649=HEAP32[(($648)>>2)];
 var $650$0=$649;
 var $650$1=0;
 var $651$0=($650$0<<29)|(0>>>3);
 var $651$1=($650$1<<29)|($650$0>>>3);
 var $652$0=$carry1_0_us275_i_i;
 var $652$1=0;
 var $653$0=_i64Add($651$0,$651$1,$652$0,$652$1);var $653$1=tempRet0;
 var $$etemp$23$0=1000000000;
 var $$etemp$23$1=0;
 var $654=(($653$1>>>0) > ($$etemp$23$1>>>0)) | (((($653$1>>>0) == ($$etemp$23$1>>>0) & ($653$0>>>0) >  ($$etemp$23$0>>>0))));
 var $extract_t246_us277_i_i$0=$653$0;
 var $extract_t246_us277_i_i=$extract_t246_us277_i_i$0;
 if($654){label=216;break;}else{var $carry1_1_us280_i_i=0;var $_sink_off0_us279_i_i=$extract_t246_us277_i_i;label=217;break;}
 case 216: 
 var $$etemp$24$0=1000000000;
 var $$etemp$24$1=0;
 var $656$0=___udivdi3($653$0,$653$1,$$etemp$24$0,$$etemp$24$1);var $656$1=tempRet0;
 var $657$0=$656$0;
 var $657=$657$0;
 var $$etemp$25$0=1000000000;
 var $$etemp$25$1=0;
 var $658$0=___uremdi3($653$0,$653$1,$$etemp$25$0,$$etemp$25$1);var $658$1=tempRet0;
 var $extract_t_us278_i_i$0=$658$0;
 var $extract_t_us278_i_i=$extract_t_us278_i_i$0;
 var $carry1_1_us280_i_i=$657;var $_sink_off0_us279_i_i=$extract_t_us278_i_i;label=217;break;
 case 217: 
 var $_sink_off0_us279_i_i;
 var $carry1_1_us280_i_i;
 HEAP32[(($648)>>2)]=$_sink_off0_us279_i_i;
 var $660=((($z_2_us273_i_i)+(127))|0);
 var $661=$660&127;
 var $662=($k_5_us276_i_i|0)!=($661|0);
 var $663=($k_5_us276_i_i|0)==($a_2_ph266_i_i|0);
 var $or_cond238_us281_i_i=$662|$663;
 if($or_cond238_us281_i_i){var $z_3_us283_i_i=$z_2_us273_i_i;label=219;break;}else{label=218;break;}
 case 218: 
 var $665=($_sink_off0_us279_i_i|0)==0;
 var $k_5_z_2_us282_i_i=($665?$k_5_us276_i_i:$z_2_us273_i_i);
 var $z_3_us283_i_i=$k_5_z_2_us282_i_i;label=219;break;
 case 219: 
 var $z_3_us283_i_i;
 var $667=((($k_5_us276_i_i)-(1))|0);
 if($663){label=220;break;}else{var $carry1_0_us275_i_i=$carry1_1_us280_i_i;var $k_5_in_us274_i_i=$667;var $z_2_us273_i_i=$z_3_us283_i_i;label=215;break;}
 case 220: 
 var $669=((($e2_0_us270_i_i)-(29))|0);
 var $670=($carry1_1_us280_i_i|0)==0;
 if($670){var $z_1_us271_i_i=$z_3_us283_i_i;var $e2_0_us270_i_i=$669;label=213;break;}else{var $_lcssa269_i_i=$669;var $z_3_lcssa_lcssa_i_i=$z_3_us283_i_i;var $carry1_1_lcssa_lcssa_i_i=$carry1_1_us280_i_i;label=221;break;}
 case 221: 
 var $carry1_1_lcssa_lcssa_i_i;
 var $z_3_lcssa_lcssa_i_i;
 var $_lcssa269_i_i;
 var $671=((($rp_2_ph264_i_i)+(9))|0);
 var $672=((($a_2_ph266_i_i)+(127))|0);
 var $673=$672&127;
 var $674=($673|0)==($z_3_lcssa_lcssa_i_i|0);
 if($674){label=222;break;}else{var $z_4_i_i=$z_3_lcssa_lcssa_i_i;label=223;break;}
 case 222: 
 var $676=((($z_3_lcssa_lcssa_i_i)+(127))|0);
 var $677=$676&127;
 var $678=(($x_i_i+($677<<2))|0);
 var $679=HEAP32[(($678)>>2)];
 var $680=((($z_3_lcssa_lcssa_i_i)+(126))|0);
 var $681=$680&127;
 var $682=(($x_i_i+($681<<2))|0);
 var $683=HEAP32[(($682)>>2)];
 var $684=$683|$679;
 HEAP32[(($682)>>2)]=$684;
 var $z_4_i_i=$677;label=223;break;
 case 223: 
 var $z_4_i_i;
 var $686=(($x_i_i+($673<<2))|0);
 HEAP32[(($686)>>2)]=$carry1_1_lcssa_lcssa_i_i;
 var $a_2_ph266_i_i=$673;var $z_1_ph265_i_i=$z_4_i_i;var $e2_0_ph_i_i=$_lcssa269_i_i;var $rp_2_ph264_i_i=$671;label=204;break;
 case 224: 
 var $e2_1_i_i;
 var $a_3_i_i;
 var $i_0_i_i=0;label=225;break;
 case 225: 
 var $i_0_i_i;
 var $688=($i_0_i_i|0)<2;
 if($688){label=226;break;}else{var $i_1_i_i=$i_0_i_i;label=229;break;}
 case 226: 
 var $690=((($i_0_i_i)+($a_3_i_i))|0);
 var $691=$690&127;
 var $692=($691|0)==($z_5_ph_i_i|0);
 if($692){var $i_1_i_i=2;label=229;break;}else{label=227;break;}
 case 227: 
 var $694=(($x_i_i+($691<<2))|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=((8+($i_0_i_i<<2))|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=($695>>>0)<($697>>>0);
 if($698){var $i_1_i_i=2;label=229;break;}else{label=228;break;}
 case 228: 
 var $700=($695>>>0)>($697>>>0);
 var $701=((($i_0_i_i)+(1))|0);
 if($700){var $i_1_i_i=$i_0_i_i;label=229;break;}else{var $i_0_i_i=$701;label=225;break;}
 case 229: 
 var $i_1_i_i;
 var $703=($i_1_i_i|0)==2;
 var $or_cond239_i_i=$703&$734;
 if($or_cond239_i_i){label=230;break;}else{label=231;break;}
 case 230: 
 var $704=$a_3_i_i&127;
 var $705=($704|0)==($z_5_ph_i_i|0);
 if($705){label=240;break;}else{var $z_7_i_i=$z_5_ph_i_i;label=241;break;}
 case 231: 
 var $707=((($_240_i_i)+($e2_1_i_i))|0);
 var $708=($a_3_i_i|0)==($z_5_ph_i_i|0);
 if($708){var $a_3_i_i=$z_5_ph_i_i;var $e2_1_i_i=$707;label=224;break;}else{label=232;break;}
 case 232: 
 var $709=1<<$_240_i_i;
 var $710=((($709)-(1))|0);
 var $711=1000000000>>>($_240_i_i>>>0);
 var $rp_4252_i_i=$rp_3_i_ph_i;var $a_4253_i_i=$a_3_i_i;var $k_6254_i_i=$a_3_i_i;var $carry3_0256_i_i=0;label=233;break;
 case 233: 
 var $carry3_0256_i_i;
 var $k_6254_i_i;
 var $a_4253_i_i;
 var $rp_4252_i_i;
 var $712=(($x_i_i+($k_6254_i_i<<2))|0);
 var $713=HEAP32[(($712)>>2)];
 var $714=$713&$710;
 var $715=$713>>>($_240_i_i>>>0);
 var $716=((($715)+($carry3_0256_i_i))|0);
 HEAP32[(($712)>>2)]=$716;
 var $717=(Math_imul($714,$711)|0);
 var $718=($k_6254_i_i|0)==($a_4253_i_i|0);
 var $719=($716|0)==0;
 var $or_cond241_i_i=$718&$719;
 var $720=((($k_6254_i_i)+(1))|0);
 var $721=$720&127;
 var $722=((($rp_4252_i_i)-(9))|0);
 var $rp_5_i_i=($or_cond241_i_i?$722:$rp_4252_i_i);
 var $a_5_i_i=($or_cond241_i_i?$721:$a_4253_i_i);
 var $723=($721|0)==($z_5_ph_i_i|0);
 if($723){label=234;break;}else{var $rp_4252_i_i=$rp_5_i_i;var $a_4253_i_i=$a_5_i_i;var $k_6254_i_i=$721;var $carry3_0256_i_i=$717;label=233;break;}
 case 234: 
 var $724=($717|0)==0;
 if($724){var $a_3_i_ph_i=$a_5_i_i;var $e2_1_i_ph_i=$707;var $rp_3_i_ph_i=$rp_5_i_i;label=238;break;}else{label=235;break;}
 case 235: 
 var $726=($730|0)==($a_5_i_i|0);
 if($726){label=239;break;}else{label=236;break;}
 case 236: 
 var $728=(($x_i_i+($z_5_ph_i_i<<2))|0);
 HEAP32[(($728)>>2)]=$717;
 var $a_3_ph_i_i=$a_5_i_i;var $z_5_ph_i_i=$730;var $e2_1_ph_i_i=$707;var $rp_3_ph259_i_i=$rp_5_i_i;label=237;break;
 case 237: 
 var $rp_3_ph259_i_i;
 var $e2_1_ph_i_i;
 var $z_5_ph_i_i;
 var $a_3_ph_i_i;
 var $729=((($z_5_ph_i_i)+(1))|0);
 var $730=$729&127;
 var $731=((($z_5_ph_i_i)+(127))|0);
 var $732=$731&127;
 var $733=(($x_i_i+($732<<2))|0);
 var $a_3_i_ph_i=$a_3_ph_i_i;var $e2_1_i_ph_i=$e2_1_ph_i_i;var $rp_3_i_ph_i=$rp_3_ph259_i_i;label=238;break;
 case 238: 
 var $rp_3_i_ph_i;
 var $e2_1_i_ph_i;
 var $a_3_i_ph_i;
 var $734=($rp_3_i_ph_i|0)==18;
 var $735=($rp_3_i_ph_i|0)>27;
 var $_240_i_i=($735?9:1);
 var $a_3_i_i=$a_3_i_ph_i;var $e2_1_i_i=$e2_1_i_ph_i;label=224;break;
 case 239: 
 var $737=HEAP32[(($733)>>2)];
 var $738=$737|1;
 HEAP32[(($733)>>2)]=$738;
 var $a_3_i_ph_i=$a_5_i_i;var $e2_1_i_ph_i=$707;var $rp_3_i_ph_i=$rp_5_i_i;label=238;break;
 case 240: 
 var $740=((($730)-(1))|0);
 var $741=(($x_i_i+($740<<2))|0);
 HEAP32[(($741)>>2)]=0;
 var $z_7_i_i=$730;label=241;break;
 case 241: 
 var $z_7_i_i;
 var $743=(($x_i_i+($704<<2))|0);
 var $744=HEAP32[(($743)>>2)];
 var $745=($744>>>0);
 var $746=((($a_3_i_i)+(1))|0);
 var $747=$746&127;
 var $748=($747|0)==($z_7_i_i|0);
 if($748){label=282;break;}else{var $z_7_1_i_i=$z_7_i_i;label=283;break;}
 case 242: 
 var $750=($898|0)<0;
 var $_242_i_i=($750?0:$898);
 var $751=($_242_i_i|0)<53;
 if($751){label=243;break;}else{var $bias_0_i_i=0;var $frac_0_i_i=0;var $y_1_i103_i=$896;var $denormal_0_i_i8=1;var $_1236_i_i9=$_242_i_i;label=256;break;}
 case 243: 
 var $753=(((105)-($_242_i_i))|0);
 var $754=($753|0)>1023;
 if($754){label=244;break;}else{label=246;break;}
 case 244: 
 var $756=((($753)-(1023))|0);
 var $757=($756|0)>1023;
 if($757){label=245;break;}else{var $y_0_i11_i=8.98846567431158e+307;var $_0_i10_i=$756;label=249;break;}
 case 245: 
 var $759=((($753)-(2046))|0);
 var $760=($759|0)>1023;
 var $__i8_i=($760?1023:$759);
 var $y_0_i11_i=Infinity;var $_0_i10_i=$__i8_i;label=249;break;
 case 246: 
 var $762=($753|0)<-1022;
 if($762){label=247;break;}else{var $y_0_i11_i=1;var $_0_i10_i=$753;label=249;break;}
 case 247: 
 var $764=((($753)+(1022))|0);
 var $765=($764|0)<-1022;
 if($765){label=248;break;}else{var $y_0_i11_i=2.2250738585072014e-308;var $_0_i10_i=$764;label=249;break;}
 case 248: 
 var $767=((($753)+(2044))|0);
 var $768=($767|0)<-1022;
 var $_17_i9_i=($768?-1022:$767);
 var $y_0_i11_i=0;var $_0_i10_i=$_17_i9_i;label=249;break;
 case 249: 
 var $_0_i10_i;
 var $y_0_i11_i;
 var $769=((($_0_i10_i)+(1023))|0);
 var $770$0=$769;
 var $770$1=0;
 var $771$0=(0<<20)|(0>>>12);
 var $771$1=($770$0<<20)|(0>>>12);
 var $772=(HEAP32[((tempDoublePtr)>>2)]=$771$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$771$1, HEAPF64[(tempDoublePtr)>>3]);
 var $773=($y_0_i11_i)*($772);
 var $774=_copysign($773,$896);
 var $775=(((53)-($_242_i_i))|0);
 var $776=($775|0)>1023;
 if($776){label=250;break;}else{label=252;break;}
 case 250: 
 var $778=((($775)-(1023))|0);
 var $779=($778|0)>1023;
 if($779){label=251;break;}else{var $y_0_i6_i=8.98846567431158e+307;var $_0_i5_i=$778;label=255;break;}
 case 251: 
 var $781=((($775)-(2046))|0);
 var $782=($781|0)>1023;
 var $__i3_i=($782?1023:$781);
 var $y_0_i6_i=Infinity;var $_0_i5_i=$__i3_i;label=255;break;
 case 252: 
 var $784=($775|0)<-1022;
 if($784){label=253;break;}else{var $y_0_i6_i=1;var $_0_i5_i=$775;label=255;break;}
 case 253: 
 var $786=((($775)+(1022))|0);
 var $787=($786|0)<-1022;
 if($787){label=254;break;}else{var $y_0_i6_i=2.2250738585072014e-308;var $_0_i5_i=$786;label=255;break;}
 case 254: 
 var $789=((($775)+(2044))|0);
 var $790=($789|0)<-1022;
 var $_17_i4_i=($790?-1022:$789);
 var $y_0_i6_i=0;var $_0_i5_i=$_17_i4_i;label=255;break;
 case 255: 
 var $_0_i5_i;
 var $y_0_i6_i;
 var $791=((($_0_i5_i)+(1023))|0);
 var $792$0=$791;
 var $792$1=0;
 var $793$0=(0<<20)|(0>>>12);
 var $793$1=($792$0<<20)|(0>>>12);
 var $794=(HEAP32[((tempDoublePtr)>>2)]=$793$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$793$1, HEAPF64[(tempDoublePtr)>>3]);
 var $795=($y_0_i6_i)*($794);
 var $796=_fmod($896,$795);
 var $797=($896)-($796);
 var $798=($774)+($797);
 var $bias_0_i_i=$774;var $frac_0_i_i=$796;var $y_1_i103_i=$798;var $denormal_0_i_i8=1;var $_1236_i_i9=$_242_i_i;label=256;break;
 case 256: 
 var $_1236_i_i9;
 var $denormal_0_i_i8;
 var $y_1_i103_i;
 var $frac_0_i_i;
 var $bias_0_i_i;
 var $799=((($a_3_i_i)+(2))|0);
 var $800=$799&127;
 var $801=($800|0)==($z_7_1_i_i|0);
 if($801){var $frac_2_i_i=$frac_0_i_i;label=269;break;}else{label=257;break;}
 case 257: 
 var $803=(($x_i_i+($800<<2))|0);
 var $804=HEAP32[(($803)>>2)];
 var $805=($804>>>0)<500000000;
 if($805){label=258;break;}else{label=261;break;}
 case 258: 
 var $807=($804|0)==0;
 if($807){label=259;break;}else{label=260;break;}
 case 259: 
 var $809=((($a_3_i_i)+(3))|0);
 var $810=$809&127;
 var $811=($810|0)==($z_7_1_i_i|0);
 if($811){var $frac_1_i_i=$frac_0_i_i;label=266;break;}else{label=260;break;}
 case 260: 
 var $813=($895)*((0.25));
 var $814=($813)+($frac_0_i_i);
 var $frac_1_i_i=$814;label=266;break;
 case 261: 
 var $816=($804>>>0)>500000000;
 if($816){label=262;break;}else{label=263;break;}
 case 262: 
 var $818=($895)*((0.75));
 var $819=($818)+($frac_0_i_i);
 var $frac_1_i_i=$819;label=266;break;
 case 263: 
 var $821=((($a_3_i_i)+(3))|0);
 var $822=$821&127;
 var $823=($822|0)==($z_7_1_i_i|0);
 if($823){label=264;break;}else{label=265;break;}
 case 264: 
 var $825=($895)*((0.5));
 var $826=($825)+($frac_0_i_i);
 var $frac_1_i_i=$826;label=266;break;
 case 265: 
 var $828=($895)*((0.75));
 var $829=($828)+($frac_0_i_i);
 var $frac_1_i_i=$829;label=266;break;
 case 266: 
 var $frac_1_i_i;
 var $831=(((53)-($_1236_i_i9))|0);
 var $832=($831|0)>1;
 if($832){label=267;break;}else{var $frac_2_i_i=$frac_1_i_i;label=269;break;}
 case 267: 
 var $834=_fmod($frac_1_i_i,1);
 var $835=$834!=0;
 if($835){var $frac_2_i_i=$frac_1_i_i;label=269;break;}else{label=268;break;}
 case 268: 
 var $837=($frac_1_i_i)+(1);
 var $frac_2_i_i=$837;label=269;break;
 case 269: 
 var $frac_2_i_i;
 var $839=($y_1_i103_i)+($frac_2_i_i);
 var $840=($839)-($bias_0_i_i);
 var $841=$897&2147483644;
 var $842=($841>>>0)>1019;
 if($842){label=270;break;}else{var $y_3_i_i=$840;var $e2_3_i_i=$e2_1_i_i;label=275;break;}
 case 270: 
 var $844=Math_abs($840);
 var $845=$844<9007199254740992;
 if($845){var $y_2_i104_i=$840;var $denormal_2_i_i=$denormal_0_i_i8;var $e2_2_i_i=$e2_1_i_i;label=272;break;}else{label=271;break;}
 case 271: 
 var $847=($denormal_0_i_i8|0)!=0;
 var $848=($_1236_i_i9|0)==($898|0);
 var $or_cond243_i_i=$847&$848;
 var $denormal_1_i_i=($or_cond243_i_i?0:$denormal_0_i_i8);
 var $849=($840)*((0.5));
 var $850=((($e2_1_i_i)+(1))|0);
 var $y_2_i104_i=$849;var $denormal_2_i_i=$denormal_1_i_i;var $e2_2_i_i=$850;label=272;break;
 case 272: 
 var $e2_2_i_i;
 var $denormal_2_i_i;
 var $y_2_i104_i;
 var $852=((($e2_2_i_i)+(53))|0);
 var $853=($852|0)>1024;
 if($853){label=274;break;}else{label=273;break;}
 case 273: 
 var $855=($denormal_2_i_i|0)!=0;
 var $856=$frac_2_i_i!=0;
 var $or_cond244_i_i=$855&$856;
 if($or_cond244_i_i){label=274;break;}else{var $y_3_i_i=$y_2_i104_i;var $e2_3_i_i=$e2_2_i_i;label=275;break;}
 case 274: 
 var $858=___errno_location();
 HEAP32[(($858)>>2)]=34;
 var $y_3_i_i=$y_2_i104_i;var $e2_3_i_i=$e2_2_i_i;label=275;break;
 case 275: 
 var $e2_3_i_i;
 var $y_3_i_i;
 var $860=($e2_3_i_i|0)>1023;
 if($860){label=276;break;}else{label=278;break;}
 case 276: 
 var $862=($y_3_i_i)*((8.98846567431158e+307));
 var $863=((($e2_3_i_i)-(1023))|0);
 var $864=($863|0)>1023;
 if($864){label=277;break;}else{var $y_0_i_i_i=$862;var $_0_i_i_i=$863;label=281;break;}
 case 277: 
 var $866=($862)*((8.98846567431158e+307));
 var $867=((($e2_3_i_i)-(2046))|0);
 var $868=($867|0)>1023;
 var $__i_i_i=($868?1023:$867);
 var $y_0_i_i_i=$866;var $_0_i_i_i=$__i_i_i;label=281;break;
 case 278: 
 var $870=($e2_3_i_i|0)<-1022;
 if($870){label=279;break;}else{var $y_0_i_i_i=$y_3_i_i;var $_0_i_i_i=$e2_3_i_i;label=281;break;}
 case 279: 
 var $872=($y_3_i_i)*((2.2250738585072014e-308));
 var $873=((($e2_3_i_i)+(1022))|0);
 var $874=($873|0)<-1022;
 if($874){label=280;break;}else{var $y_0_i_i_i=$872;var $_0_i_i_i=$873;label=281;break;}
 case 280: 
 var $876=($872)*((2.2250738585072014e-308));
 var $877=((($e2_3_i_i)+(2044))|0);
 var $878=($877|0)<-1022;
 var $_17_i_i_i=($878?-1022:$877);
 var $y_0_i_i_i=$876;var $_0_i_i_i=$_17_i_i_i;label=281;break;
 case 281: 
 var $_0_i_i_i;
 var $y_0_i_i_i;
 var $879=((($_0_i_i_i)+(1023))|0);
 var $880$0=$879;
 var $880$1=0;
 var $881$0=(0<<20)|(0>>>12);
 var $881$1=($880$0<<20)|(0>>>12);
 var $882=(HEAP32[((tempDoublePtr)>>2)]=$881$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$881$1, HEAPF64[(tempDoublePtr)>>3]);
 var $883=($y_0_i_i_i)*($882);
 var $_0_i=$883;label=289;break;
 case 282: 
 var $885=((($z_7_i_i)+(1))|0);
 var $886=$885&127;
 var $887=((($886)-(1))|0);
 var $888=(($x_i_i+($887<<2))|0);
 HEAP32[(($888)>>2)]=0;
 var $z_7_1_i_i=$886;label=283;break;
 case 283: 
 var $z_7_1_i_i;
 var $890=($745)*(1000000000);
 var $891=(($x_i_i+($747<<2))|0);
 var $892=HEAP32[(($891)>>2)];
 var $893=($892>>>0);
 var $894=($890)+($893);
 var $895=($sign_0_i|0);
 var $896=($895)*($894);
 var $897=((($e2_1_i_i)+(53))|0);
 var $898=((($e2_1_i_i)+(1127))|0);
 var $899=($898|0)<53;
 if($899){label=242;break;}else{var $bias_0_i_i=0;var $frac_0_i_i=0;var $y_1_i103_i=$896;var $denormal_0_i_i8=0;var $_1236_i_i9=53;label=256;break;}
 case 284: 
 var $901=HEAP32[(($2)>>2)];
 var $902=HEAP32[(($10)>>2)];
 var $903=($901>>>0)<($902>>>0);
 if($903){label=286;break;}else{label=285;break;}
 case 285: 
 var $905=___shgetc($f_i_i);
 var $c_4_1_i=$905;label=287;break;
 case 286: 
 var $907=(($901+1)|0);
 HEAP32[(($2)>>2)]=$907;
 var $908=HEAP8[($901)];
 var $909=($908&255);
 var $c_4_1_i=$909;label=287;break;
 case 287: 
 var $c_4_1_i;
 var $911=$c_4_1_i|32;
 var $912=($911|0)==110;
 if($912){label=32;break;}else{label=48;break;}
 case 288: 
 HEAP32[(($2)>>2)]=$143;
 var $_0_i=NaN;label=289;break;
 case 289: 
 var $_0_i;
 var $913=HEAP32[(($9)>>2)];
 var $914=HEAP32[(($2)>>2)];
 var $915=HEAP32[(($3)>>2)];
 var $916=$914;
 var $917=$915;
 var $918=((($916)-($917))|0);
 var $919=((($918)+($913))|0);
 var $920=($p|0)==0;
 if($920){label=293;break;}else{label=290;break;}
 case 290: 
 var $922=($919|0)==0;
 if($922){var $926=$s;label=292;break;}else{label=291;break;}
 case 291: 
 var $924=(($s+$919)|0);
 var $926=$924;label=292;break;
 case 292: 
 var $926;
 HEAP32[(($p)>>2)]=$926;
 label=293;break;
 case 293: 
 STACKTOP=sp;return $_0_i;
  default: assert(0, "bad label: " + label);
 }
}
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame
  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;
    ensureInitRuntime();
    preMain();
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
/*global Module*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');
function throwInternalError(message) {
    throw new InternalError(message);
}
function throwBindingError(message) {
    throw new BindingError(message);
}
function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);
    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}
// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }            
}
/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.
   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}
function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}
// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };
    return errorClass;
}
// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}
function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}
// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};
// typeID -> [callback]
var awaitingDependencies = {};
// typeID -> [dependentTypes]
var typeDependencies = {};
// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};
function registerType(rawType, registeredInstance) {
    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }
    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];
    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}
function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });
    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }
    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}
var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();
function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}
function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}
function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}
function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}
function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}
function __embind_register_bool(rawType, name, trueValue, falseValue) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }
    registerType(primitiveType, {
        name: name,
        minRange: minRange,
        maxRange: maxRange,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_float(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }
            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}
function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        destructorFunction: function(ptr) { _free(ptr); },
    });
}
function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}
function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,        
    ];
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
    });
}
function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}
// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }
    /*
     * Previously, the following line was just:
     function dummy() {};
     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;
    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}
// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;
    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }
    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
    if (!isClassMethodFunc && !FUNCTION_TABLE[cppTargetFunc]) {
        throwBindingError('Global function '+humanName+' is not defined!');
    }
    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }
    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount-2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }
    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";
    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;
    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }
    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }
    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "classType", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, classType, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }
    for(var i = 0; i < argCount-2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }
    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }
    var returns = (argTypes[0].name !== "void");
    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i-2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }
    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __embind_register_function(name, argCount, rawArgTypesAddr, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);
    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}
var tupleRegistrations = {};
function __embind_register_value_array(rawType, name, rawConstructor, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        elements: [],
    };
}
function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}
function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });
        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}
var structRegistrations = {};
function __embind_register_value_object(
    rawType,
    name,
    rawConstructor,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        fields: [],
    };
}
function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}
function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];
    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });
        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            destructorFunction: rawDestructor,
        }];
    });
}
var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;
            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;
            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;
            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};
// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};
// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }
    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};
function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,
    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;
    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;
    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in 
        //       craftInvokerFunction altogether.
    }
}
RegisteredPointer.prototype.getPointee = function(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};
RegisteredPointer.prototype.destructor = function(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};
RegisteredPointer.prototype['fromWireType'] = function(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)
    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }
    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }
    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }
    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};
function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}
// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}
function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}
ClassHandle.prototype['isAliasOf'] = function(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }
    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;
    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }
    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }
    return leftClass === rightClass && left === right;
};
function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}
ClassHandle.prototype['clone'] = function() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    var clone = Object.create(Object.getPrototypeOf(this), {
        $$: {
            value: shallowCopy(this.$$),
        }
    });
    clone.$$.count.value += 1;
    return clone;
};
function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}
ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    this.$$.count.value -= 1;
    if (0 === this.$$.count.value) {
        runDestructor(this);
    }
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
};
var deletionQueue = [];
ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};
ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};
function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;
var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};
function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
}
function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        rv[k] = o[k];
    }
    return rv;
}
function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualType,
    upcast,
    downcast,
    name,
    rawDestructor
) {
    name = readLatin1String(name);
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    getActualType = FUNCTION_TABLE[getActualType];
    upcast = FUNCTION_TABLE[upcast];
    downcast = FUNCTION_TABLE[downcast];
    var legalFunctionName = makeLegalFunctionName(name);
    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });
    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];
            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }
            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });
            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });
            constructor.prototype = instancePrototype;
            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);
            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);
            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);
            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);
            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };
            replacePublicSymbol(legalFunctionName, constructor);
            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}
function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = FUNCTION_TABLE[invoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;
        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }
                var ptr = invoker.apply(null, args);
                runDestructors(destructors);
                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}
function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }
    // O(depth) stack space used
    return desiredClass.downcast(
        downcastPointer(ptr, ptrClass, desiredClass.baseClass));
}
function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}
function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }
    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}
function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    rawInvoker,
    context
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        var unboundTypesHandler = function() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        };
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount-2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount-2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-2] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount-2] = memberFunction;
            }
            return [];
        });
        return [];
    });
}
function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
        var unboundTypesHandler = function() {
                throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
            };
        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}
function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = FUNCTION_TABLE[getter];
    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }
        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };
            if (setter) {
                setter = FUNCTION_TABLE[setter];
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }
            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });
        return [];
    });
}
var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}
function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = FUNCTION_TABLE[rawGetPointee];
    rawConstructor = FUNCTION_TABLE[rawConstructor];
    rawShare = FUNCTION_TABLE[rawShare];
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];
        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}
function __embind_register_enum(
    rawType,
    name
) {
    name = readLatin1String(name);
    function constructor() {
    }
    constructor.values = {};
    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}
function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);
    var Enum = enumType.constructor;
    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}
function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var Module = Module || {};
var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];
// Public JS API
/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};
/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};
// Private C++ API
var _emval_symbols = {}; // address -> string
function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}
function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}
function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
}
function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;
    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}
function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}
function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}
function __emval_new_array() {
    return __emval_register([]);
}
function __emval_new_object() {
    return __emval_register({});
}
function __emval_undefined() {
    return __emval_register(undefined);
}
function __emval_null() {
    return __emval_register(null);
}
function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}
function __emval_take_value(type, v) {
    type = requireRegisteredType(type, '_emval_take_value');
    v = type['fromWireType'](v);
    return __emval_register(v);
}
var __newers = {}; // arity -> function
function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(handle, argTypes, arg0Wired, arg1Wired, arg2Wired) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.fromWireType(arg0Wired);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.fromWireType(arg1Wired);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.fromWireType(arg2Wired);
        var constructor = _emval_handle_array[handle].value;
        var emval = new constructor(arg0, arg1, arg2);
        return emval;
    } */
    var args1 = ["requireRegisteredType", "HEAP32", "_emval_handle_array", "__emval_register"];
    var args2 = [requireRegisteredType, HEAP32, _emval_handle_array, __emval_register];
    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
        argsListWired += ", arg"+i+"Wired"; // ', arg0Wired, arg1Wired, ..., argnWired'
    }
    var invokerFnBody =
        "return function emval_allocator_"+argCount+"(handle, argTypes " + argsListWired + ") {\n";
    for(var i = 0; i < argCount; ++i) {
        invokerFnBody += 
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".fromWireType(arg"+i+"Wired);\n";
    }
    invokerFnBody +=
        "var constructor = _emval_handle_array[handle].value;\n" +
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __emval_new(handle, argCount, argTypes) {
    requireHandle(handle);
    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }
    if (argCount === 0) {
        return newer(handle, argTypes);
    } else if (argCount === 1) {
        return newer(handle, argTypes, arguments[3]);
    } else if (argCount === 2) {
        return newer(handle, argTypes, arguments[3], arguments[4]);
    } else if (argCount === 3) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5]);
    } else if (argCount === 4) {
        return newer(handle, argTypes, arguments[3], arguments[4], arguments[5], arguments[6]);
    } else {
        // This is a slow path! (.apply and .splice are slow), so a few specializations are present above.
        return newer.apply(null, arguments.splice(1));
    }
}
// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();
function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}
function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}
function __emval_get_property(handle, key) {
    requireHandle(handle);
    return __emval_register(_emval_handle_array[handle].value[_emval_handle_array[key].value]);
}
function __emval_set_property(handle, key, value) {
    requireHandle(handle);
    _emval_handle_array[handle].value[_emval_handle_array[key].value] = _emval_handle_array[value].value;
}
function __emval_as(handle, returnType) {
    requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    // caller owns destructing
    return returnType['toWireType'](destructors, _emval_handle_array[handle].value);
}
function parseParameters(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var argType = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
        a[i] = argType['fromWireType'](argWireTypes[i]);
    }
    return a;
}
function __emval_call(handle, argCount, argTypes) {
    requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);
    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        args[i] = types[i]['fromWireType'](arguments[3 + i]);
    }
    var fn = _emval_handle_array[handle].value;
    var rv = fn.apply(undefined, args);
    return __emval_register(rv);
}
function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}
function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);
    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
    var args1 = ["addFunction", "createNamedFunction", "requireHandle", "getStringOrSymbol", "_emval_handle_array", "retType"];
    var args2 = [Runtime.addFunction, createNamedFunction, requireHandle, getStringOrSymbol, _emval_handle_array, retType];
    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    var argsListWired = ""; // 'arg0Wired, ..., argNWired'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += ", arg" + i + "Wired";
        args1.push("argType" + i);
        args2.push(types[1 + i]);
    }
    var invokerFnBody =
        "return addFunction(createNamedFunction('" + signatureName + "', function (handle, name" + argsListWired + ") {\n" +
        "requireHandle(handle);\n" +
        "name = getStringOrSymbol(name);\n";
    for (var i = 0; i < argCount - 1; ++i) {
        invokerFnBody += "var arg" + i + " = argType" + i + ".fromWireType(arg" + i + "Wired);\n";
    }
    invokerFnBody +=
        "var obj = _emval_handle_array[handle].value;\n" +
        "return retType.toWireType(null, obj[name](" + argsList + "));\n" + 
        "}));\n";
    args1.push(invokerFnBody);
    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}
function __emval_has_function(handle, name) {
    name = getStringOrSymbol(name);
    return _emval_handle_array[handle].value[name] instanceof Function;
}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
